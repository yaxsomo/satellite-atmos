
aerosentinel_atmos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbfc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  0800dd90  0800dd90  0000ed90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e488  0800e488  00010218  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e488  0800e488  0000f488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e490  0800e490  00010218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e490  0800e490  0000f490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e494  0800e494  0000f494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  0800e498  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c58  20000218  0800e6b0  00010218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e70  0800e6b0  00010e70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dfb3  00000000  00000000  00010248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046df  00000000  00000000  0002e1fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e0  00000000  00000000  000328e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013e1  00000000  00000000  000342c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000070a3  00000000  00000000  000356a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021c73  00000000  00000000  0003c744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106655  00000000  00000000  0005e3b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00164a0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008120  00000000  00000000  00164a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0016cb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dd74 	.word	0x0800dd74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	0800dd74 	.word	0x0800dd74

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <log_print>:

/* ========================== */
/*        LOGGER FUNCTION     */
/* ========================== */

static inline void log_print(const char *format, ...) {
 8000f74:	b40f      	push	{r0, r1, r2, r3}
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b0c2      	sub	sp, #264	@ 0x108
 8000f7a:	af00      	add	r7, sp, #0
#ifdef LOGGER
    char buffer[LOG_BUFFER_SIZE];
    va_list args;
    va_start(args, format);
 8000f7c:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8000f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000f84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000f88:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, LOG_BUFFER_SIZE, format, args);
 8000f8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000f8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000f92:	f107 0008 	add.w	r0, r7, #8
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000f9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fa0:	f009 feac 	bl	800acfc <vsniprintf>
    va_end(args);

#ifdef SWV_DEBUG
    printf("%s", buffer); // SWV output
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4805      	ldr	r0, [pc, #20]	@ (8000fc0 <log_print+0x4c>)
 8000fac:	f009 fdc4 	bl	800ab38 <iprintf>
    // Placeholder for SD card logging
    STUB_FUNCTION("Log_To_SD_Card");
#endif

#endif // LOGGER
}
 8000fb0:	bf00      	nop
 8000fb2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fbc:	b004      	add	sp, #16
 8000fbe:	4770      	bx	lr
 8000fc0:	0800dd90 	.word	0x0800dd90

08000fc4 <LED_SetOK>:
void LED_Init(void) {
    HAL_GPIO_WritePin(led_ok.GPIO_Port, led_ok.GPIO_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(led_error.GPIO_Port, led_error.GPIO_Pin, GPIO_PIN_RESET);
}

void LED_SetOK(LED_Mode mode) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
    led_ok.mode = mode;
 8000fce:	4a0e      	ldr	r2, [pc, #56]	@ (8001008 <LED_SetOK+0x44>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	7193      	strb	r3, [r2, #6]
    HAL_GPIO_WritePin(led_ok.GPIO_Port, led_ok.GPIO_Pin,
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <LED_SetOK+0x44>)
 8000fd6:	6818      	ldr	r0, [r3, #0]
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001008 <LED_SetOK+0x44>)
 8000fda:	8899      	ldrh	r1, [r3, #4]
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	bf0c      	ite	eq
 8000fe2:	2301      	moveq	r3, #1
 8000fe4:	2300      	movne	r3, #0
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	461a      	mov	r2, r3
 8000fea:	f004 fe47 	bl	8005c7c <HAL_GPIO_WritePin>
                      (mode == LED_MODE_SOLID) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    led_ok.current_state = (mode == LED_MODE_SOLID) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	bf0c      	ite	eq
 8000ff4:	2301      	moveq	r3, #1
 8000ff6:	2300      	movne	r3, #0
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4b02      	ldr	r3, [pc, #8]	@ (8001008 <LED_SetOK+0x44>)
 8000ffe:	731a      	strb	r2, [r3, #12]
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000000 	.word	0x20000000

0800100c <LED_SetError>:

void LED_SetError(LED_Mode mode) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
    led_error.mode = mode;
 8001016:	4a0e      	ldr	r2, [pc, #56]	@ (8001050 <LED_SetError+0x44>)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	7193      	strb	r3, [r2, #6]
    HAL_GPIO_WritePin(led_error.GPIO_Port, led_error.GPIO_Pin,
 800101c:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <LED_SetError+0x44>)
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <LED_SetError+0x44>)
 8001022:	8899      	ldrh	r1, [r3, #4]
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2b01      	cmp	r3, #1
 8001028:	bf0c      	ite	eq
 800102a:	2301      	moveq	r3, #1
 800102c:	2300      	movne	r3, #0
 800102e:	b2db      	uxtb	r3, r3
 8001030:	461a      	mov	r2, r3
 8001032:	f004 fe23 	bl	8005c7c <HAL_GPIO_WritePin>
                      (mode == LED_MODE_SOLID) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    led_error.current_state = (mode == LED_MODE_SOLID) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b01      	cmp	r3, #1
 800103a:	bf0c      	ite	eq
 800103c:	2301      	moveq	r3, #1
 800103e:	2300      	movne	r3, #0
 8001040:	b2db      	uxtb	r3, r3
 8001042:	461a      	mov	r2, r3
 8001044:	4b02      	ldr	r3, [pc, #8]	@ (8001050 <LED_SetError+0x44>)
 8001046:	731a      	strb	r2, [r3, #12]
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000010 	.word	0x20000010

08001054 <LED_SetState>:

void LED_Update(void) {
    // No blinking, nothing to update
}

void LED_SetState(SystemState state) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2b07      	cmp	r3, #7
 8001062:	d84b      	bhi.n	80010fc <LED_SetState+0xa8>
 8001064:	a201      	add	r2, pc, #4	@ (adr r2, 800106c <LED_SetState+0x18>)
 8001066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106a:	bf00      	nop
 800106c:	080010e1 	.word	0x080010e1
 8001070:	0800108d 	.word	0x0800108d
 8001074:	080010ef 	.word	0x080010ef
 8001078:	0800109b 	.word	0x0800109b
 800107c:	080010a9 	.word	0x080010a9
 8001080:	080010b7 	.word	0x080010b7
 8001084:	080010c5 	.word	0x080010c5
 8001088:	080010d3 	.word	0x080010d3
        case STATUS_INITIALIZATION:
            LED_SetOK(LED_MODE_SOLID);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff99 	bl	8000fc4 <LED_SetOK>
            LED_SetError(LED_MODE_OFF);
 8001092:	2000      	movs	r0, #0
 8001094:	f7ff ffba 	bl	800100c <LED_SetError>
            break;
 8001098:	e037      	b.n	800110a <LED_SetState+0xb6>

        case STATUS_PREFLIGHT:
            LED_SetOK(LED_MODE_SOLID);
 800109a:	2001      	movs	r0, #1
 800109c:	f7ff ff92 	bl	8000fc4 <LED_SetOK>
            LED_SetError(LED_MODE_OFF);
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff ffb3 	bl	800100c <LED_SetError>
            break;
 80010a6:	e030      	b.n	800110a <LED_SetState+0xb6>

        case STATUS_FLIGHT:
            LED_SetOK(LED_MODE_OFF);
 80010a8:	2000      	movs	r0, #0
 80010aa:	f7ff ff8b 	bl	8000fc4 <LED_SetOK>
            LED_SetError(LED_MODE_OFF);
 80010ae:	2000      	movs	r0, #0
 80010b0:	f7ff ffac 	bl	800100c <LED_SetError>
            break;
 80010b4:	e029      	b.n	800110a <LED_SetState+0xb6>

        case STATUS_POSTFLIGHT:
            LED_SetOK(LED_MODE_SOLID);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f7ff ff84 	bl	8000fc4 <LED_SetOK>
            LED_SetError(LED_MODE_OFF);
 80010bc:	2000      	movs	r0, #0
 80010be:	f7ff ffa5 	bl	800100c <LED_SetError>
            break;
 80010c2:	e022      	b.n	800110a <LED_SetState+0xb6>

        case STATUS_SUCCESS:
            LED_SetOK(LED_MODE_SOLID);
 80010c4:	2001      	movs	r0, #1
 80010c6:	f7ff ff7d 	bl	8000fc4 <LED_SetOK>
            LED_SetError(LED_MODE_OFF);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff ff9e 	bl	800100c <LED_SetError>
            break;
 80010d0:	e01b      	b.n	800110a <LED_SetState+0xb6>

        case STATUS_ERROR:
            LED_SetOK(LED_MODE_OFF);
 80010d2:	2000      	movs	r0, #0
 80010d4:	f7ff ff76 	bl	8000fc4 <LED_SetOK>
            LED_SetError(LED_MODE_SOLID);
 80010d8:	2001      	movs	r0, #1
 80010da:	f7ff ff97 	bl	800100c <LED_SetError>
            break;
 80010de:	e014      	b.n	800110a <LED_SetState+0xb6>

        case STATUS_GRACEFUL_SHUTDOWN:
            LED_SetOK(LED_MODE_SOLID);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f7ff ff6f 	bl	8000fc4 <LED_SetOK>
            LED_SetError(LED_MODE_OFF);
 80010e6:	2000      	movs	r0, #0
 80010e8:	f7ff ff90 	bl	800100c <LED_SetError>
            break;
 80010ec:	e00d      	b.n	800110a <LED_SetState+0xb6>

        case STATUS_WAIT:
            LED_SetOK(LED_MODE_SOLID);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f7ff ff68 	bl	8000fc4 <LED_SetOK>
            LED_SetError(LED_MODE_SOLID);
 80010f4:	2001      	movs	r0, #1
 80010f6:	f7ff ff89 	bl	800100c <LED_SetError>
            break;
 80010fa:	e006      	b.n	800110a <LED_SetState+0xb6>

        default:
            LED_SetOK(LED_MODE_OFF);
 80010fc:	2000      	movs	r0, #0
 80010fe:	f7ff ff61 	bl	8000fc4 <LED_SetOK>
            LED_SetError(LED_MODE_OFF);
 8001102:	2000      	movs	r0, #0
 8001104:	f7ff ff82 	bl	800100c <LED_SetError>
            break;
 8001108:	bf00      	nop
    }

    log_print("[LED] State updated to %d\n", state);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	4619      	mov	r1, r3
 800110e:	4803      	ldr	r0, [pc, #12]	@ (800111c <LED_SetState+0xc8>)
 8001110:	f7ff ff30 	bl	8000f74 <log_print>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	0800dd94 	.word	0x0800dd94

08001120 <MICS5524_Handle_Init>:



// Initialize the high-level sensor handle (calls LL driver)
void MICS5524_Handle_Init(MICS5524_Handle_t* handle, ADC_HandleTypeDef* hadc, uint32_t adc_channel)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
    MICS5524_Init(&handle->ll_sensor, hadc, adc_channel);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f85d 	bl	80011f2 <MICS5524_Init>
}
 8001138:	bf00      	nop
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <MICS5524_Handle_WarmUp>:

// Warm-up process (calls LL driver)
// Returns 1 if baseline is established, 0 otherwise
uint8_t MICS5524_Handle_WarmUp(MICS5524_Handle_t* handle, uint8_t minutes)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	70fb      	strb	r3, [r7, #3]
    return MICS5524_WarmUp(&handle->ll_sensor, minutes);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	78fa      	ldrb	r2, [r7, #3]
 8001150:	4611      	mov	r1, r2
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f86e 	bl	8001234 <MICS5524_WarmUp>
 8001158:	4603      	mov	r3, r0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <MICS5524_Handle_ReadGasPPM>:

// Read a gas PPM value (calls LL driver)
// Returns: gas concentration in PPM (float), or MICS5524_ERROR if not supported
float MICS5524_Handle_ReadGasPPM(MICS5524_Handle_t* handle, uint8_t gas_type)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	460b      	mov	r3, r1
 800116c:	70fb      	strb	r3, [r7, #3]
    return MICS5524_GetGasData(&handle->ll_sensor, gas_type);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	78fa      	ldrb	r2, [r7, #3]
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f000 fa81 	bl	800167c <MICS5524_GetGasData>
 800117a:	eef0 7a40 	vmov.f32	s15, s0
}
 800117e:	eeb0 0a67 	vmov.f32	s0, s15
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <MICS5524_Handle_GasPresent>:

// Binary gas detection (calls LL driver)
// Returns: MICS5524_EXIST, MICS5524_NO_EXIST, or MICS5524_ERROR
int8_t MICS5524_Handle_GasPresent(MICS5524_Handle_t* handle, uint8_t gas_type)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	70fb      	strb	r3, [r7, #3]
    return MICS5524_GetGasExist(&handle->ll_sensor, gas_type);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	78fa      	ldrb	r2, [r7, #3]
 8001198:	4611      	mov	r1, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f000 fac6 	bl	800172c <MICS5524_GetGasExist>
 80011a0:	4603      	mov	r3, r0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <read_adc_channel>:


#include "drivers_h/mics5524_ll.h"

static int16_t read_adc_channel(ADC_HandleTypeDef* hadc, uint32_t channel)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b084      	sub	sp, #16
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	6039      	str	r1, [r7, #0]

    HAL_ADC_Start(hadc);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f003 f8ff 	bl	80043b8 <HAL_ADC_Start>
    if(HAL_ADC_PollForConversion(hadc, 10) != HAL_OK) {
 80011ba:	210a      	movs	r1, #10
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f003 f9e9 	bl	8004594 <HAL_ADC_PollForConversion>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d002      	beq.n	80011ce <read_adc_channel+0x24>
        return MICS5524_ERROR;
 80011c8:	f04f 33ff 	mov.w	r3, #4294967295
 80011cc:	e00d      	b.n	80011ea <read_adc_channel+0x40>
    }
    uint16_t value = HAL_ADC_GetValue(hadc);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f003 fab8 	bl	8004744 <HAL_ADC_GetValue>
 80011d4:	4603      	mov	r3, r0
 80011d6:	81fb      	strh	r3, [r7, #14]
    HAL_ADC_Stop(hadc);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f003 f9a7 	bl	800452c <HAL_ADC_Stop>
    return (ADC_MAX - value); // <-- inversion ici
 80011de:	89fb      	ldrh	r3, [r7, #14]
 80011e0:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 80011e4:	330f      	adds	r3, #15
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	b21b      	sxth	r3, r3
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <MICS5524_Init>:

void MICS5524_Init(MICS5524_t* sensor, ADC_HandleTypeDef* hadc, uint32_t adc_channel)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b085      	sub	sp, #20
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
    sensor->hadc = hadc;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	68ba      	ldr	r2, [r7, #8]
 8001202:	601a      	str	r2, [r3, #0]
    sensor->adc_channel = adc_channel;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	605a      	str	r2, [r3, #4]
    sensor->r0_ox = 0;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2200      	movs	r2, #0
 800120e:	811a      	strh	r2, [r3, #8]
    sensor->r0_red = 0;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2200      	movs	r2, #0
 8001214:	815a      	strh	r2, [r3, #10]
    sensor->flag = 0;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2200      	movs	r2, #0
 800121a:	751a      	strb	r2, [r3, #20]
    sensor->start_time_ms = 0;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
    sensor->warmup_time_ms = 0;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <MICS5524_WarmUp>:

uint8_t MICS5524_WarmUp(MICS5524_t* sensor, uint8_t minutes)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	70fb      	strb	r3, [r7, #3]
    if(sensor->flag == 0) {
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7d1b      	ldrb	r3, [r3, #20]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d110      	bne.n	800126a <MICS5524_WarmUp+0x36>
        sensor->flag = 1;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	751a      	strb	r2, [r3, #20]
        sensor->start_time_ms = MICS5524_GetMillis();
 800124e:	f000 faf3 	bl	8001838 <MICS5524_GetMillis>
 8001252:	4602      	mov	r2, r0
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	611a      	str	r2, [r3, #16]
        sensor->warmup_time_ms = (uint32_t)minutes * 60000;
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800125e:	fb03 f202 	mul.w	r2, r3, r2
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	60da      	str	r2, [r3, #12]
        return 0;
 8001266:	2300      	movs	r3, #0
 8001268:	e025      	b.n	80012b6 <MICS5524_WarmUp+0x82>
    }
    uint32_t elapsed = MICS5524_GetMillis() - sensor->start_time_ms;
 800126a:	f000 fae5 	bl	8001838 <MICS5524_GetMillis>
 800126e:	4602      	mov	r2, r0
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	60fb      	str	r3, [r7, #12]
    if(elapsed < sensor->warmup_time_ms) {
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	429a      	cmp	r2, r3
 8001280:	d201      	bcs.n	8001286 <MICS5524_WarmUp+0x52>
        return 0;
 8001282:	2300      	movs	r3, #0
 8001284:	e017      	b.n	80012b6 <MICS5524_WarmUp+0x82>
    }
    int16_t adc_val = read_adc_channel(sensor->hadc, sensor->adc_channel);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	4619      	mov	r1, r3
 8001290:	4610      	mov	r0, r2
 8001292:	f7ff ff8a 	bl	80011aa <read_adc_channel>
 8001296:	4603      	mov	r3, r0
 8001298:	817b      	strh	r3, [r7, #10]
    if(adc_val == MICS5524_ERROR) return 0;
 800129a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800129e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a2:	d101      	bne.n	80012a8 <MICS5524_WarmUp+0x74>
 80012a4:	2300      	movs	r3, #0
 80012a6:	e006      	b.n	80012b6 <MICS5524_WarmUp+0x82>
    // For analog sensors, only 1 channel is used, so powerData - ox/redData is not needed.
    // We set r0_ox and r0_red to baseline ADC value at end of warmup
    sensor->r0_ox = adc_val;
 80012a8:	897a      	ldrh	r2, [r7, #10]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	811a      	strh	r2, [r3, #8]
    sensor->r0_red = adc_val;
 80012ae:	897a      	ldrh	r2, [r7, #10]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	815a      	strh	r2, [r3, #10]
    return 1;
 80012b4:	2301      	movs	r3, #1
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <get_co>:
}

// --- Gas concentration math, ported from DFRobot Arduino library ---

static float get_co(float rs_r0)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	ed87 0a01 	vstr	s0, [r7, #4]
    if(rs_r0 > 0.425) return 0.0f;
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff f93c 	bl	8000548 <__aeabi_f2d>
 80012d0:	a31f      	add	r3, pc, #124	@ (adr r3, 8001350 <get_co+0x90>)
 80012d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d6:	f7ff fc1f 	bl	8000b18 <__aeabi_dcmpgt>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <get_co+0x26>
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	e023      	b.n	800132e <get_co+0x6e>
    float co = (0.425f - rs_r0) / 0.000405f;
 80012e6:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001340 <get_co+0x80>
 80012ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012f2:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001344 <get_co+0x84>
 80012f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012fa:	edc7 7a03 	vstr	s15, [r7, #12]
    if(co > 1000.0f) return 1000.0f;
 80012fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001302:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001348 <get_co+0x88>
 8001306:	eef4 7ac7 	vcmpe.f32	s15, s14
 800130a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130e:	dd01      	ble.n	8001314 <get_co+0x54>
 8001310:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <get_co+0x8c>)
 8001312:	e00c      	b.n	800132e <get_co+0x6e>
    if(co < 1.0f) return 0.0f;
 8001314:	edd7 7a03 	vldr	s15, [r7, #12]
 8001318:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800131c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001324:	d502      	bpl.n	800132c <get_co+0x6c>
 8001326:	f04f 0300 	mov.w	r3, #0
 800132a:	e000      	b.n	800132e <get_co+0x6e>
    return co;
 800132c:	68fb      	ldr	r3, [r7, #12]
}
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eeb0 0a67 	vmov.f32	s0, s15
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	f3af 8000 	nop.w
 8001340:	3ed9999a 	.word	0x3ed9999a
 8001344:	39d4562e 	.word	0x39d4562e
 8001348:	447a0000 	.word	0x447a0000
 800134c:	447a0000 	.word	0x447a0000
 8001350:	33333333 	.word	0x33333333
 8001354:	3fdb3333 	.word	0x3fdb3333

08001358 <get_ethanol>:

static float get_ethanol(float rs_r0)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	ed87 0a01 	vstr	s0, [r7, #4]
    if(rs_r0 > 0.306f) return 0.0f;
 8001362:	edd7 7a01 	vldr	s15, [r7, #4]
 8001366:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80013d4 <get_ethanol+0x7c>
 800136a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800136e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001372:	dd02      	ble.n	800137a <get_ethanol+0x22>
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	e023      	b.n	80013c2 <get_ethanol+0x6a>
    float ethanol = (0.306f - rs_r0) / 0.00057f;
 800137a:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80013d4 <get_ethanol+0x7c>
 800137e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001382:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001386:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80013d8 <get_ethanol+0x80>
 800138a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800138e:	edc7 7a03 	vstr	s15, [r7, #12]
    if(ethanol < 10.0f) return 0.0f;
 8001392:	edd7 7a03 	vldr	s15, [r7, #12]
 8001396:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800139a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800139e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a2:	d502      	bpl.n	80013aa <get_ethanol+0x52>
 80013a4:	f04f 0300 	mov.w	r3, #0
 80013a8:	e00b      	b.n	80013c2 <get_ethanol+0x6a>
    if(ethanol > 500.0f) return 500.0f;
 80013aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ae:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80013dc <get_ethanol+0x84>
 80013b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ba:	dd01      	ble.n	80013c0 <get_ethanol+0x68>
 80013bc:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <get_ethanol+0x88>)
 80013be:	e000      	b.n	80013c2 <get_ethanol+0x6a>
    return ethanol;
 80013c0:	68fb      	ldr	r3, [r7, #12]
}
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	3e9cac08 	.word	0x3e9cac08
 80013d8:	3a156c0d 	.word	0x3a156c0d
 80013dc:	43fa0000 	.word	0x43fa0000
 80013e0:	43fa0000 	.word	0x43fa0000

080013e4 <get_methane>:

static float get_methane(float rs_r0)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	ed87 0a01 	vstr	s0, [r7, #4]
    if(rs_r0 > 0.786f) return 0.0f;
 80013ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80013f2:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001460 <get_methane+0x7c>
 80013f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fe:	dd02      	ble.n	8001406 <get_methane+0x22>
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	e023      	b.n	800144e <get_methane+0x6a>
    float methane = (0.786f - rs_r0) / 0.000023f;
 8001406:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001460 <get_methane+0x7c>
 800140a:	edd7 7a01 	vldr	s15, [r7, #4]
 800140e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001412:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001464 <get_methane+0x80>
 8001416:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800141a:	edc7 7a03 	vstr	s15, [r7, #12]
    if(methane < 1000.0f) methane = 0.0f;
 800141e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001422:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001468 <get_methane+0x84>
 8001426:	eef4 7ac7 	vcmpe.f32	s15, s14
 800142a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142e:	d502      	bpl.n	8001436 <get_methane+0x52>
 8001430:	f04f 0300 	mov.w	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
    if(methane > 25000.0f) methane = 25000.0f;
 8001436:	edd7 7a03 	vldr	s15, [r7, #12]
 800143a:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800146c <get_methane+0x88>
 800143e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001446:	dd01      	ble.n	800144c <get_methane+0x68>
 8001448:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <get_methane+0x8c>)
 800144a:	60fb      	str	r3, [r7, #12]
    return methane;
 800144c:	68fb      	ldr	r3, [r7, #12]
}
 800144e:	ee07 3a90 	vmov	s15, r3
 8001452:	eeb0 0a67 	vmov.f32	s0, s15
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	3f49374c 	.word	0x3f49374c
 8001464:	37c0f020 	.word	0x37c0f020
 8001468:	447a0000 	.word	0x447a0000
 800146c:	46c35000 	.word	0x46c35000
 8001470:	46c35000 	.word	0x46c35000

08001474 <get_nitrogendioxide>:

static float get_nitrogendioxide(float rs_r0)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	ed87 0a01 	vstr	s0, [r7, #4]
    if(rs_r0 < 1.1f) return 0.0f;
 800147e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001482:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80014f0 <get_nitrogendioxide+0x7c>
 8001486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148e:	d502      	bpl.n	8001496 <get_nitrogendioxide+0x22>
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	e023      	b.n	80014de <get_nitrogendioxide+0x6a>
    float nitrogendioxide = (rs_r0 - 0.045f) / 6.13f;
 8001496:	edd7 7a01 	vldr	s15, [r7, #4]
 800149a:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80014f4 <get_nitrogendioxide+0x80>
 800149e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80014a2:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80014f8 <get_nitrogendioxide+0x84>
 80014a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014aa:	edc7 7a03 	vstr	s15, [r7, #12]
    if(nitrogendioxide < 0.1f) return 0.0f;
 80014ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80014b2:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80014fc <get_nitrogendioxide+0x88>
 80014b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014be:	d502      	bpl.n	80014c6 <get_nitrogendioxide+0x52>
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	e00b      	b.n	80014de <get_nitrogendioxide+0x6a>
    if(nitrogendioxide > 10.0f) return 10.0f;
 80014c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ca:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	dd01      	ble.n	80014dc <get_nitrogendioxide+0x68>
 80014d8:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <get_nitrogendioxide+0x8c>)
 80014da:	e000      	b.n	80014de <get_nitrogendioxide+0x6a>
    return nitrogendioxide;
 80014dc:	68fb      	ldr	r3, [r7, #12]
}
 80014de:	ee07 3a90 	vmov	s15, r3
 80014e2:	eeb0 0a67 	vmov.f32	s0, s15
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	3f8ccccd 	.word	0x3f8ccccd
 80014f4:	3d3851ec 	.word	0x3d3851ec
 80014f8:	40c428f6 	.word	0x40c428f6
 80014fc:	3dcccccd 	.word	0x3dcccccd
 8001500:	41200000 	.word	0x41200000

08001504 <get_hydrogen>:

static float get_hydrogen(float rs_r0)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	ed87 0a01 	vstr	s0, [r7, #4]
    if(rs_r0 > 0.279f) return 0.0f;
 800150e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001512:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001580 <get_hydrogen+0x7c>
 8001516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800151a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151e:	dd02      	ble.n	8001526 <get_hydrogen+0x22>
 8001520:	f04f 0300 	mov.w	r3, #0
 8001524:	e023      	b.n	800156e <get_hydrogen+0x6a>
    float hydrogen = (0.279f - rs_r0) / 0.00026f;
 8001526:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001580 <get_hydrogen+0x7c>
 800152a:	edd7 7a01 	vldr	s15, [r7, #4]
 800152e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001532:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001584 <get_hydrogen+0x80>
 8001536:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800153a:	edc7 7a03 	vstr	s15, [r7, #12]
    if(hydrogen < 1.0f) return 0.0f;
 800153e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001542:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001546:	eef4 7ac7 	vcmpe.f32	s15, s14
 800154a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154e:	d502      	bpl.n	8001556 <get_hydrogen+0x52>
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	e00b      	b.n	800156e <get_hydrogen+0x6a>
    if(hydrogen > 1000.0f) return 1000.0f;
 8001556:	edd7 7a03 	vldr	s15, [r7, #12]
 800155a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001588 <get_hydrogen+0x84>
 800155e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001566:	dd01      	ble.n	800156c <get_hydrogen+0x68>
 8001568:	4b08      	ldr	r3, [pc, #32]	@ (800158c <get_hydrogen+0x88>)
 800156a:	e000      	b.n	800156e <get_hydrogen+0x6a>
    return hydrogen;
 800156c:	68fb      	ldr	r3, [r7, #12]
}
 800156e:	ee07 3a90 	vmov	s15, r3
 8001572:	eeb0 0a67 	vmov.f32	s0, s15
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	3e8ed917 	.word	0x3e8ed917
 8001584:	3988509c 	.word	0x3988509c
 8001588:	447a0000 	.word	0x447a0000
 800158c:	447a0000 	.word	0x447a0000

08001590 <get_ammonia>:

static float get_ammonia(float rs_r0)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	ed87 0a01 	vstr	s0, [r7, #4]
    if(rs_r0 > 0.8f) return 0.0f;
 800159a:	edd7 7a01 	vldr	s15, [r7, #4]
 800159e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800160c <get_ammonia+0x7c>
 80015a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015aa:	dd02      	ble.n	80015b2 <get_ammonia+0x22>
 80015ac:	f04f 0300 	mov.w	r3, #0
 80015b0:	e023      	b.n	80015fa <get_ammonia+0x6a>
    float ammonia = (0.8f - rs_r0) / 0.0015f;
 80015b2:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800160c <get_ammonia+0x7c>
 80015b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80015ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015be:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001610 <get_ammonia+0x80>
 80015c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c6:	edc7 7a03 	vstr	s15, [r7, #12]
    if(ammonia < 1.0f) return 0.0f;
 80015ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80015d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015da:	d502      	bpl.n	80015e2 <get_ammonia+0x52>
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	e00b      	b.n	80015fa <get_ammonia+0x6a>
    if(ammonia > 500.0f) return 500.0f;
 80015e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80015e6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001614 <get_ammonia+0x84>
 80015ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f2:	dd01      	ble.n	80015f8 <get_ammonia+0x68>
 80015f4:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <get_ammonia+0x88>)
 80015f6:	e000      	b.n	80015fa <get_ammonia+0x6a>
    return ammonia;
 80015f8:	68fb      	ldr	r3, [r7, #12]
}
 80015fa:	ee07 3a90 	vmov	s15, r3
 80015fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	3f4ccccd 	.word	0x3f4ccccd
 8001610:	3ac49ba6 	.word	0x3ac49ba6
 8001614:	43fa0000 	.word	0x43fa0000
 8001618:	43fa0000 	.word	0x43fa0000

0800161c <calc_rs_r0>:

// Returns "Rs/R0" (normalized ADC drop from baseline)
static float calc_rs_r0(MICS5524_t* sensor)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
    int16_t adc_val = read_adc_channel(sensor->hadc, sensor->adc_channel);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	4619      	mov	r1, r3
 800162e:	4610      	mov	r0, r2
 8001630:	f7ff fdbb 	bl	80011aa <read_adc_channel>
 8001634:	4603      	mov	r3, r0
 8001636:	81fb      	strh	r3, [r7, #14]
    if(sensor->r0_ox == 0) return 0;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	891b      	ldrh	r3, [r3, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d102      	bne.n	8001646 <calc_rs_r0+0x2a>
 8001640:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8001678 <calc_rs_r0+0x5c>
 8001644:	e011      	b.n	800166a <calc_rs_r0+0x4e>
    return (float)(sensor->r0_ox - adc_val) / (float)sensor->r0_ox;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	891b      	ldrh	r3, [r3, #8]
 800164a:	461a      	mov	r2, r3
 800164c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	891b      	ldrh	r3, [r3, #8]
 800165e:	ee07 3a90 	vmov	s15, r3
 8001662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001666:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 800166a:	eef0 7a66 	vmov.f32	s15, s13
 800166e:	eeb0 0a67 	vmov.f32	s0, s15
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	00000000 	.word	0x00000000

0800167c <MICS5524_GetGasData>:

float MICS5524_GetGasData(MICS5524_t* sensor, uint8_t type)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	70fb      	strb	r3, [r7, #3]
    float rs_r0 = calc_rs_r0(sensor);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ffc7 	bl	800161c <calc_rs_r0>
 800168e:	ed87 0a03 	vstr	s0, [r7, #12]
    switch(type) {
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	3b01      	subs	r3, #1
 8001696:	2b09      	cmp	r3, #9
 8001698:	d840      	bhi.n	800171c <MICS5524_GetGasData+0xa0>
 800169a:	a201      	add	r2, pc, #4	@ (adr r2, 80016a0 <MICS5524_GetGasData+0x24>)
 800169c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a0:	080016c9 	.word	0x080016c9
 80016a4:	080016d7 	.word	0x080016d7
 80016a8:	080016e5 	.word	0x080016e5
 80016ac:	0800171d 	.word	0x0800171d
 80016b0:	0800171d 	.word	0x0800171d
 80016b4:	080016f3 	.word	0x080016f3
 80016b8:	0800171d 	.word	0x0800171d
 80016bc:	08001701 	.word	0x08001701
 80016c0:	0800171d 	.word	0x0800171d
 80016c4:	0800170f 	.word	0x0800170f
        case MICS5524_CO:     return get_co(rs_r0);
 80016c8:	ed97 0a03 	vldr	s0, [r7, #12]
 80016cc:	f7ff fdf8 	bl	80012c0 <get_co>
 80016d0:	eef0 7a40 	vmov.f32	s15, s0
 80016d4:	e024      	b.n	8001720 <MICS5524_GetGasData+0xa4>
        case MICS5524_CH4:    return get_methane(rs_r0);
 80016d6:	ed97 0a03 	vldr	s0, [r7, #12]
 80016da:	f7ff fe83 	bl	80013e4 <get_methane>
 80016de:	eef0 7a40 	vmov.f32	s15, s0
 80016e2:	e01d      	b.n	8001720 <MICS5524_GetGasData+0xa4>
        case MICS5524_C2H5OH: return get_ethanol(rs_r0);
 80016e4:	ed97 0a03 	vldr	s0, [r7, #12]
 80016e8:	f7ff fe36 	bl	8001358 <get_ethanol>
 80016ec:	eef0 7a40 	vmov.f32	s15, s0
 80016f0:	e016      	b.n	8001720 <MICS5524_GetGasData+0xa4>
        case MICS5524_H2:     return get_hydrogen(rs_r0);
 80016f2:	ed97 0a03 	vldr	s0, [r7, #12]
 80016f6:	f7ff ff05 	bl	8001504 <get_hydrogen>
 80016fa:	eef0 7a40 	vmov.f32	s15, s0
 80016fe:	e00f      	b.n	8001720 <MICS5524_GetGasData+0xa4>
        case MICS5524_NH3:    return get_ammonia(rs_r0);
 8001700:	ed97 0a03 	vldr	s0, [r7, #12]
 8001704:	f7ff ff44 	bl	8001590 <get_ammonia>
 8001708:	eef0 7a40 	vmov.f32	s15, s0
 800170c:	e008      	b.n	8001720 <MICS5524_GetGasData+0xa4>
        case MICS5524_NO2:    return get_nitrogendioxide(rs_r0);
 800170e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001712:	f7ff feaf 	bl	8001474 <get_nitrogendioxide>
 8001716:	eef0 7a40 	vmov.f32	s15, s0
 800171a:	e001      	b.n	8001720 <MICS5524_GetGasData+0xa4>
        default:              return MICS5524_ERROR;
 800171c:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
    }
}
 8001720:	eeb0 0a67 	vmov.f32	s0, s15
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop

0800172c <MICS5524_GetGasExist>:

// --- Optional: "Exist" detection for binary gas presence ---

int8_t MICS5524_GetGasExist(MICS5524_t* sensor, uint8_t gas)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	70fb      	strb	r3, [r7, #3]
    float rs_r0 = calc_rs_r0(sensor);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff6f 	bl	800161c <calc_rs_r0>
 800173e:	ed87 0a03 	vstr	s0, [r7, #12]
    switch(gas) {
 8001742:	78fb      	ldrb	r3, [r7, #3]
 8001744:	3b01      	subs	r3, #1
 8001746:	2b09      	cmp	r3, #9
 8001748:	d864      	bhi.n	8001814 <MICS5524_GetGasExist+0xe8>
 800174a:	a201      	add	r2, pc, #4	@ (adr r2, 8001750 <MICS5524_GetGasExist+0x24>)
 800174c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001750:	08001779 	.word	0x08001779
 8001754:	08001793 	.word	0x08001793
 8001758:	080017ad 	.word	0x080017ad
 800175c:	08001815 	.word	0x08001815
 8001760:	08001815 	.word	0x08001815
 8001764:	080017c7 	.word	0x080017c7
 8001768:	08001815 	.word	0x08001815
 800176c:	080017e1 	.word	0x080017e1
 8001770:	08001815 	.word	0x08001815
 8001774:	080017fb 	.word	0x080017fb
        case MICS5524_CO:     return rs_r0 <= 0.425f ? MICS5524_EXIST : MICS5524_NO_EXIST;
 8001778:	edd7 7a03 	vldr	s15, [r7, #12]
 800177c:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001820 <MICS5524_GetGasExist+0xf4>
 8001780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001788:	d801      	bhi.n	800178e <MICS5524_GetGasExist+0x62>
 800178a:	2300      	movs	r3, #0
 800178c:	e044      	b.n	8001818 <MICS5524_GetGasExist+0xec>
 800178e:	2302      	movs	r3, #2
 8001790:	e042      	b.n	8001818 <MICS5524_GetGasExist+0xec>
        case MICS5524_CH4:    return rs_r0 <= 0.786f ? MICS5524_EXIST : MICS5524_NO_EXIST;
 8001792:	edd7 7a03 	vldr	s15, [r7, #12]
 8001796:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001824 <MICS5524_GetGasExist+0xf8>
 800179a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800179e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a2:	d801      	bhi.n	80017a8 <MICS5524_GetGasExist+0x7c>
 80017a4:	2300      	movs	r3, #0
 80017a6:	e037      	b.n	8001818 <MICS5524_GetGasExist+0xec>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e035      	b.n	8001818 <MICS5524_GetGasExist+0xec>
        case MICS5524_C2H5OH: return rs_r0 <= 0.306f ? MICS5524_EXIST : MICS5524_NO_EXIST;
 80017ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80017b0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001828 <MICS5524_GetGasExist+0xfc>
 80017b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017bc:	d801      	bhi.n	80017c2 <MICS5524_GetGasExist+0x96>
 80017be:	2300      	movs	r3, #0
 80017c0:	e02a      	b.n	8001818 <MICS5524_GetGasExist+0xec>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e028      	b.n	8001818 <MICS5524_GetGasExist+0xec>
        case MICS5524_H2:     return rs_r0 <= 0.279f ? MICS5524_EXIST : MICS5524_NO_EXIST;
 80017c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ca:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800182c <MICS5524_GetGasExist+0x100>
 80017ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d6:	d801      	bhi.n	80017dc <MICS5524_GetGasExist+0xb0>
 80017d8:	2300      	movs	r3, #0
 80017da:	e01d      	b.n	8001818 <MICS5524_GetGasExist+0xec>
 80017dc:	2302      	movs	r3, #2
 80017de:	e01b      	b.n	8001818 <MICS5524_GetGasExist+0xec>
        case MICS5524_NH3:    return rs_r0 <= 0.8f   ? MICS5524_EXIST : MICS5524_NO_EXIST;
 80017e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80017e4:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001830 <MICS5524_GetGasExist+0x104>
 80017e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f0:	d801      	bhi.n	80017f6 <MICS5524_GetGasExist+0xca>
 80017f2:	2300      	movs	r3, #0
 80017f4:	e010      	b.n	8001818 <MICS5524_GetGasExist+0xec>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e00e      	b.n	8001818 <MICS5524_GetGasExist+0xec>
        case MICS5524_NO2:    return rs_r0 >= 1.1f   ? MICS5524_EXIST : MICS5524_NO_EXIST;
 80017fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80017fe:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001834 <MICS5524_GetGasExist+0x108>
 8001802:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180a:	db01      	blt.n	8001810 <MICS5524_GetGasExist+0xe4>
 800180c:	2300      	movs	r3, #0
 800180e:	e003      	b.n	8001818 <MICS5524_GetGasExist+0xec>
 8001810:	2302      	movs	r3, #2
 8001812:	e001      	b.n	8001818 <MICS5524_GetGasExist+0xec>
        default:              return MICS5524_ERROR;
 8001814:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	3ed9999a 	.word	0x3ed9999a
 8001824:	3f49374c 	.word	0x3f49374c
 8001828:	3e9cac08 	.word	0x3e9cac08
 800182c:	3e8ed917 	.word	0x3e8ed917
 8001830:	3f4ccccd 	.word	0x3f4ccccd
 8001834:	3f8ccccd 	.word	0x3f8ccccd

08001838 <MICS5524_GetMillis>:

uint32_t MICS5524_GetMillis(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
    return HAL_GetTick(); // STM32 HAL, returns milliseconds since startup
 800183c:	f002 fa0a 	bl	8003c54 <HAL_GetTick>
 8001840:	4603      	mov	r3, r0
}
 8001842:	4618      	mov	r0, r3
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <kalman_filter>:
static float kalman_x = 0;
static float kalman_p = 0;
static float kalman_x_last = 0;
static float kalman_p_last = 0;

float kalman_filter(float altitude_measurement) {
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	ed87 0a01 	vstr	s0, [r7, #4]
    float x_temp = kalman_x_last;
 8001852:	4b25      	ldr	r3, [pc, #148]	@ (80018e8 <kalman_filter+0xa0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	617b      	str	r3, [r7, #20]
    float p_temp = kalman_p_last + kalman_r;
 8001858:	4b24      	ldr	r3, [pc, #144]	@ (80018ec <kalman_filter+0xa4>)
 800185a:	ed93 7a00 	vldr	s14, [r3]
 800185e:	4b24      	ldr	r3, [pc, #144]	@ (80018f0 <kalman_filter+0xa8>)
 8001860:	edd3 7a00 	vldr	s15, [r3]
 8001864:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001868:	edc7 7a04 	vstr	s15, [r7, #16]
    float k = p_temp / (p_temp + kalman_q);
 800186c:	4b21      	ldr	r3, [pc, #132]	@ (80018f4 <kalman_filter+0xac>)
 800186e:	ed93 7a00 	vldr	s14, [r3]
 8001872:	edd7 7a04 	vldr	s15, [r7, #16]
 8001876:	ee37 7a27 	vadd.f32	s14, s14, s15
 800187a:	edd7 6a04 	vldr	s13, [r7, #16]
 800187e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001882:	edc7 7a03 	vstr	s15, [r7, #12]

    kalman_x = x_temp + k * (altitude_measurement - x_temp);
 8001886:	ed97 7a01 	vldr	s14, [r7, #4]
 800188a:	edd7 7a05 	vldr	s15, [r7, #20]
 800188e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001892:	edd7 7a03 	vldr	s15, [r7, #12]
 8001896:	ee27 7a27 	vmul.f32	s14, s14, s15
 800189a:	edd7 7a05 	vldr	s15, [r7, #20]
 800189e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a2:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <kalman_filter+0xb0>)
 80018a4:	edc3 7a00 	vstr	s15, [r3]
    kalman_p = (1 - k) * p_temp;
 80018a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80018ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80018b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80018b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018bc:	4b0f      	ldr	r3, [pc, #60]	@ (80018fc <kalman_filter+0xb4>)
 80018be:	edc3 7a00 	vstr	s15, [r3]

    kalman_x_last = kalman_x;
 80018c2:	4b0d      	ldr	r3, [pc, #52]	@ (80018f8 <kalman_filter+0xb0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a08      	ldr	r2, [pc, #32]	@ (80018e8 <kalman_filter+0xa0>)
 80018c8:	6013      	str	r3, [r2, #0]
    kalman_p_last = kalman_p;
 80018ca:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <kalman_filter+0xb4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a07      	ldr	r2, [pc, #28]	@ (80018ec <kalman_filter+0xa4>)
 80018d0:	6013      	str	r3, [r2, #0]

    return kalman_x;
 80018d2:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <kalman_filter+0xb0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	ee07 3a90 	vmov	s15, r3
}
 80018da:	eeb0 0a67 	vmov.f32	s0, s15
 80018de:	371c      	adds	r7, #28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	20000264 	.word	0x20000264
 80018ec:	20000268 	.word	0x20000268
 80018f0:	20000024 	.word	0x20000024
 80018f4:	20000020 	.word	0x20000020
 80018f8:	2000025c 	.word	0x2000025c
 80018fc:	20000260 	.word	0x20000260

08001900 <calculate_altitude>:

float calculate_altitude(double pressure) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	ed87 0b00 	vstr	d0, [r7]
    float altitude = 44330.0f * (1.0f - pow(pressure / initial_ms5607_pressure, 0.1903f));
 800190a:	4b25      	ldr	r3, [pc, #148]	@ (80019a0 <calculate_altitude+0xa0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fe1a 	bl	8000548 <__aeabi_f2d>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	e9d7 0100 	ldrd	r0, r1, [r7]
 800191c:	f7fe ff96 	bl	800084c <__aeabi_ddiv>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	ec43 2b17 	vmov	d7, r2, r3
 8001928:	ed9f 1b19 	vldr	d1, [pc, #100]	@ 8001990 <calculate_altitude+0x90>
 800192c:	eeb0 0a47 	vmov.f32	s0, s14
 8001930:	eef0 0a67 	vmov.f32	s1, s15
 8001934:	f00b fabe 	bl	800ceb4 <pow>
 8001938:	ec53 2b10 	vmov	r2, r3, d0
 800193c:	f04f 0000 	mov.w	r0, #0
 8001940:	4918      	ldr	r1, [pc, #96]	@ (80019a4 <calculate_altitude+0xa4>)
 8001942:	f7fe fca1 	bl	8000288 <__aeabi_dsub>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	a312      	add	r3, pc, #72	@ (adr r3, 8001998 <calculate_altitude+0x98>)
 8001950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001954:	f7fe fe50 	bl	80005f8 <__aeabi_dmul>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	f7ff f922 	bl	8000ba8 <__aeabi_d2f>
 8001964:	4603      	mov	r3, r0
 8001966:	60fb      	str	r3, [r7, #12]
    return altitude < 0 ? 0 : altitude;
 8001968:	edd7 7a03 	vldr	s15, [r7, #12]
 800196c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001974:	d502      	bpl.n	800197c <calculate_altitude+0x7c>
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	e000      	b.n	800197e <calculate_altitude+0x7e>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	ee07 3a90 	vmov	s15, r3
}
 8001982:	eeb0 0a67 	vmov.f32	s0, s15
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	f3af 8000 	nop.w
 8001990:	20000000 	.word	0x20000000
 8001994:	3fc85bc0 	.word	0x3fc85bc0
 8001998:	00000000 	.word	0x00000000
 800199c:	40e5a540 	.word	0x40e5a540
 80019a0:	20000258 	.word	0x20000258
 80019a4:	3ff00000 	.word	0x3ff00000

080019a8 <MS5607PromRead>:

void MS5607PromRead(struct promData *prom) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
    uint8_t address;
    uint16_t *structPointer = (uint16_t *) prom;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	613b      	str	r3, [r7, #16]

    for (address = 0; address < 8; address++) {
 80019b4:	2300      	movs	r3, #0
 80019b6:	75fb      	strb	r3, [r7, #23]
 80019b8:	e01f      	b.n	80019fa <MS5607PromRead+0x52>
        SPITransmitData = PROM_READ(address);
 80019ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	b25b      	sxtb	r3, r3
 80019c2:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 80019c6:	b25b      	sxtb	r3, r3
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001a40 <MS5607PromRead+0x98>)
 80019cc:	701a      	strb	r2, [r3, #0]
        enableCSB();
 80019ce:	f000 fbb5 	bl	800213c <enableCSB>
        HAL_SPI_Transmit(&hspi1, &SPITransmitData, 1, 10);
 80019d2:	230a      	movs	r3, #10
 80019d4:	2201      	movs	r2, #1
 80019d6:	491a      	ldr	r1, [pc, #104]	@ (8001a40 <MS5607PromRead+0x98>)
 80019d8:	481a      	ldr	r0, [pc, #104]	@ (8001a44 <MS5607PromRead+0x9c>)
 80019da:	f005 ffa0 	bl	800791e <HAL_SPI_Transmit>
        HAL_SPI_Receive(&hspi1, (uint8_t *)structPointer, 2, 10);
 80019de:	230a      	movs	r3, #10
 80019e0:	2202      	movs	r2, #2
 80019e2:	6939      	ldr	r1, [r7, #16]
 80019e4:	4817      	ldr	r0, [pc, #92]	@ (8001a44 <MS5607PromRead+0x9c>)
 80019e6:	f006 f910 	bl	8007c0a <HAL_SPI_Receive>
        disableCSB();
 80019ea:	f000 fbb1 	bl	8002150 <disableCSB>
        structPointer++;
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	3302      	adds	r3, #2
 80019f2:	613b      	str	r3, [r7, #16]
    for (address = 0; address < 8; address++) {
 80019f4:	7dfb      	ldrb	r3, [r7, #23]
 80019f6:	3301      	adds	r3, #1
 80019f8:	75fb      	strb	r3, [r7, #23]
 80019fa:	7dfb      	ldrb	r3, [r7, #23]
 80019fc:	2b07      	cmp	r3, #7
 80019fe:	d9dc      	bls.n	80019ba <MS5607PromRead+0x12>
    }

    structPointer = (uint16_t *) prom;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	613b      	str	r3, [r7, #16]
    for (address = 0; address < 8; address++) {
 8001a04:	2300      	movs	r3, #0
 8001a06:	75fb      	strb	r3, [r7, #23]
 8001a08:	e012      	b.n	8001a30 <MS5607PromRead+0x88>
        uint8_t *toSwap = (uint8_t *) structPointer;
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	60fb      	str	r3, [r7, #12]
        uint8_t secondByte = toSwap[0];
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	72fb      	strb	r3, [r7, #11]
        toSwap[0] = toSwap[1];
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	785a      	ldrb	r2, [r3, #1]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	701a      	strb	r2, [r3, #0]
        toSwap[1] = secondByte;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	7afa      	ldrb	r2, [r7, #11]
 8001a22:	701a      	strb	r2, [r3, #0]
        structPointer++;
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	3302      	adds	r3, #2
 8001a28:	613b      	str	r3, [r7, #16]
    for (address = 0; address < 8; address++) {
 8001a2a:	7dfb      	ldrb	r3, [r7, #23]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	75fb      	strb	r3, [r7, #23]
 8001a30:	7dfb      	ldrb	r3, [r7, #23]
 8001a32:	2b07      	cmp	r3, #7
 8001a34:	d9e9      	bls.n	8001a0a <MS5607PromRead+0x62>
    }
}
 8001a36:	bf00      	nop
 8001a38:	bf00      	nop
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000234 	.word	0x20000234
 8001a44:	20000414 	.word	0x20000414

08001a48 <MS5607UncompensatedRead>:

void MS5607UncompensatedRead(struct MS5607UncompensatedValues *uncompValues) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
    uint8_t reply[3];

    enableCSB();
 8001a50:	f000 fb74 	bl	800213c <enableCSB>
    SPITransmitData = CONVERT_D1_COMMAND | Pressure_OSR;
 8001a54:	4b35      	ldr	r3, [pc, #212]	@ (8001b2c <MS5607UncompensatedRead+0xe4>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4b34      	ldr	r3, [pc, #208]	@ (8001b30 <MS5607UncompensatedRead+0xe8>)
 8001a60:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &SPITransmitData, 1, 10);
 8001a62:	230a      	movs	r3, #10
 8001a64:	2201      	movs	r2, #1
 8001a66:	4932      	ldr	r1, [pc, #200]	@ (8001b30 <MS5607UncompensatedRead+0xe8>)
 8001a68:	4832      	ldr	r0, [pc, #200]	@ (8001b34 <MS5607UncompensatedRead+0xec>)
 8001a6a:	f005 ff58 	bl	800791e <HAL_SPI_Transmit>
    while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001a6e:	bf00      	nop
 8001a70:	4b30      	ldr	r3, [pc, #192]	@ (8001b34 <MS5607UncompensatedRead+0xec>)
 8001a72:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d0f9      	beq.n	8001a70 <MS5607UncompensatedRead+0x28>
    HAL_Delay(10);
 8001a7c:	200a      	movs	r0, #10
 8001a7e:	f002 f8f5 	bl	8003c6c <HAL_Delay>
    disableCSB();
 8001a82:	f000 fb65 	bl	8002150 <disableCSB>

    enableCSB();
 8001a86:	f000 fb59 	bl	800213c <enableCSB>
    SPITransmitData = READ_ADC_COMMAND;
 8001a8a:	4b29      	ldr	r3, [pc, #164]	@ (8001b30 <MS5607UncompensatedRead+0xe8>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &SPITransmitData, 1, 10);
 8001a90:	230a      	movs	r3, #10
 8001a92:	2201      	movs	r2, #1
 8001a94:	4926      	ldr	r1, [pc, #152]	@ (8001b30 <MS5607UncompensatedRead+0xe8>)
 8001a96:	4827      	ldr	r0, [pc, #156]	@ (8001b34 <MS5607UncompensatedRead+0xec>)
 8001a98:	f005 ff41 	bl	800791e <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, reply, 3, 10);
 8001a9c:	f107 010c 	add.w	r1, r7, #12
 8001aa0:	230a      	movs	r3, #10
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	4823      	ldr	r0, [pc, #140]	@ (8001b34 <MS5607UncompensatedRead+0xec>)
 8001aa6:	f006 f8b0 	bl	8007c0a <HAL_SPI_Receive>
    disableCSB();
 8001aaa:	f000 fb51 	bl	8002150 <disableCSB>
    uncompValues->pressure = ((uint32_t)reply[0] << 16) | ((uint32_t)reply[1] << 8) | reply[2];
 8001aae:	7b3b      	ldrb	r3, [r7, #12]
 8001ab0:	041a      	lsls	r2, r3, #16
 8001ab2:	7b7b      	ldrb	r3, [r7, #13]
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	7bba      	ldrb	r2, [r7, #14]
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	601a      	str	r2, [r3, #0]

    enableCSB();
 8001ac0:	f000 fb3c 	bl	800213c <enableCSB>
    SPITransmitData = CONVERT_D2_COMMAND | Temperature_OSR;
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b38 <MS5607UncompensatedRead+0xf0>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4b18      	ldr	r3, [pc, #96]	@ (8001b30 <MS5607UncompensatedRead+0xe8>)
 8001ad0:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &SPITransmitData, 1, 10);
 8001ad2:	230a      	movs	r3, #10
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4916      	ldr	r1, [pc, #88]	@ (8001b30 <MS5607UncompensatedRead+0xe8>)
 8001ad8:	4816      	ldr	r0, [pc, #88]	@ (8001b34 <MS5607UncompensatedRead+0xec>)
 8001ada:	f005 ff20 	bl	800791e <HAL_SPI_Transmit>
    HAL_Delay(10);
 8001ade:	200a      	movs	r0, #10
 8001ae0:	f002 f8c4 	bl	8003c6c <HAL_Delay>
    disableCSB();
 8001ae4:	f000 fb34 	bl	8002150 <disableCSB>

    enableCSB();
 8001ae8:	f000 fb28 	bl	800213c <enableCSB>
    SPITransmitData = READ_ADC_COMMAND;
 8001aec:	4b10      	ldr	r3, [pc, #64]	@ (8001b30 <MS5607UncompensatedRead+0xe8>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &SPITransmitData, 1, 10);
 8001af2:	230a      	movs	r3, #10
 8001af4:	2201      	movs	r2, #1
 8001af6:	490e      	ldr	r1, [pc, #56]	@ (8001b30 <MS5607UncompensatedRead+0xe8>)
 8001af8:	480e      	ldr	r0, [pc, #56]	@ (8001b34 <MS5607UncompensatedRead+0xec>)
 8001afa:	f005 ff10 	bl	800791e <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, reply, 3, 10);
 8001afe:	f107 010c 	add.w	r1, r7, #12
 8001b02:	230a      	movs	r3, #10
 8001b04:	2203      	movs	r2, #3
 8001b06:	480b      	ldr	r0, [pc, #44]	@ (8001b34 <MS5607UncompensatedRead+0xec>)
 8001b08:	f006 f87f 	bl	8007c0a <HAL_SPI_Receive>
    disableCSB();
 8001b0c:	f000 fb20 	bl	8002150 <disableCSB>
    uncompValues->temperature = ((uint32_t)reply[0] << 16) | ((uint32_t)reply[1] << 8) | reply[2];
 8001b10:	7b3b      	ldrb	r3, [r7, #12]
 8001b12:	041a      	lsls	r2, r3, #16
 8001b14:	7b7b      	ldrb	r3, [r7, #13]
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	7bba      	ldrb	r2, [r7, #14]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	605a      	str	r2, [r3, #4]
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000235 	.word	0x20000235
 8001b30:	20000234 	.word	0x20000234
 8001b34:	20000414 	.word	0x20000414
 8001b38:	20000236 	.word	0x20000236

08001b3c <MS5607Convert>:

void MS5607Convert(struct MS5607UncompensatedValues *sample, struct MS5607Readings *value) {
 8001b3c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001b40:	b0dd      	sub	sp, #372	@ 0x174
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
 8001b48:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
    int32_t dT = sample->temperature - ((int32_t)(promData.tref << 8));
 8001b4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	4bdd      	ldr	r3, [pc, #884]	@ (8001ec8 <MS5607Convert+0x38c>)
 8001b54:	895b      	ldrh	r3, [r3, #10]
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    int32_t TEMP = 2000 + (((int64_t)dT * promData.tempsens) >> 23);
 8001b5e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001b62:	17da      	asrs	r2, r3, #31
 8001b64:	469a      	mov	sl, r3
 8001b66:	4693      	mov	fp, r2
 8001b68:	4bd7      	ldr	r3, [pc, #860]	@ (8001ec8 <MS5607Convert+0x38c>)
 8001b6a:	899b      	ldrh	r3, [r3, #12]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	2200      	movs	r2, #0
 8001b70:	4698      	mov	r8, r3
 8001b72:	4691      	mov	r9, r2
 8001b74:	fb08 f20b 	mul.w	r2, r8, fp
 8001b78:	fb0a f309 	mul.w	r3, sl, r9
 8001b7c:	4413      	add	r3, r2
 8001b7e:	fbaa 4508 	umull	r4, r5, sl, r8
 8001b82:	442b      	add	r3, r5
 8001b84:	461d      	mov	r5, r3
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	0de2      	lsrs	r2, r4, #23
 8001b90:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 8001b94:	15eb      	asrs	r3, r5, #23
 8001b96:	4613      	mov	r3, r2
 8001b98:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001b9c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    int64_t OFF = ((int64_t)promData.off << 17) + (((int64_t)promData.tco * dT) >> 6);
 8001ba0:	4bc9      	ldr	r3, [pc, #804]	@ (8001ec8 <MS5607Convert+0x38c>)
 8001ba2:	889b      	ldrh	r3, [r3, #4]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001bac:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001bb0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	0bdb      	lsrs	r3, r3, #15
 8001bb8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	045b      	lsls	r3, r3, #17
 8001bc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001bc4:	4bc0      	ldr	r3, [pc, #768]	@ (8001ec8 <MS5607Convert+0x38c>)
 8001bc6:	891b      	ldrh	r3, [r3, #8]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001bd0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001bd4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001bd8:	17da      	asrs	r2, r3, #31
 8001bda:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001bde:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001be2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001be6:	462b      	mov	r3, r5
 8001be8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001bec:	4642      	mov	r2, r8
 8001bee:	fb02 f203 	mul.w	r2, r2, r3
 8001bf2:	464b      	mov	r3, r9
 8001bf4:	4621      	mov	r1, r4
 8001bf6:	fb01 f303 	mul.w	r3, r1, r3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	4622      	mov	r2, r4
 8001bfe:	4641      	mov	r1, r8
 8001c00:	fba2 1201 	umull	r1, r2, r2, r1
 8001c04:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8001c08:	460a      	mov	r2, r1
 8001c0a:	f8c7 2128 	str.w	r2, [r7, #296]	@ 0x128
 8001c0e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001c12:	4413      	add	r3, r2
 8001c14:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	@ 0x128
 8001c24:	4621      	mov	r1, r4
 8001c26:	098a      	lsrs	r2, r1, #6
 8001c28:	4629      	mov	r1, r5
 8001c2a:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 8001c2e:	4629      	mov	r1, r5
 8001c30:	118b      	asrs	r3, r1, #6
 8001c32:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001c36:	4621      	mov	r1, r4
 8001c38:	1889      	adds	r1, r1, r2
 8001c3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001c3c:	4629      	mov	r1, r5
 8001c3e:	eb43 0101 	adc.w	r1, r3, r1
 8001c42:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8001c44:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001c48:	e9c7 3458 	strd	r3, r4, [r7, #352]	@ 0x160
    int64_t SENS = ((int64_t)promData.sens << 16) + (((int64_t)promData.tcs * dT) >> 7);
 8001c4c:	4b9e      	ldr	r3, [pc, #632]	@ (8001ec8 <MS5607Convert+0x38c>)
 8001c4e:	885b      	ldrh	r3, [r3, #2]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	2200      	movs	r2, #0
 8001c54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001c58:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001c5c:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8001c60:	460b      	mov	r3, r1
 8001c62:	0c1b      	lsrs	r3, r3, #16
 8001c64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001c68:	460b      	mov	r3, r1
 8001c6a:	041b      	lsls	r3, r3, #16
 8001c6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001c70:	4b95      	ldr	r3, [pc, #596]	@ (8001ec8 <MS5607Convert+0x38c>)
 8001c72:	88db      	ldrh	r3, [r3, #6]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	2200      	movs	r2, #0
 8001c78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001c7c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001c80:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001c84:	17da      	asrs	r2, r3, #31
 8001c86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001c8a:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001c8e:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001c92:	462b      	mov	r3, r5
 8001c94:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	@ 0xb0
 8001c98:	4642      	mov	r2, r8
 8001c9a:	fb02 f203 	mul.w	r2, r2, r3
 8001c9e:	464b      	mov	r3, r9
 8001ca0:	4621      	mov	r1, r4
 8001ca2:	fb01 f303 	mul.w	r3, r1, r3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4622      	mov	r2, r4
 8001caa:	4641      	mov	r1, r8
 8001cac:	fba2 1201 	umull	r1, r2, r2, r1
 8001cb0:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8001cb4:	460a      	mov	r2, r1
 8001cb6:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 8001cba:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	09ca      	lsrs	r2, r1, #7
 8001cd4:	4629      	mov	r1, r5
 8001cd6:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8001cda:	4629      	mov	r1, r5
 8001cdc:	11cb      	asrs	r3, r1, #7
 8001cde:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	1889      	adds	r1, r1, r2
 8001ce6:	6339      	str	r1, [r7, #48]	@ 0x30
 8001ce8:	4629      	mov	r1, r5
 8001cea:	eb43 0101 	adc.w	r1, r3, r1
 8001cee:	6379      	str	r1, [r7, #52]	@ 0x34
 8001cf0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001cf4:	e9c7 3456 	strd	r3, r4, [r7, #344]	@ 0x158

    if (TEMP < 2000) {
 8001cf8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001cfc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001d00:	f280 8192 	bge.w	8002028 <MS5607Convert+0x4ec>
        int32_t T2 = ((int64_t)dT * dT) >> 31;
 8001d04:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001d08:	17da      	asrs	r2, r3, #31
 8001d0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001d0e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001d12:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001d16:	17da      	asrs	r2, r3, #31
 8001d18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001d1c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001d20:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8001d24:	462b      	mov	r3, r5
 8001d26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001d2a:	4642      	mov	r2, r8
 8001d2c:	fb02 f203 	mul.w	r2, r2, r3
 8001d30:	464b      	mov	r3, r9
 8001d32:	4621      	mov	r1, r4
 8001d34:	fb01 f303 	mul.w	r3, r1, r3
 8001d38:	4413      	add	r3, r2
 8001d3a:	4622      	mov	r2, r4
 8001d3c:	4641      	mov	r1, r8
 8001d3e:	fba2 1201 	umull	r1, r2, r2, r1
 8001d42:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001d46:	460a      	mov	r2, r1
 8001d48:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001d4c:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001d50:	4413      	add	r3, r2
 8001d52:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 8001d62:	4621      	mov	r1, r4
 8001d64:	0fca      	lsrs	r2, r1, #31
 8001d66:	4629      	mov	r1, r5
 8001d68:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	17cb      	asrs	r3, r1, #31
 8001d70:	4613      	mov	r3, r2
 8001d72:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
        int32_t TEMPM = TEMP - 2000;
 8001d76:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001d7a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001d7e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
        int64_t OFF2 = (61 * (int64_t)TEMPM * TEMPM) >> 4;
 8001d82:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001d86:	17da      	asrs	r2, r3, #31
 8001d88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001d8c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001d90:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001d94:	17da      	asrs	r2, r3, #31
 8001d96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001d9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001d9e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001da2:	462b      	mov	r3, r5
 8001da4:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001da8:	4642      	mov	r2, r8
 8001daa:	fb02 f203 	mul.w	r2, r2, r3
 8001dae:	464b      	mov	r3, r9
 8001db0:	4621      	mov	r1, r4
 8001db2:	fb01 f303 	mul.w	r3, r1, r3
 8001db6:	4413      	add	r3, r2
 8001db8:	4622      	mov	r2, r4
 8001dba:	4641      	mov	r1, r8
 8001dbc:	fba2 1201 	umull	r1, r2, r2, r1
 8001dc0:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8001dc4:	460a      	mov	r2, r1
 8001dc6:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 8001dca:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001dce:	4413      	add	r3, r2
 8001dd0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001dd4:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 8001dd8:	4622      	mov	r2, r4
 8001dda:	462b      	mov	r3, r5
 8001ddc:	f04f 0000 	mov.w	r0, #0
 8001de0:	f04f 0100 	mov.w	r1, #0
 8001de4:	0119      	lsls	r1, r3, #4
 8001de6:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001dea:	0110      	lsls	r0, r2, #4
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4621      	mov	r1, r4
 8001df2:	1a51      	subs	r1, r2, r1
 8001df4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001df6:	4629      	mov	r1, r5
 8001df8:	eb63 0301 	sbc.w	r3, r3, r1
 8001dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001e0a:	4649      	mov	r1, r9
 8001e0c:	008b      	lsls	r3, r1, #2
 8001e0e:	4641      	mov	r1, r8
 8001e10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e14:	4641      	mov	r1, r8
 8001e16:	008a      	lsls	r2, r1, #2
 8001e18:	4610      	mov	r0, r2
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4622      	mov	r2, r4
 8001e20:	189b      	adds	r3, r3, r2
 8001e22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001e26:	462b      	mov	r3, r5
 8001e28:	460a      	mov	r2, r1
 8001e2a:	eb42 0303 	adc.w	r3, r2, r3
 8001e2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	f04f 0300 	mov.w	r3, #0
 8001e3a:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001e3e:	4621      	mov	r1, r4
 8001e40:	090a      	lsrs	r2, r1, #4
 8001e42:	4629      	mov	r1, r5
 8001e44:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8001e48:	4629      	mov	r1, r5
 8001e4a:	110b      	asrs	r3, r1, #4
 8001e4c:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
        int64_t SENS2 = 2 * (int64_t)TEMPM * TEMPM;
 8001e50:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001e54:	17da      	asrs	r2, r3, #31
 8001e56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001e5a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001e5e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001e62:	17da      	asrs	r2, r3, #31
 8001e64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001e66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001e68:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001e6c:	462b      	mov	r3, r5
 8001e6e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001e72:	4642      	mov	r2, r8
 8001e74:	fb02 f203 	mul.w	r2, r2, r3
 8001e78:	464b      	mov	r3, r9
 8001e7a:	4621      	mov	r1, r4
 8001e7c:	fb01 f303 	mul.w	r3, r1, r3
 8001e80:	4413      	add	r3, r2
 8001e82:	4622      	mov	r2, r4
 8001e84:	4641      	mov	r1, r8
 8001e86:	fba2 1201 	umull	r1, r2, r2, r1
 8001e8a:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8001e8e:	460a      	mov	r2, r1
 8001e90:	f8c7 2108 	str.w	r2, [r7, #264]	@ 0x108
 8001e94:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8001e98:	4413      	add	r3, r2
 8001e9a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001e9e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	18db      	adds	r3, r3, r3
 8001ea6:	623b      	str	r3, [r7, #32]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	eb42 0303 	adc.w	r3, r2, r3
 8001eae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eb0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001eb4:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
        if (TEMP < -1500) {
 8001eb8:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8001ebc:	4b03      	ldr	r3, [pc, #12]	@ (8001ecc <MS5607Convert+0x390>)
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	f280 8091 	bge.w	8001fe6 <MS5607Convert+0x4aa>
 8001ec4:	e004      	b.n	8001ed0 <MS5607Convert+0x394>
 8001ec6:	bf00      	nop
 8001ec8:	20000238 	.word	0x20000238
 8001ecc:	fffffa24 	.word	0xfffffa24
            int32_t TEMPP = TEMP + 1500;
 8001ed0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001ed4:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8001ed8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
            OFF2 += (int64_t)15 * TEMPP * TEMPP;
 8001edc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001ee0:	17da      	asrs	r2, r3, #31
 8001ee2:	673b      	str	r3, [r7, #112]	@ 0x70
 8001ee4:	677a      	str	r2, [r7, #116]	@ 0x74
 8001ee6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001eea:	17da      	asrs	r2, r3, #31
 8001eec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001eee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001ef0:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001ef4:	462b      	mov	r3, r5
 8001ef6:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8001efa:	4642      	mov	r2, r8
 8001efc:	fb02 f203 	mul.w	r2, r2, r3
 8001f00:	464b      	mov	r3, r9
 8001f02:	4621      	mov	r1, r4
 8001f04:	fb01 f303 	mul.w	r3, r1, r3
 8001f08:	4413      	add	r3, r2
 8001f0a:	4622      	mov	r2, r4
 8001f0c:	4641      	mov	r1, r8
 8001f0e:	fba2 1201 	umull	r1, r2, r2, r1
 8001f12:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001f16:	460a      	mov	r2, r1
 8001f18:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8001f1c:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001f20:	4413      	add	r3, r2
 8001f22:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001f26:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001f2a:	4622      	mov	r2, r4
 8001f2c:	462b      	mov	r3, r5
 8001f2e:	f04f 0000 	mov.w	r0, #0
 8001f32:	f04f 0100 	mov.w	r1, #0
 8001f36:	0119      	lsls	r1, r3, #4
 8001f38:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001f3c:	0110      	lsls	r0, r2, #4
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4621      	mov	r1, r4
 8001f44:	1a51      	subs	r1, r2, r1
 8001f46:	6639      	str	r1, [r7, #96]	@ 0x60
 8001f48:	4629      	mov	r1, r5
 8001f4a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f50:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8001f54:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001f58:	4621      	mov	r1, r4
 8001f5a:	1851      	adds	r1, r2, r1
 8001f5c:	61b9      	str	r1, [r7, #24]
 8001f5e:	4629      	mov	r1, r5
 8001f60:	eb43 0101 	adc.w	r1, r3, r1
 8001f64:	61f9      	str	r1, [r7, #28]
 8001f66:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001f6a:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
            SENS2 += (int64_t)8 * TEMPP * TEMPP;
 8001f6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001f72:	17da      	asrs	r2, r3, #31
 8001f74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001f76:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001f78:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001f7c:	17da      	asrs	r2, r3, #31
 8001f7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001f80:	657a      	str	r2, [r7, #84]	@ 0x54
 8001f82:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001f86:	462b      	mov	r3, r5
 8001f88:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001f8c:	4642      	mov	r2, r8
 8001f8e:	fb02 f203 	mul.w	r2, r2, r3
 8001f92:	464b      	mov	r3, r9
 8001f94:	4621      	mov	r1, r4
 8001f96:	fb01 f303 	mul.w	r3, r1, r3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	4622      	mov	r2, r4
 8001f9e:	4641      	mov	r1, r8
 8001fa0:	fba2 1201 	umull	r1, r2, r2, r1
 8001fa4:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8001fa8:	460a      	mov	r2, r1
 8001faa:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8001fae:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001fb8:	f04f 0000 	mov.w	r0, #0
 8001fbc:	f04f 0100 	mov.w	r1, #0
 8001fc0:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001fc4:	462b      	mov	r3, r5
 8001fc6:	00d9      	lsls	r1, r3, #3
 8001fc8:	4623      	mov	r3, r4
 8001fca:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8001fce:	4623      	mov	r3, r4
 8001fd0:	00d8      	lsls	r0, r3, #3
 8001fd2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8001fd6:	1814      	adds	r4, r2, r0
 8001fd8:	613c      	str	r4, [r7, #16]
 8001fda:	414b      	adcs	r3, r1
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001fe2:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
        }
        TEMP -= T2;
 8001fe6:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8001fea:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
        OFF -= OFF2;
 8001ff4:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 8001ff8:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8001ffc:	1a84      	subs	r4, r0, r2
 8001ffe:	60bc      	str	r4, [r7, #8]
 8002000:	eb61 0303 	sbc.w	r3, r1, r3
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800200a:	e9c7 3458 	strd	r3, r4, [r7, #352]	@ 0x160
        SENS -= SENS2;
 800200e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8002012:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8002016:	1a84      	subs	r4, r0, r2
 8002018:	603c      	str	r4, [r7, #0]
 800201a:	eb61 0303 	sbc.w	r3, r1, r3
 800201e:	607b      	str	r3, [r7, #4]
 8002020:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002024:	e9c7 3456 	strd	r3, r4, [r7, #344]	@ 0x158
    }

    value->pressure = ((((int64_t)sample->pressure * SENS) >> 21) - OFF) >> 15;
 8002028:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2200      	movs	r2, #0
 8002030:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002032:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002034:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002038:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800203c:	462a      	mov	r2, r5
 800203e:	fb02 f203 	mul.w	r2, r2, r3
 8002042:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002046:	4621      	mov	r1, r4
 8002048:	fb01 f303 	mul.w	r3, r1, r3
 800204c:	4413      	add	r3, r2
 800204e:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002052:	4621      	mov	r1, r4
 8002054:	fba2 1201 	umull	r1, r2, r2, r1
 8002058:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800205c:	460a      	mov	r2, r1
 800205e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8002062:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8002066:	4413      	add	r3, r2
 8002068:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8002078:	4621      	mov	r1, r4
 800207a:	0d4a      	lsrs	r2, r1, #21
 800207c:	4629      	mov	r1, r5
 800207e:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8002082:	4629      	mov	r1, r5
 8002084:	154b      	asrs	r3, r1, #21
 8002086:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 800208a:	1a14      	subs	r4, r2, r0
 800208c:	643c      	str	r4, [r7, #64]	@ 0x40
 800208e:	eb63 0301 	sbc.w	r3, r3, r1
 8002092:	647b      	str	r3, [r7, #68]	@ 0x44
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80020a0:	4621      	mov	r1, r4
 80020a2:	0bca      	lsrs	r2, r1, #15
 80020a4:	4629      	mov	r1, r5
 80020a6:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80020aa:	4629      	mov	r1, r5
 80020ac:	13cb      	asrs	r3, r1, #15
 80020ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80020b2:	601a      	str	r2, [r3, #0]
    value->temperature = TEMP;
 80020b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80020b8:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80020bc:	605a      	str	r2, [r3, #4]
}
 80020be:	bf00      	nop
 80020c0:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 80020c4:	46bd      	mov	sp, r7
 80020c6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80020ca:	4770      	bx	lr

080020cc <MS5607Update>:

void MS5607Update(void) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
    MS5607UncompensatedRead(&uncompValues);
 80020d0:	4804      	ldr	r0, [pc, #16]	@ (80020e4 <MS5607Update+0x18>)
 80020d2:	f7ff fcb9 	bl	8001a48 <MS5607UncompensatedRead>
    MS5607Convert(&uncompValues, &readings);
 80020d6:	4904      	ldr	r1, [pc, #16]	@ (80020e8 <MS5607Update+0x1c>)
 80020d8:	4802      	ldr	r0, [pc, #8]	@ (80020e4 <MS5607Update+0x18>)
 80020da:	f7ff fd2f 	bl	8001b3c <MS5607Convert>
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000248 	.word	0x20000248
 80020e8:	20000250 	.word	0x20000250

080020ec <MS5607GetTemperatureC>:

float MS5607GetTemperatureC(void) {
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
    return (float)readings.temperature / 100.0f;
 80020f0:	4b08      	ldr	r3, [pc, #32]	@ (8002114 <MS5607GetTemperatureC+0x28>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	ee07 3a90 	vmov	s15, r3
 80020f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020fc:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002118 <MS5607GetTemperatureC+0x2c>
 8002100:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002104:	eef0 7a66 	vmov.f32	s15, s13
}
 8002108:	eeb0 0a67 	vmov.f32	s0, s15
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	20000250 	.word	0x20000250
 8002118:	42c80000 	.word	0x42c80000

0800211c <MS5607GetPressurePa>:

float MS5607GetPressurePa(void) {
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
    return (float)readings.pressure;
 8002120:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <MS5607GetPressurePa+0x1c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	ee07 3a90 	vmov	s15, r3
 8002128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800212c:	eeb0 0a67 	vmov.f32	s0, s15
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	20000250 	.word	0x20000250

0800213c <enableCSB>:

void enableCSB(void) {
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(BARO_CS_GPIO_Port, BARO_CS_Pin, GPIO_PIN_RESET);
 8002140:	2200      	movs	r2, #0
 8002142:	2110      	movs	r1, #16
 8002144:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002148:	f003 fd98 	bl	8005c7c <HAL_GPIO_WritePin>
}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}

08002150 <disableCSB>:

void disableCSB(void) {
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(BARO_CS_GPIO_Port, BARO_CS_Pin, GPIO_PIN_SET);
 8002154:	2201      	movs	r2, #1
 8002156:	2110      	movs	r1, #16
 8002158:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800215c:	f003 fd8e 	bl	8005c7c <HAL_GPIO_WritePin>
}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}

08002164 <MS5607SetTemperatureOSR>:

void MS5607SetTemperatureOSR(MS5607OSRFactors tOSR) {
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	71fb      	strb	r3, [r7, #7]
    Temperature_OSR = tOSR;
 800216e:	4a04      	ldr	r2, [pc, #16]	@ (8002180 <MS5607SetTemperatureOSR+0x1c>)
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	7013      	strb	r3, [r2, #0]
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	20000236 	.word	0x20000236

08002184 <MS5607SetPressureOSR>:

void MS5607SetPressureOSR(MS5607OSRFactors pOSR) {
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
    Pressure_OSR = pOSR;
 800218e:	4a04      	ldr	r2, [pc, #16]	@ (80021a0 <MS5607SetPressureOSR+0x1c>)
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	7013      	strb	r3, [r2, #0]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	20000235 	.word	0x20000235

080021a4 <MS5607_ReadData>:

Barometer_2_Axis MS5607_ReadData() {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08c      	sub	sp, #48	@ 0x30
 80021a8:	af00      	add	r7, sp, #0
    Barometer_2_Axis data = {0};
 80021aa:	f107 0314 	add.w	r3, r7, #20
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	609a      	str	r2, [r3, #8]
//    avg.altitude /= window;
//
//    return avg;


        MS5607Update();
 80021b6:	f7ff ff89 	bl	80020cc <MS5607Update>
        data.temperature = MS5607GetTemperatureC();
 80021ba:	f7ff ff97 	bl	80020ec <MS5607GetTemperatureC>
 80021be:	eef0 7a40 	vmov.f32	s15, s0
 80021c2:	edc7 7a06 	vstr	s15, [r7, #24]
        data.pressure = MS5607GetPressurePa();
 80021c6:	f7ff ffa9 	bl	800211c <MS5607GetPressurePa>
 80021ca:	eef0 7a40 	vmov.f32	s15, s0
 80021ce:	edc7 7a05 	vstr	s15, [r7, #20]
        float raw_altitude = calculate_altitude(data.pressure);
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe f9b7 	bl	8000548 <__aeabi_f2d>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	ec43 2b10 	vmov	d0, r2, r3
 80021e2:	f7ff fb8d 	bl	8001900 <calculate_altitude>
 80021e6:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        data.altitude = kalman_filter(raw_altitude);
 80021ea:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 80021ee:	f7ff fb2b 	bl	8001848 <kalman_filter>
 80021f2:	eef0 7a40 	vmov.f32	s15, s0
 80021f6:	edc7 7a07 	vstr	s15, [r7, #28]


    return data;
 80021fa:	f107 0320 	add.w	r3, r7, #32
 80021fe:	f107 0214 	add.w	r2, r7, #20
 8002202:	ca07      	ldmia	r2, {r0, r1, r2}
 8002204:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002208:	6a39      	ldr	r1, [r7, #32]
 800220a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800220c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220e:	ee06 1a90 	vmov	s13, r1
 8002212:	ee07 2a10 	vmov	s14, r2
 8002216:	ee07 3a90 	vmov	s15, r3
}
 800221a:	eeb0 0a66 	vmov.f32	s0, s13
 800221e:	eef0 0a47 	vmov.f32	s1, s14
 8002222:	eeb0 1a67 	vmov.f32	s2, s15
 8002226:	3730      	adds	r7, #48	@ 0x30
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <get_average_pressure>:
        HAL_Delay(10);
    }
    return sum / NUM_SAMPLES;
}

float get_average_pressure() {
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
    float sum = 0;
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < NUM_SAMPLES; i++) {
 8002238:	2300      	movs	r3, #0
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	e011      	b.n	8002262 <get_average_pressure+0x36>
        MS5607Update();
 800223e:	f7ff ff45 	bl	80020cc <MS5607Update>
        sum += MS5607GetPressurePa();
 8002242:	f7ff ff6b 	bl	800211c <MS5607GetPressurePa>
 8002246:	eeb0 7a40 	vmov.f32	s14, s0
 800224a:	edd7 7a01 	vldr	s15, [r7, #4]
 800224e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002252:	edc7 7a01 	vstr	s15, [r7, #4]
        HAL_Delay(10);
 8002256:	200a      	movs	r0, #10
 8002258:	f001 fd08 	bl	8003c6c <HAL_Delay>
    for (int i = 0; i < NUM_SAMPLES; i++) {
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	3301      	adds	r3, #1
 8002260:	603b      	str	r3, [r7, #0]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2b63      	cmp	r3, #99	@ 0x63
 8002266:	ddea      	ble.n	800223e <get_average_pressure+0x12>
    }
    return sum / NUM_SAMPLES;
 8002268:	edd7 7a01 	vldr	s15, [r7, #4]
 800226c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002284 <get_average_pressure+0x58>
 8002270:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002274:	eef0 7a66 	vmov.f32	s15, s13
}
 8002278:	eeb0 0a67 	vmov.f32	s0, s15
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	42c80000 	.word	0x42c80000

08002288 <MS5607_Init>:
    printf("MS5607 Barometer:\n");
    printf("Pressure: %.3f Pa, Temperature: %.3f degC, Altitude: %.3f meters\n", data->pressure, data->temperature, data->altitude);
    printf("-----\n");
}

int8_t MS5607_Init() {
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
    enableCSB();
 800228c:	f7ff ff56 	bl	800213c <enableCSB>
    SPITransmitData = RESET_COMMAND;
 8002290:	4b18      	ldr	r3, [pc, #96]	@ (80022f4 <MS5607_Init+0x6c>)
 8002292:	221e      	movs	r2, #30
 8002294:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &SPITransmitData, 1, 10);
 8002296:	230a      	movs	r3, #10
 8002298:	2201      	movs	r2, #1
 800229a:	4916      	ldr	r1, [pc, #88]	@ (80022f4 <MS5607_Init+0x6c>)
 800229c:	4816      	ldr	r0, [pc, #88]	@ (80022f8 <MS5607_Init+0x70>)
 800229e:	f005 fb3e 	bl	800791e <HAL_SPI_Transmit>
    while (hspi1.State == HAL_SPI_STATE_BUSY);
 80022a2:	bf00      	nop
 80022a4:	4b14      	ldr	r3, [pc, #80]	@ (80022f8 <MS5607_Init+0x70>)
 80022a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d0f9      	beq.n	80022a4 <MS5607_Init+0x1c>
    HAL_Delay(3);
 80022b0:	2003      	movs	r0, #3
 80022b2:	f001 fcdb 	bl	8003c6c <HAL_Delay>
    disableCSB();
 80022b6:	f7ff ff4b 	bl	8002150 <disableCSB>

    MS5607PromRead(&promData);
 80022ba:	4810      	ldr	r0, [pc, #64]	@ (80022fc <MS5607_Init+0x74>)
 80022bc:	f7ff fb74 	bl	80019a8 <MS5607PromRead>

    if (promData.reserved == 0x00 || promData.reserved == 0xff) {
 80022c0:	4b0e      	ldr	r3, [pc, #56]	@ (80022fc <MS5607_Init+0x74>)
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <MS5607_Init+0x48>
 80022c8:	4b0c      	ldr	r3, [pc, #48]	@ (80022fc <MS5607_Init+0x74>)
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	2bff      	cmp	r3, #255	@ 0xff
 80022ce:	d101      	bne.n	80022d4 <MS5607_Init+0x4c>
        return MS5607_STATE_FAILED;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e00d      	b.n	80022f0 <MS5607_Init+0x68>
    } else {
        MS5607SetPressureOSR(OSR_4096);
 80022d4:	2008      	movs	r0, #8
 80022d6:	f7ff ff55 	bl	8002184 <MS5607SetPressureOSR>
        MS5607SetTemperatureOSR(OSR_4096);
 80022da:	2008      	movs	r0, #8
 80022dc:	f7ff ff42 	bl	8002164 <MS5607SetTemperatureOSR>
        initial_ms5607_pressure = get_average_pressure();
 80022e0:	f7ff ffa4 	bl	800222c <get_average_pressure>
 80022e4:	eef0 7a40 	vmov.f32	s15, s0
 80022e8:	4b05      	ldr	r3, [pc, #20]	@ (8002300 <MS5607_Init+0x78>)
 80022ea:	edc3 7a00 	vstr	s15, [r3]
        return MS5607_STATE_READY;
 80022ee:	2300      	movs	r3, #0
    }
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000234 	.word	0x20000234
 80022f8:	20000414 	.word	0x20000414
 80022fc:	20000238 	.word	0x20000238
 8002300:	20000258 	.word	0x20000258

08002304 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800230c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002310:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d013      	beq.n	8002344 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800231c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002320:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002324:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00b      	beq.n	8002344 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800232c:	e000      	b.n	8002330 <ITM_SendChar+0x2c>
    {
      __NOP();
 800232e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002330:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f9      	beq.n	800232e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800233a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002344:	687b      	ldr	r3, [r7, #4]
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8002352:	b580      	push	{r7, lr}
 8002354:	b086      	sub	sp, #24
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
	int i=0;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	e009      	b.n	800237c <_write+0x2a>
		ITM_SendChar((*ptr++));
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	60ba      	str	r2, [r7, #8]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ffc7 	bl	8002304 <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	3301      	adds	r3, #1
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	dbf1      	blt.n	8002368 <_write+0x16>
	}
	return len;
 8002384:	687b      	ldr	r3, [r7, #4]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002396:	f001 fbf4 	bl	8003b82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800239a:	f000 f845 	bl	8002428 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800239e:	f000 f895 	bl	80024cc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023a2:	f000 fbef 	bl	8002b84 <MX_GPIO_Init>
  MX_DMA_Init();
 80023a6:	f000 fbcf 	bl	8002b48 <MX_DMA_Init>
  MX_ADC1_Init();
 80023aa:	f000 f8bd 	bl	8002528 <MX_ADC1_Init>
  MX_I2C1_Init();
 80023ae:	f000 f933 	bl	8002618 <MX_I2C1_Init>
  MX_I2C2_Init();
 80023b2:	f000 f971 	bl	8002698 <MX_I2C2_Init>
  MX_I2C3_Init();
 80023b6:	f000 f9af 	bl	8002718 <MX_I2C3_Init>
  MX_SPI1_Init();
 80023ba:	f000 f9ed 	bl	8002798 <MX_SPI1_Init>
  MX_SPI2_Init();
 80023be:	f000 fa29 	bl	8002814 <MX_SPI2_Init>
  MX_SPI3_Init();
 80023c2:	f000 fa65 	bl	8002890 <MX_SPI3_Init>
  MX_UART4_Init();
 80023c6:	f000 faa1 	bl	800290c <MX_UART4_Init>
  MX_UART5_Init();
 80023ca:	f000 facf 	bl	800296c <MX_UART5_Init>
  MX_USART1_UART_Init();
 80023ce:	f000 fafd 	bl	80029cc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80023d2:	f000 fb2b 	bl	8002a2c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80023d6:	f000 fb59 	bl	8002a8c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80023da:	f000 fb87 	bl	8002aec <MX_USB_OTG_FS_PCD_Init>
  MX_FATFS_Init();
 80023de:	f007 f8f5 	bl	80095cc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 80023e2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80023e6:	f001 fc41 	bl	8003c6c <HAL_Delay>
  SystemState ret = Manager_Main(); // Launching the Control Center Main Handling Function
 80023ea:	f001 fb75 	bl	8003ad8 <Manager_Main>
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
  switch(ret){
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <main+0x6e>
 80023f8:	2b07      	cmp	r3, #7
 80023fa:	d004      	beq.n	8002406 <main+0x76>
 80023fc:	e007      	b.n	800240e <main+0x7e>
		case STATUS_GRACEFUL_SHUTDOWN:
			printf("Graceful shutdown. \n"); // Graceful shutdown of the module
 80023fe:	4807      	ldr	r0, [pc, #28]	@ (800241c <main+0x8c>)
 8002400:	f008 fc02 	bl	800ac08 <puts>
			break;
 8002404:	e007      	b.n	8002416 <main+0x86>
		case STATUS_ERROR:
			printf("You should not be here. Error Detected. \n"); // The code should jump to this statement only in USB Mode
 8002406:	4806      	ldr	r0, [pc, #24]	@ (8002420 <main+0x90>)
 8002408:	f008 fbfe 	bl	800ac08 <puts>
			break;
 800240c:	e003      	b.n	8002416 <main+0x86>
		default:
			printf("You should not be here \n"); // Something went wrong :(
 800240e:	4805      	ldr	r0, [pc, #20]	@ (8002424 <main+0x94>)
 8002410:	f008 fbfa 	bl	800ac08 <puts>
			break;
 8002414:	bf00      	nop
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002416:	bf00      	nop
 8002418:	e7fd      	b.n	8002416 <main+0x86>
 800241a:	bf00      	nop
 800241c:	0800ddb0 	.word	0x0800ddb0
 8002420:	0800ddc4 	.word	0x0800ddc4
 8002424:	0800ddf0 	.word	0x0800ddf0

08002428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b096      	sub	sp, #88	@ 0x58
 800242c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800242e:	f107 0314 	add.w	r3, r7, #20
 8002432:	2244      	movs	r2, #68	@ 0x44
 8002434:	2100      	movs	r1, #0
 8002436:	4618      	mov	r0, r3
 8002438:	f008 fd02 	bl	800ae40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800243c:	463b      	mov	r3, r7
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	60da      	str	r2, [r3, #12]
 8002448:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800244a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800244e:	f003 fea1 	bl	8006194 <HAL_PWREx_ControlVoltageScaling>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002458:	f000 fc24 	bl	8002ca4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800245c:	2310      	movs	r3, #16
 800245e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002460:	2301      	movs	r3, #1
 8002462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002468:	2360      	movs	r3, #96	@ 0x60
 800246a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800246c:	2302      	movs	r3, #2
 800246e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002470:	2301      	movs	r3, #1
 8002472:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002474:	2301      	movs	r3, #1
 8002476:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002478:	2328      	movs	r3, #40	@ 0x28
 800247a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800247c:	2307      	movs	r3, #7
 800247e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002480:	2302      	movs	r3, #2
 8002482:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002484:	2302      	movs	r3, #2
 8002486:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	4618      	mov	r0, r3
 800248e:	f003 fee7 	bl	8006260 <HAL_RCC_OscConfig>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002498:	f000 fc04 	bl	8002ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800249c:	230f      	movs	r3, #15
 800249e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024a0:	2303      	movs	r3, #3
 80024a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024ac:	2300      	movs	r3, #0
 80024ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80024b0:	463b      	mov	r3, r7
 80024b2:	2104      	movs	r1, #4
 80024b4:	4618      	mov	r0, r3
 80024b6:	f004 faaf 	bl	8006a18 <HAL_RCC_ClockConfig>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80024c0:	f000 fbf0 	bl	8002ca4 <Error_Handler>
  }
}
 80024c4:	bf00      	nop
 80024c6:	3758      	adds	r7, #88	@ 0x58
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b0a2      	sub	sp, #136	@ 0x88
 80024d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024d2:	463b      	mov	r3, r7
 80024d4:	2288      	movs	r2, #136	@ 0x88
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f008 fcb1 	bl	800ae40 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80024de:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80024e2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80024e4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80024e8:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80024ea:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80024ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80024f0:	2301      	movs	r3, #1
 80024f2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80024f4:	2301      	movs	r3, #1
 80024f6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80024f8:	2318      	movs	r3, #24
 80024fa:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80024fc:	2307      	movs	r3, #7
 80024fe:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002500:	2302      	movs	r3, #2
 8002502:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002504:	2302      	movs	r3, #2
 8002506:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8002508:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 800250c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800250e:	463b      	mov	r3, r7
 8002510:	4618      	mov	r0, r3
 8002512:	f004 fca5 	bl	8006e60 <HAL_RCCEx_PeriphCLKConfig>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 800251c:	f000 fbc2 	bl	8002ca4 <Error_Handler>
  }
}
 8002520:	bf00      	nop
 8002522:	3788      	adds	r7, #136	@ 0x88
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08a      	sub	sp, #40	@ 0x28
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800252e:	f107 031c 	add.w	r3, r7, #28
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
 8002548:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800254a:	4b30      	ldr	r3, [pc, #192]	@ (800260c <MX_ADC1_Init+0xe4>)
 800254c:	4a30      	ldr	r2, [pc, #192]	@ (8002610 <MX_ADC1_Init+0xe8>)
 800254e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8002550:	4b2e      	ldr	r3, [pc, #184]	@ (800260c <MX_ADC1_Init+0xe4>)
 8002552:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002556:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002558:	4b2c      	ldr	r3, [pc, #176]	@ (800260c <MX_ADC1_Init+0xe4>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800255e:	4b2b      	ldr	r3, [pc, #172]	@ (800260c <MX_ADC1_Init+0xe4>)
 8002560:	2200      	movs	r2, #0
 8002562:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002564:	4b29      	ldr	r3, [pc, #164]	@ (800260c <MX_ADC1_Init+0xe4>)
 8002566:	2200      	movs	r2, #0
 8002568:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800256a:	4b28      	ldr	r3, [pc, #160]	@ (800260c <MX_ADC1_Init+0xe4>)
 800256c:	2204      	movs	r2, #4
 800256e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002570:	4b26      	ldr	r3, [pc, #152]	@ (800260c <MX_ADC1_Init+0xe4>)
 8002572:	2200      	movs	r2, #0
 8002574:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002576:	4b25      	ldr	r3, [pc, #148]	@ (800260c <MX_ADC1_Init+0xe4>)
 8002578:	2200      	movs	r2, #0
 800257a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800257c:	4b23      	ldr	r3, [pc, #140]	@ (800260c <MX_ADC1_Init+0xe4>)
 800257e:	2201      	movs	r2, #1
 8002580:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002582:	4b22      	ldr	r3, [pc, #136]	@ (800260c <MX_ADC1_Init+0xe4>)
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800258a:	4b20      	ldr	r3, [pc, #128]	@ (800260c <MX_ADC1_Init+0xe4>)
 800258c:	2200      	movs	r2, #0
 800258e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002590:	4b1e      	ldr	r3, [pc, #120]	@ (800260c <MX_ADC1_Init+0xe4>)
 8002592:	2200      	movs	r2, #0
 8002594:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002596:	4b1d      	ldr	r3, [pc, #116]	@ (800260c <MX_ADC1_Init+0xe4>)
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800259e:	4b1b      	ldr	r3, [pc, #108]	@ (800260c <MX_ADC1_Init+0xe4>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80025a4:	4b19      	ldr	r3, [pc, #100]	@ (800260c <MX_ADC1_Init+0xe4>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025ac:	4817      	ldr	r0, [pc, #92]	@ (800260c <MX_ADC1_Init+0xe4>)
 80025ae:	f001 fdb3 	bl	8004118 <HAL_ADC_Init>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80025b8:	f000 fb74 	bl	8002ca4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80025bc:	2300      	movs	r3, #0
 80025be:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80025c0:	f107 031c 	add.w	r3, r7, #28
 80025c4:	4619      	mov	r1, r3
 80025c6:	4811      	ldr	r0, [pc, #68]	@ (800260c <MX_ADC1_Init+0xe4>)
 80025c8:	f002 fe84 	bl	80052d4 <HAL_ADCEx_MultiModeConfigChannel>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80025d2:	f000 fb67 	bl	8002ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80025d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002614 <MX_ADC1_Init+0xec>)
 80025d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025da:	2306      	movs	r3, #6
 80025dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80025e2:	237f      	movs	r3, #127	@ 0x7f
 80025e4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80025e6:	2304      	movs	r3, #4
 80025e8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025ee:	1d3b      	adds	r3, r7, #4
 80025f0:	4619      	mov	r1, r3
 80025f2:	4806      	ldr	r0, [pc, #24]	@ (800260c <MX_ADC1_Init+0xe4>)
 80025f4:	f002 f8b4 	bl	8004760 <HAL_ADC_ConfigChannel>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80025fe:	f000 fb51 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002602:	bf00      	nop
 8002604:	3728      	adds	r7, #40	@ 0x28
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	2000026c 	.word	0x2000026c
 8002610:	50040000 	.word	0x50040000
 8002614:	0c900008 	.word	0x0c900008

08002618 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800261c:	4b1b      	ldr	r3, [pc, #108]	@ (800268c <MX_I2C1_Init+0x74>)
 800261e:	4a1c      	ldr	r2, [pc, #112]	@ (8002690 <MX_I2C1_Init+0x78>)
 8002620:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8002622:	4b1a      	ldr	r3, [pc, #104]	@ (800268c <MX_I2C1_Init+0x74>)
 8002624:	4a1b      	ldr	r2, [pc, #108]	@ (8002694 <MX_I2C1_Init+0x7c>)
 8002626:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002628:	4b18      	ldr	r3, [pc, #96]	@ (800268c <MX_I2C1_Init+0x74>)
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800262e:	4b17      	ldr	r3, [pc, #92]	@ (800268c <MX_I2C1_Init+0x74>)
 8002630:	2201      	movs	r2, #1
 8002632:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002634:	4b15      	ldr	r3, [pc, #84]	@ (800268c <MX_I2C1_Init+0x74>)
 8002636:	2200      	movs	r2, #0
 8002638:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800263a:	4b14      	ldr	r3, [pc, #80]	@ (800268c <MX_I2C1_Init+0x74>)
 800263c:	2200      	movs	r2, #0
 800263e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002640:	4b12      	ldr	r3, [pc, #72]	@ (800268c <MX_I2C1_Init+0x74>)
 8002642:	2200      	movs	r2, #0
 8002644:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002646:	4b11      	ldr	r3, [pc, #68]	@ (800268c <MX_I2C1_Init+0x74>)
 8002648:	2200      	movs	r2, #0
 800264a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800264c:	4b0f      	ldr	r3, [pc, #60]	@ (800268c <MX_I2C1_Init+0x74>)
 800264e:	2200      	movs	r2, #0
 8002650:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002652:	480e      	ldr	r0, [pc, #56]	@ (800268c <MX_I2C1_Init+0x74>)
 8002654:	f003 fb2a 	bl	8005cac <HAL_I2C_Init>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800265e:	f000 fb21 	bl	8002ca4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002662:	2100      	movs	r1, #0
 8002664:	4809      	ldr	r0, [pc, #36]	@ (800268c <MX_I2C1_Init+0x74>)
 8002666:	f003 fbbc 	bl	8005de2 <HAL_I2CEx_ConfigAnalogFilter>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002670:	f000 fb18 	bl	8002ca4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002674:	2100      	movs	r1, #0
 8002676:	4805      	ldr	r0, [pc, #20]	@ (800268c <MX_I2C1_Init+0x74>)
 8002678:	f003 fbfe 	bl	8005e78 <HAL_I2CEx_ConfigDigitalFilter>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002682:	f000 fb0f 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000318 	.word	0x20000318
 8002690:	40005400 	.word	0x40005400
 8002694:	10d19ce4 	.word	0x10d19ce4

08002698 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800269c:	4b1b      	ldr	r3, [pc, #108]	@ (800270c <MX_I2C2_Init+0x74>)
 800269e:	4a1c      	ldr	r2, [pc, #112]	@ (8002710 <MX_I2C2_Init+0x78>)
 80026a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80026a2:	4b1a      	ldr	r3, [pc, #104]	@ (800270c <MX_I2C2_Init+0x74>)
 80026a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002714 <MX_I2C2_Init+0x7c>)
 80026a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80026a8:	4b18      	ldr	r3, [pc, #96]	@ (800270c <MX_I2C2_Init+0x74>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026ae:	4b17      	ldr	r3, [pc, #92]	@ (800270c <MX_I2C2_Init+0x74>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026b4:	4b15      	ldr	r3, [pc, #84]	@ (800270c <MX_I2C2_Init+0x74>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80026ba:	4b14      	ldr	r3, [pc, #80]	@ (800270c <MX_I2C2_Init+0x74>)
 80026bc:	2200      	movs	r2, #0
 80026be:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026c0:	4b12      	ldr	r3, [pc, #72]	@ (800270c <MX_I2C2_Init+0x74>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026c6:	4b11      	ldr	r3, [pc, #68]	@ (800270c <MX_I2C2_Init+0x74>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026cc:	4b0f      	ldr	r3, [pc, #60]	@ (800270c <MX_I2C2_Init+0x74>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80026d2:	480e      	ldr	r0, [pc, #56]	@ (800270c <MX_I2C2_Init+0x74>)
 80026d4:	f003 faea 	bl	8005cac <HAL_I2C_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80026de:	f000 fae1 	bl	8002ca4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026e2:	2100      	movs	r1, #0
 80026e4:	4809      	ldr	r0, [pc, #36]	@ (800270c <MX_I2C2_Init+0x74>)
 80026e6:	f003 fb7c 	bl	8005de2 <HAL_I2CEx_ConfigAnalogFilter>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80026f0:	f000 fad8 	bl	8002ca4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80026f4:	2100      	movs	r1, #0
 80026f6:	4805      	ldr	r0, [pc, #20]	@ (800270c <MX_I2C2_Init+0x74>)
 80026f8:	f003 fbbe 	bl	8005e78 <HAL_I2CEx_ConfigDigitalFilter>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002702:	f000 facf 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	2000036c 	.word	0x2000036c
 8002710:	40005800 	.word	0x40005800
 8002714:	10d19ce4 	.word	0x10d19ce4

08002718 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800271c:	4b1b      	ldr	r3, [pc, #108]	@ (800278c <MX_I2C3_Init+0x74>)
 800271e:	4a1c      	ldr	r2, [pc, #112]	@ (8002790 <MX_I2C3_Init+0x78>)
 8002720:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 8002722:	4b1a      	ldr	r3, [pc, #104]	@ (800278c <MX_I2C3_Init+0x74>)
 8002724:	4a1b      	ldr	r2, [pc, #108]	@ (8002794 <MX_I2C3_Init+0x7c>)
 8002726:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002728:	4b18      	ldr	r3, [pc, #96]	@ (800278c <MX_I2C3_Init+0x74>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800272e:	4b17      	ldr	r3, [pc, #92]	@ (800278c <MX_I2C3_Init+0x74>)
 8002730:	2201      	movs	r2, #1
 8002732:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002734:	4b15      	ldr	r3, [pc, #84]	@ (800278c <MX_I2C3_Init+0x74>)
 8002736:	2200      	movs	r2, #0
 8002738:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800273a:	4b14      	ldr	r3, [pc, #80]	@ (800278c <MX_I2C3_Init+0x74>)
 800273c:	2200      	movs	r2, #0
 800273e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002740:	4b12      	ldr	r3, [pc, #72]	@ (800278c <MX_I2C3_Init+0x74>)
 8002742:	2200      	movs	r2, #0
 8002744:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002746:	4b11      	ldr	r3, [pc, #68]	@ (800278c <MX_I2C3_Init+0x74>)
 8002748:	2200      	movs	r2, #0
 800274a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800274c:	4b0f      	ldr	r3, [pc, #60]	@ (800278c <MX_I2C3_Init+0x74>)
 800274e:	2200      	movs	r2, #0
 8002750:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002752:	480e      	ldr	r0, [pc, #56]	@ (800278c <MX_I2C3_Init+0x74>)
 8002754:	f003 faaa 	bl	8005cac <HAL_I2C_Init>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800275e:	f000 faa1 	bl	8002ca4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002762:	2100      	movs	r1, #0
 8002764:	4809      	ldr	r0, [pc, #36]	@ (800278c <MX_I2C3_Init+0x74>)
 8002766:	f003 fb3c 	bl	8005de2 <HAL_I2CEx_ConfigAnalogFilter>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002770:	f000 fa98 	bl	8002ca4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002774:	2100      	movs	r1, #0
 8002776:	4805      	ldr	r0, [pc, #20]	@ (800278c <MX_I2C3_Init+0x74>)
 8002778:	f003 fb7e 	bl	8005e78 <HAL_I2CEx_ConfigDigitalFilter>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002782:	f000 fa8f 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	200003c0 	.word	0x200003c0
 8002790:	40005c00 	.word	0x40005c00
 8002794:	10d19ce4 	.word	0x10d19ce4

08002798 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800279c:	4b1b      	ldr	r3, [pc, #108]	@ (800280c <MX_SPI1_Init+0x74>)
 800279e:	4a1c      	ldr	r2, [pc, #112]	@ (8002810 <MX_SPI1_Init+0x78>)
 80027a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027a2:	4b1a      	ldr	r3, [pc, #104]	@ (800280c <MX_SPI1_Init+0x74>)
 80027a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80027a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027aa:	4b18      	ldr	r3, [pc, #96]	@ (800280c <MX_SPI1_Init+0x74>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027b0:	4b16      	ldr	r3, [pc, #88]	@ (800280c <MX_SPI1_Init+0x74>)
 80027b2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80027b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027b8:	4b14      	ldr	r3, [pc, #80]	@ (800280c <MX_SPI1_Init+0x74>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027be:	4b13      	ldr	r3, [pc, #76]	@ (800280c <MX_SPI1_Init+0x74>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027c4:	4b11      	ldr	r3, [pc, #68]	@ (800280c <MX_SPI1_Init+0x74>)
 80027c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80027cc:	4b0f      	ldr	r3, [pc, #60]	@ (800280c <MX_SPI1_Init+0x74>)
 80027ce:	2210      	movs	r2, #16
 80027d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027d2:	4b0e      	ldr	r3, [pc, #56]	@ (800280c <MX_SPI1_Init+0x74>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027d8:	4b0c      	ldr	r3, [pc, #48]	@ (800280c <MX_SPI1_Init+0x74>)
 80027da:	2200      	movs	r2, #0
 80027dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027de:	4b0b      	ldr	r3, [pc, #44]	@ (800280c <MX_SPI1_Init+0x74>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80027e4:	4b09      	ldr	r3, [pc, #36]	@ (800280c <MX_SPI1_Init+0x74>)
 80027e6:	2207      	movs	r2, #7
 80027e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027ea:	4b08      	ldr	r3, [pc, #32]	@ (800280c <MX_SPI1_Init+0x74>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027f0:	4b06      	ldr	r3, [pc, #24]	@ (800280c <MX_SPI1_Init+0x74>)
 80027f2:	2208      	movs	r2, #8
 80027f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027f6:	4805      	ldr	r0, [pc, #20]	@ (800280c <MX_SPI1_Init+0x74>)
 80027f8:	f004 ffee 	bl	80077d8 <HAL_SPI_Init>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002802:	f000 fa4f 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000414 	.word	0x20000414
 8002810:	40013000 	.word	0x40013000

08002814 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002818:	4b1b      	ldr	r3, [pc, #108]	@ (8002888 <MX_SPI2_Init+0x74>)
 800281a:	4a1c      	ldr	r2, [pc, #112]	@ (800288c <MX_SPI2_Init+0x78>)
 800281c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800281e:	4b1a      	ldr	r3, [pc, #104]	@ (8002888 <MX_SPI2_Init+0x74>)
 8002820:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002824:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002826:	4b18      	ldr	r3, [pc, #96]	@ (8002888 <MX_SPI2_Init+0x74>)
 8002828:	2200      	movs	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800282c:	4b16      	ldr	r3, [pc, #88]	@ (8002888 <MX_SPI2_Init+0x74>)
 800282e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002832:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002834:	4b14      	ldr	r3, [pc, #80]	@ (8002888 <MX_SPI2_Init+0x74>)
 8002836:	2200      	movs	r2, #0
 8002838:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800283a:	4b13      	ldr	r3, [pc, #76]	@ (8002888 <MX_SPI2_Init+0x74>)
 800283c:	2200      	movs	r2, #0
 800283e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002840:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <MX_SPI2_Init+0x74>)
 8002842:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002846:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002848:	4b0f      	ldr	r3, [pc, #60]	@ (8002888 <MX_SPI2_Init+0x74>)
 800284a:	2228      	movs	r2, #40	@ 0x28
 800284c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800284e:	4b0e      	ldr	r3, [pc, #56]	@ (8002888 <MX_SPI2_Init+0x74>)
 8002850:	2200      	movs	r2, #0
 8002852:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002854:	4b0c      	ldr	r3, [pc, #48]	@ (8002888 <MX_SPI2_Init+0x74>)
 8002856:	2200      	movs	r2, #0
 8002858:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800285a:	4b0b      	ldr	r3, [pc, #44]	@ (8002888 <MX_SPI2_Init+0x74>)
 800285c:	2200      	movs	r2, #0
 800285e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002860:	4b09      	ldr	r3, [pc, #36]	@ (8002888 <MX_SPI2_Init+0x74>)
 8002862:	2207      	movs	r2, #7
 8002864:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002866:	4b08      	ldr	r3, [pc, #32]	@ (8002888 <MX_SPI2_Init+0x74>)
 8002868:	2200      	movs	r2, #0
 800286a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800286c:	4b06      	ldr	r3, [pc, #24]	@ (8002888 <MX_SPI2_Init+0x74>)
 800286e:	2208      	movs	r2, #8
 8002870:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002872:	4805      	ldr	r0, [pc, #20]	@ (8002888 <MX_SPI2_Init+0x74>)
 8002874:	f004 ffb0 	bl	80077d8 <HAL_SPI_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800287e:	f000 fa11 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000478 	.word	0x20000478
 800288c:	40003800 	.word	0x40003800

08002890 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002894:	4b1b      	ldr	r3, [pc, #108]	@ (8002904 <MX_SPI3_Init+0x74>)
 8002896:	4a1c      	ldr	r2, [pc, #112]	@ (8002908 <MX_SPI3_Init+0x78>)
 8002898:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800289a:	4b1a      	ldr	r3, [pc, #104]	@ (8002904 <MX_SPI3_Init+0x74>)
 800289c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80028a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80028a2:	4b18      	ldr	r3, [pc, #96]	@ (8002904 <MX_SPI3_Init+0x74>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80028a8:	4b16      	ldr	r3, [pc, #88]	@ (8002904 <MX_SPI3_Init+0x74>)
 80028aa:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80028ae:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028b0:	4b14      	ldr	r3, [pc, #80]	@ (8002904 <MX_SPI3_Init+0x74>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028b6:	4b13      	ldr	r3, [pc, #76]	@ (8002904 <MX_SPI3_Init+0x74>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80028bc:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <MX_SPI3_Init+0x74>)
 80028be:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80028c2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002904 <MX_SPI3_Init+0x74>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002904 <MX_SPI3_Init+0x74>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80028d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002904 <MX_SPI3_Init+0x74>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002904 <MX_SPI3_Init+0x74>)
 80028d8:	2200      	movs	r2, #0
 80028da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80028dc:	4b09      	ldr	r3, [pc, #36]	@ (8002904 <MX_SPI3_Init+0x74>)
 80028de:	2207      	movs	r2, #7
 80028e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028e2:	4b08      	ldr	r3, [pc, #32]	@ (8002904 <MX_SPI3_Init+0x74>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80028e8:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <MX_SPI3_Init+0x74>)
 80028ea:	2208      	movs	r2, #8
 80028ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80028ee:	4805      	ldr	r0, [pc, #20]	@ (8002904 <MX_SPI3_Init+0x74>)
 80028f0:	f004 ff72 	bl	80077d8 <HAL_SPI_Init>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80028fa:	f000 f9d3 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	200004dc 	.word	0x200004dc
 8002908:	40003c00 	.word	0x40003c00

0800290c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002910:	4b14      	ldr	r3, [pc, #80]	@ (8002964 <MX_UART4_Init+0x58>)
 8002912:	4a15      	ldr	r2, [pc, #84]	@ (8002968 <MX_UART4_Init+0x5c>)
 8002914:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002916:	4b13      	ldr	r3, [pc, #76]	@ (8002964 <MX_UART4_Init+0x58>)
 8002918:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800291c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800291e:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <MX_UART4_Init+0x58>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002924:	4b0f      	ldr	r3, [pc, #60]	@ (8002964 <MX_UART4_Init+0x58>)
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800292a:	4b0e      	ldr	r3, [pc, #56]	@ (8002964 <MX_UART4_Init+0x58>)
 800292c:	2200      	movs	r2, #0
 800292e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002930:	4b0c      	ldr	r3, [pc, #48]	@ (8002964 <MX_UART4_Init+0x58>)
 8002932:	220c      	movs	r2, #12
 8002934:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002936:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <MX_UART4_Init+0x58>)
 8002938:	2200      	movs	r2, #0
 800293a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800293c:	4b09      	ldr	r3, [pc, #36]	@ (8002964 <MX_UART4_Init+0x58>)
 800293e:	2200      	movs	r2, #0
 8002940:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002942:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <MX_UART4_Init+0x58>)
 8002944:	2200      	movs	r2, #0
 8002946:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002948:	4b06      	ldr	r3, [pc, #24]	@ (8002964 <MX_UART4_Init+0x58>)
 800294a:	2200      	movs	r2, #0
 800294c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800294e:	4805      	ldr	r0, [pc, #20]	@ (8002964 <MX_UART4_Init+0x58>)
 8002950:	f005 fe6e 	bl	8008630 <HAL_UART_Init>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800295a:	f000 f9a3 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000540 	.word	0x20000540
 8002968:	40004c00 	.word	0x40004c00

0800296c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002970:	4b14      	ldr	r3, [pc, #80]	@ (80029c4 <MX_UART5_Init+0x58>)
 8002972:	4a15      	ldr	r2, [pc, #84]	@ (80029c8 <MX_UART5_Init+0x5c>)
 8002974:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002976:	4b13      	ldr	r3, [pc, #76]	@ (80029c4 <MX_UART5_Init+0x58>)
 8002978:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800297c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800297e:	4b11      	ldr	r3, [pc, #68]	@ (80029c4 <MX_UART5_Init+0x58>)
 8002980:	2200      	movs	r2, #0
 8002982:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002984:	4b0f      	ldr	r3, [pc, #60]	@ (80029c4 <MX_UART5_Init+0x58>)
 8002986:	2200      	movs	r2, #0
 8002988:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800298a:	4b0e      	ldr	r3, [pc, #56]	@ (80029c4 <MX_UART5_Init+0x58>)
 800298c:	2200      	movs	r2, #0
 800298e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002990:	4b0c      	ldr	r3, [pc, #48]	@ (80029c4 <MX_UART5_Init+0x58>)
 8002992:	220c      	movs	r2, #12
 8002994:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002996:	4b0b      	ldr	r3, [pc, #44]	@ (80029c4 <MX_UART5_Init+0x58>)
 8002998:	2200      	movs	r2, #0
 800299a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800299c:	4b09      	ldr	r3, [pc, #36]	@ (80029c4 <MX_UART5_Init+0x58>)
 800299e:	2200      	movs	r2, #0
 80029a0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029a2:	4b08      	ldr	r3, [pc, #32]	@ (80029c4 <MX_UART5_Init+0x58>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029a8:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <MX_UART5_Init+0x58>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80029ae:	4805      	ldr	r0, [pc, #20]	@ (80029c4 <MX_UART5_Init+0x58>)
 80029b0:	f005 fe3e 	bl	8008630 <HAL_UART_Init>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80029ba:	f000 f973 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	200005c8 	.word	0x200005c8
 80029c8:	40005000 	.word	0x40005000

080029cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029d0:	4b14      	ldr	r3, [pc, #80]	@ (8002a24 <MX_USART1_UART_Init+0x58>)
 80029d2:	4a15      	ldr	r2, [pc, #84]	@ (8002a28 <MX_USART1_UART_Init+0x5c>)
 80029d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029d6:	4b13      	ldr	r3, [pc, #76]	@ (8002a24 <MX_USART1_UART_Init+0x58>)
 80029d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80029dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029de:	4b11      	ldr	r3, [pc, #68]	@ (8002a24 <MX_USART1_UART_Init+0x58>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a24 <MX_USART1_UART_Init+0x58>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002a24 <MX_USART1_UART_Init+0x58>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a24 <MX_USART1_UART_Init+0x58>)
 80029f2:	220c      	movs	r2, #12
 80029f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002a24 <MX_USART1_UART_Init+0x58>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029fc:	4b09      	ldr	r3, [pc, #36]	@ (8002a24 <MX_USART1_UART_Init+0x58>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a02:	4b08      	ldr	r3, [pc, #32]	@ (8002a24 <MX_USART1_UART_Init+0x58>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a08:	4b06      	ldr	r3, [pc, #24]	@ (8002a24 <MX_USART1_UART_Init+0x58>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a0e:	4805      	ldr	r0, [pc, #20]	@ (8002a24 <MX_USART1_UART_Init+0x58>)
 8002a10:	f005 fe0e 	bl	8008630 <HAL_UART_Init>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002a1a:	f000 f943 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000650 	.word	0x20000650
 8002a28:	40013800 	.word	0x40013800

08002a2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a30:	4b14      	ldr	r3, [pc, #80]	@ (8002a84 <MX_USART2_UART_Init+0x58>)
 8002a32:	4a15      	ldr	r2, [pc, #84]	@ (8002a88 <MX_USART2_UART_Init+0x5c>)
 8002a34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a36:	4b13      	ldr	r3, [pc, #76]	@ (8002a84 <MX_USART2_UART_Init+0x58>)
 8002a38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a3e:	4b11      	ldr	r3, [pc, #68]	@ (8002a84 <MX_USART2_UART_Init+0x58>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a44:	4b0f      	ldr	r3, [pc, #60]	@ (8002a84 <MX_USART2_UART_Init+0x58>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a84 <MX_USART2_UART_Init+0x58>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a50:	4b0c      	ldr	r3, [pc, #48]	@ (8002a84 <MX_USART2_UART_Init+0x58>)
 8002a52:	220c      	movs	r2, #12
 8002a54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a56:	4b0b      	ldr	r3, [pc, #44]	@ (8002a84 <MX_USART2_UART_Init+0x58>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a5c:	4b09      	ldr	r3, [pc, #36]	@ (8002a84 <MX_USART2_UART_Init+0x58>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a62:	4b08      	ldr	r3, [pc, #32]	@ (8002a84 <MX_USART2_UART_Init+0x58>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a68:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <MX_USART2_UART_Init+0x58>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a6e:	4805      	ldr	r0, [pc, #20]	@ (8002a84 <MX_USART2_UART_Init+0x58>)
 8002a70:	f005 fdde 	bl	8008630 <HAL_UART_Init>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002a7a:	f000 f913 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	200006d8 	.word	0x200006d8
 8002a88:	40004400 	.word	0x40004400

08002a8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a90:	4b14      	ldr	r3, [pc, #80]	@ (8002ae4 <MX_USART3_UART_Init+0x58>)
 8002a92:	4a15      	ldr	r2, [pc, #84]	@ (8002ae8 <MX_USART3_UART_Init+0x5c>)
 8002a94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002a96:	4b13      	ldr	r3, [pc, #76]	@ (8002ae4 <MX_USART3_UART_Init+0x58>)
 8002a98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ae4 <MX_USART3_UART_Init+0x58>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae4 <MX_USART3_UART_Init+0x58>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae4 <MX_USART3_UART_Init+0x58>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae4 <MX_USART3_UART_Init+0x58>)
 8002ab2:	220c      	movs	r2, #12
 8002ab4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae4 <MX_USART3_UART_Init+0x58>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002abc:	4b09      	ldr	r3, [pc, #36]	@ (8002ae4 <MX_USART3_UART_Init+0x58>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ac2:	4b08      	ldr	r3, [pc, #32]	@ (8002ae4 <MX_USART3_UART_Init+0x58>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ac8:	4b06      	ldr	r3, [pc, #24]	@ (8002ae4 <MX_USART3_UART_Init+0x58>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ace:	4805      	ldr	r0, [pc, #20]	@ (8002ae4 <MX_USART3_UART_Init+0x58>)
 8002ad0:	f005 fdae 	bl	8008630 <HAL_UART_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002ada:	f000 f8e3 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000760 	.word	0x20000760
 8002ae8:	40004800 	.word	0x40004800

08002aec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002af0:	4b14      	ldr	r3, [pc, #80]	@ (8002b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002af2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002af6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002af8:	4b12      	ldr	r3, [pc, #72]	@ (8002b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002afa:	2206      	movs	r2, #6
 8002afc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002afe:	4b11      	ldr	r3, [pc, #68]	@ (8002b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b00:	2202      	movs	r2, #2
 8002b02:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002b04:	4b0f      	ldr	r3, [pc, #60]	@ (8002b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b06:	2202      	movs	r2, #2
 8002b08:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002b10:	4b0c      	ldr	r3, [pc, #48]	@ (8002b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002b16:	4b0b      	ldr	r3, [pc, #44]	@ (8002b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8002b1c:	4b09      	ldr	r3, [pc, #36]	@ (8002b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002b22:	4b08      	ldr	r3, [pc, #32]	@ (8002b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002b28:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002b2e:	4805      	ldr	r0, [pc, #20]	@ (8002b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b30:	f003 f9ee 	bl	8005f10 <HAL_PCD_Init>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002b3a:	f000 f8b3 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	200007e8 	.word	0x200007e8

08002b48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <MX_DMA_Init+0x38>)
 8002b50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b52:	4a0b      	ldr	r2, [pc, #44]	@ (8002b80 <MX_DMA_Init+0x38>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	6493      	str	r3, [r2, #72]	@ 0x48
 8002b5a:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <MX_DMA_Init+0x38>)
 8002b5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	607b      	str	r3, [r7, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002b66:	2200      	movs	r2, #0
 8002b68:	2100      	movs	r1, #0
 8002b6a:	200b      	movs	r0, #11
 8002b6c:	f002 fd3d 	bl	80055ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002b70:	200b      	movs	r0, #11
 8002b72:	f002 fd56 	bl	8005622 <HAL_NVIC_EnableIRQ>

}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40021000 	.word	0x40021000

08002b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	@ 0x28
 8002b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8a:	f107 0314 	add.w	r3, r7, #20
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	605a      	str	r2, [r3, #4]
 8002b94:	609a      	str	r2, [r3, #8]
 8002b96:	60da      	str	r2, [r3, #12]
 8002b98:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b9a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c98 <MX_GPIO_Init+0x114>)
 8002b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b9e:	4a3e      	ldr	r2, [pc, #248]	@ (8002c98 <MX_GPIO_Init+0x114>)
 8002ba0:	f043 0304 	orr.w	r3, r3, #4
 8002ba4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ba6:	4b3c      	ldr	r3, [pc, #240]	@ (8002c98 <MX_GPIO_Init+0x114>)
 8002ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb2:	4b39      	ldr	r3, [pc, #228]	@ (8002c98 <MX_GPIO_Init+0x114>)
 8002bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb6:	4a38      	ldr	r2, [pc, #224]	@ (8002c98 <MX_GPIO_Init+0x114>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bbe:	4b36      	ldr	r3, [pc, #216]	@ (8002c98 <MX_GPIO_Init+0x114>)
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bca:	4b33      	ldr	r3, [pc, #204]	@ (8002c98 <MX_GPIO_Init+0x114>)
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bce:	4a32      	ldr	r2, [pc, #200]	@ (8002c98 <MX_GPIO_Init+0x114>)
 8002bd0:	f043 0302 	orr.w	r3, r3, #2
 8002bd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bd6:	4b30      	ldr	r3, [pc, #192]	@ (8002c98 <MX_GPIO_Init+0x114>)
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002be2:	4b2d      	ldr	r3, [pc, #180]	@ (8002c98 <MX_GPIO_Init+0x114>)
 8002be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be6:	4a2c      	ldr	r2, [pc, #176]	@ (8002c98 <MX_GPIO_Init+0x114>)
 8002be8:	f043 0308 	orr.w	r3, r3, #8
 8002bec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bee:	4b2a      	ldr	r3, [pc, #168]	@ (8002c98 <MX_GPIO_Init+0x114>)
 8002bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	607b      	str	r3, [r7, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2110      	movs	r1, #16
 8002bfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c02:	f003 f83b 	bl	8005c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8002c06:	2200      	movs	r2, #0
 8002c08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c0c:	4823      	ldr	r0, [pc, #140]	@ (8002c9c <MX_GPIO_Init+0x118>)
 8002c0e:	f003 f835 	bl	8005c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_OK_Pin|LED_ERROR_Pin, GPIO_PIN_RESET);
 8002c12:	2200      	movs	r2, #0
 8002c14:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8002c18:	4821      	ldr	r0, [pc, #132]	@ (8002ca0 <MX_GPIO_Init+0x11c>)
 8002c1a:	f003 f82f 	bl	8005c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8002c1e:	2310      	movs	r3, #16
 8002c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c22:	2301      	movs	r3, #1
 8002c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002c2e:	f107 0314 	add.w	r3, r7, #20
 8002c32:	4619      	mov	r1, r3
 8002c34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c38:	f002 fe76 	bl	8005928 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8002c3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c42:	2301      	movs	r3, #1
 8002c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002c4e:	f107 0314 	add.w	r3, r7, #20
 8002c52:	4619      	mov	r1, r3
 8002c54:	4811      	ldr	r0, [pc, #68]	@ (8002c9c <MX_GPIO_Init+0x118>)
 8002c56:	f002 fe67 	bl	8005928 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_CARD_DETECT_Pin;
 8002c5a:	2340      	movs	r3, #64	@ 0x40
 8002c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8002c66:	f107 0314 	add.w	r3, r7, #20
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	480c      	ldr	r0, [pc, #48]	@ (8002ca0 <MX_GPIO_Init+0x11c>)
 8002c6e:	f002 fe5b 	bl	8005928 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_OK_Pin LED_ERROR_Pin */
  GPIO_InitStruct.Pin = LED_OK_Pin|LED_ERROR_Pin;
 8002c72:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c80:	2300      	movs	r3, #0
 8002c82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c84:	f107 0314 	add.w	r3, r7, #20
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4805      	ldr	r0, [pc, #20]	@ (8002ca0 <MX_GPIO_Init+0x11c>)
 8002c8c:	f002 fe4c 	bl	8005928 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002c90:	bf00      	nop
 8002c92:	3728      	adds	r7, #40	@ 0x28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	48000400 	.word	0x48000400
 8002ca0:	48000800 	.word	0x48000800

08002ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ca8:	b672      	cpsid	i
}
 8002caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cac:	bf00      	nop
 8002cae:	e7fd      	b.n	8002cac <Error_Handler+0x8>

08002cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf4 <HAL_MspInit+0x44>)
 8002cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cba:	4a0e      	ldr	r2, [pc, #56]	@ (8002cf4 <HAL_MspInit+0x44>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf4 <HAL_MspInit+0x44>)
 8002cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	607b      	str	r3, [r7, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cce:	4b09      	ldr	r3, [pc, #36]	@ (8002cf4 <HAL_MspInit+0x44>)
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd2:	4a08      	ldr	r2, [pc, #32]	@ (8002cf4 <HAL_MspInit+0x44>)
 8002cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cda:	4b06      	ldr	r3, [pc, #24]	@ (8002cf4 <HAL_MspInit+0x44>)
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40021000 	.word	0x40021000

08002cf8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08a      	sub	sp, #40	@ 0x28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a2a      	ldr	r2, [pc, #168]	@ (8002dc0 <HAL_ADC_MspInit+0xc8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d14e      	bne.n	8002db8 <HAL_ADC_MspInit+0xc0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc4 <HAL_ADC_MspInit+0xcc>)
 8002d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d1e:	4a29      	ldr	r2, [pc, #164]	@ (8002dc4 <HAL_ADC_MspInit+0xcc>)
 8002d20:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d26:	4b27      	ldr	r3, [pc, #156]	@ (8002dc4 <HAL_ADC_MspInit+0xcc>)
 8002d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d32:	4b24      	ldr	r3, [pc, #144]	@ (8002dc4 <HAL_ADC_MspInit+0xcc>)
 8002d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d36:	4a23      	ldr	r2, [pc, #140]	@ (8002dc4 <HAL_ADC_MspInit+0xcc>)
 8002d38:	f043 0304 	orr.w	r3, r3, #4
 8002d3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d3e:	4b21      	ldr	r3, [pc, #132]	@ (8002dc4 <HAL_ADC_MspInit+0xcc>)
 8002d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d42:	f003 0304 	and.w	r3, r3, #4
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002d4e:	230b      	movs	r3, #11
 8002d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d56:	f107 0314 	add.w	r3, r7, #20
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	481a      	ldr	r0, [pc, #104]	@ (8002dc8 <HAL_ADC_MspInit+0xd0>)
 8002d5e:	f002 fde3 	bl	8005928 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002d62:	4b1a      	ldr	r3, [pc, #104]	@ (8002dcc <HAL_ADC_MspInit+0xd4>)
 8002d64:	4a1a      	ldr	r2, [pc, #104]	@ (8002dd0 <HAL_ADC_MspInit+0xd8>)
 8002d66:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002d68:	4b18      	ldr	r3, [pc, #96]	@ (8002dcc <HAL_ADC_MspInit+0xd4>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d6e:	4b17      	ldr	r3, [pc, #92]	@ (8002dcc <HAL_ADC_MspInit+0xd4>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d74:	4b15      	ldr	r3, [pc, #84]	@ (8002dcc <HAL_ADC_MspInit+0xd4>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d7a:	4b14      	ldr	r3, [pc, #80]	@ (8002dcc <HAL_ADC_MspInit+0xd4>)
 8002d7c:	2280      	movs	r2, #128	@ 0x80
 8002d7e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d80:	4b12      	ldr	r3, [pc, #72]	@ (8002dcc <HAL_ADC_MspInit+0xd4>)
 8002d82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d86:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d88:	4b10      	ldr	r3, [pc, #64]	@ (8002dcc <HAL_ADC_MspInit+0xd4>)
 8002d8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d8e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002d90:	4b0e      	ldr	r3, [pc, #56]	@ (8002dcc <HAL_ADC_MspInit+0xd4>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d96:	4b0d      	ldr	r3, [pc, #52]	@ (8002dcc <HAL_ADC_MspInit+0xd4>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d9c:	480b      	ldr	r0, [pc, #44]	@ (8002dcc <HAL_ADC_MspInit+0xd4>)
 8002d9e:	f002 fc5b 	bl	8005658 <HAL_DMA_Init>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8002da8:	f7ff ff7c 	bl	8002ca4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a07      	ldr	r2, [pc, #28]	@ (8002dcc <HAL_ADC_MspInit+0xd4>)
 8002db0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002db2:	4a06      	ldr	r2, [pc, #24]	@ (8002dcc <HAL_ADC_MspInit+0xd4>)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002db8:	bf00      	nop
 8002dba:	3728      	adds	r7, #40	@ 0x28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	50040000 	.word	0x50040000
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	48000800 	.word	0x48000800
 8002dcc:	200002d0 	.word	0x200002d0
 8002dd0:	40020008 	.word	0x40020008

08002dd4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b0b0      	sub	sp, #192	@ 0xc0
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ddc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002df0:	2288      	movs	r2, #136	@ 0x88
 8002df2:	2100      	movs	r1, #0
 8002df4:	4618      	mov	r0, r3
 8002df6:	f008 f823 	bl	800ae40 <memset>
  if(hi2c->Instance==I2C1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a63      	ldr	r2, [pc, #396]	@ (8002f8c <HAL_I2C_MspInit+0x1b8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d13b      	bne.n	8002e7c <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002e04:	2340      	movs	r3, #64	@ 0x40
 8002e06:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e10:	4618      	mov	r0, r3
 8002e12:	f004 f825 	bl	8006e60 <HAL_RCCEx_PeriphCLKConfig>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002e1c:	f7ff ff42 	bl	8002ca4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e20:	4b5b      	ldr	r3, [pc, #364]	@ (8002f90 <HAL_I2C_MspInit+0x1bc>)
 8002e22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e24:	4a5a      	ldr	r2, [pc, #360]	@ (8002f90 <HAL_I2C_MspInit+0x1bc>)
 8002e26:	f043 0302 	orr.w	r3, r3, #2
 8002e2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e2c:	4b58      	ldr	r3, [pc, #352]	@ (8002f90 <HAL_I2C_MspInit+0x1bc>)
 8002e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	623b      	str	r3, [r7, #32]
 8002e36:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e38:	23c0      	movs	r3, #192	@ 0xc0
 8002e3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e3e:	2312      	movs	r3, #18
 8002e40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e50:	2304      	movs	r3, #4
 8002e52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e56:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	484d      	ldr	r0, [pc, #308]	@ (8002f94 <HAL_I2C_MspInit+0x1c0>)
 8002e5e:	f002 fd63 	bl	8005928 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e62:	4b4b      	ldr	r3, [pc, #300]	@ (8002f90 <HAL_I2C_MspInit+0x1bc>)
 8002e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e66:	4a4a      	ldr	r2, [pc, #296]	@ (8002f90 <HAL_I2C_MspInit+0x1bc>)
 8002e68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002e6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e6e:	4b48      	ldr	r3, [pc, #288]	@ (8002f90 <HAL_I2C_MspInit+0x1bc>)
 8002e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e76:	61fb      	str	r3, [r7, #28]
 8002e78:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002e7a:	e082      	b.n	8002f82 <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C2)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a45      	ldr	r2, [pc, #276]	@ (8002f98 <HAL_I2C_MspInit+0x1c4>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d13c      	bne.n	8002f00 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002e86:	2380      	movs	r3, #128	@ 0x80
 8002e88:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e92:	4618      	mov	r0, r3
 8002e94:	f003 ffe4 	bl	8006e60 <HAL_RCCEx_PeriphCLKConfig>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8002e9e:	f7ff ff01 	bl	8002ca4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8002f90 <HAL_I2C_MspInit+0x1bc>)
 8002ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea6:	4a3a      	ldr	r2, [pc, #232]	@ (8002f90 <HAL_I2C_MspInit+0x1bc>)
 8002ea8:	f043 0302 	orr.w	r3, r3, #2
 8002eac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002eae:	4b38      	ldr	r3, [pc, #224]	@ (8002f90 <HAL_I2C_MspInit+0x1bc>)
 8002eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	61bb      	str	r3, [r7, #24]
 8002eb8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002eba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002ebe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ec2:	2312      	movs	r3, #18
 8002ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eda:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002ede:	4619      	mov	r1, r3
 8002ee0:	482c      	ldr	r0, [pc, #176]	@ (8002f94 <HAL_I2C_MspInit+0x1c0>)
 8002ee2:	f002 fd21 	bl	8005928 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8002f90 <HAL_I2C_MspInit+0x1bc>)
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eea:	4a29      	ldr	r2, [pc, #164]	@ (8002f90 <HAL_I2C_MspInit+0x1bc>)
 8002eec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ef0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ef2:	4b27      	ldr	r3, [pc, #156]	@ (8002f90 <HAL_I2C_MspInit+0x1bc>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	697b      	ldr	r3, [r7, #20]
}
 8002efe:	e040      	b.n	8002f82 <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C3)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a25      	ldr	r2, [pc, #148]	@ (8002f9c <HAL_I2C_MspInit+0x1c8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d13b      	bne.n	8002f82 <HAL_I2C_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002f0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f0e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002f10:	2300      	movs	r3, #0
 8002f12:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f003 ffa1 	bl	8006e60 <HAL_RCCEx_PeriphCLKConfig>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <HAL_I2C_MspInit+0x154>
      Error_Handler();
 8002f24:	f7ff febe 	bl	8002ca4 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f28:	4b19      	ldr	r3, [pc, #100]	@ (8002f90 <HAL_I2C_MspInit+0x1bc>)
 8002f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f2c:	4a18      	ldr	r2, [pc, #96]	@ (8002f90 <HAL_I2C_MspInit+0x1bc>)
 8002f2e:	f043 0304 	orr.w	r3, r3, #4
 8002f32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f34:	4b16      	ldr	r3, [pc, #88]	@ (8002f90 <HAL_I2C_MspInit+0x1bc>)
 8002f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f40:	2303      	movs	r3, #3
 8002f42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f46:	2312      	movs	r3, #18
 8002f48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f52:	2303      	movs	r3, #3
 8002f54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f58:	2304      	movs	r3, #4
 8002f5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f5e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002f62:	4619      	mov	r1, r3
 8002f64:	480e      	ldr	r0, [pc, #56]	@ (8002fa0 <HAL_I2C_MspInit+0x1cc>)
 8002f66:	f002 fcdf 	bl	8005928 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002f6a:	4b09      	ldr	r3, [pc, #36]	@ (8002f90 <HAL_I2C_MspInit+0x1bc>)
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6e:	4a08      	ldr	r2, [pc, #32]	@ (8002f90 <HAL_I2C_MspInit+0x1bc>)
 8002f70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f74:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f76:	4b06      	ldr	r3, [pc, #24]	@ (8002f90 <HAL_I2C_MspInit+0x1bc>)
 8002f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
}
 8002f82:	bf00      	nop
 8002f84:	37c0      	adds	r7, #192	@ 0xc0
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40005400 	.word	0x40005400
 8002f90:	40021000 	.word	0x40021000
 8002f94:	48000400 	.word	0x48000400
 8002f98:	40005800 	.word	0x40005800
 8002f9c:	40005c00 	.word	0x40005c00
 8002fa0:	48000800 	.word	0x48000800

08002fa4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b090      	sub	sp, #64	@ 0x40
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	605a      	str	r2, [r3, #4]
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a63      	ldr	r2, [pc, #396]	@ (8003150 <HAL_SPI_MspInit+0x1ac>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d129      	bne.n	800301a <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fc6:	4b63      	ldr	r3, [pc, #396]	@ (8003154 <HAL_SPI_MspInit+0x1b0>)
 8002fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fca:	4a62      	ldr	r2, [pc, #392]	@ (8003154 <HAL_SPI_MspInit+0x1b0>)
 8002fcc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fd2:	4b60      	ldr	r3, [pc, #384]	@ (8003154 <HAL_SPI_MspInit+0x1b0>)
 8002fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fde:	4b5d      	ldr	r3, [pc, #372]	@ (8003154 <HAL_SPI_MspInit+0x1b0>)
 8002fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fe2:	4a5c      	ldr	r2, [pc, #368]	@ (8003154 <HAL_SPI_MspInit+0x1b0>)
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fea:	4b5a      	ldr	r3, [pc, #360]	@ (8003154 <HAL_SPI_MspInit+0x1b0>)
 8002fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002ff6:	23e0      	movs	r3, #224	@ 0xe0
 8002ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003002:	2303      	movs	r3, #3
 8003004:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003006:	2305      	movs	r3, #5
 8003008:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800300a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800300e:	4619      	mov	r1, r3
 8003010:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003014:	f002 fc88 	bl	8005928 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003018:	e096      	b.n	8003148 <HAL_SPI_MspInit+0x1a4>
  else if(hspi->Instance==SPI2)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a4e      	ldr	r2, [pc, #312]	@ (8003158 <HAL_SPI_MspInit+0x1b4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d129      	bne.n	8003078 <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003024:	4b4b      	ldr	r3, [pc, #300]	@ (8003154 <HAL_SPI_MspInit+0x1b0>)
 8003026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003028:	4a4a      	ldr	r2, [pc, #296]	@ (8003154 <HAL_SPI_MspInit+0x1b0>)
 800302a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800302e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003030:	4b48      	ldr	r3, [pc, #288]	@ (8003154 <HAL_SPI_MspInit+0x1b0>)
 8003032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003034:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003038:	623b      	str	r3, [r7, #32]
 800303a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800303c:	4b45      	ldr	r3, [pc, #276]	@ (8003154 <HAL_SPI_MspInit+0x1b0>)
 800303e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003040:	4a44      	ldr	r2, [pc, #272]	@ (8003154 <HAL_SPI_MspInit+0x1b0>)
 8003042:	f043 0302 	orr.w	r3, r3, #2
 8003046:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003048:	4b42      	ldr	r3, [pc, #264]	@ (8003154 <HAL_SPI_MspInit+0x1b0>)
 800304a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003054:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003058:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003062:	2303      	movs	r3, #3
 8003064:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003066:	2305      	movs	r3, #5
 8003068:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800306a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800306e:	4619      	mov	r1, r3
 8003070:	483a      	ldr	r0, [pc, #232]	@ (800315c <HAL_SPI_MspInit+0x1b8>)
 8003072:	f002 fc59 	bl	8005928 <HAL_GPIO_Init>
}
 8003076:	e067      	b.n	8003148 <HAL_SPI_MspInit+0x1a4>
  else if(hspi->Instance==SPI3)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a38      	ldr	r2, [pc, #224]	@ (8003160 <HAL_SPI_MspInit+0x1bc>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d162      	bne.n	8003148 <HAL_SPI_MspInit+0x1a4>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003082:	4b34      	ldr	r3, [pc, #208]	@ (8003154 <HAL_SPI_MspInit+0x1b0>)
 8003084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003086:	4a33      	ldr	r2, [pc, #204]	@ (8003154 <HAL_SPI_MspInit+0x1b0>)
 8003088:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800308c:	6593      	str	r3, [r2, #88]	@ 0x58
 800308e:	4b31      	ldr	r3, [pc, #196]	@ (8003154 <HAL_SPI_MspInit+0x1b0>)
 8003090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003092:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003096:	61bb      	str	r3, [r7, #24]
 8003098:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800309a:	4b2e      	ldr	r3, [pc, #184]	@ (8003154 <HAL_SPI_MspInit+0x1b0>)
 800309c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800309e:	4a2d      	ldr	r2, [pc, #180]	@ (8003154 <HAL_SPI_MspInit+0x1b0>)
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003154 <HAL_SPI_MspInit+0x1b0>)
 80030a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030b2:	4b28      	ldr	r3, [pc, #160]	@ (8003154 <HAL_SPI_MspInit+0x1b0>)
 80030b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030b6:	4a27      	ldr	r2, [pc, #156]	@ (8003154 <HAL_SPI_MspInit+0x1b0>)
 80030b8:	f043 0304 	orr.w	r3, r3, #4
 80030bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030be:	4b25      	ldr	r3, [pc, #148]	@ (8003154 <HAL_SPI_MspInit+0x1b0>)
 80030c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ca:	4b22      	ldr	r3, [pc, #136]	@ (8003154 <HAL_SPI_MspInit+0x1b0>)
 80030cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ce:	4a21      	ldr	r2, [pc, #132]	@ (8003154 <HAL_SPI_MspInit+0x1b0>)
 80030d0:	f043 0302 	orr.w	r3, r3, #2
 80030d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030d6:	4b1f      	ldr	r3, [pc, #124]	@ (8003154 <HAL_SPI_MspInit+0x1b0>)
 80030d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80030e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e8:	2302      	movs	r3, #2
 80030ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f0:	2303      	movs	r3, #3
 80030f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80030f4:	2306      	movs	r3, #6
 80030f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030fc:	4619      	mov	r1, r3
 80030fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003102:	f002 fc11 	bl	8005928 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003106:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800310a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310c:	2302      	movs	r3, #2
 800310e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003110:	2300      	movs	r3, #0
 8003112:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003114:	2303      	movs	r3, #3
 8003116:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003118:	2306      	movs	r3, #6
 800311a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800311c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003120:	4619      	mov	r1, r3
 8003122:	4810      	ldr	r0, [pc, #64]	@ (8003164 <HAL_SPI_MspInit+0x1c0>)
 8003124:	f002 fc00 	bl	8005928 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003128:	2320      	movs	r3, #32
 800312a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312c:	2302      	movs	r3, #2
 800312e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003130:	2300      	movs	r3, #0
 8003132:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003134:	2303      	movs	r3, #3
 8003136:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003138:	2306      	movs	r3, #6
 800313a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800313c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003140:	4619      	mov	r1, r3
 8003142:	4806      	ldr	r0, [pc, #24]	@ (800315c <HAL_SPI_MspInit+0x1b8>)
 8003144:	f002 fbf0 	bl	8005928 <HAL_GPIO_Init>
}
 8003148:	bf00      	nop
 800314a:	3740      	adds	r7, #64	@ 0x40
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40013000 	.word	0x40013000
 8003154:	40021000 	.word	0x40021000
 8003158:	40003800 	.word	0x40003800
 800315c:	48000400 	.word	0x48000400
 8003160:	40003c00 	.word	0x40003c00
 8003164:	48000800 	.word	0x48000800

08003168 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b0b4      	sub	sp, #208	@ 0xd0
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003170:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	605a      	str	r2, [r3, #4]
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	60da      	str	r2, [r3, #12]
 800317e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003180:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003184:	2288      	movs	r2, #136	@ 0x88
 8003186:	2100      	movs	r1, #0
 8003188:	4618      	mov	r0, r3
 800318a:	f007 fe59 	bl	800ae40 <memset>
  if(huart->Instance==UART4)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4ab6      	ldr	r2, [pc, #728]	@ (800346c <HAL_UART_MspInit+0x304>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d13c      	bne.n	8003212 <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003198:	2308      	movs	r3, #8
 800319a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800319c:	2300      	movs	r3, #0
 800319e:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031a0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80031a4:	4618      	mov	r0, r3
 80031a6:	f003 fe5b 	bl	8006e60 <HAL_RCCEx_PeriphCLKConfig>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80031b0:	f7ff fd78 	bl	8002ca4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80031b4:	4bae      	ldr	r3, [pc, #696]	@ (8003470 <HAL_UART_MspInit+0x308>)
 80031b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b8:	4aad      	ldr	r2, [pc, #692]	@ (8003470 <HAL_UART_MspInit+0x308>)
 80031ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80031be:	6593      	str	r3, [r2, #88]	@ 0x58
 80031c0:	4bab      	ldr	r3, [pc, #684]	@ (8003470 <HAL_UART_MspInit+0x308>)
 80031c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80031ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031cc:	4ba8      	ldr	r3, [pc, #672]	@ (8003470 <HAL_UART_MspInit+0x308>)
 80031ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031d0:	4aa7      	ldr	r2, [pc, #668]	@ (8003470 <HAL_UART_MspInit+0x308>)
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031d8:	4ba5      	ldr	r3, [pc, #660]	@ (8003470 <HAL_UART_MspInit+0x308>)
 80031da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80031e4:	2303      	movs	r3, #3
 80031e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ea:	2302      	movs	r3, #2
 80031ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f6:	2303      	movs	r3, #3
 80031f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80031fc:	2308      	movs	r3, #8
 80031fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003202:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003206:	4619      	mov	r1, r3
 8003208:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800320c:	f002 fb8c 	bl	8005928 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8003210:	e127      	b.n	8003462 <HAL_UART_MspInit+0x2fa>
  else if(huart->Instance==UART5)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a97      	ldr	r2, [pc, #604]	@ (8003474 <HAL_UART_MspInit+0x30c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d15d      	bne.n	80032d8 <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800321c:	2310      	movs	r3, #16
 800321e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003220:	2300      	movs	r3, #0
 8003222:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003224:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003228:	4618      	mov	r0, r3
 800322a:	f003 fe19 	bl	8006e60 <HAL_RCCEx_PeriphCLKConfig>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8003234:	f7ff fd36 	bl	8002ca4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003238:	4b8d      	ldr	r3, [pc, #564]	@ (8003470 <HAL_UART_MspInit+0x308>)
 800323a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323c:	4a8c      	ldr	r2, [pc, #560]	@ (8003470 <HAL_UART_MspInit+0x308>)
 800323e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003242:	6593      	str	r3, [r2, #88]	@ 0x58
 8003244:	4b8a      	ldr	r3, [pc, #552]	@ (8003470 <HAL_UART_MspInit+0x308>)
 8003246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003248:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800324c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800324e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003250:	4b87      	ldr	r3, [pc, #540]	@ (8003470 <HAL_UART_MspInit+0x308>)
 8003252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003254:	4a86      	ldr	r2, [pc, #536]	@ (8003470 <HAL_UART_MspInit+0x308>)
 8003256:	f043 0304 	orr.w	r3, r3, #4
 800325a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800325c:	4b84      	ldr	r3, [pc, #528]	@ (8003470 <HAL_UART_MspInit+0x308>)
 800325e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	627b      	str	r3, [r7, #36]	@ 0x24
 8003266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003268:	4b81      	ldr	r3, [pc, #516]	@ (8003470 <HAL_UART_MspInit+0x308>)
 800326a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800326c:	4a80      	ldr	r2, [pc, #512]	@ (8003470 <HAL_UART_MspInit+0x308>)
 800326e:	f043 0308 	orr.w	r3, r3, #8
 8003272:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003274:	4b7e      	ldr	r3, [pc, #504]	@ (8003470 <HAL_UART_MspInit+0x308>)
 8003276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	623b      	str	r3, [r7, #32]
 800327e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003280:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003284:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003288:	2302      	movs	r3, #2
 800328a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328e:	2300      	movs	r3, #0
 8003290:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003294:	2303      	movs	r3, #3
 8003296:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800329a:	2308      	movs	r3, #8
 800329c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032a0:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80032a4:	4619      	mov	r1, r3
 80032a6:	4874      	ldr	r0, [pc, #464]	@ (8003478 <HAL_UART_MspInit+0x310>)
 80032a8:	f002 fb3e 	bl	8005928 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80032ac:	2304      	movs	r3, #4
 80032ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b2:	2302      	movs	r3, #2
 80032b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032be:	2303      	movs	r3, #3
 80032c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80032c4:	2308      	movs	r3, #8
 80032c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032ca:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80032ce:	4619      	mov	r1, r3
 80032d0:	486a      	ldr	r0, [pc, #424]	@ (800347c <HAL_UART_MspInit+0x314>)
 80032d2:	f002 fb29 	bl	8005928 <HAL_GPIO_Init>
}
 80032d6:	e0c4      	b.n	8003462 <HAL_UART_MspInit+0x2fa>
  else if(huart->Instance==USART1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a68      	ldr	r2, [pc, #416]	@ (8003480 <HAL_UART_MspInit+0x318>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d13d      	bne.n	800335e <HAL_UART_MspInit+0x1f6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80032e2:	2301      	movs	r3, #1
 80032e4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80032e6:	2300      	movs	r3, #0
 80032e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80032ee:	4618      	mov	r0, r3
 80032f0:	f003 fdb6 	bl	8006e60 <HAL_RCCEx_PeriphCLKConfig>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_UART_MspInit+0x196>
      Error_Handler();
 80032fa:	f7ff fcd3 	bl	8002ca4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80032fe:	4b5c      	ldr	r3, [pc, #368]	@ (8003470 <HAL_UART_MspInit+0x308>)
 8003300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003302:	4a5b      	ldr	r2, [pc, #364]	@ (8003470 <HAL_UART_MspInit+0x308>)
 8003304:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003308:	6613      	str	r3, [r2, #96]	@ 0x60
 800330a:	4b59      	ldr	r3, [pc, #356]	@ (8003470 <HAL_UART_MspInit+0x308>)
 800330c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800330e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003312:	61fb      	str	r3, [r7, #28]
 8003314:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003316:	4b56      	ldr	r3, [pc, #344]	@ (8003470 <HAL_UART_MspInit+0x308>)
 8003318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331a:	4a55      	ldr	r2, [pc, #340]	@ (8003470 <HAL_UART_MspInit+0x308>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003322:	4b53      	ldr	r3, [pc, #332]	@ (8003470 <HAL_UART_MspInit+0x308>)
 8003324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	61bb      	str	r3, [r7, #24]
 800332c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800332e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003332:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003336:	2302      	movs	r3, #2
 8003338:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333c:	2300      	movs	r3, #0
 800333e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003342:	2303      	movs	r3, #3
 8003344:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003348:	2307      	movs	r3, #7
 800334a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800334e:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003352:	4619      	mov	r1, r3
 8003354:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003358:	f002 fae6 	bl	8005928 <HAL_GPIO_Init>
}
 800335c:	e081      	b.n	8003462 <HAL_UART_MspInit+0x2fa>
  else if(huart->Instance==USART2)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a48      	ldr	r2, [pc, #288]	@ (8003484 <HAL_UART_MspInit+0x31c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d13c      	bne.n	80033e2 <HAL_UART_MspInit+0x27a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003368:	2302      	movs	r3, #2
 800336a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800336c:	2300      	movs	r3, #0
 800336e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003370:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003374:	4618      	mov	r0, r3
 8003376:	f003 fd73 	bl	8006e60 <HAL_RCCEx_PeriphCLKConfig>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_UART_MspInit+0x21c>
      Error_Handler();
 8003380:	f7ff fc90 	bl	8002ca4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003384:	4b3a      	ldr	r3, [pc, #232]	@ (8003470 <HAL_UART_MspInit+0x308>)
 8003386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003388:	4a39      	ldr	r2, [pc, #228]	@ (8003470 <HAL_UART_MspInit+0x308>)
 800338a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800338e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003390:	4b37      	ldr	r3, [pc, #220]	@ (8003470 <HAL_UART_MspInit+0x308>)
 8003392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800339c:	4b34      	ldr	r3, [pc, #208]	@ (8003470 <HAL_UART_MspInit+0x308>)
 800339e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033a0:	4a33      	ldr	r2, [pc, #204]	@ (8003470 <HAL_UART_MspInit+0x308>)
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033a8:	4b31      	ldr	r3, [pc, #196]	@ (8003470 <HAL_UART_MspInit+0x308>)
 80033aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80033b4:	230c      	movs	r3, #12
 80033b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ba:	2302      	movs	r3, #2
 80033bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c6:	2303      	movs	r3, #3
 80033c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033cc:	2307      	movs	r3, #7
 80033ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d2:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80033d6:	4619      	mov	r1, r3
 80033d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033dc:	f002 faa4 	bl	8005928 <HAL_GPIO_Init>
}
 80033e0:	e03f      	b.n	8003462 <HAL_UART_MspInit+0x2fa>
  else if(huart->Instance==USART3)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a28      	ldr	r2, [pc, #160]	@ (8003488 <HAL_UART_MspInit+0x320>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d13a      	bne.n	8003462 <HAL_UART_MspInit+0x2fa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80033ec:	2304      	movs	r3, #4
 80033ee:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80033f0:	2300      	movs	r3, #0
 80033f2:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80033f8:	4618      	mov	r0, r3
 80033fa:	f003 fd31 	bl	8006e60 <HAL_RCCEx_PeriphCLKConfig>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_UART_MspInit+0x2a0>
      Error_Handler();
 8003404:	f7ff fc4e 	bl	8002ca4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003408:	4b19      	ldr	r3, [pc, #100]	@ (8003470 <HAL_UART_MspInit+0x308>)
 800340a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340c:	4a18      	ldr	r2, [pc, #96]	@ (8003470 <HAL_UART_MspInit+0x308>)
 800340e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003412:	6593      	str	r3, [r2, #88]	@ 0x58
 8003414:	4b16      	ldr	r3, [pc, #88]	@ (8003470 <HAL_UART_MspInit+0x308>)
 8003416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003418:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003420:	4b13      	ldr	r3, [pc, #76]	@ (8003470 <HAL_UART_MspInit+0x308>)
 8003422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003424:	4a12      	ldr	r2, [pc, #72]	@ (8003470 <HAL_UART_MspInit+0x308>)
 8003426:	f043 0304 	orr.w	r3, r3, #4
 800342a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800342c:	4b10      	ldr	r3, [pc, #64]	@ (8003470 <HAL_UART_MspInit+0x308>)
 800342e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003438:	2330      	movs	r3, #48	@ 0x30
 800343a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343e:	2302      	movs	r3, #2
 8003440:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003444:	2300      	movs	r3, #0
 8003446:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800344a:	2303      	movs	r3, #3
 800344c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003450:	2307      	movs	r3, #7
 8003452:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003456:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800345a:	4619      	mov	r1, r3
 800345c:	4806      	ldr	r0, [pc, #24]	@ (8003478 <HAL_UART_MspInit+0x310>)
 800345e:	f002 fa63 	bl	8005928 <HAL_GPIO_Init>
}
 8003462:	bf00      	nop
 8003464:	37d0      	adds	r7, #208	@ 0xd0
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40004c00 	.word	0x40004c00
 8003470:	40021000 	.word	0x40021000
 8003474:	40005000 	.word	0x40005000
 8003478:	48000800 	.word	0x48000800
 800347c:	48000c00 	.word	0x48000c00
 8003480:	40013800 	.word	0x40013800
 8003484:	40004400 	.word	0x40004400
 8003488:	40004800 	.word	0x40004800

0800348c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	@ 0x28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003494:	f107 0314 	add.w	r3, r7, #20
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	60da      	str	r2, [r3, #12]
 80034a2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034ac:	d146      	bne.n	800353c <HAL_PCD_MspInit+0xb0>
  {
    /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

    /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ae:	4b25      	ldr	r3, [pc, #148]	@ (8003544 <HAL_PCD_MspInit+0xb8>)
 80034b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b2:	4a24      	ldr	r2, [pc, #144]	@ (8003544 <HAL_PCD_MspInit+0xb8>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034ba:	4b22      	ldr	r3, [pc, #136]	@ (8003544 <HAL_PCD_MspInit+0xb8>)
 80034bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80034c6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80034ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034cc:	2302      	movs	r3, #2
 80034ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d4:	2303      	movs	r3, #3
 80034d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80034d8:	230a      	movs	r3, #10
 80034da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034dc:	f107 0314 	add.w	r3, r7, #20
 80034e0:	4619      	mov	r1, r3
 80034e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034e6:	f002 fa1f 	bl	8005928 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80034ea:	4b16      	ldr	r3, [pc, #88]	@ (8003544 <HAL_PCD_MspInit+0xb8>)
 80034ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ee:	4a15      	ldr	r2, [pc, #84]	@ (8003544 <HAL_PCD_MspInit+0xb8>)
 80034f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80034f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034f6:	4b13      	ldr	r3, [pc, #76]	@ (8003544 <HAL_PCD_MspInit+0xb8>)
 80034f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003502:	4b10      	ldr	r3, [pc, #64]	@ (8003544 <HAL_PCD_MspInit+0xb8>)
 8003504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d114      	bne.n	8003538 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800350e:	4b0d      	ldr	r3, [pc, #52]	@ (8003544 <HAL_PCD_MspInit+0xb8>)
 8003510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003512:	4a0c      	ldr	r2, [pc, #48]	@ (8003544 <HAL_PCD_MspInit+0xb8>)
 8003514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003518:	6593      	str	r3, [r2, #88]	@ 0x58
 800351a:	4b0a      	ldr	r3, [pc, #40]	@ (8003544 <HAL_PCD_MspInit+0xb8>)
 800351c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8003526:	f002 fe8b 	bl	8006240 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800352a:	4b06      	ldr	r3, [pc, #24]	@ (8003544 <HAL_PCD_MspInit+0xb8>)
 800352c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352e:	4a05      	ldr	r2, [pc, #20]	@ (8003544 <HAL_PCD_MspInit+0xb8>)
 8003530:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003534:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8003536:	e001      	b.n	800353c <HAL_PCD_MspInit+0xb0>
      HAL_PWREx_EnableVddUSB();
 8003538:	f002 fe82 	bl	8006240 <HAL_PWREx_EnableVddUSB>
}
 800353c:	bf00      	nop
 800353e:	3728      	adds	r7, #40	@ 0x28
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40021000 	.word	0x40021000

08003548 <SDTimer_Handler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SDTimer_Handler(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800354c:	4b0e      	ldr	r3, [pc, #56]	@ (8003588 <SDTimer_Handler+0x40>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d006      	beq.n	8003564 <SDTimer_Handler+0x1c>
    Timer1--;
 8003556:	4b0c      	ldr	r3, [pc, #48]	@ (8003588 <SDTimer_Handler+0x40>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b2da      	uxtb	r2, r3
 8003560:	4b09      	ldr	r3, [pc, #36]	@ (8003588 <SDTimer_Handler+0x40>)
 8003562:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8003564:	4b09      	ldr	r3, [pc, #36]	@ (800358c <SDTimer_Handler+0x44>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d006      	beq.n	800357c <SDTimer_Handler+0x34>
    Timer2--;
 800356e:	4b07      	ldr	r3, [pc, #28]	@ (800358c <SDTimer_Handler+0x44>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b2da      	uxtb	r2, r3
 8003578:	4b04      	ldr	r3, [pc, #16]	@ (800358c <SDTimer_Handler+0x44>)
 800357a:	701a      	strb	r2, [r3, #0]
}
 800357c:	bf00      	nop
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	20000ccd 	.word	0x20000ccd
 800358c:	20000cce 	.word	0x20000cce

08003590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003594:	bf00      	nop
 8003596:	e7fd      	b.n	8003594 <NMI_Handler+0x4>

08003598 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800359c:	bf00      	nop
 800359e:	e7fd      	b.n	800359c <HardFault_Handler+0x4>

080035a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035a4:	bf00      	nop
 80035a6:	e7fd      	b.n	80035a4 <MemManage_Handler+0x4>

080035a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035ac:	bf00      	nop
 80035ae:	e7fd      	b.n	80035ac <BusFault_Handler+0x4>

080035b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035b4:	bf00      	nop
 80035b6:	e7fd      	b.n	80035b4 <UsageFault_Handler+0x4>

080035b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035bc:	bf00      	nop
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035c6:	b480      	push	{r7}
 80035c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035ca:	bf00      	nop
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035d8:	bf00      	nop
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 80035e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003614 <SysTick_Handler+0x30>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	3301      	adds	r3, #1
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	4b08      	ldr	r3, [pc, #32]	@ (8003614 <SysTick_Handler+0x30>)
 80035f4:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80035f6:	4b07      	ldr	r3, [pc, #28]	@ (8003614 <SysTick_Handler+0x30>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b09      	cmp	r3, #9
 80035fe:	d904      	bls.n	800360a <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8003600:	4b04      	ldr	r3, [pc, #16]	@ (8003614 <SysTick_Handler+0x30>)
 8003602:	2200      	movs	r2, #0
 8003604:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8003606:	f7ff ff9f 	bl	8003548 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800360a:	f000 fb0f 	bl	8003c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800360e:	bf00      	nop
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20000ccc 	.word	0x20000ccc

08003618 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800361c:	4802      	ldr	r0, [pc, #8]	@ (8003628 <DMA1_Channel1_IRQHandler+0x10>)
 800361e:	f002 f8d3 	bl	80057c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003622:	bf00      	nop
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	200002d0 	.word	0x200002d0

0800362c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  return 1;
 8003630:	2301      	movs	r3, #1
}
 8003632:	4618      	mov	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <_kill>:

int _kill(int pid, int sig)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003646:	f007 fc4d 	bl	800aee4 <__errno>
 800364a:	4603      	mov	r3, r0
 800364c:	2216      	movs	r2, #22
 800364e:	601a      	str	r2, [r3, #0]
  return -1;
 8003650:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <_exit>:

void _exit (int status)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003664:	f04f 31ff 	mov.w	r1, #4294967295
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff ffe7 	bl	800363c <_kill>
  while (1) {}    /* Make sure we hang here */
 800366e:	bf00      	nop
 8003670:	e7fd      	b.n	800366e <_exit+0x12>

08003672 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b086      	sub	sp, #24
 8003676:	af00      	add	r7, sp, #0
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
 8003682:	e00a      	b.n	800369a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003684:	f3af 8000 	nop.w
 8003688:	4601      	mov	r1, r0
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	60ba      	str	r2, [r7, #8]
 8003690:	b2ca      	uxtb	r2, r1
 8003692:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	3301      	adds	r3, #1
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	429a      	cmp	r2, r3
 80036a0:	dbf0      	blt.n	8003684 <_read+0x12>
  }

  return len;
 80036a2:	687b      	ldr	r3, [r7, #4]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <_close>:
  }
  return len;
}

int _close(int file)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80036b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036d4:	605a      	str	r2, [r3, #4]
  return 0;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <_isatty>:

int _isatty(int file)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036ec:	2301      	movs	r3, #1
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b085      	sub	sp, #20
 80036fe:	af00      	add	r7, sp, #0
 8003700:	60f8      	str	r0, [r7, #12]
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800371c:	4a14      	ldr	r2, [pc, #80]	@ (8003770 <_sbrk+0x5c>)
 800371e:	4b15      	ldr	r3, [pc, #84]	@ (8003774 <_sbrk+0x60>)
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003728:	4b13      	ldr	r3, [pc, #76]	@ (8003778 <_sbrk+0x64>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d102      	bne.n	8003736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003730:	4b11      	ldr	r3, [pc, #68]	@ (8003778 <_sbrk+0x64>)
 8003732:	4a12      	ldr	r2, [pc, #72]	@ (800377c <_sbrk+0x68>)
 8003734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003736:	4b10      	ldr	r3, [pc, #64]	@ (8003778 <_sbrk+0x64>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4413      	add	r3, r2
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	429a      	cmp	r2, r3
 8003742:	d207      	bcs.n	8003754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003744:	f007 fbce 	bl	800aee4 <__errno>
 8003748:	4603      	mov	r3, r0
 800374a:	220c      	movs	r2, #12
 800374c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800374e:	f04f 33ff 	mov.w	r3, #4294967295
 8003752:	e009      	b.n	8003768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003754:	4b08      	ldr	r3, [pc, #32]	@ (8003778 <_sbrk+0x64>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800375a:	4b07      	ldr	r3, [pc, #28]	@ (8003778 <_sbrk+0x64>)
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4413      	add	r3, r2
 8003762:	4a05      	ldr	r2, [pc, #20]	@ (8003778 <_sbrk+0x64>)
 8003764:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003766:	68fb      	ldr	r3, [r7, #12]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	20018000 	.word	0x20018000
 8003774:	00000400 	.word	0x00000400
 8003778:	20000cd0 	.word	0x20000cd0
 800377c:	20000e70 	.word	0x20000e70

08003780 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003784:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <SystemInit+0x20>)
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378a:	4a05      	ldr	r2, [pc, #20]	@ (80037a0 <SystemInit+0x20>)
 800378c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003790:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003794:	bf00      	nop
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <log_print>:
static inline void log_print(const char *format, ...) {
 80037a4:	b40f      	push	{r0, r1, r2, r3}
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b0c2      	sub	sp, #264	@ 0x108
 80037aa:	af00      	add	r7, sp, #0
    va_start(args, format);
 80037ac:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80037b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80037b8:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, LOG_BUFFER_SIZE, format, args);
 80037ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80037c2:	f107 0008 	add.w	r0, r7, #8
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80037cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80037d0:	f007 fa94 	bl	800acfc <vsniprintf>
    printf("%s", buffer); // SWV output
 80037d4:	f107 0308 	add.w	r3, r7, #8
 80037d8:	4619      	mov	r1, r3
 80037da:	4805      	ldr	r0, [pc, #20]	@ (80037f0 <log_print+0x4c>)
 80037dc:	f007 f9ac 	bl	800ab38 <iprintf>
}
 80037e0:	bf00      	nop
 80037e2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80037e6:	46bd      	mov	sp, r7
 80037e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037ec:	b004      	add	sp, #16
 80037ee:	4770      	bx	lr
 80037f0:	0800de08 	.word	0x0800de08

080037f4 <init_phase>:
	    printf("Write took %lu ms\n", uwTick - start);
}



PhaseResult init_phase(){
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
    LED_SetState(STATUS_INITIALIZATION);
 80037fa:	2001      	movs	r0, #1
 80037fc:	f7fd fc2a 	bl	8001054 <LED_SetState>

    int8_t barometer_init_result = MS5607_Init();
 8003800:	f7fe fd42 	bl	8002288 <MS5607_Init>
 8003804:	4603      	mov	r3, r0
 8003806:	71fb      	strb	r3, [r7, #7]
    if(barometer_init_result != 0){
 8003808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d004      	beq.n	800381a <init_phase+0x26>
        LED_SetState(STATUS_ERROR);
 8003810:	2007      	movs	r0, #7
 8003812:	f7fd fc1f 	bl	8001054 <LED_SetState>
        return PHASE_FAIL;
 8003816:	2302      	movs	r3, #2
 8003818:	e019      	b.n	800384e <init_phase+0x5a>
    }

    MICS5524_Handle_Init(&gas_sensor, &hadc1, ADC_CHANNEL_3);
 800381a:	4a0f      	ldr	r2, [pc, #60]	@ (8003858 <init_phase+0x64>)
 800381c:	490f      	ldr	r1, [pc, #60]	@ (800385c <init_phase+0x68>)
 800381e:	4810      	ldr	r0, [pc, #64]	@ (8003860 <init_phase+0x6c>)
 8003820:	f7fd fc7e 	bl	8001120 <MICS5524_Handle_Init>

    log_print("[GAS SENSOR] Warming up...\n");
 8003824:	480f      	ldr	r0, [pc, #60]	@ (8003864 <init_phase+0x70>)
 8003826:	f7ff ffbd 	bl	80037a4 <log_print>
    // Block here (startup only) until warmup done
    while (!MICS5524_Handle_WarmUp(&gas_sensor, 0.3)) {
 800382a:	e002      	b.n	8003832 <init_phase+0x3e>
        HAL_Delay(100); // or your preferred delay
 800382c:	2064      	movs	r0, #100	@ 0x64
 800382e:	f000 fa1d 	bl	8003c6c <HAL_Delay>
    while (!MICS5524_Handle_WarmUp(&gas_sensor, 0.3)) {
 8003832:	2100      	movs	r1, #0
 8003834:	480a      	ldr	r0, [pc, #40]	@ (8003860 <init_phase+0x6c>)
 8003836:	f7fd fc83 	bl	8001140 <MICS5524_Handle_WarmUp>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f5      	beq.n	800382c <init_phase+0x38>
    }
    log_print("[GAS SENSOR] Warmup complete!\n");
 8003840:	4809      	ldr	r0, [pc, #36]	@ (8003868 <init_phase+0x74>)
 8003842:	f7ff ffaf 	bl	80037a4 <log_print>


    system_state = STATUS_PREFLIGHT;
 8003846:	4b09      	ldr	r3, [pc, #36]	@ (800386c <init_phase+0x78>)
 8003848:	2203      	movs	r2, #3
 800384a:	701a      	strb	r2, [r3, #0]
    return PHASE_SUCCESS;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	0c900008 	.word	0x0c900008
 800385c:	2000026c 	.word	0x2000026c
 8003860:	20000cd4 	.word	0x20000cd4
 8003864:	0800decc 	.word	0x0800decc
 8003868:	0800dee8 	.word	0x0800dee8
 800386c:	2000002c 	.word	0x2000002c

08003870 <pre_flight_phase>:



PhaseResult pre_flight_phase() {
 8003870:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af04      	add	r7, sp, #16
    LED_SetState(STATUS_PREFLIGHT);
 8003878:	2003      	movs	r0, #3
 800387a:	f7fd fbeb 	bl	8001054 <LED_SetState>
    log_print("[STATE] Waiting for Takeoff Detection...\n");
 800387e:	483d      	ldr	r0, [pc, #244]	@ (8003974 <pre_flight_phase+0x104>)
 8003880:	f7ff ff90 	bl	80037a4 <log_print>

    while (system_state == STATUS_PREFLIGHT) {
 8003884:	e069      	b.n	800395a <pre_flight_phase+0xea>
        barometer_data = MS5607_ReadData();
 8003886:	f7fe fc8d 	bl	80021a4 <MS5607_ReadData>
 800388a:	eef0 6a40 	vmov.f32	s13, s0
 800388e:	eeb0 7a60 	vmov.f32	s14, s1
 8003892:	eef0 7a41 	vmov.f32	s15, s2
 8003896:	4b38      	ldr	r3, [pc, #224]	@ (8003978 <pre_flight_phase+0x108>)
 8003898:	edc3 6a00 	vstr	s13, [r3]
 800389c:	ed83 7a01 	vstr	s14, [r3, #4]
 80038a0:	edc3 7a02 	vstr	s15, [r3, #8]

        log_print("[BAROMETER] Pressure: %.3f Pa, Temp: %.3f degC, Altitude: %.3f meters\n",
                  barometer_data.pressure, barometer_data.temperature, barometer_data.altitude);
 80038a4:	4b34      	ldr	r3, [pc, #208]	@ (8003978 <pre_flight_phase+0x108>)
 80038a6:	681b      	ldr	r3, [r3, #0]
        log_print("[BAROMETER] Pressure: %.3f Pa, Temp: %.3f degC, Altitude: %.3f meters\n",
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fc fe4d 	bl	8000548 <__aeabi_f2d>
 80038ae:	4680      	mov	r8, r0
 80038b0:	4689      	mov	r9, r1
                  barometer_data.pressure, barometer_data.temperature, barometer_data.altitude);
 80038b2:	4b31      	ldr	r3, [pc, #196]	@ (8003978 <pre_flight_phase+0x108>)
 80038b4:	685b      	ldr	r3, [r3, #4]
        log_print("[BAROMETER] Pressure: %.3f Pa, Temp: %.3f degC, Altitude: %.3f meters\n",
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fc fe46 	bl	8000548 <__aeabi_f2d>
 80038bc:	4604      	mov	r4, r0
 80038be:	460d      	mov	r5, r1
                  barometer_data.pressure, barometer_data.temperature, barometer_data.altitude);
 80038c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003978 <pre_flight_phase+0x108>)
 80038c2:	689b      	ldr	r3, [r3, #8]
        log_print("[BAROMETER] Pressure: %.3f Pa, Temp: %.3f degC, Altitude: %.3f meters\n",
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fc fe3f 	bl	8000548 <__aeabi_f2d>
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80038d2:	e9cd 4500 	strd	r4, r5, [sp]
 80038d6:	4642      	mov	r2, r8
 80038d8:	464b      	mov	r3, r9
 80038da:	4828      	ldr	r0, [pc, #160]	@ (800397c <pre_flight_phase+0x10c>)
 80038dc:	f7ff ff62 	bl	80037a4 <log_print>

        if (barometer_data.altitude > ALTITUDE_MAX_GLOBAL) {
 80038e0:	4b25      	ldr	r3, [pc, #148]	@ (8003978 <pre_flight_phase+0x108>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fc fe2f 	bl	8000548 <__aeabi_f2d>
 80038ea:	4b25      	ldr	r3, [pc, #148]	@ (8003980 <pre_flight_phase+0x110>)
 80038ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f0:	f7fd f912 	bl	8000b18 <__aeabi_dcmpgt>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d009      	beq.n	800390e <pre_flight_phase+0x9e>
            ALTITUDE_MAX_GLOBAL = barometer_data.altitude;
 80038fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003978 <pre_flight_phase+0x108>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fc fe22 	bl	8000548 <__aeabi_f2d>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	491d      	ldr	r1, [pc, #116]	@ (8003980 <pre_flight_phase+0x110>)
 800390a:	e9c1 2300 	strd	r2, r3, [r1]
        }

        if (!TAKEOFF_ALREADY_DETECTED && barometer_data.altitude > TAKEOFF_ALTITUDE_THRESHOLD) {
 800390e:	4b1d      	ldr	r3, [pc, #116]	@ (8003984 <pre_flight_phase+0x114>)
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	f083 0301 	eor.w	r3, r3, #1
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d012      	beq.n	8003942 <pre_flight_phase+0xd2>
 800391c:	4b16      	ldr	r3, [pc, #88]	@ (8003978 <pre_flight_phase+0x108>)
 800391e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003922:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8003926:	eef4 7ac7 	vcmpe.f32	s15, s14
 800392a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800392e:	dd08      	ble.n	8003942 <pre_flight_phase+0xd2>
            TAKEOFF_DETECTED = true;
 8003930:	4b15      	ldr	r3, [pc, #84]	@ (8003988 <pre_flight_phase+0x118>)
 8003932:	2201      	movs	r2, #1
 8003934:	701a      	strb	r2, [r3, #0]
            TAKEOFF_ALREADY_DETECTED = true;
 8003936:	4b13      	ldr	r3, [pc, #76]	@ (8003984 <pre_flight_phase+0x114>)
 8003938:	2201      	movs	r2, #1
 800393a:	701a      	strb	r2, [r3, #0]
            log_print("[STATE] TAKEOFF DETECTED!\n");
 800393c:	4813      	ldr	r0, [pc, #76]	@ (800398c <pre_flight_phase+0x11c>)
 800393e:	f7ff ff31 	bl	80037a4 <log_print>
        }

        if (TAKEOFF_DETECTED) {
 8003942:	4b11      	ldr	r3, [pc, #68]	@ (8003988 <pre_flight_phase+0x118>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d007      	beq.n	800395a <pre_flight_phase+0xea>
            log_print("[STATE] Transition to Flight Mode\n");
 800394a:	4811      	ldr	r0, [pc, #68]	@ (8003990 <pre_flight_phase+0x120>)
 800394c:	f7ff ff2a 	bl	80037a4 <log_print>
            system_state = STATUS_FLIGHT;
 8003950:	4b10      	ldr	r3, [pc, #64]	@ (8003994 <pre_flight_phase+0x124>)
 8003952:	2204      	movs	r2, #4
 8003954:	701a      	strb	r2, [r3, #0]
            return PHASE_SUCCESS;
 8003956:	2300      	movs	r3, #0
 8003958:	e007      	b.n	800396a <pre_flight_phase+0xfa>
    while (system_state == STATUS_PREFLIGHT) {
 800395a:	4b0e      	ldr	r3, [pc, #56]	@ (8003994 <pre_flight_phase+0x124>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d091      	beq.n	8003886 <pre_flight_phase+0x16>
        }
    }
    log_print("[STATE] Interrupted - Exiting Pre-Flight\n");
 8003962:	480d      	ldr	r0, [pc, #52]	@ (8003998 <pre_flight_phase+0x128>)
 8003964:	f7ff ff1e 	bl	80037a4 <log_print>
    return PHASE_INTERRUPTED;
 8003968:	2301      	movs	r3, #1
}
 800396a:	4618      	mov	r0, r3
 800396c:	46bd      	mov	sp, r7
 800396e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003972:	bf00      	nop
 8003974:	0800df08 	.word	0x0800df08
 8003978:	20000cec 	.word	0x20000cec
 800397c:	0800df34 	.word	0x0800df34
 8003980:	20000cfc 	.word	0x20000cfc
 8003984:	20000cf9 	.word	0x20000cf9
 8003988:	20000cf8 	.word	0x20000cf8
 800398c:	0800df7c 	.word	0x0800df7c
 8003990:	0800df98 	.word	0x0800df98
 8003994:	2000002c 	.word	0x2000002c
 8003998:	0800dfbc 	.word	0x0800dfbc

0800399c <flight_phase>:


PhaseResult flight_phase() {
 800399c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039a0:	b0a3      	sub	sp, #140	@ 0x8c
 80039a2:	af12      	add	r7, sp, #72	@ 0x48

	while(true){
//	    // Sensor already warmed up!
	    float co_ppm      = MICS5524_Handle_ReadGasPPM(&gas_sensor, MICS5524_CO);
 80039a4:	2101      	movs	r1, #1
 80039a6:	4848      	ldr	r0, [pc, #288]	@ (8003ac8 <flight_phase+0x12c>)
 80039a8:	f7fd fbdb 	bl	8001162 <MICS5524_Handle_ReadGasPPM>
 80039ac:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
	    float ch4_ppm     = MICS5524_Handle_ReadGasPPM(&gas_sensor, MICS5524_CH4);
 80039b0:	2102      	movs	r1, #2
 80039b2:	4845      	ldr	r0, [pc, #276]	@ (8003ac8 <flight_phase+0x12c>)
 80039b4:	f7fd fbd5 	bl	8001162 <MICS5524_Handle_ReadGasPPM>
 80039b8:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
	    float ethanol_ppm = MICS5524_Handle_ReadGasPPM(&gas_sensor, MICS5524_C2H5OH);
 80039bc:	2103      	movs	r1, #3
 80039be:	4842      	ldr	r0, [pc, #264]	@ (8003ac8 <flight_phase+0x12c>)
 80039c0:	f7fd fbcf 	bl	8001162 <MICS5524_Handle_ReadGasPPM>
 80039c4:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
	    float h2_ppm      = MICS5524_Handle_ReadGasPPM(&gas_sensor, MICS5524_H2);
 80039c8:	2106      	movs	r1, #6
 80039ca:	483f      	ldr	r0, [pc, #252]	@ (8003ac8 <flight_phase+0x12c>)
 80039cc:	f7fd fbc9 	bl	8001162 <MICS5524_Handle_ReadGasPPM>
 80039d0:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
	    float nh3_ppm     = MICS5524_Handle_ReadGasPPM(&gas_sensor, MICS5524_NH3);
 80039d4:	2108      	movs	r1, #8
 80039d6:	483c      	ldr	r0, [pc, #240]	@ (8003ac8 <flight_phase+0x12c>)
 80039d8:	f7fd fbc3 	bl	8001162 <MICS5524_Handle_ReadGasPPM>
 80039dc:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

	    int co_present    = MICS5524_Handle_GasPresent(&gas_sensor, MICS5524_CO);
 80039e0:	2101      	movs	r1, #1
 80039e2:	4839      	ldr	r0, [pc, #228]	@ (8003ac8 <flight_phase+0x12c>)
 80039e4:	f7fd fbd0 	bl	8001188 <MICS5524_Handle_GasPresent>
 80039e8:	4603      	mov	r3, r0
 80039ea:	62bb      	str	r3, [r7, #40]	@ 0x28
	    int ch4_present   = MICS5524_Handle_GasPresent(&gas_sensor, MICS5524_CH4);
 80039ec:	2102      	movs	r1, #2
 80039ee:	4836      	ldr	r0, [pc, #216]	@ (8003ac8 <flight_phase+0x12c>)
 80039f0:	f7fd fbca 	bl	8001188 <MICS5524_Handle_GasPresent>
 80039f4:	4603      	mov	r3, r0
 80039f6:	627b      	str	r3, [r7, #36]	@ 0x24
	    int etoh_present  = MICS5524_Handle_GasPresent(&gas_sensor, MICS5524_C2H5OH);
 80039f8:	2103      	movs	r1, #3
 80039fa:	4833      	ldr	r0, [pc, #204]	@ (8003ac8 <flight_phase+0x12c>)
 80039fc:	f7fd fbc4 	bl	8001188 <MICS5524_Handle_GasPresent>
 8003a00:	4603      	mov	r3, r0
 8003a02:	623b      	str	r3, [r7, #32]
	    int h2_present    = MICS5524_Handle_GasPresent(&gas_sensor, MICS5524_H2);
 8003a04:	2106      	movs	r1, #6
 8003a06:	4830      	ldr	r0, [pc, #192]	@ (8003ac8 <flight_phase+0x12c>)
 8003a08:	f7fd fbbe 	bl	8001188 <MICS5524_Handle_GasPresent>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	61fb      	str	r3, [r7, #28]
	    int nh3_present   = MICS5524_Handle_GasPresent(&gas_sensor, MICS5524_NH3);
 8003a10:	2108      	movs	r1, #8
 8003a12:	482d      	ldr	r0, [pc, #180]	@ (8003ac8 <flight_phase+0x12c>)
 8003a14:	f7fd fbb8 	bl	8001188 <MICS5524_Handle_GasPresent>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	61bb      	str	r3, [r7, #24]

	    log_print("[GAS] CO: %.2fppm (%s), CH4: %.2fppm (%s), EtOH: %.2fppm (%s), H2: %.2fppm (%s), NH3: %.2fppm (%s)\n",
 8003a1c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003a1e:	f7fc fd93 	bl	8000548 <__aeabi_f2d>
 8003a22:	e9c7 0100 	strd	r0, r1, [r7]
 8003a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <flight_phase+0x94>
 8003a2c:	4e27      	ldr	r6, [pc, #156]	@ (8003acc <flight_phase+0x130>)
 8003a2e:	e000      	b.n	8003a32 <flight_phase+0x96>
 8003a30:	4e27      	ldr	r6, [pc, #156]	@ (8003ad0 <flight_phase+0x134>)
 8003a32:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003a34:	f7fc fd88 	bl	8000548 <__aeabi_f2d>
 8003a38:	4604      	mov	r4, r0
 8003a3a:	460d      	mov	r5, r1
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <flight_phase+0xac>
 8003a42:	4b22      	ldr	r3, [pc, #136]	@ (8003acc <flight_phase+0x130>)
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	e001      	b.n	8003a4c <flight_phase+0xb0>
 8003a48:	4b21      	ldr	r3, [pc, #132]	@ (8003ad0 <flight_phase+0x134>)
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003a4e:	f7fc fd7b 	bl	8000548 <__aeabi_f2d>
 8003a52:	4680      	mov	r8, r0
 8003a54:	4689      	mov	r9, r1
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <flight_phase+0xc6>
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003acc <flight_phase+0x130>)
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	e001      	b.n	8003a66 <flight_phase+0xca>
 8003a62:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad0 <flight_phase+0x134>)
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a68:	f7fc fd6e 	bl	8000548 <__aeabi_f2d>
 8003a6c:	4682      	mov	sl, r0
 8003a6e:	468b      	mov	fp, r1
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <flight_phase+0xe0>
 8003a76:	4b15      	ldr	r3, [pc, #84]	@ (8003acc <flight_phase+0x130>)
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	e001      	b.n	8003a80 <flight_phase+0xe4>
 8003a7c:	4b14      	ldr	r3, [pc, #80]	@ (8003ad0 <flight_phase+0x134>)
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a82:	f7fc fd61 	bl	8000548 <__aeabi_f2d>
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <flight_phase+0xf4>
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003acc <flight_phase+0x130>)
 8003a8e:	e000      	b.n	8003a92 <flight_phase+0xf6>
 8003a90:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad0 <flight_phase+0x134>)
 8003a92:	9310      	str	r3, [sp, #64]	@ 0x40
 8003a94:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	930c      	str	r3, [sp, #48]	@ 0x30
 8003a9c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	9308      	str	r3, [sp, #32]
 8003aa4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	9304      	str	r3, [sp, #16]
 8003aac:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003ab0:	9600      	str	r6, [sp, #0]
 8003ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ab6:	4807      	ldr	r0, [pc, #28]	@ (8003ad4 <flight_phase+0x138>)
 8003ab8:	f7ff fe74 	bl	80037a4 <log_print>

//		int16_t adc_val = MICS5524_ReadADC(&gas_sensor.ll_sensor);
//		log_print("valeur: %d", adc_val);
//		float test_var = MICS5524_ReadVoltage();

	    HAL_Delay(1000);
 8003abc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003ac0:	f000 f8d4 	bl	8003c6c <HAL_Delay>
	while(true){
 8003ac4:	e76e      	b.n	80039a4 <flight_phase+0x8>
 8003ac6:	bf00      	nop
 8003ac8:	20000cd4 	.word	0x20000cd4
 8003acc:	0800dfe8 	.word	0x0800dfe8
 8003ad0:	0800dfec 	.word	0x0800dfec
 8003ad4:	0800dff0 	.word	0x0800dff0

08003ad8 <Manager_Main>:

    return PHASE_SUCCESS;
}


SystemState Manager_Main(){
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
	 log_print("Sat Atmo - Diamant A Experience - Welcome! \n");
 8003ade:	4813      	ldr	r0, [pc, #76]	@ (8003b2c <Manager_Main+0x54>)
 8003ae0:	f7ff fe60 	bl	80037a4 <log_print>
	 //test_sd_card();

    PhaseResult ret = init_phase();
 8003ae4:	f7ff fe86 	bl	80037f4 <init_phase>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	71fb      	strb	r3, [r7, #7]
    if(ret != PHASE_SUCCESS) return STATUS_ERROR;
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <Manager_Main+0x1e>
 8003af2:	2307      	movs	r3, #7
 8003af4:	e015      	b.n	8003b22 <Manager_Main+0x4a>

	ret = pre_flight_phase();
 8003af6:	f7ff febb 	bl	8003870 <pre_flight_phase>
 8003afa:	4603      	mov	r3, r0
 8003afc:	71fb      	strb	r3, [r7, #7]
	if(ret != PHASE_SUCCESS) return STATUS_ERROR;
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <Manager_Main+0x30>
 8003b04:	2307      	movs	r3, #7
 8003b06:	e00c      	b.n	8003b22 <Manager_Main+0x4a>

    ret = flight_phase();
 8003b08:	f7ff ff48 	bl	800399c <flight_phase>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	71fb      	strb	r3, [r7, #7]
	if(ret != PHASE_SUCCESS) return STATUS_ERROR;
 8003b10:	79fb      	ldrb	r3, [r7, #7]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <Manager_Main+0x42>
 8003b16:	2307      	movs	r3, #7
 8003b18:	e003      	b.n	8003b22 <Manager_Main+0x4a>
//
//    ret = post_flight_phase();
//    if(ret != PHASE_SUCCESS) return STATUS_ERROR;

    LED_SetState(STATUS_GRACEFUL_SHUTDOWN);
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	f7fd fa9a 	bl	8001054 <LED_SetState>
    return STATUS_GRACEFUL_SHUTDOWN;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	0800e054 	.word	0x0800e054

08003b30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003b30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b34:	f7ff fe24 	bl	8003780 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b38:	480c      	ldr	r0, [pc, #48]	@ (8003b6c <LoopForever+0x6>)
  ldr r1, =_edata
 8003b3a:	490d      	ldr	r1, [pc, #52]	@ (8003b70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b74 <LoopForever+0xe>)
  movs r3, #0
 8003b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b40:	e002      	b.n	8003b48 <LoopCopyDataInit>

08003b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b46:	3304      	adds	r3, #4

08003b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b4c:	d3f9      	bcc.n	8003b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b50:	4c0a      	ldr	r4, [pc, #40]	@ (8003b7c <LoopForever+0x16>)
  movs r3, #0
 8003b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b54:	e001      	b.n	8003b5a <LoopFillZerobss>

08003b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b58:	3204      	adds	r2, #4

08003b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b5c:	d3fb      	bcc.n	8003b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b5e:	f007 f9c7 	bl	800aef0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b62:	f7fe fc15 	bl	8002390 <main>

08003b66 <LoopForever>:

LoopForever:
    b LoopForever
 8003b66:	e7fe      	b.n	8003b66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003b68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b70:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8003b74:	0800e498 	.word	0x0800e498
  ldr r2, =_sbss
 8003b78:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8003b7c:	20000e70 	.word	0x20000e70

08003b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b80:	e7fe      	b.n	8003b80 <ADC1_2_IRQHandler>

08003b82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b8c:	2003      	movs	r0, #3
 8003b8e:	f001 fd21 	bl	80055d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b92:	200f      	movs	r0, #15
 8003b94:	f000 f80e 	bl	8003bb4 <HAL_InitTick>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	71fb      	strb	r3, [r7, #7]
 8003ba2:	e001      	b.n	8003ba8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ba4:	f7ff f884 	bl	8002cb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003bc0:	4b17      	ldr	r3, [pc, #92]	@ (8003c20 <HAL_InitTick+0x6c>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d023      	beq.n	8003c10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003bc8:	4b16      	ldr	r3, [pc, #88]	@ (8003c24 <HAL_InitTick+0x70>)
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	4b14      	ldr	r3, [pc, #80]	@ (8003c20 <HAL_InitTick+0x6c>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bde:	4618      	mov	r0, r3
 8003be0:	f001 fd2d 	bl	800563e <HAL_SYSTICK_Config>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10f      	bne.n	8003c0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b0f      	cmp	r3, #15
 8003bee:	d809      	bhi.n	8003c04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf8:	f001 fcf7 	bl	80055ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8003c28 <HAL_InitTick+0x74>)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	e007      	b.n	8003c14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
 8003c08:	e004      	b.n	8003c14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	73fb      	strb	r3, [r7, #15]
 8003c0e:	e001      	b.n	8003c14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20000034 	.word	0x20000034
 8003c24:	20000028 	.word	0x20000028
 8003c28:	20000030 	.word	0x20000030

08003c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c30:	4b06      	ldr	r3, [pc, #24]	@ (8003c4c <HAL_IncTick+0x20>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	4b06      	ldr	r3, [pc, #24]	@ (8003c50 <HAL_IncTick+0x24>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	4a04      	ldr	r2, [pc, #16]	@ (8003c50 <HAL_IncTick+0x24>)
 8003c3e:	6013      	str	r3, [r2, #0]
}
 8003c40:	bf00      	nop
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20000034 	.word	0x20000034
 8003c50:	20000d00 	.word	0x20000d00

08003c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return uwTick;
 8003c58:	4b03      	ldr	r3, [pc, #12]	@ (8003c68 <HAL_GetTick+0x14>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20000d00 	.word	0x20000d00

08003c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c74:	f7ff ffee 	bl	8003c54 <HAL_GetTick>
 8003c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c84:	d005      	beq.n	8003c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003c86:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb0 <HAL_Delay+0x44>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c92:	bf00      	nop
 8003c94:	f7ff ffde 	bl	8003c54 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d8f7      	bhi.n	8003c94 <HAL_Delay+0x28>
  {
  }
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000034 	.word	0x20000034

08003cb4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	609a      	str	r2, [r3, #8]
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	609a      	str	r2, [r3, #8]
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
 8003d28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	3360      	adds	r3, #96	@ 0x60
 8003d2e:	461a      	mov	r2, r3
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	4b08      	ldr	r3, [pc, #32]	@ (8003d60 <LL_ADC_SetOffset+0x44>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003d54:	bf00      	nop
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	03fff000 	.word	0x03fff000

08003d64 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3360      	adds	r3, #96	@ 0x60
 8003d72:	461a      	mov	r2, r3
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	3360      	adds	r3, #96	@ 0x60
 8003da0:	461a      	mov	r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	431a      	orrs	r2, r3
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003dba:	bf00      	nop
 8003dbc:	371c      	adds	r7, #28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3330      	adds	r3, #48	@ 0x30
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	0a1b      	lsrs	r3, r3, #8
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	f003 030c 	and.w	r3, r3, #12
 8003e08:	4413      	add	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f003 031f 	and.w	r3, r3, #31
 8003e16:	211f      	movs	r1, #31
 8003e18:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	401a      	ands	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	0e9b      	lsrs	r3, r3, #26
 8003e24:	f003 011f 	and.w	r1, r3, #31
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f003 031f 	and.w	r3, r3, #31
 8003e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e32:	431a      	orrs	r2, r3
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003e38:	bf00      	nop
 8003e3a:	371c      	adds	r7, #28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	3314      	adds	r3, #20
 8003e54:	461a      	mov	r2, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	0e5b      	lsrs	r3, r3, #25
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	4413      	add	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	0d1b      	lsrs	r3, r3, #20
 8003e6c:	f003 031f 	and.w	r3, r3, #31
 8003e70:	2107      	movs	r1, #7
 8003e72:	fa01 f303 	lsl.w	r3, r1, r3
 8003e76:	43db      	mvns	r3, r3
 8003e78:	401a      	ands	r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	0d1b      	lsrs	r3, r3, #20
 8003e7e:	f003 031f 	and.w	r3, r3, #31
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	fa01 f303 	lsl.w	r3, r1, r3
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003e8e:	bf00      	nop
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
	...

08003e9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	401a      	ands	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f003 0318 	and.w	r3, r3, #24
 8003ebe:	4908      	ldr	r1, [pc, #32]	@ (8003ee0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003ec0:	40d9      	lsrs	r1, r3
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	400b      	ands	r3, r1
 8003ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003ed2:	bf00      	nop
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	0007ffff 	.word	0x0007ffff

08003ee4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 031f 	and.w	r3, r3, #31
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003f2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6093      	str	r3, [r2, #8]
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f54:	d101      	bne.n	8003f5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003f56:	2301      	movs	r3, #1
 8003f58:	e000      	b.n	8003f5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003f78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f7c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fa0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fa4:	d101      	bne.n	8003faa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003fc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003fcc:	f043 0201 	orr.w	r2, r3, #1
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ff0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ff4:	f043 0202 	orr.w	r2, r3, #2
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <LL_ADC_IsEnabled+0x18>
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <LL_ADC_IsEnabled+0x1a>
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b02      	cmp	r3, #2
 8004040:	d101      	bne.n	8004046 <LL_ADC_IsDisableOngoing+0x18>
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <LL_ADC_IsDisableOngoing+0x1a>
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004064:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004068:	f043 0204 	orr.w	r2, r3, #4
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800408c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004090:	f043 0210 	orr.w	r2, r3, #16
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d101      	bne.n	80040bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040da:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80040de:	f043 0220 	orr.w	r2, r3, #32
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b08      	cmp	r3, #8
 8004104:	d101      	bne.n	800410a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004118:	b590      	push	{r4, r7, lr}
 800411a:	b089      	sub	sp, #36	@ 0x24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e130      	b.n	8004394 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800413c:	2b00      	cmp	r3, #0
 800413e:	d109      	bne.n	8004154 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7fe fdd9 	bl	8002cf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff fef1 	bl	8003f40 <LL_ADC_IsDeepPowerDownEnabled>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d004      	beq.n	800416e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff fed7 	bl	8003f1c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff ff0c 	bl	8003f90 <LL_ADC_IsInternalRegulatorEnabled>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d115      	bne.n	80041aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff fef0 	bl	8003f68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004188:	4b84      	ldr	r3, [pc, #528]	@ (800439c <HAL_ADC_Init+0x284>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	099b      	lsrs	r3, r3, #6
 800418e:	4a84      	ldr	r2, [pc, #528]	@ (80043a0 <HAL_ADC_Init+0x288>)
 8004190:	fba2 2303 	umull	r2, r3, r2, r3
 8004194:	099b      	lsrs	r3, r3, #6
 8004196:	3301      	adds	r3, #1
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800419c:	e002      	b.n	80041a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f9      	bne.n	800419e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff feee 	bl	8003f90 <LL_ADC_IsInternalRegulatorEnabled>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10d      	bne.n	80041d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041be:	f043 0210 	orr.w	r2, r3, #16
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ca:	f043 0201 	orr.w	r2, r3, #1
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff ff62 	bl	80040a4 <LL_ADC_REG_IsConversionOngoing>
 80041e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e6:	f003 0310 	and.w	r3, r3, #16
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f040 80c9 	bne.w	8004382 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f040 80c5 	bne.w	8004382 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004200:	f043 0202 	orr.w	r2, r3, #2
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff fefb 	bl	8004008 <LL_ADC_IsEnabled>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d115      	bne.n	8004244 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004218:	4862      	ldr	r0, [pc, #392]	@ (80043a4 <HAL_ADC_Init+0x28c>)
 800421a:	f7ff fef5 	bl	8004008 <LL_ADC_IsEnabled>
 800421e:	4604      	mov	r4, r0
 8004220:	4861      	ldr	r0, [pc, #388]	@ (80043a8 <HAL_ADC_Init+0x290>)
 8004222:	f7ff fef1 	bl	8004008 <LL_ADC_IsEnabled>
 8004226:	4603      	mov	r3, r0
 8004228:	431c      	orrs	r4, r3
 800422a:	4860      	ldr	r0, [pc, #384]	@ (80043ac <HAL_ADC_Init+0x294>)
 800422c:	f7ff feec 	bl	8004008 <LL_ADC_IsEnabled>
 8004230:	4603      	mov	r3, r0
 8004232:	4323      	orrs	r3, r4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d105      	bne.n	8004244 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	4619      	mov	r1, r3
 800423e:	485c      	ldr	r0, [pc, #368]	@ (80043b0 <HAL_ADC_Init+0x298>)
 8004240:	f7ff fd38 	bl	8003cb4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	7e5b      	ldrb	r3, [r3, #25]
 8004248:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800424e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004254:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800425a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004262:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004264:	4313      	orrs	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d106      	bne.n	8004280 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004276:	3b01      	subs	r3, #1
 8004278:	045b      	lsls	r3, r3, #17
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	4313      	orrs	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004284:	2b00      	cmp	r3, #0
 8004286:	d009      	beq.n	800429c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004294:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	4313      	orrs	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	4b44      	ldr	r3, [pc, #272]	@ (80043b4 <HAL_ADC_Init+0x29c>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	69b9      	ldr	r1, [r7, #24]
 80042ac:	430b      	orrs	r3, r1
 80042ae:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff ff1c 	bl	80040f2 <LL_ADC_INJ_IsConversionOngoing>
 80042ba:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d13d      	bne.n	800433e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d13a      	bne.n	800433e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80042cc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80042d4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80042d6:	4313      	orrs	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042e4:	f023 0302 	bic.w	r3, r3, #2
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6812      	ldr	r2, [r2, #0]
 80042ec:	69b9      	ldr	r1, [r7, #24]
 80042ee:	430b      	orrs	r3, r1
 80042f0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d118      	bne.n	800432e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004306:	f023 0304 	bic.w	r3, r3, #4
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004312:	4311      	orrs	r1, r2
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004318:	4311      	orrs	r1, r2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800431e:	430a      	orrs	r2, r1
 8004320:	431a      	orrs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	611a      	str	r2, [r3, #16]
 800432c:	e007      	b.n	800433e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0201 	bic.w	r2, r2, #1
 800433c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d10c      	bne.n	8004360 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434c:	f023 010f 	bic.w	r1, r3, #15
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	1e5a      	subs	r2, r3, #1
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	631a      	str	r2, [r3, #48]	@ 0x30
 800435e:	e007      	b.n	8004370 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 020f 	bic.w	r2, r2, #15
 800436e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004374:	f023 0303 	bic.w	r3, r3, #3
 8004378:	f043 0201 	orr.w	r2, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004380:	e007      	b.n	8004392 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004386:	f043 0210 	orr.w	r2, r3, #16
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004392:	7ffb      	ldrb	r3, [r7, #31]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3724      	adds	r7, #36	@ 0x24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd90      	pop	{r4, r7, pc}
 800439c:	20000028 	.word	0x20000028
 80043a0:	053e2d63 	.word	0x053e2d63
 80043a4:	50040000 	.word	0x50040000
 80043a8:	50040100 	.word	0x50040100
 80043ac:	50040200 	.word	0x50040200
 80043b0:	50040300 	.word	0x50040300
 80043b4:	fff0c007 	.word	0xfff0c007

080043b8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043c0:	4857      	ldr	r0, [pc, #348]	@ (8004520 <HAL_ADC_Start+0x168>)
 80043c2:	f7ff fd8f 	bl	8003ee4 <LL_ADC_GetMultimode>
 80043c6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff fe69 	bl	80040a4 <LL_ADC_REG_IsConversionOngoing>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f040 809c 	bne.w	8004512 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_ADC_Start+0x30>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e097      	b.n	8004518 <HAL_ADC_Start+0x160>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 fe63 	bl	80050bc <ADC_Enable>
 80043f6:	4603      	mov	r3, r0
 80043f8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80043fa:	7dfb      	ldrb	r3, [r7, #23]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f040 8083 	bne.w	8004508 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004406:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800440a:	f023 0301 	bic.w	r3, r3, #1
 800440e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a42      	ldr	r2, [pc, #264]	@ (8004524 <HAL_ADC_Start+0x16c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d002      	beq.n	8004426 <HAL_ADC_Start+0x6e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	e000      	b.n	8004428 <HAL_ADC_Start+0x70>
 8004426:	4b40      	ldr	r3, [pc, #256]	@ (8004528 <HAL_ADC_Start+0x170>)
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6812      	ldr	r2, [r2, #0]
 800442c:	4293      	cmp	r3, r2
 800442e:	d002      	beq.n	8004436 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d105      	bne.n	8004442 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800443a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004446:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800444a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800444e:	d106      	bne.n	800445e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004454:	f023 0206 	bic.w	r2, r3, #6
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	659a      	str	r2, [r3, #88]	@ 0x58
 800445c:	e002      	b.n	8004464 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	221c      	movs	r2, #28
 800446a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a2a      	ldr	r2, [pc, #168]	@ (8004524 <HAL_ADC_Start+0x16c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d002      	beq.n	8004484 <HAL_ADC_Start+0xcc>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	e000      	b.n	8004486 <HAL_ADC_Start+0xce>
 8004484:	4b28      	ldr	r3, [pc, #160]	@ (8004528 <HAL_ADC_Start+0x170>)
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6812      	ldr	r2, [r2, #0]
 800448a:	4293      	cmp	r3, r2
 800448c:	d008      	beq.n	80044a0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	2b05      	cmp	r3, #5
 8004498:	d002      	beq.n	80044a0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	2b09      	cmp	r3, #9
 800449e:	d114      	bne.n	80044ca <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d007      	beq.n	80044be <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80044b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff fdc6 	bl	8004054 <LL_ADC_REG_StartConversion>
 80044c8:	e025      	b.n	8004516 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a12      	ldr	r2, [pc, #72]	@ (8004524 <HAL_ADC_Start+0x16c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d002      	beq.n	80044e6 <HAL_ADC_Start+0x12e>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	e000      	b.n	80044e8 <HAL_ADC_Start+0x130>
 80044e6:	4b10      	ldr	r3, [pc, #64]	@ (8004528 <HAL_ADC_Start+0x170>)
 80044e8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00f      	beq.n	8004516 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80044fe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	655a      	str	r2, [r3, #84]	@ 0x54
 8004506:	e006      	b.n	8004516 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8004510:	e001      	b.n	8004516 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004512:	2302      	movs	r3, #2
 8004514:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004516:	7dfb      	ldrb	r3, [r7, #23]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	50040300 	.word	0x50040300
 8004524:	50040100 	.word	0x50040100
 8004528:	50040000 	.word	0x50040000

0800452c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800453a:	2b01      	cmp	r3, #1
 800453c:	d101      	bne.n	8004542 <HAL_ADC_Stop+0x16>
 800453e:	2302      	movs	r3, #2
 8004540:	e023      	b.n	800458a <HAL_ADC_Stop+0x5e>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800454a:	2103      	movs	r1, #3
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 fcf9 	bl	8004f44 <ADC_ConversionStop>
 8004552:	4603      	mov	r3, r0
 8004554:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004556:	7bfb      	ldrb	r3, [r7, #15]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d111      	bne.n	8004580 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fe33 	bl	80051c8 <ADC_Disable>
 8004562:	4603      	mov	r3, r0
 8004564:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d109      	bne.n	8004580 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004570:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004574:	f023 0301 	bic.w	r3, r3, #1
 8004578:	f043 0201 	orr.w	r2, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004588:	7bfb      	ldrb	r3, [r7, #15]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800459e:	4866      	ldr	r0, [pc, #408]	@ (8004738 <HAL_ADC_PollForConversion+0x1a4>)
 80045a0:	f7ff fca0 	bl	8003ee4 <LL_ADC_GetMultimode>
 80045a4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d102      	bne.n	80045b4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80045ae:	2308      	movs	r3, #8
 80045b0:	61fb      	str	r3, [r7, #28]
 80045b2:	e02a      	b.n	800460a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d005      	beq.n	80045c6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2b05      	cmp	r3, #5
 80045be:	d002      	beq.n	80045c6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2b09      	cmp	r3, #9
 80045c4:	d111      	bne.n	80045ea <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d007      	beq.n	80045e4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d8:	f043 0220 	orr.w	r2, r3, #32
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e0a4      	b.n	800472e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80045e4:	2304      	movs	r3, #4
 80045e6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80045e8:	e00f      	b.n	800460a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80045ea:	4853      	ldr	r0, [pc, #332]	@ (8004738 <HAL_ADC_PollForConversion+0x1a4>)
 80045ec:	f7ff fc88 	bl	8003f00 <LL_ADC_GetMultiDMATransfer>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d007      	beq.n	8004606 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045fa:	f043 0220 	orr.w	r2, r3, #32
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e093      	b.n	800472e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004606:	2304      	movs	r3, #4
 8004608:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800460a:	f7ff fb23 	bl	8003c54 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004610:	e021      	b.n	8004656 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004618:	d01d      	beq.n	8004656 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800461a:	f7ff fb1b 	bl	8003c54 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d302      	bcc.n	8004630 <HAL_ADC_PollForConversion+0x9c>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d112      	bne.n	8004656 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	4013      	ands	r3, r2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10b      	bne.n	8004656 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004642:	f043 0204 	orr.w	r2, r3, #4
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e06b      	b.n	800472e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	4013      	ands	r3, r2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0d6      	beq.n	8004612 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004668:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff fba6 	bl	8003dc6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01c      	beq.n	80046ba <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	7e5b      	ldrb	r3, [r3, #25]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d118      	bne.n	80046ba <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b08      	cmp	r3, #8
 8004694:	d111      	bne.n	80046ba <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d105      	bne.n	80046ba <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b2:	f043 0201 	orr.w	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a1f      	ldr	r2, [pc, #124]	@ (800473c <HAL_ADC_PollForConversion+0x1a8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d002      	beq.n	80046ca <HAL_ADC_PollForConversion+0x136>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	e000      	b.n	80046cc <HAL_ADC_PollForConversion+0x138>
 80046ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004740 <HAL_ADC_PollForConversion+0x1ac>)
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6812      	ldr	r2, [r2, #0]
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d008      	beq.n	80046e6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d005      	beq.n	80046e6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b05      	cmp	r3, #5
 80046de:	d002      	beq.n	80046e6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2b09      	cmp	r3, #9
 80046e4:	d104      	bne.n	80046f0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	e00c      	b.n	800470a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a11      	ldr	r2, [pc, #68]	@ (800473c <HAL_ADC_PollForConversion+0x1a8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d002      	beq.n	8004700 <HAL_ADC_PollForConversion+0x16c>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	e000      	b.n	8004702 <HAL_ADC_PollForConversion+0x16e>
 8004700:	4b0f      	ldr	r3, [pc, #60]	@ (8004740 <HAL_ADC_PollForConversion+0x1ac>)
 8004702:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	2b08      	cmp	r3, #8
 800470e:	d104      	bne.n	800471a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2208      	movs	r2, #8
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	e008      	b.n	800472c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d103      	bne.n	800472c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	220c      	movs	r2, #12
 800472a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3720      	adds	r7, #32
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	50040300 	.word	0x50040300
 800473c:	50040100 	.word	0x50040100
 8004740:	50040000 	.word	0x50040000

08004744 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004752:	4618      	mov	r0, r3
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
	...

08004760 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b0b6      	sub	sp, #216	@ 0xd8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800476a:	2300      	movs	r3, #0
 800476c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004770:	2300      	movs	r3, #0
 8004772:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800477a:	2b01      	cmp	r3, #1
 800477c:	d101      	bne.n	8004782 <HAL_ADC_ConfigChannel+0x22>
 800477e:	2302      	movs	r3, #2
 8004780:	e3c9      	b.n	8004f16 <HAL_ADC_ConfigChannel+0x7b6>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff fc88 	bl	80040a4 <LL_ADC_REG_IsConversionOngoing>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	f040 83aa 	bne.w	8004ef0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b05      	cmp	r3, #5
 80047aa:	d824      	bhi.n	80047f6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	3b02      	subs	r3, #2
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d81b      	bhi.n	80047ee <HAL_ADC_ConfigChannel+0x8e>
 80047b6:	a201      	add	r2, pc, #4	@ (adr r2, 80047bc <HAL_ADC_ConfigChannel+0x5c>)
 80047b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047bc:	080047cd 	.word	0x080047cd
 80047c0:	080047d5 	.word	0x080047d5
 80047c4:	080047dd 	.word	0x080047dd
 80047c8:	080047e5 	.word	0x080047e5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80047cc:	230c      	movs	r3, #12
 80047ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80047d2:	e010      	b.n	80047f6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80047d4:	2312      	movs	r3, #18
 80047d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80047da:	e00c      	b.n	80047f6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80047dc:	2318      	movs	r3, #24
 80047de:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80047e2:	e008      	b.n	80047f6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80047e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80047e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80047ec:	e003      	b.n	80047f6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80047ee:	2306      	movs	r3, #6
 80047f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80047f4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6818      	ldr	r0, [r3, #0]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	461a      	mov	r2, r3
 8004800:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004804:	f7ff faf2 	bl	8003dec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff fc49 	bl	80040a4 <LL_ADC_REG_IsConversionOngoing>
 8004812:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff fc69 	bl	80040f2 <LL_ADC_INJ_IsConversionOngoing>
 8004820:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004824:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004828:	2b00      	cmp	r3, #0
 800482a:	f040 81a4 	bne.w	8004b76 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800482e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004832:	2b00      	cmp	r3, #0
 8004834:	f040 819f 	bne.w	8004b76 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6818      	ldr	r0, [r3, #0]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	6819      	ldr	r1, [r3, #0]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	461a      	mov	r2, r3
 8004846:	f7ff fafd 	bl	8003e44 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	695a      	ldr	r2, [r3, #20]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	08db      	lsrs	r3, r3, #3
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	2b04      	cmp	r3, #4
 800486a:	d00a      	beq.n	8004882 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	6919      	ldr	r1, [r3, #16]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800487c:	f7ff fa4e 	bl	8003d1c <LL_ADC_SetOffset>
 8004880:	e179      	b.n	8004b76 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2100      	movs	r1, #0
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff fa6b 	bl	8003d64 <LL_ADC_GetOffsetChannel>
 800488e:	4603      	mov	r3, r0
 8004890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10a      	bne.n	80048ae <HAL_ADC_ConfigChannel+0x14e>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2100      	movs	r1, #0
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fa60 	bl	8003d64 <LL_ADC_GetOffsetChannel>
 80048a4:	4603      	mov	r3, r0
 80048a6:	0e9b      	lsrs	r3, r3, #26
 80048a8:	f003 021f 	and.w	r2, r3, #31
 80048ac:	e01e      	b.n	80048ec <HAL_ADC_ConfigChannel+0x18c>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2100      	movs	r1, #0
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7ff fa55 	bl	8003d64 <LL_ADC_GetOffsetChannel>
 80048ba:	4603      	mov	r3, r0
 80048bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80048c4:	fa93 f3a3 	rbit	r3, r3
 80048c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80048cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80048d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80048d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80048dc:	2320      	movs	r3, #32
 80048de:	e004      	b.n	80048ea <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80048e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80048e4:	fab3 f383 	clz	r3, r3
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d105      	bne.n	8004904 <HAL_ADC_ConfigChannel+0x1a4>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	0e9b      	lsrs	r3, r3, #26
 80048fe:	f003 031f 	and.w	r3, r3, #31
 8004902:	e018      	b.n	8004936 <HAL_ADC_ConfigChannel+0x1d6>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004910:	fa93 f3a3 	rbit	r3, r3
 8004914:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004918:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800491c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004920:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8004928:	2320      	movs	r3, #32
 800492a:	e004      	b.n	8004936 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800492c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004930:	fab3 f383 	clz	r3, r3
 8004934:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004936:	429a      	cmp	r2, r3
 8004938:	d106      	bne.n	8004948 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2200      	movs	r2, #0
 8004940:	2100      	movs	r1, #0
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff fa24 	bl	8003d90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2101      	movs	r1, #1
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff fa08 	bl	8003d64 <LL_ADC_GetOffsetChannel>
 8004954:	4603      	mov	r3, r0
 8004956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10a      	bne.n	8004974 <HAL_ADC_ConfigChannel+0x214>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2101      	movs	r1, #1
 8004964:	4618      	mov	r0, r3
 8004966:	f7ff f9fd 	bl	8003d64 <LL_ADC_GetOffsetChannel>
 800496a:	4603      	mov	r3, r0
 800496c:	0e9b      	lsrs	r3, r3, #26
 800496e:	f003 021f 	and.w	r2, r3, #31
 8004972:	e01e      	b.n	80049b2 <HAL_ADC_ConfigChannel+0x252>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2101      	movs	r1, #1
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff f9f2 	bl	8003d64 <LL_ADC_GetOffsetChannel>
 8004980:	4603      	mov	r3, r0
 8004982:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800498a:	fa93 f3a3 	rbit	r3, r3
 800498e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004992:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004996:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800499a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80049a2:	2320      	movs	r3, #32
 80049a4:	e004      	b.n	80049b0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80049a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80049aa:	fab3 f383 	clz	r3, r3
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d105      	bne.n	80049ca <HAL_ADC_ConfigChannel+0x26a>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	0e9b      	lsrs	r3, r3, #26
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	e018      	b.n	80049fc <HAL_ADC_ConfigChannel+0x29c>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049d6:	fa93 f3a3 	rbit	r3, r3
 80049da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80049de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80049e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80049e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80049ee:	2320      	movs	r3, #32
 80049f0:	e004      	b.n	80049fc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80049f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049f6:	fab3 f383 	clz	r3, r3
 80049fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d106      	bne.n	8004a0e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2200      	movs	r2, #0
 8004a06:	2101      	movs	r1, #1
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff f9c1 	bl	8003d90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2102      	movs	r1, #2
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7ff f9a5 	bl	8003d64 <LL_ADC_GetOffsetChannel>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10a      	bne.n	8004a3a <HAL_ADC_ConfigChannel+0x2da>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2102      	movs	r1, #2
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff f99a 	bl	8003d64 <LL_ADC_GetOffsetChannel>
 8004a30:	4603      	mov	r3, r0
 8004a32:	0e9b      	lsrs	r3, r3, #26
 8004a34:	f003 021f 	and.w	r2, r3, #31
 8004a38:	e01e      	b.n	8004a78 <HAL_ADC_ConfigChannel+0x318>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2102      	movs	r1, #2
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7ff f98f 	bl	8003d64 <LL_ADC_GetOffsetChannel>
 8004a46:	4603      	mov	r3, r0
 8004a48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a50:	fa93 f3a3 	rbit	r3, r3
 8004a54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004a60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8004a68:	2320      	movs	r3, #32
 8004a6a:	e004      	b.n	8004a76 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8004a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a70:	fab3 f383 	clz	r3, r3
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d105      	bne.n	8004a90 <HAL_ADC_ConfigChannel+0x330>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	0e9b      	lsrs	r3, r3, #26
 8004a8a:	f003 031f 	and.w	r3, r3, #31
 8004a8e:	e014      	b.n	8004aba <HAL_ADC_ConfigChannel+0x35a>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a98:	fa93 f3a3 	rbit	r3, r3
 8004a9c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004a9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004aa0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004aa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004aac:	2320      	movs	r3, #32
 8004aae:	e004      	b.n	8004aba <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004ab0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ab4:	fab3 f383 	clz	r3, r3
 8004ab8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d106      	bne.n	8004acc <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2102      	movs	r1, #2
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff f962 	bl	8003d90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2103      	movs	r1, #3
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff f946 	bl	8003d64 <LL_ADC_GetOffsetChannel>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10a      	bne.n	8004af8 <HAL_ADC_ConfigChannel+0x398>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2103      	movs	r1, #3
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff f93b 	bl	8003d64 <LL_ADC_GetOffsetChannel>
 8004aee:	4603      	mov	r3, r0
 8004af0:	0e9b      	lsrs	r3, r3, #26
 8004af2:	f003 021f 	and.w	r2, r3, #31
 8004af6:	e017      	b.n	8004b28 <HAL_ADC_ConfigChannel+0x3c8>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2103      	movs	r1, #3
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff f930 	bl	8003d64 <LL_ADC_GetOffsetChannel>
 8004b04:	4603      	mov	r3, r0
 8004b06:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b0a:	fa93 f3a3 	rbit	r3, r3
 8004b0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004b10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b12:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004b14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8004b1a:	2320      	movs	r3, #32
 8004b1c:	e003      	b.n	8004b26 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8004b1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b20:	fab3 f383 	clz	r3, r3
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d105      	bne.n	8004b40 <HAL_ADC_ConfigChannel+0x3e0>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	0e9b      	lsrs	r3, r3, #26
 8004b3a:	f003 031f 	and.w	r3, r3, #31
 8004b3e:	e011      	b.n	8004b64 <HAL_ADC_ConfigChannel+0x404>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b48:	fa93 f3a3 	rbit	r3, r3
 8004b4c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004b4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b50:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004b52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004b58:	2320      	movs	r3, #32
 8004b5a:	e003      	b.n	8004b64 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004b5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b5e:	fab3 f383 	clz	r3, r3
 8004b62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d106      	bne.n	8004b76 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	2103      	movs	r1, #3
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff f90d 	bl	8003d90 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff fa44 	bl	8004008 <LL_ADC_IsEnabled>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f040 8140 	bne.w	8004e08 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6818      	ldr	r0, [r3, #0]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	6819      	ldr	r1, [r3, #0]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	461a      	mov	r2, r3
 8004b96:	f7ff f981 	bl	8003e9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	4a8f      	ldr	r2, [pc, #572]	@ (8004ddc <HAL_ADC_ConfigChannel+0x67c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	f040 8131 	bne.w	8004e08 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10b      	bne.n	8004bce <HAL_ADC_ConfigChannel+0x46e>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	0e9b      	lsrs	r3, r3, #26
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	f003 031f 	and.w	r3, r3, #31
 8004bc2:	2b09      	cmp	r3, #9
 8004bc4:	bf94      	ite	ls
 8004bc6:	2301      	movls	r3, #1
 8004bc8:	2300      	movhi	r3, #0
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	e019      	b.n	8004c02 <HAL_ADC_ConfigChannel+0x4a2>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bd6:	fa93 f3a3 	rbit	r3, r3
 8004bda:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bde:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004be0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8004be6:	2320      	movs	r3, #32
 8004be8:	e003      	b.n	8004bf2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004bea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bec:	fab3 f383 	clz	r3, r3
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	f003 031f 	and.w	r3, r3, #31
 8004bf8:	2b09      	cmp	r3, #9
 8004bfa:	bf94      	ite	ls
 8004bfc:	2301      	movls	r3, #1
 8004bfe:	2300      	movhi	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d079      	beq.n	8004cfa <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d107      	bne.n	8004c22 <HAL_ADC_ConfigChannel+0x4c2>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	0e9b      	lsrs	r3, r3, #26
 8004c18:	3301      	adds	r3, #1
 8004c1a:	069b      	lsls	r3, r3, #26
 8004c1c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c20:	e015      	b.n	8004c4e <HAL_ADC_ConfigChannel+0x4ee>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c2a:	fa93 f3a3 	rbit	r3, r3
 8004c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004c30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c32:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004c34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8004c3a:	2320      	movs	r3, #32
 8004c3c:	e003      	b.n	8004c46 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8004c3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c40:	fab3 f383 	clz	r3, r3
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	3301      	adds	r3, #1
 8004c48:	069b      	lsls	r3, r3, #26
 8004c4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d109      	bne.n	8004c6e <HAL_ADC_ConfigChannel+0x50e>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	0e9b      	lsrs	r3, r3, #26
 8004c60:	3301      	adds	r3, #1
 8004c62:	f003 031f 	and.w	r3, r3, #31
 8004c66:	2101      	movs	r1, #1
 8004c68:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6c:	e017      	b.n	8004c9e <HAL_ADC_ConfigChannel+0x53e>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c76:	fa93 f3a3 	rbit	r3, r3
 8004c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c7e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004c80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004c86:	2320      	movs	r3, #32
 8004c88:	e003      	b.n	8004c92 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004c8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c8c:	fab3 f383 	clz	r3, r3
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	3301      	adds	r3, #1
 8004c94:	f003 031f 	and.w	r3, r3, #31
 8004c98:	2101      	movs	r1, #1
 8004c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9e:	ea42 0103 	orr.w	r1, r2, r3
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10a      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0x564>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	0e9b      	lsrs	r3, r3, #26
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	f003 021f 	and.w	r2, r3, #31
 8004cba:	4613      	mov	r3, r2
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	4413      	add	r3, r2
 8004cc0:	051b      	lsls	r3, r3, #20
 8004cc2:	e018      	b.n	8004cf6 <HAL_ADC_ConfigChannel+0x596>
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ccc:	fa93 f3a3 	rbit	r3, r3
 8004cd0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8004cdc:	2320      	movs	r3, #32
 8004cde:	e003      	b.n	8004ce8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce2:	fab3 f383 	clz	r3, r3
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	3301      	adds	r3, #1
 8004cea:	f003 021f 	and.w	r2, r3, #31
 8004cee:	4613      	mov	r3, r2
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	4413      	add	r3, r2
 8004cf4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cf6:	430b      	orrs	r3, r1
 8004cf8:	e081      	b.n	8004dfe <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d107      	bne.n	8004d16 <HAL_ADC_ConfigChannel+0x5b6>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	0e9b      	lsrs	r3, r3, #26
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	069b      	lsls	r3, r3, #26
 8004d10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d14:	e015      	b.n	8004d42 <HAL_ADC_ConfigChannel+0x5e2>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1e:	fa93 f3a3 	rbit	r3, r3
 8004d22:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8004d2e:	2320      	movs	r3, #32
 8004d30:	e003      	b.n	8004d3a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8004d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d34:	fab3 f383 	clz	r3, r3
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	069b      	lsls	r3, r3, #26
 8004d3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <HAL_ADC_ConfigChannel+0x602>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	0e9b      	lsrs	r3, r3, #26
 8004d54:	3301      	adds	r3, #1
 8004d56:	f003 031f 	and.w	r3, r3, #31
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d60:	e017      	b.n	8004d92 <HAL_ADC_ConfigChannel+0x632>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	fa93 f3a3 	rbit	r3, r3
 8004d6e:	61bb      	str	r3, [r7, #24]
  return result;
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8004d7a:	2320      	movs	r3, #32
 8004d7c:	e003      	b.n	8004d86 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8004d7e:	6a3b      	ldr	r3, [r7, #32]
 8004d80:	fab3 f383 	clz	r3, r3
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	3301      	adds	r3, #1
 8004d88:	f003 031f 	and.w	r3, r3, #31
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d92:	ea42 0103 	orr.w	r1, r2, r3
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10d      	bne.n	8004dbe <HAL_ADC_ConfigChannel+0x65e>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	0e9b      	lsrs	r3, r3, #26
 8004da8:	3301      	adds	r3, #1
 8004daa:	f003 021f 	and.w	r2, r3, #31
 8004dae:	4613      	mov	r3, r2
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	4413      	add	r3, r2
 8004db4:	3b1e      	subs	r3, #30
 8004db6:	051b      	lsls	r3, r3, #20
 8004db8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004dbc:	e01e      	b.n	8004dfc <HAL_ADC_ConfigChannel+0x69c>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	fa93 f3a3 	rbit	r3, r3
 8004dca:	60fb      	str	r3, [r7, #12]
  return result;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d104      	bne.n	8004de0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8004dd6:	2320      	movs	r3, #32
 8004dd8:	e006      	b.n	8004de8 <HAL_ADC_ConfigChannel+0x688>
 8004dda:	bf00      	nop
 8004ddc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	fab3 f383 	clz	r3, r3
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	3301      	adds	r3, #1
 8004dea:	f003 021f 	and.w	r2, r3, #31
 8004dee:	4613      	mov	r3, r2
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	4413      	add	r3, r2
 8004df4:	3b1e      	subs	r3, #30
 8004df6:	051b      	lsls	r3, r3, #20
 8004df8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dfc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e02:	4619      	mov	r1, r3
 8004e04:	f7ff f81e 	bl	8003e44 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	4b44      	ldr	r3, [pc, #272]	@ (8004f20 <HAL_ADC_ConfigChannel+0x7c0>)
 8004e0e:	4013      	ands	r3, r2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d07a      	beq.n	8004f0a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e14:	4843      	ldr	r0, [pc, #268]	@ (8004f24 <HAL_ADC_ConfigChannel+0x7c4>)
 8004e16:	f7fe ff73 	bl	8003d00 <LL_ADC_GetCommonPathInternalCh>
 8004e1a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a41      	ldr	r2, [pc, #260]	@ (8004f28 <HAL_ADC_ConfigChannel+0x7c8>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d12c      	bne.n	8004e82 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d126      	bne.n	8004e82 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a3c      	ldr	r2, [pc, #240]	@ (8004f2c <HAL_ADC_ConfigChannel+0x7cc>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d004      	beq.n	8004e48 <HAL_ADC_ConfigChannel+0x6e8>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a3b      	ldr	r2, [pc, #236]	@ (8004f30 <HAL_ADC_ConfigChannel+0x7d0>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d15d      	bne.n	8004f04 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e50:	4619      	mov	r1, r3
 8004e52:	4834      	ldr	r0, [pc, #208]	@ (8004f24 <HAL_ADC_ConfigChannel+0x7c4>)
 8004e54:	f7fe ff41 	bl	8003cda <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e58:	4b36      	ldr	r3, [pc, #216]	@ (8004f34 <HAL_ADC_ConfigChannel+0x7d4>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	099b      	lsrs	r3, r3, #6
 8004e5e:	4a36      	ldr	r2, [pc, #216]	@ (8004f38 <HAL_ADC_ConfigChannel+0x7d8>)
 8004e60:	fba2 2303 	umull	r2, r3, r2, r3
 8004e64:	099b      	lsrs	r3, r3, #6
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	4613      	mov	r3, r2
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004e72:	e002      	b.n	8004e7a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1f9      	bne.n	8004e74 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e80:	e040      	b.n	8004f04 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a2d      	ldr	r2, [pc, #180]	@ (8004f3c <HAL_ADC_ConfigChannel+0x7dc>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d118      	bne.n	8004ebe <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d112      	bne.n	8004ebe <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a23      	ldr	r2, [pc, #140]	@ (8004f2c <HAL_ADC_ConfigChannel+0x7cc>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d004      	beq.n	8004eac <HAL_ADC_ConfigChannel+0x74c>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a22      	ldr	r2, [pc, #136]	@ (8004f30 <HAL_ADC_ConfigChannel+0x7d0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d12d      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004eac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004eb0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	481b      	ldr	r0, [pc, #108]	@ (8004f24 <HAL_ADC_ConfigChannel+0x7c4>)
 8004eb8:	f7fe ff0f 	bl	8003cda <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ebc:	e024      	b.n	8004f08 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8004f40 <HAL_ADC_ConfigChannel+0x7e0>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d120      	bne.n	8004f0a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ec8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ecc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d11a      	bne.n	8004f0a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a14      	ldr	r2, [pc, #80]	@ (8004f2c <HAL_ADC_ConfigChannel+0x7cc>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d115      	bne.n	8004f0a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ede:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ee2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	480e      	ldr	r0, [pc, #56]	@ (8004f24 <HAL_ADC_ConfigChannel+0x7c4>)
 8004eea:	f7fe fef6 	bl	8003cda <LL_ADC_SetCommonPathInternalCh>
 8004eee:	e00c      	b.n	8004f0a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ef4:	f043 0220 	orr.w	r2, r3, #32
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004f02:	e002      	b.n	8004f0a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f04:	bf00      	nop
 8004f06:	e000      	b.n	8004f0a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004f12:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	37d8      	adds	r7, #216	@ 0xd8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	80080000 	.word	0x80080000
 8004f24:	50040300 	.word	0x50040300
 8004f28:	c7520000 	.word	0xc7520000
 8004f2c:	50040000 	.word	0x50040000
 8004f30:	50040200 	.word	0x50040200
 8004f34:	20000028 	.word	0x20000028
 8004f38:	053e2d63 	.word	0x053e2d63
 8004f3c:	cb840000 	.word	0xcb840000
 8004f40:	80000001 	.word	0x80000001

08004f44 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff f8a2 	bl	80040a4 <LL_ADC_REG_IsConversionOngoing>
 8004f60:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff f8c3 	bl	80040f2 <LL_ADC_INJ_IsConversionOngoing>
 8004f6c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d103      	bne.n	8004f7c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 8098 	beq.w	80050ac <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d02a      	beq.n	8004fe0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	7e5b      	ldrb	r3, [r3, #25]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d126      	bne.n	8004fe0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	7e1b      	ldrb	r3, [r3, #24]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d122      	bne.n	8004fe0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004f9e:	e014      	b.n	8004fca <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	4a45      	ldr	r2, [pc, #276]	@ (80050b8 <ADC_ConversionStop+0x174>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d90d      	bls.n	8004fc4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fac:	f043 0210 	orr.w	r2, r3, #16
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb8:	f043 0201 	orr.w	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e074      	b.n	80050ae <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd4:	2b40      	cmp	r3, #64	@ 0x40
 8004fd6:	d1e3      	bne.n	8004fa0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2240      	movs	r2, #64	@ 0x40
 8004fde:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d014      	beq.n	8005010 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff f85a 	bl	80040a4 <LL_ADC_REG_IsConversionOngoing>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00c      	beq.n	8005010 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff f817 	bl	800402e <LL_ADC_IsDisableOngoing>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d104      	bne.n	8005010 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f7ff f836 	bl	800407c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d014      	beq.n	8005040 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f7ff f869 	bl	80040f2 <LL_ADC_INJ_IsConversionOngoing>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00c      	beq.n	8005040 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4618      	mov	r0, r3
 800502c:	f7fe ffff 	bl	800402e <LL_ADC_IsDisableOngoing>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d104      	bne.n	8005040 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4618      	mov	r0, r3
 800503c:	f7ff f845 	bl	80040ca <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	2b02      	cmp	r3, #2
 8005044:	d005      	beq.n	8005052 <ADC_ConversionStop+0x10e>
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	2b03      	cmp	r3, #3
 800504a:	d105      	bne.n	8005058 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800504c:	230c      	movs	r3, #12
 800504e:	617b      	str	r3, [r7, #20]
        break;
 8005050:	e005      	b.n	800505e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005052:	2308      	movs	r3, #8
 8005054:	617b      	str	r3, [r7, #20]
        break;
 8005056:	e002      	b.n	800505e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005058:	2304      	movs	r3, #4
 800505a:	617b      	str	r3, [r7, #20]
        break;
 800505c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800505e:	f7fe fdf9 	bl	8003c54 <HAL_GetTick>
 8005062:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005064:	e01b      	b.n	800509e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005066:	f7fe fdf5 	bl	8003c54 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b05      	cmp	r3, #5
 8005072:	d914      	bls.n	800509e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	4013      	ands	r3, r2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00d      	beq.n	800509e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005086:	f043 0210 	orr.w	r2, r3, #16
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005092:	f043 0201 	orr.w	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e007      	b.n	80050ae <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	4013      	ands	r3, r2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1dc      	bne.n	8005066 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3720      	adds	r7, #32
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	a33fffff 	.word	0xa33fffff

080050bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80050c4:	2300      	movs	r3, #0
 80050c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fe ff9b 	bl	8004008 <LL_ADC_IsEnabled>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d169      	bne.n	80051ac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689a      	ldr	r2, [r3, #8]
 80050de:	4b36      	ldr	r3, [pc, #216]	@ (80051b8 <ADC_Enable+0xfc>)
 80050e0:	4013      	ands	r3, r2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00d      	beq.n	8005102 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ea:	f043 0210 	orr.w	r2, r3, #16
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f6:	f043 0201 	orr.w	r2, r3, #1
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e055      	b.n	80051ae <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4618      	mov	r0, r3
 8005108:	f7fe ff56 	bl	8003fb8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800510c:	482b      	ldr	r0, [pc, #172]	@ (80051bc <ADC_Enable+0x100>)
 800510e:	f7fe fdf7 	bl	8003d00 <LL_ADC_GetCommonPathInternalCh>
 8005112:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005114:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005118:	2b00      	cmp	r3, #0
 800511a:	d013      	beq.n	8005144 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800511c:	4b28      	ldr	r3, [pc, #160]	@ (80051c0 <ADC_Enable+0x104>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	099b      	lsrs	r3, r3, #6
 8005122:	4a28      	ldr	r2, [pc, #160]	@ (80051c4 <ADC_Enable+0x108>)
 8005124:	fba2 2303 	umull	r2, r3, r2, r3
 8005128:	099b      	lsrs	r3, r3, #6
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	4613      	mov	r3, r2
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005136:	e002      	b.n	800513e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	3b01      	subs	r3, #1
 800513c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1f9      	bne.n	8005138 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005144:	f7fe fd86 	bl	8003c54 <HAL_GetTick>
 8005148:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800514a:	e028      	b.n	800519e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4618      	mov	r0, r3
 8005152:	f7fe ff59 	bl	8004008 <LL_ADC_IsEnabled>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d104      	bne.n	8005166 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4618      	mov	r0, r3
 8005162:	f7fe ff29 	bl	8003fb8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005166:	f7fe fd75 	bl	8003c54 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d914      	bls.n	800519e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b01      	cmp	r3, #1
 8005180:	d00d      	beq.n	800519e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005186:	f043 0210 	orr.w	r2, r3, #16
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005192:	f043 0201 	orr.w	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e007      	b.n	80051ae <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d1cf      	bne.n	800514c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	8000003f 	.word	0x8000003f
 80051bc:	50040300 	.word	0x50040300
 80051c0:	20000028 	.word	0x20000028
 80051c4:	053e2d63 	.word	0x053e2d63

080051c8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7fe ff2a 	bl	800402e <LL_ADC_IsDisableOngoing>
 80051da:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fe ff11 	bl	8004008 <LL_ADC_IsEnabled>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d047      	beq.n	800527c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d144      	bne.n	800527c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f003 030d 	and.w	r3, r3, #13
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d10c      	bne.n	800521a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4618      	mov	r0, r3
 8005206:	f7fe feeb 	bl	8003fe0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2203      	movs	r2, #3
 8005210:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005212:	f7fe fd1f 	bl	8003c54 <HAL_GetTick>
 8005216:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005218:	e029      	b.n	800526e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800521e:	f043 0210 	orr.w	r2, r3, #16
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800522a:	f043 0201 	orr.w	r2, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e023      	b.n	800527e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005236:	f7fe fd0d 	bl	8003c54 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d914      	bls.n	800526e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00d      	beq.n	800526e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005256:	f043 0210 	orr.w	r2, r3, #16
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005262:	f043 0201 	orr.w	r2, r3, #1
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e007      	b.n	800527e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1dc      	bne.n	8005236 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <LL_ADC_IsEnabled>:
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b01      	cmp	r3, #1
 8005298:	d101      	bne.n	800529e <LL_ADC_IsEnabled+0x18>
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <LL_ADC_IsEnabled+0x1a>
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <LL_ADC_REG_IsConversionOngoing>:
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d101      	bne.n	80052c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80052c0:	2301      	movs	r3, #1
 80052c2:	e000      	b.n	80052c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
	...

080052d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80052d4:	b590      	push	{r4, r7, lr}
 80052d6:	b09f      	sub	sp, #124	@ 0x7c
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d101      	bne.n	80052f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80052ee:	2302      	movs	r3, #2
 80052f0:	e093      	b.n	800541a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80052fa:	2300      	movs	r3, #0
 80052fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80052fe:	2300      	movs	r3, #0
 8005300:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a47      	ldr	r2, [pc, #284]	@ (8005424 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d102      	bne.n	8005312 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800530c:	4b46      	ldr	r3, [pc, #280]	@ (8005428 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800530e:	60bb      	str	r3, [r7, #8]
 8005310:	e001      	b.n	8005316 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005312:	2300      	movs	r3, #0
 8005314:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10b      	bne.n	8005334 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005320:	f043 0220 	orr.w	r2, r3, #32
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e072      	b.n	800541a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4618      	mov	r0, r3
 8005338:	f7ff ffb8 	bl	80052ac <LL_ADC_REG_IsConversionOngoing>
 800533c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4618      	mov	r0, r3
 8005344:	f7ff ffb2 	bl	80052ac <LL_ADC_REG_IsConversionOngoing>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d154      	bne.n	80053f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800534e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005350:	2b00      	cmp	r3, #0
 8005352:	d151      	bne.n	80053f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005354:	4b35      	ldr	r3, [pc, #212]	@ (800542c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005356:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d02c      	beq.n	80053ba <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005360:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	6859      	ldr	r1, [r3, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005372:	035b      	lsls	r3, r3, #13
 8005374:	430b      	orrs	r3, r1
 8005376:	431a      	orrs	r2, r3
 8005378:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800537a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800537c:	4829      	ldr	r0, [pc, #164]	@ (8005424 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800537e:	f7ff ff82 	bl	8005286 <LL_ADC_IsEnabled>
 8005382:	4604      	mov	r4, r0
 8005384:	4828      	ldr	r0, [pc, #160]	@ (8005428 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005386:	f7ff ff7e 	bl	8005286 <LL_ADC_IsEnabled>
 800538a:	4603      	mov	r3, r0
 800538c:	431c      	orrs	r4, r3
 800538e:	4828      	ldr	r0, [pc, #160]	@ (8005430 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005390:	f7ff ff79 	bl	8005286 <LL_ADC_IsEnabled>
 8005394:	4603      	mov	r3, r0
 8005396:	4323      	orrs	r3, r4
 8005398:	2b00      	cmp	r3, #0
 800539a:	d137      	bne.n	800540c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800539c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80053a4:	f023 030f 	bic.w	r3, r3, #15
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	6811      	ldr	r1, [r2, #0]
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	6892      	ldr	r2, [r2, #8]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	431a      	orrs	r2, r3
 80053b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053b6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80053b8:	e028      	b.n	800540c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80053ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053c4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053c6:	4817      	ldr	r0, [pc, #92]	@ (8005424 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80053c8:	f7ff ff5d 	bl	8005286 <LL_ADC_IsEnabled>
 80053cc:	4604      	mov	r4, r0
 80053ce:	4816      	ldr	r0, [pc, #88]	@ (8005428 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80053d0:	f7ff ff59 	bl	8005286 <LL_ADC_IsEnabled>
 80053d4:	4603      	mov	r3, r0
 80053d6:	431c      	orrs	r4, r3
 80053d8:	4815      	ldr	r0, [pc, #84]	@ (8005430 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80053da:	f7ff ff54 	bl	8005286 <LL_ADC_IsEnabled>
 80053de:	4603      	mov	r3, r0
 80053e0:	4323      	orrs	r3, r4
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d112      	bne.n	800540c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80053e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80053ee:	f023 030f 	bic.w	r3, r3, #15
 80053f2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80053f4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80053f6:	e009      	b.n	800540c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053fc:	f043 0220 	orr.w	r2, r3, #32
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800540a:	e000      	b.n	800540e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800540c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8005416:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800541a:	4618      	mov	r0, r3
 800541c:	377c      	adds	r7, #124	@ 0x7c
 800541e:	46bd      	mov	sp, r7
 8005420:	bd90      	pop	{r4, r7, pc}
 8005422:	bf00      	nop
 8005424:	50040000 	.word	0x50040000
 8005428:	50040100 	.word	0x50040100
 800542c:	50040300 	.word	0x50040300
 8005430:	50040200 	.word	0x50040200

08005434 <__NVIC_SetPriorityGrouping>:
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005444:	4b0c      	ldr	r3, [pc, #48]	@ (8005478 <__NVIC_SetPriorityGrouping+0x44>)
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005450:	4013      	ands	r3, r2
 8005452:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800545c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005466:	4a04      	ldr	r2, [pc, #16]	@ (8005478 <__NVIC_SetPriorityGrouping+0x44>)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	60d3      	str	r3, [r2, #12]
}
 800546c:	bf00      	nop
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	e000ed00 	.word	0xe000ed00

0800547c <__NVIC_GetPriorityGrouping>:
{
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005480:	4b04      	ldr	r3, [pc, #16]	@ (8005494 <__NVIC_GetPriorityGrouping+0x18>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	0a1b      	lsrs	r3, r3, #8
 8005486:	f003 0307 	and.w	r3, r3, #7
}
 800548a:	4618      	mov	r0, r3
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	e000ed00 	.word	0xe000ed00

08005498 <__NVIC_EnableIRQ>:
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	4603      	mov	r3, r0
 80054a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	db0b      	blt.n	80054c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054aa:	79fb      	ldrb	r3, [r7, #7]
 80054ac:	f003 021f 	and.w	r2, r3, #31
 80054b0:	4907      	ldr	r1, [pc, #28]	@ (80054d0 <__NVIC_EnableIRQ+0x38>)
 80054b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	2001      	movs	r0, #1
 80054ba:	fa00 f202 	lsl.w	r2, r0, r2
 80054be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	e000e100 	.word	0xe000e100

080054d4 <__NVIC_SetPriority>:
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	6039      	str	r1, [r7, #0]
 80054de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	db0a      	blt.n	80054fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	490c      	ldr	r1, [pc, #48]	@ (8005520 <__NVIC_SetPriority+0x4c>)
 80054ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054f2:	0112      	lsls	r2, r2, #4
 80054f4:	b2d2      	uxtb	r2, r2
 80054f6:	440b      	add	r3, r1
 80054f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80054fc:	e00a      	b.n	8005514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	b2da      	uxtb	r2, r3
 8005502:	4908      	ldr	r1, [pc, #32]	@ (8005524 <__NVIC_SetPriority+0x50>)
 8005504:	79fb      	ldrb	r3, [r7, #7]
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	3b04      	subs	r3, #4
 800550c:	0112      	lsls	r2, r2, #4
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	440b      	add	r3, r1
 8005512:	761a      	strb	r2, [r3, #24]
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	e000e100 	.word	0xe000e100
 8005524:	e000ed00 	.word	0xe000ed00

08005528 <NVIC_EncodePriority>:
{
 8005528:	b480      	push	{r7}
 800552a:	b089      	sub	sp, #36	@ 0x24
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f1c3 0307 	rsb	r3, r3, #7
 8005542:	2b04      	cmp	r3, #4
 8005544:	bf28      	it	cs
 8005546:	2304      	movcs	r3, #4
 8005548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	3304      	adds	r3, #4
 800554e:	2b06      	cmp	r3, #6
 8005550:	d902      	bls.n	8005558 <NVIC_EncodePriority+0x30>
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	3b03      	subs	r3, #3
 8005556:	e000      	b.n	800555a <NVIC_EncodePriority+0x32>
 8005558:	2300      	movs	r3, #0
 800555a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800555c:	f04f 32ff 	mov.w	r2, #4294967295
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	fa02 f303 	lsl.w	r3, r2, r3
 8005566:	43da      	mvns	r2, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	401a      	ands	r2, r3
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005570:	f04f 31ff 	mov.w	r1, #4294967295
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	fa01 f303 	lsl.w	r3, r1, r3
 800557a:	43d9      	mvns	r1, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005580:	4313      	orrs	r3, r2
}
 8005582:	4618      	mov	r0, r3
 8005584:	3724      	adds	r7, #36	@ 0x24
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
	...

08005590 <SysTick_Config>:
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3b01      	subs	r3, #1
 800559c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055a0:	d301      	bcc.n	80055a6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80055a2:	2301      	movs	r3, #1
 80055a4:	e00f      	b.n	80055c6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055a6:	4a0a      	ldr	r2, [pc, #40]	@ (80055d0 <SysTick_Config+0x40>)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055ae:	210f      	movs	r1, #15
 80055b0:	f04f 30ff 	mov.w	r0, #4294967295
 80055b4:	f7ff ff8e 	bl	80054d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055b8:	4b05      	ldr	r3, [pc, #20]	@ (80055d0 <SysTick_Config+0x40>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055be:	4b04      	ldr	r3, [pc, #16]	@ (80055d0 <SysTick_Config+0x40>)
 80055c0:	2207      	movs	r2, #7
 80055c2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	e000e010 	.word	0xe000e010

080055d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7ff ff29 	bl	8005434 <__NVIC_SetPriorityGrouping>
}
 80055e2:	bf00      	nop
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b086      	sub	sp, #24
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	4603      	mov	r3, r0
 80055f2:	60b9      	str	r1, [r7, #8]
 80055f4:	607a      	str	r2, [r7, #4]
 80055f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80055f8:	2300      	movs	r3, #0
 80055fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80055fc:	f7ff ff3e 	bl	800547c <__NVIC_GetPriorityGrouping>
 8005600:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	68b9      	ldr	r1, [r7, #8]
 8005606:	6978      	ldr	r0, [r7, #20]
 8005608:	f7ff ff8e 	bl	8005528 <NVIC_EncodePriority>
 800560c:	4602      	mov	r2, r0
 800560e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005612:	4611      	mov	r1, r2
 8005614:	4618      	mov	r0, r3
 8005616:	f7ff ff5d 	bl	80054d4 <__NVIC_SetPriority>
}
 800561a:	bf00      	nop
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b082      	sub	sp, #8
 8005626:	af00      	add	r7, sp, #0
 8005628:	4603      	mov	r3, r0
 800562a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800562c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff ff31 	bl	8005498 <__NVIC_EnableIRQ>
}
 8005636:	bf00      	nop
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b082      	sub	sp, #8
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7ff ffa2 	bl	8005590 <SysTick_Config>
 800564c:	4603      	mov	r3, r0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e098      	b.n	800579c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	461a      	mov	r2, r3
 8005670:	4b4d      	ldr	r3, [pc, #308]	@ (80057a8 <HAL_DMA_Init+0x150>)
 8005672:	429a      	cmp	r2, r3
 8005674:	d80f      	bhi.n	8005696 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	4b4b      	ldr	r3, [pc, #300]	@ (80057ac <HAL_DMA_Init+0x154>)
 800567e:	4413      	add	r3, r2
 8005680:	4a4b      	ldr	r2, [pc, #300]	@ (80057b0 <HAL_DMA_Init+0x158>)
 8005682:	fba2 2303 	umull	r2, r3, r2, r3
 8005686:	091b      	lsrs	r3, r3, #4
 8005688:	009a      	lsls	r2, r3, #2
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a48      	ldr	r2, [pc, #288]	@ (80057b4 <HAL_DMA_Init+0x15c>)
 8005692:	641a      	str	r2, [r3, #64]	@ 0x40
 8005694:	e00e      	b.n	80056b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	4b46      	ldr	r3, [pc, #280]	@ (80057b8 <HAL_DMA_Init+0x160>)
 800569e:	4413      	add	r3, r2
 80056a0:	4a43      	ldr	r2, [pc, #268]	@ (80057b0 <HAL_DMA_Init+0x158>)
 80056a2:	fba2 2303 	umull	r2, r3, r2, r3
 80056a6:	091b      	lsrs	r3, r3, #4
 80056a8:	009a      	lsls	r2, r3, #2
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a42      	ldr	r2, [pc, #264]	@ (80057bc <HAL_DMA_Init+0x164>)
 80056b2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80056ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80056d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800570e:	d039      	beq.n	8005784 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005714:	4a27      	ldr	r2, [pc, #156]	@ (80057b4 <HAL_DMA_Init+0x15c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d11a      	bne.n	8005750 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800571a:	4b29      	ldr	r3, [pc, #164]	@ (80057c0 <HAL_DMA_Init+0x168>)
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005722:	f003 031c 	and.w	r3, r3, #28
 8005726:	210f      	movs	r1, #15
 8005728:	fa01 f303 	lsl.w	r3, r1, r3
 800572c:	43db      	mvns	r3, r3
 800572e:	4924      	ldr	r1, [pc, #144]	@ (80057c0 <HAL_DMA_Init+0x168>)
 8005730:	4013      	ands	r3, r2
 8005732:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005734:	4b22      	ldr	r3, [pc, #136]	@ (80057c0 <HAL_DMA_Init+0x168>)
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6859      	ldr	r1, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005740:	f003 031c 	and.w	r3, r3, #28
 8005744:	fa01 f303 	lsl.w	r3, r1, r3
 8005748:	491d      	ldr	r1, [pc, #116]	@ (80057c0 <HAL_DMA_Init+0x168>)
 800574a:	4313      	orrs	r3, r2
 800574c:	600b      	str	r3, [r1, #0]
 800574e:	e019      	b.n	8005784 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005750:	4b1c      	ldr	r3, [pc, #112]	@ (80057c4 <HAL_DMA_Init+0x16c>)
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005758:	f003 031c 	and.w	r3, r3, #28
 800575c:	210f      	movs	r1, #15
 800575e:	fa01 f303 	lsl.w	r3, r1, r3
 8005762:	43db      	mvns	r3, r3
 8005764:	4917      	ldr	r1, [pc, #92]	@ (80057c4 <HAL_DMA_Init+0x16c>)
 8005766:	4013      	ands	r3, r2
 8005768:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800576a:	4b16      	ldr	r3, [pc, #88]	@ (80057c4 <HAL_DMA_Init+0x16c>)
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6859      	ldr	r1, [r3, #4]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005776:	f003 031c 	and.w	r3, r3, #28
 800577a:	fa01 f303 	lsl.w	r3, r1, r3
 800577e:	4911      	ldr	r1, [pc, #68]	@ (80057c4 <HAL_DMA_Init+0x16c>)
 8005780:	4313      	orrs	r3, r2
 8005782:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	40020407 	.word	0x40020407
 80057ac:	bffdfff8 	.word	0xbffdfff8
 80057b0:	cccccccd 	.word	0xcccccccd
 80057b4:	40020000 	.word	0x40020000
 80057b8:	bffdfbf8 	.word	0xbffdfbf8
 80057bc:	40020400 	.word	0x40020400
 80057c0:	400200a8 	.word	0x400200a8
 80057c4:	400204a8 	.word	0x400204a8

080057c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e4:	f003 031c 	and.w	r3, r3, #28
 80057e8:	2204      	movs	r2, #4
 80057ea:	409a      	lsls	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4013      	ands	r3, r2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d026      	beq.n	8005842 <HAL_DMA_IRQHandler+0x7a>
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d021      	beq.n	8005842 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0320 	and.w	r3, r3, #32
 8005808:	2b00      	cmp	r3, #0
 800580a:	d107      	bne.n	800581c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 0204 	bic.w	r2, r2, #4
 800581a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005820:	f003 021c 	and.w	r2, r3, #28
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005828:	2104      	movs	r1, #4
 800582a:	fa01 f202 	lsl.w	r2, r1, r2
 800582e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005834:	2b00      	cmp	r3, #0
 8005836:	d071      	beq.n	800591c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005840:	e06c      	b.n	800591c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005846:	f003 031c 	and.w	r3, r3, #28
 800584a:	2202      	movs	r2, #2
 800584c:	409a      	lsls	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4013      	ands	r3, r2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d02e      	beq.n	80058b4 <HAL_DMA_IRQHandler+0xec>
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d029      	beq.n	80058b4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10b      	bne.n	8005886 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 020a 	bic.w	r2, r2, #10
 800587c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800588a:	f003 021c 	and.w	r2, r3, #28
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005892:	2102      	movs	r1, #2
 8005894:	fa01 f202 	lsl.w	r2, r1, r2
 8005898:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d038      	beq.n	800591c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80058b2:	e033      	b.n	800591c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b8:	f003 031c 	and.w	r3, r3, #28
 80058bc:	2208      	movs	r2, #8
 80058be:	409a      	lsls	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4013      	ands	r3, r2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d02a      	beq.n	800591e <HAL_DMA_IRQHandler+0x156>
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d025      	beq.n	800591e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 020e 	bic.w	r2, r2, #14
 80058e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e6:	f003 021c 	and.w	r2, r3, #28
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ee:	2101      	movs	r1, #1
 80058f0:	fa01 f202 	lsl.w	r2, r1, r2
 80058f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005910:	2b00      	cmp	r3, #0
 8005912:	d004      	beq.n	800591e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800591c:	bf00      	nop
 800591e:	bf00      	nop
}
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
	...

08005928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005932:	2300      	movs	r3, #0
 8005934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005936:	e17f      	b.n	8005c38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	2101      	movs	r1, #1
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	fa01 f303 	lsl.w	r3, r1, r3
 8005944:	4013      	ands	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 8171 	beq.w	8005c32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f003 0303 	and.w	r3, r3, #3
 8005958:	2b01      	cmp	r3, #1
 800595a:	d005      	beq.n	8005968 <HAL_GPIO_Init+0x40>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f003 0303 	and.w	r3, r3, #3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d130      	bne.n	80059ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	2203      	movs	r2, #3
 8005974:	fa02 f303 	lsl.w	r3, r2, r3
 8005978:	43db      	mvns	r3, r3
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	4013      	ands	r3, r2
 800597e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	68da      	ldr	r2, [r3, #12]
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	fa02 f303 	lsl.w	r3, r2, r3
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	4313      	orrs	r3, r2
 8005990:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800599e:	2201      	movs	r2, #1
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	fa02 f303 	lsl.w	r3, r2, r3
 80059a6:	43db      	mvns	r3, r3
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	4013      	ands	r3, r2
 80059ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	091b      	lsrs	r3, r3, #4
 80059b4:	f003 0201 	and.w	r2, r3, #1
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	fa02 f303 	lsl.w	r3, r2, r3
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f003 0303 	and.w	r3, r3, #3
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d118      	bne.n	8005a08 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80059dc:	2201      	movs	r2, #1
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	fa02 f303 	lsl.w	r3, r2, r3
 80059e4:	43db      	mvns	r3, r3
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	4013      	ands	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	08db      	lsrs	r3, r3, #3
 80059f2:	f003 0201 	and.w	r2, r3, #1
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	fa02 f303 	lsl.w	r3, r2, r3
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f003 0303 	and.w	r3, r3, #3
 8005a10:	2b03      	cmp	r3, #3
 8005a12:	d017      	beq.n	8005a44 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	2203      	movs	r2, #3
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	43db      	mvns	r3, r3
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	fa02 f303 	lsl.w	r3, r2, r3
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f003 0303 	and.w	r3, r3, #3
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d123      	bne.n	8005a98 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	08da      	lsrs	r2, r3, #3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	3208      	adds	r2, #8
 8005a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	220f      	movs	r2, #15
 8005a68:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6c:	43db      	mvns	r3, r3
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	4013      	ands	r3, r2
 8005a72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	fa02 f303 	lsl.w	r3, r2, r3
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	08da      	lsrs	r2, r3, #3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	3208      	adds	r2, #8
 8005a92:	6939      	ldr	r1, [r7, #16]
 8005a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	2203      	movs	r2, #3
 8005aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa8:	43db      	mvns	r3, r3
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	4013      	ands	r3, r2
 8005aae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f003 0203 	and.w	r2, r3, #3
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	005b      	lsls	r3, r3, #1
 8005abc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 80ac 	beq.w	8005c32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ada:	4b5f      	ldr	r3, [pc, #380]	@ (8005c58 <HAL_GPIO_Init+0x330>)
 8005adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ade:	4a5e      	ldr	r2, [pc, #376]	@ (8005c58 <HAL_GPIO_Init+0x330>)
 8005ae0:	f043 0301 	orr.w	r3, r3, #1
 8005ae4:	6613      	str	r3, [r2, #96]	@ 0x60
 8005ae6:	4b5c      	ldr	r3, [pc, #368]	@ (8005c58 <HAL_GPIO_Init+0x330>)
 8005ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	60bb      	str	r3, [r7, #8]
 8005af0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005af2:	4a5a      	ldr	r2, [pc, #360]	@ (8005c5c <HAL_GPIO_Init+0x334>)
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	089b      	lsrs	r3, r3, #2
 8005af8:	3302      	adds	r3, #2
 8005afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005afe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	220f      	movs	r2, #15
 8005b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4013      	ands	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005b1c:	d025      	beq.n	8005b6a <HAL_GPIO_Init+0x242>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a4f      	ldr	r2, [pc, #316]	@ (8005c60 <HAL_GPIO_Init+0x338>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d01f      	beq.n	8005b66 <HAL_GPIO_Init+0x23e>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a4e      	ldr	r2, [pc, #312]	@ (8005c64 <HAL_GPIO_Init+0x33c>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d019      	beq.n	8005b62 <HAL_GPIO_Init+0x23a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a4d      	ldr	r2, [pc, #308]	@ (8005c68 <HAL_GPIO_Init+0x340>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d013      	beq.n	8005b5e <HAL_GPIO_Init+0x236>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a4c      	ldr	r2, [pc, #304]	@ (8005c6c <HAL_GPIO_Init+0x344>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d00d      	beq.n	8005b5a <HAL_GPIO_Init+0x232>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a4b      	ldr	r2, [pc, #300]	@ (8005c70 <HAL_GPIO_Init+0x348>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d007      	beq.n	8005b56 <HAL_GPIO_Init+0x22e>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a4a      	ldr	r2, [pc, #296]	@ (8005c74 <HAL_GPIO_Init+0x34c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d101      	bne.n	8005b52 <HAL_GPIO_Init+0x22a>
 8005b4e:	2306      	movs	r3, #6
 8005b50:	e00c      	b.n	8005b6c <HAL_GPIO_Init+0x244>
 8005b52:	2307      	movs	r3, #7
 8005b54:	e00a      	b.n	8005b6c <HAL_GPIO_Init+0x244>
 8005b56:	2305      	movs	r3, #5
 8005b58:	e008      	b.n	8005b6c <HAL_GPIO_Init+0x244>
 8005b5a:	2304      	movs	r3, #4
 8005b5c:	e006      	b.n	8005b6c <HAL_GPIO_Init+0x244>
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e004      	b.n	8005b6c <HAL_GPIO_Init+0x244>
 8005b62:	2302      	movs	r3, #2
 8005b64:	e002      	b.n	8005b6c <HAL_GPIO_Init+0x244>
 8005b66:	2301      	movs	r3, #1
 8005b68:	e000      	b.n	8005b6c <HAL_GPIO_Init+0x244>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	f002 0203 	and.w	r2, r2, #3
 8005b72:	0092      	lsls	r2, r2, #2
 8005b74:	4093      	lsls	r3, r2
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005b7c:	4937      	ldr	r1, [pc, #220]	@ (8005c5c <HAL_GPIO_Init+0x334>)
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	089b      	lsrs	r3, r3, #2
 8005b82:	3302      	adds	r3, #2
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8005c78 <HAL_GPIO_Init+0x350>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	43db      	mvns	r3, r3
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	4013      	ands	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005bae:	4a32      	ldr	r2, [pc, #200]	@ (8005c78 <HAL_GPIO_Init+0x350>)
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005bb4:	4b30      	ldr	r3, [pc, #192]	@ (8005c78 <HAL_GPIO_Init+0x350>)
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005bd8:	4a27      	ldr	r2, [pc, #156]	@ (8005c78 <HAL_GPIO_Init+0x350>)
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005bde:	4b26      	ldr	r3, [pc, #152]	@ (8005c78 <HAL_GPIO_Init+0x350>)
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	43db      	mvns	r3, r3
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4013      	ands	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005c02:	4a1d      	ldr	r2, [pc, #116]	@ (8005c78 <HAL_GPIO_Init+0x350>)
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005c08:	4b1b      	ldr	r3, [pc, #108]	@ (8005c78 <HAL_GPIO_Init+0x350>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	43db      	mvns	r3, r3
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4013      	ands	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005c2c:	4a12      	ldr	r2, [pc, #72]	@ (8005c78 <HAL_GPIO_Init+0x350>)
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	3301      	adds	r3, #1
 8005c36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f47f ae78 	bne.w	8005938 <HAL_GPIO_Init+0x10>
  }
}
 8005c48:	bf00      	nop
 8005c4a:	bf00      	nop
 8005c4c:	371c      	adds	r7, #28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	40021000 	.word	0x40021000
 8005c5c:	40010000 	.word	0x40010000
 8005c60:	48000400 	.word	0x48000400
 8005c64:	48000800 	.word	0x48000800
 8005c68:	48000c00 	.word	0x48000c00
 8005c6c:	48001000 	.word	0x48001000
 8005c70:	48001400 	.word	0x48001400
 8005c74:	48001800 	.word	0x48001800
 8005c78:	40010400 	.word	0x40010400

08005c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	460b      	mov	r3, r1
 8005c86:	807b      	strh	r3, [r7, #2]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c8c:	787b      	ldrb	r3, [r7, #1]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c92:	887a      	ldrh	r2, [r7, #2]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005c98:	e002      	b.n	8005ca0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005c9a:	887a      	ldrh	r2, [r7, #2]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e08d      	b.n	8005dda <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d106      	bne.n	8005cd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7fd f87e 	bl	8002dd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2224      	movs	r2, #36	@ 0x24
 8005cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0201 	bic.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005cfc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d107      	bne.n	8005d26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689a      	ldr	r2, [r3, #8]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d22:	609a      	str	r2, [r3, #8]
 8005d24:	e006      	b.n	8005d34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689a      	ldr	r2, [r3, #8]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005d32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d108      	bne.n	8005d4e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d4a:	605a      	str	r2, [r3, #4]
 8005d4c:	e007      	b.n	8005d5e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6812      	ldr	r2, [r2, #0]
 8005d68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005d6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68da      	ldr	r2, [r3, #12]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691a      	ldr	r2, [r3, #16]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	69d9      	ldr	r1, [r3, #28]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a1a      	ldr	r2, [r3, #32]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0201 	orr.w	r2, r2, #1
 8005dba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b083      	sub	sp, #12
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	d138      	bne.n	8005e6a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d101      	bne.n	8005e06 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e02:	2302      	movs	r3, #2
 8005e04:	e032      	b.n	8005e6c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2224      	movs	r2, #36	@ 0x24
 8005e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0201 	bic.w	r2, r2, #1
 8005e24:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005e34:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6819      	ldr	r1, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f042 0201 	orr.w	r2, r2, #1
 8005e54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	e000      	b.n	8005e6c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e6a:	2302      	movs	r3, #2
  }
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b20      	cmp	r3, #32
 8005e8c:	d139      	bne.n	8005f02 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d101      	bne.n	8005e9c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e033      	b.n	8005f04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2224      	movs	r2, #36	@ 0x24
 8005ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0201 	bic.w	r2, r2, #1
 8005eba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005eca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	021b      	lsls	r3, r3, #8
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f042 0201 	orr.w	r2, r2, #1
 8005eec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	e000      	b.n	8005f04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005f02:	2302      	movs	r3, #2
  }
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af02      	add	r7, sp, #8
 8005f16:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e101      	b.n	8006126 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d106      	bne.n	8005f3c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7fd faa8 	bl	800348c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2203      	movs	r2, #3
 8005f40:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f003 f8bc 	bl	80090cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6818      	ldr	r0, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	7c1a      	ldrb	r2, [r3, #16]
 8005f5c:	f88d 2000 	strb.w	r2, [sp]
 8005f60:	3304      	adds	r3, #4
 8005f62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f64:	f003 f885 	bl	8009072 <USB_CoreInit>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d005      	beq.n	8005f7a <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2202      	movs	r2, #2
 8005f72:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e0d5      	b.n	8006126 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2100      	movs	r1, #0
 8005f80:	4618      	mov	r0, r3
 8005f82:	f003 f8b4 	bl	80090ee <USB_SetCurrentMode>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d005      	beq.n	8005f98 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e0c6      	b.n	8006126 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f98:	2300      	movs	r3, #0
 8005f9a:	73fb      	strb	r3, [r7, #15]
 8005f9c:	e04a      	b.n	8006034 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005f9e:	7bfa      	ldrb	r2, [r7, #15]
 8005fa0:	6879      	ldr	r1, [r7, #4]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	00db      	lsls	r3, r3, #3
 8005fa6:	4413      	add	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	440b      	add	r3, r1
 8005fac:	3315      	adds	r3, #21
 8005fae:	2201      	movs	r2, #1
 8005fb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005fb2:	7bfa      	ldrb	r2, [r7, #15]
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	00db      	lsls	r3, r3, #3
 8005fba:	4413      	add	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	440b      	add	r3, r1
 8005fc0:	3314      	adds	r3, #20
 8005fc2:	7bfa      	ldrb	r2, [r7, #15]
 8005fc4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005fc6:	7bfa      	ldrb	r2, [r7, #15]
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	b298      	uxth	r0, r3
 8005fcc:	6879      	ldr	r1, [r7, #4]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	00db      	lsls	r3, r3, #3
 8005fd2:	4413      	add	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	440b      	add	r3, r1
 8005fd8:	332e      	adds	r3, #46	@ 0x2e
 8005fda:	4602      	mov	r2, r0
 8005fdc:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005fde:	7bfa      	ldrb	r2, [r7, #15]
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	440b      	add	r3, r1
 8005fec:	3318      	adds	r3, #24
 8005fee:	2200      	movs	r2, #0
 8005ff0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005ff2:	7bfa      	ldrb	r2, [r7, #15]
 8005ff4:	6879      	ldr	r1, [r7, #4]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	00db      	lsls	r3, r3, #3
 8005ffa:	4413      	add	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	440b      	add	r3, r1
 8006000:	331c      	adds	r3, #28
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006006:	7bfa      	ldrb	r2, [r7, #15]
 8006008:	6879      	ldr	r1, [r7, #4]
 800600a:	4613      	mov	r3, r2
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	4413      	add	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	440b      	add	r3, r1
 8006014:	3320      	adds	r3, #32
 8006016:	2200      	movs	r2, #0
 8006018:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800601a:	7bfa      	ldrb	r2, [r7, #15]
 800601c:	6879      	ldr	r1, [r7, #4]
 800601e:	4613      	mov	r3, r2
 8006020:	00db      	lsls	r3, r3, #3
 8006022:	4413      	add	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	440b      	add	r3, r1
 8006028:	3324      	adds	r3, #36	@ 0x24
 800602a:	2200      	movs	r2, #0
 800602c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800602e:	7bfb      	ldrb	r3, [r7, #15]
 8006030:	3301      	adds	r3, #1
 8006032:	73fb      	strb	r3, [r7, #15]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	791b      	ldrb	r3, [r3, #4]
 8006038:	7bfa      	ldrb	r2, [r7, #15]
 800603a:	429a      	cmp	r2, r3
 800603c:	d3af      	bcc.n	8005f9e <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800603e:	2300      	movs	r3, #0
 8006040:	73fb      	strb	r3, [r7, #15]
 8006042:	e044      	b.n	80060ce <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006044:	7bfa      	ldrb	r2, [r7, #15]
 8006046:	6879      	ldr	r1, [r7, #4]
 8006048:	4613      	mov	r3, r2
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	4413      	add	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	440b      	add	r3, r1
 8006052:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006056:	2200      	movs	r2, #0
 8006058:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800605a:	7bfa      	ldrb	r2, [r7, #15]
 800605c:	6879      	ldr	r1, [r7, #4]
 800605e:	4613      	mov	r3, r2
 8006060:	00db      	lsls	r3, r3, #3
 8006062:	4413      	add	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	440b      	add	r3, r1
 8006068:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800606c:	7bfa      	ldrb	r2, [r7, #15]
 800606e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006070:	7bfa      	ldrb	r2, [r7, #15]
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	4613      	mov	r3, r2
 8006076:	00db      	lsls	r3, r3, #3
 8006078:	4413      	add	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	440b      	add	r3, r1
 800607e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006082:	2200      	movs	r2, #0
 8006084:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006086:	7bfa      	ldrb	r2, [r7, #15]
 8006088:	6879      	ldr	r1, [r7, #4]
 800608a:	4613      	mov	r3, r2
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	4413      	add	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	440b      	add	r3, r1
 8006094:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006098:	2200      	movs	r2, #0
 800609a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800609c:	7bfa      	ldrb	r2, [r7, #15]
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	4613      	mov	r3, r2
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	4413      	add	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	440b      	add	r3, r1
 80060aa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80060ae:	2200      	movs	r2, #0
 80060b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80060b2:	7bfa      	ldrb	r2, [r7, #15]
 80060b4:	6879      	ldr	r1, [r7, #4]
 80060b6:	4613      	mov	r3, r2
 80060b8:	00db      	lsls	r3, r3, #3
 80060ba:	4413      	add	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	440b      	add	r3, r1
 80060c0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80060c4:	2200      	movs	r2, #0
 80060c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
 80060ca:	3301      	adds	r3, #1
 80060cc:	73fb      	strb	r3, [r7, #15]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	791b      	ldrb	r3, [r3, #4]
 80060d2:	7bfa      	ldrb	r2, [r7, #15]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d3b5      	bcc.n	8006044 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6818      	ldr	r0, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	7c1a      	ldrb	r2, [r3, #16]
 80060e0:	f88d 2000 	strb.w	r2, [sp]
 80060e4:	3304      	adds	r3, #4
 80060e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060e8:	f003 f84e 	bl	8009188 <USB_DevInit>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d005      	beq.n	80060fe <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2202      	movs	r2, #2
 80060f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e013      	b.n	8006126 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	7b1b      	ldrb	r3, [r3, #12]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d102      	bne.n	800611a <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f80a 	bl	800612e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	f003 f9f3 	bl	800950a <USB_DevDisconnect>

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800612e:	b480      	push	{r7}
 8006130:	b085      	sub	sp, #20
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800615c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006160:	f043 0303 	orr.w	r3, r3, #3
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
	...

08006178 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006178:	b480      	push	{r7}
 800617a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800617c:	4b04      	ldr	r3, [pc, #16]	@ (8006190 <HAL_PWREx_GetVoltageRange+0x18>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006184:	4618      	mov	r0, r3
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40007000 	.word	0x40007000

08006194 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061a2:	d130      	bne.n	8006206 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80061a4:	4b23      	ldr	r3, [pc, #140]	@ (8006234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80061ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061b0:	d038      	beq.n	8006224 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80061b2:	4b20      	ldr	r3, [pc, #128]	@ (8006234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80061ba:	4a1e      	ldr	r2, [pc, #120]	@ (8006234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80061c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80061c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006238 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2232      	movs	r2, #50	@ 0x32
 80061c8:	fb02 f303 	mul.w	r3, r2, r3
 80061cc:	4a1b      	ldr	r2, [pc, #108]	@ (800623c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80061ce:	fba2 2303 	umull	r2, r3, r2, r3
 80061d2:	0c9b      	lsrs	r3, r3, #18
 80061d4:	3301      	adds	r3, #1
 80061d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061d8:	e002      	b.n	80061e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	3b01      	subs	r3, #1
 80061de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061e0:	4b14      	ldr	r3, [pc, #80]	@ (8006234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061ec:	d102      	bne.n	80061f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1f2      	bne.n	80061da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80061f4:	4b0f      	ldr	r3, [pc, #60]	@ (8006234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006200:	d110      	bne.n	8006224 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e00f      	b.n	8006226 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006206:	4b0b      	ldr	r3, [pc, #44]	@ (8006234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800620e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006212:	d007      	beq.n	8006224 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006214:	4b07      	ldr	r3, [pc, #28]	@ (8006234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800621c:	4a05      	ldr	r2, [pc, #20]	@ (8006234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800621e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006222:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	40007000 	.word	0x40007000
 8006238:	20000028 	.word	0x20000028
 800623c:	431bde83 	.word	0x431bde83

08006240 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006240:	b480      	push	{r7}
 8006242:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006244:	4b05      	ldr	r3, [pc, #20]	@ (800625c <HAL_PWREx_EnableVddUSB+0x1c>)
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	4a04      	ldr	r2, [pc, #16]	@ (800625c <HAL_PWREx_EnableVddUSB+0x1c>)
 800624a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800624e:	6053      	str	r3, [r2, #4]
}
 8006250:	bf00      	nop
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	40007000 	.word	0x40007000

08006260 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b088      	sub	sp, #32
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e3ca      	b.n	8006a08 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006272:	4b97      	ldr	r3, [pc, #604]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f003 030c 	and.w	r3, r3, #12
 800627a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800627c:	4b94      	ldr	r3, [pc, #592]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f003 0303 	and.w	r3, r3, #3
 8006284:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0310 	and.w	r3, r3, #16
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 80e4 	beq.w	800645c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d007      	beq.n	80062aa <HAL_RCC_OscConfig+0x4a>
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	2b0c      	cmp	r3, #12
 800629e:	f040 808b 	bne.w	80063b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	f040 8087 	bne.w	80063b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80062aa:	4b89      	ldr	r3, [pc, #548]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d005      	beq.n	80062c2 <HAL_RCC_OscConfig+0x62>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e3a2      	b.n	8006a08 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1a      	ldr	r2, [r3, #32]
 80062c6:	4b82      	ldr	r3, [pc, #520]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0308 	and.w	r3, r3, #8
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d004      	beq.n	80062dc <HAL_RCC_OscConfig+0x7c>
 80062d2:	4b7f      	ldr	r3, [pc, #508]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062da:	e005      	b.n	80062e8 <HAL_RCC_OscConfig+0x88>
 80062dc:	4b7c      	ldr	r3, [pc, #496]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 80062de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062e2:	091b      	lsrs	r3, r3, #4
 80062e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d223      	bcs.n	8006334 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fd55 	bl	8006da0 <RCC_SetFlashLatencyFromMSIRange>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d001      	beq.n	8006300 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e383      	b.n	8006a08 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006300:	4b73      	ldr	r3, [pc, #460]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a72      	ldr	r2, [pc, #456]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 8006306:	f043 0308 	orr.w	r3, r3, #8
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	4b70      	ldr	r3, [pc, #448]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	496d      	ldr	r1, [pc, #436]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 800631a:	4313      	orrs	r3, r2
 800631c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800631e:	4b6c      	ldr	r3, [pc, #432]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	021b      	lsls	r3, r3, #8
 800632c:	4968      	ldr	r1, [pc, #416]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 800632e:	4313      	orrs	r3, r2
 8006330:	604b      	str	r3, [r1, #4]
 8006332:	e025      	b.n	8006380 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006334:	4b66      	ldr	r3, [pc, #408]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a65      	ldr	r2, [pc, #404]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 800633a:	f043 0308 	orr.w	r3, r3, #8
 800633e:	6013      	str	r3, [r2, #0]
 8006340:	4b63      	ldr	r3, [pc, #396]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	4960      	ldr	r1, [pc, #384]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 800634e:	4313      	orrs	r3, r2
 8006350:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006352:	4b5f      	ldr	r3, [pc, #380]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	021b      	lsls	r3, r3, #8
 8006360:	495b      	ldr	r1, [pc, #364]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 8006362:	4313      	orrs	r3, r2
 8006364:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d109      	bne.n	8006380 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a1b      	ldr	r3, [r3, #32]
 8006370:	4618      	mov	r0, r3
 8006372:	f000 fd15 	bl	8006da0 <RCC_SetFlashLatencyFromMSIRange>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e343      	b.n	8006a08 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006380:	f000 fc4a 	bl	8006c18 <HAL_RCC_GetSysClockFreq>
 8006384:	4602      	mov	r2, r0
 8006386:	4b52      	ldr	r3, [pc, #328]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	091b      	lsrs	r3, r3, #4
 800638c:	f003 030f 	and.w	r3, r3, #15
 8006390:	4950      	ldr	r1, [pc, #320]	@ (80064d4 <HAL_RCC_OscConfig+0x274>)
 8006392:	5ccb      	ldrb	r3, [r1, r3]
 8006394:	f003 031f 	and.w	r3, r3, #31
 8006398:	fa22 f303 	lsr.w	r3, r2, r3
 800639c:	4a4e      	ldr	r2, [pc, #312]	@ (80064d8 <HAL_RCC_OscConfig+0x278>)
 800639e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80063a0:	4b4e      	ldr	r3, [pc, #312]	@ (80064dc <HAL_RCC_OscConfig+0x27c>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7fd fc05 	bl	8003bb4 <HAL_InitTick>
 80063aa:	4603      	mov	r3, r0
 80063ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d052      	beq.n	800645a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
 80063b6:	e327      	b.n	8006a08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d032      	beq.n	8006426 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80063c0:	4b43      	ldr	r3, [pc, #268]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a42      	ldr	r2, [pc, #264]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 80063c6:	f043 0301 	orr.w	r3, r3, #1
 80063ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80063cc:	f7fd fc42 	bl	8003c54 <HAL_GetTick>
 80063d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80063d2:	e008      	b.n	80063e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80063d4:	f7fd fc3e 	bl	8003c54 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e310      	b.n	8006a08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80063e6:	4b3a      	ldr	r3, [pc, #232]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d0f0      	beq.n	80063d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063f2:	4b37      	ldr	r3, [pc, #220]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a36      	ldr	r2, [pc, #216]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 80063f8:	f043 0308 	orr.w	r3, r3, #8
 80063fc:	6013      	str	r3, [r2, #0]
 80063fe:	4b34      	ldr	r3, [pc, #208]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	4931      	ldr	r1, [pc, #196]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 800640c:	4313      	orrs	r3, r2
 800640e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006410:	4b2f      	ldr	r3, [pc, #188]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	69db      	ldr	r3, [r3, #28]
 800641c:	021b      	lsls	r3, r3, #8
 800641e:	492c      	ldr	r1, [pc, #176]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 8006420:	4313      	orrs	r3, r2
 8006422:	604b      	str	r3, [r1, #4]
 8006424:	e01a      	b.n	800645c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006426:	4b2a      	ldr	r3, [pc, #168]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a29      	ldr	r2, [pc, #164]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 800642c:	f023 0301 	bic.w	r3, r3, #1
 8006430:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006432:	f7fd fc0f 	bl	8003c54 <HAL_GetTick>
 8006436:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006438:	e008      	b.n	800644c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800643a:	f7fd fc0b 	bl	8003c54 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	2b02      	cmp	r3, #2
 8006446:	d901      	bls.n	800644c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e2dd      	b.n	8006a08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800644c:	4b20      	ldr	r3, [pc, #128]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1f0      	bne.n	800643a <HAL_RCC_OscConfig+0x1da>
 8006458:	e000      	b.n	800645c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800645a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	2b00      	cmp	r3, #0
 8006466:	d074      	beq.n	8006552 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	2b08      	cmp	r3, #8
 800646c:	d005      	beq.n	800647a <HAL_RCC_OscConfig+0x21a>
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	2b0c      	cmp	r3, #12
 8006472:	d10e      	bne.n	8006492 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	2b03      	cmp	r3, #3
 8006478:	d10b      	bne.n	8006492 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800647a:	4b15      	ldr	r3, [pc, #84]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d064      	beq.n	8006550 <HAL_RCC_OscConfig+0x2f0>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d160      	bne.n	8006550 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e2ba      	b.n	8006a08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800649a:	d106      	bne.n	80064aa <HAL_RCC_OscConfig+0x24a>
 800649c:	4b0c      	ldr	r3, [pc, #48]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a0b      	ldr	r2, [pc, #44]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 80064a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064a6:	6013      	str	r3, [r2, #0]
 80064a8:	e026      	b.n	80064f8 <HAL_RCC_OscConfig+0x298>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064b2:	d115      	bne.n	80064e0 <HAL_RCC_OscConfig+0x280>
 80064b4:	4b06      	ldr	r3, [pc, #24]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a05      	ldr	r2, [pc, #20]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 80064ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	4b03      	ldr	r3, [pc, #12]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a02      	ldr	r2, [pc, #8]	@ (80064d0 <HAL_RCC_OscConfig+0x270>)
 80064c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064ca:	6013      	str	r3, [r2, #0]
 80064cc:	e014      	b.n	80064f8 <HAL_RCC_OscConfig+0x298>
 80064ce:	bf00      	nop
 80064d0:	40021000 	.word	0x40021000
 80064d4:	0800e084 	.word	0x0800e084
 80064d8:	20000028 	.word	0x20000028
 80064dc:	20000030 	.word	0x20000030
 80064e0:	4ba0      	ldr	r3, [pc, #640]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a9f      	ldr	r2, [pc, #636]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 80064e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064ea:	6013      	str	r3, [r2, #0]
 80064ec:	4b9d      	ldr	r3, [pc, #628]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a9c      	ldr	r2, [pc, #624]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 80064f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d013      	beq.n	8006528 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006500:	f7fd fba8 	bl	8003c54 <HAL_GetTick>
 8006504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006506:	e008      	b.n	800651a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006508:	f7fd fba4 	bl	8003c54 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b64      	cmp	r3, #100	@ 0x64
 8006514:	d901      	bls.n	800651a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e276      	b.n	8006a08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800651a:	4b92      	ldr	r3, [pc, #584]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d0f0      	beq.n	8006508 <HAL_RCC_OscConfig+0x2a8>
 8006526:	e014      	b.n	8006552 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006528:	f7fd fb94 	bl	8003c54 <HAL_GetTick>
 800652c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800652e:	e008      	b.n	8006542 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006530:	f7fd fb90 	bl	8003c54 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b64      	cmp	r3, #100	@ 0x64
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e262      	b.n	8006a08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006542:	4b88      	ldr	r3, [pc, #544]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1f0      	bne.n	8006530 <HAL_RCC_OscConfig+0x2d0>
 800654e:	e000      	b.n	8006552 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d060      	beq.n	8006620 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	2b04      	cmp	r3, #4
 8006562:	d005      	beq.n	8006570 <HAL_RCC_OscConfig+0x310>
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	2b0c      	cmp	r3, #12
 8006568:	d119      	bne.n	800659e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	2b02      	cmp	r3, #2
 800656e:	d116      	bne.n	800659e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006570:	4b7c      	ldr	r3, [pc, #496]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006578:	2b00      	cmp	r3, #0
 800657a:	d005      	beq.n	8006588 <HAL_RCC_OscConfig+0x328>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e23f      	b.n	8006a08 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006588:	4b76      	ldr	r3, [pc, #472]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	061b      	lsls	r3, r3, #24
 8006596:	4973      	ldr	r1, [pc, #460]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 8006598:	4313      	orrs	r3, r2
 800659a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800659c:	e040      	b.n	8006620 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d023      	beq.n	80065ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065a6:	4b6f      	ldr	r3, [pc, #444]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a6e      	ldr	r2, [pc, #440]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 80065ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b2:	f7fd fb4f 	bl	8003c54 <HAL_GetTick>
 80065b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065b8:	e008      	b.n	80065cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065ba:	f7fd fb4b 	bl	8003c54 <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d901      	bls.n	80065cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e21d      	b.n	8006a08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065cc:	4b65      	ldr	r3, [pc, #404]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d0f0      	beq.n	80065ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065d8:	4b62      	ldr	r3, [pc, #392]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	061b      	lsls	r3, r3, #24
 80065e6:	495f      	ldr	r1, [pc, #380]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	604b      	str	r3, [r1, #4]
 80065ec:	e018      	b.n	8006620 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065ee:	4b5d      	ldr	r3, [pc, #372]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a5c      	ldr	r2, [pc, #368]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 80065f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065fa:	f7fd fb2b 	bl	8003c54 <HAL_GetTick>
 80065fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006600:	e008      	b.n	8006614 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006602:	f7fd fb27 	bl	8003c54 <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	2b02      	cmp	r3, #2
 800660e:	d901      	bls.n	8006614 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e1f9      	b.n	8006a08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006614:	4b53      	ldr	r3, [pc, #332]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1f0      	bne.n	8006602 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0308 	and.w	r3, r3, #8
 8006628:	2b00      	cmp	r3, #0
 800662a:	d03c      	beq.n	80066a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	695b      	ldr	r3, [r3, #20]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d01c      	beq.n	800666e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006634:	4b4b      	ldr	r3, [pc, #300]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 8006636:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800663a:	4a4a      	ldr	r2, [pc, #296]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 800663c:	f043 0301 	orr.w	r3, r3, #1
 8006640:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006644:	f7fd fb06 	bl	8003c54 <HAL_GetTick>
 8006648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800664c:	f7fd fb02 	bl	8003c54 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e1d4      	b.n	8006a08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800665e:	4b41      	ldr	r3, [pc, #260]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 8006660:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0ef      	beq.n	800664c <HAL_RCC_OscConfig+0x3ec>
 800666c:	e01b      	b.n	80066a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800666e:	4b3d      	ldr	r3, [pc, #244]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 8006670:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006674:	4a3b      	ldr	r2, [pc, #236]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 8006676:	f023 0301 	bic.w	r3, r3, #1
 800667a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800667e:	f7fd fae9 	bl	8003c54 <HAL_GetTick>
 8006682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006684:	e008      	b.n	8006698 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006686:	f7fd fae5 	bl	8003c54 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b02      	cmp	r3, #2
 8006692:	d901      	bls.n	8006698 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e1b7      	b.n	8006a08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006698:	4b32      	ldr	r3, [pc, #200]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 800669a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1ef      	bne.n	8006686 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0304 	and.w	r3, r3, #4
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 80a6 	beq.w	8006800 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066b4:	2300      	movs	r3, #0
 80066b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80066b8:	4b2a      	ldr	r3, [pc, #168]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 80066ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10d      	bne.n	80066e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066c4:	4b27      	ldr	r3, [pc, #156]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 80066c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066c8:	4a26      	ldr	r2, [pc, #152]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 80066ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80066d0:	4b24      	ldr	r3, [pc, #144]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 80066d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066d8:	60bb      	str	r3, [r7, #8]
 80066da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066dc:	2301      	movs	r3, #1
 80066de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066e0:	4b21      	ldr	r3, [pc, #132]	@ (8006768 <HAL_RCC_OscConfig+0x508>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d118      	bne.n	800671e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066ec:	4b1e      	ldr	r3, [pc, #120]	@ (8006768 <HAL_RCC_OscConfig+0x508>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006768 <HAL_RCC_OscConfig+0x508>)
 80066f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066f8:	f7fd faac 	bl	8003c54 <HAL_GetTick>
 80066fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066fe:	e008      	b.n	8006712 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006700:	f7fd faa8 	bl	8003c54 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	2b02      	cmp	r3, #2
 800670c:	d901      	bls.n	8006712 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e17a      	b.n	8006a08 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006712:	4b15      	ldr	r3, [pc, #84]	@ (8006768 <HAL_RCC_OscConfig+0x508>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800671a:	2b00      	cmp	r3, #0
 800671c:	d0f0      	beq.n	8006700 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d108      	bne.n	8006738 <HAL_RCC_OscConfig+0x4d8>
 8006726:	4b0f      	ldr	r3, [pc, #60]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 8006728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800672c:	4a0d      	ldr	r2, [pc, #52]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 800672e:	f043 0301 	orr.w	r3, r3, #1
 8006732:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006736:	e029      	b.n	800678c <HAL_RCC_OscConfig+0x52c>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	2b05      	cmp	r3, #5
 800673e:	d115      	bne.n	800676c <HAL_RCC_OscConfig+0x50c>
 8006740:	4b08      	ldr	r3, [pc, #32]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 8006742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006746:	4a07      	ldr	r2, [pc, #28]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 8006748:	f043 0304 	orr.w	r3, r3, #4
 800674c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006750:	4b04      	ldr	r3, [pc, #16]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 8006752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006756:	4a03      	ldr	r2, [pc, #12]	@ (8006764 <HAL_RCC_OscConfig+0x504>)
 8006758:	f043 0301 	orr.w	r3, r3, #1
 800675c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006760:	e014      	b.n	800678c <HAL_RCC_OscConfig+0x52c>
 8006762:	bf00      	nop
 8006764:	40021000 	.word	0x40021000
 8006768:	40007000 	.word	0x40007000
 800676c:	4b9c      	ldr	r3, [pc, #624]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 800676e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006772:	4a9b      	ldr	r2, [pc, #620]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 8006774:	f023 0301 	bic.w	r3, r3, #1
 8006778:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800677c:	4b98      	ldr	r3, [pc, #608]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 800677e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006782:	4a97      	ldr	r2, [pc, #604]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 8006784:	f023 0304 	bic.w	r3, r3, #4
 8006788:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d016      	beq.n	80067c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006794:	f7fd fa5e 	bl	8003c54 <HAL_GetTick>
 8006798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800679a:	e00a      	b.n	80067b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800679c:	f7fd fa5a 	bl	8003c54 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d901      	bls.n	80067b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e12a      	b.n	8006a08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067b2:	4b8b      	ldr	r3, [pc, #556]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 80067b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d0ed      	beq.n	800679c <HAL_RCC_OscConfig+0x53c>
 80067c0:	e015      	b.n	80067ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067c2:	f7fd fa47 	bl	8003c54 <HAL_GetTick>
 80067c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067c8:	e00a      	b.n	80067e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ca:	f7fd fa43 	bl	8003c54 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067d8:	4293      	cmp	r3, r2
 80067da:	d901      	bls.n	80067e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e113      	b.n	8006a08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067e0:	4b7f      	ldr	r3, [pc, #508]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 80067e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1ed      	bne.n	80067ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067ee:	7ffb      	ldrb	r3, [r7, #31]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d105      	bne.n	8006800 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067f4:	4b7a      	ldr	r3, [pc, #488]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 80067f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067f8:	4a79      	ldr	r2, [pc, #484]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 80067fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067fe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 80fe 	beq.w	8006a06 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680e:	2b02      	cmp	r3, #2
 8006810:	f040 80d0 	bne.w	80069b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006814:	4b72      	ldr	r3, [pc, #456]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f003 0203 	and.w	r2, r3, #3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006824:	429a      	cmp	r2, r3
 8006826:	d130      	bne.n	800688a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006832:	3b01      	subs	r3, #1
 8006834:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006836:	429a      	cmp	r2, r3
 8006838:	d127      	bne.n	800688a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006844:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006846:	429a      	cmp	r2, r3
 8006848:	d11f      	bne.n	800688a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006854:	2a07      	cmp	r2, #7
 8006856:	bf14      	ite	ne
 8006858:	2201      	movne	r2, #1
 800685a:	2200      	moveq	r2, #0
 800685c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800685e:	4293      	cmp	r3, r2
 8006860:	d113      	bne.n	800688a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800686c:	085b      	lsrs	r3, r3, #1
 800686e:	3b01      	subs	r3, #1
 8006870:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006872:	429a      	cmp	r2, r3
 8006874:	d109      	bne.n	800688a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006880:	085b      	lsrs	r3, r3, #1
 8006882:	3b01      	subs	r3, #1
 8006884:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006886:	429a      	cmp	r2, r3
 8006888:	d06e      	beq.n	8006968 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	2b0c      	cmp	r3, #12
 800688e:	d069      	beq.n	8006964 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006890:	4b53      	ldr	r3, [pc, #332]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d105      	bne.n	80068a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800689c:	4b50      	ldr	r3, [pc, #320]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e0ad      	b.n	8006a08 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80068ac:	4b4c      	ldr	r3, [pc, #304]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a4b      	ldr	r2, [pc, #300]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 80068b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80068b8:	f7fd f9cc 	bl	8003c54 <HAL_GetTick>
 80068bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c0:	f7fd f9c8 	bl	8003c54 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e09a      	b.n	8006a08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068d2:	4b43      	ldr	r3, [pc, #268]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1f0      	bne.n	80068c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068de:	4b40      	ldr	r3, [pc, #256]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 80068e0:	68da      	ldr	r2, [r3, #12]
 80068e2:	4b40      	ldr	r3, [pc, #256]	@ (80069e4 <HAL_RCC_OscConfig+0x784>)
 80068e4:	4013      	ands	r3, r2
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80068ee:	3a01      	subs	r2, #1
 80068f0:	0112      	lsls	r2, r2, #4
 80068f2:	4311      	orrs	r1, r2
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80068f8:	0212      	lsls	r2, r2, #8
 80068fa:	4311      	orrs	r1, r2
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006900:	0852      	lsrs	r2, r2, #1
 8006902:	3a01      	subs	r2, #1
 8006904:	0552      	lsls	r2, r2, #21
 8006906:	4311      	orrs	r1, r2
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800690c:	0852      	lsrs	r2, r2, #1
 800690e:	3a01      	subs	r2, #1
 8006910:	0652      	lsls	r2, r2, #25
 8006912:	4311      	orrs	r1, r2
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006918:	0912      	lsrs	r2, r2, #4
 800691a:	0452      	lsls	r2, r2, #17
 800691c:	430a      	orrs	r2, r1
 800691e:	4930      	ldr	r1, [pc, #192]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 8006920:	4313      	orrs	r3, r2
 8006922:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006924:	4b2e      	ldr	r3, [pc, #184]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a2d      	ldr	r2, [pc, #180]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 800692a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800692e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006930:	4b2b      	ldr	r3, [pc, #172]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	4a2a      	ldr	r2, [pc, #168]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 8006936:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800693a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800693c:	f7fd f98a 	bl	8003c54 <HAL_GetTick>
 8006940:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006942:	e008      	b.n	8006956 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006944:	f7fd f986 	bl	8003c54 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	2b02      	cmp	r3, #2
 8006950:	d901      	bls.n	8006956 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e058      	b.n	8006a08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006956:	4b22      	ldr	r3, [pc, #136]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0f0      	beq.n	8006944 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006962:	e050      	b.n	8006a06 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e04f      	b.n	8006a08 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006968:	4b1d      	ldr	r3, [pc, #116]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d148      	bne.n	8006a06 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006974:	4b1a      	ldr	r3, [pc, #104]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a19      	ldr	r2, [pc, #100]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 800697a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800697e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006980:	4b17      	ldr	r3, [pc, #92]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	4a16      	ldr	r2, [pc, #88]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 8006986:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800698a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800698c:	f7fd f962 	bl	8003c54 <HAL_GetTick>
 8006990:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006992:	e008      	b.n	80069a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006994:	f7fd f95e 	bl	8003c54 <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e030      	b.n	8006a08 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069a6:	4b0e      	ldr	r3, [pc, #56]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d0f0      	beq.n	8006994 <HAL_RCC_OscConfig+0x734>
 80069b2:	e028      	b.n	8006a06 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	2b0c      	cmp	r3, #12
 80069b8:	d023      	beq.n	8006a02 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ba:	4b09      	ldr	r3, [pc, #36]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a08      	ldr	r2, [pc, #32]	@ (80069e0 <HAL_RCC_OscConfig+0x780>)
 80069c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c6:	f7fd f945 	bl	8003c54 <HAL_GetTick>
 80069ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069cc:	e00c      	b.n	80069e8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069ce:	f7fd f941 	bl	8003c54 <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d905      	bls.n	80069e8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e013      	b.n	8006a08 <HAL_RCC_OscConfig+0x7a8>
 80069e0:	40021000 	.word	0x40021000
 80069e4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069e8:	4b09      	ldr	r3, [pc, #36]	@ (8006a10 <HAL_RCC_OscConfig+0x7b0>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1ec      	bne.n	80069ce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80069f4:	4b06      	ldr	r3, [pc, #24]	@ (8006a10 <HAL_RCC_OscConfig+0x7b0>)
 80069f6:	68da      	ldr	r2, [r3, #12]
 80069f8:	4905      	ldr	r1, [pc, #20]	@ (8006a10 <HAL_RCC_OscConfig+0x7b0>)
 80069fa:	4b06      	ldr	r3, [pc, #24]	@ (8006a14 <HAL_RCC_OscConfig+0x7b4>)
 80069fc:	4013      	ands	r3, r2
 80069fe:	60cb      	str	r3, [r1, #12]
 8006a00:	e001      	b.n	8006a06 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e000      	b.n	8006a08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3720      	adds	r7, #32
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	40021000 	.word	0x40021000
 8006a14:	feeefffc 	.word	0xfeeefffc

08006a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e0e7      	b.n	8006bfc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a2c:	4b75      	ldr	r3, [pc, #468]	@ (8006c04 <HAL_RCC_ClockConfig+0x1ec>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0307 	and.w	r3, r3, #7
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d910      	bls.n	8006a5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a3a:	4b72      	ldr	r3, [pc, #456]	@ (8006c04 <HAL_RCC_ClockConfig+0x1ec>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f023 0207 	bic.w	r2, r3, #7
 8006a42:	4970      	ldr	r1, [pc, #448]	@ (8006c04 <HAL_RCC_ClockConfig+0x1ec>)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a4a:	4b6e      	ldr	r3, [pc, #440]	@ (8006c04 <HAL_RCC_ClockConfig+0x1ec>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0307 	and.w	r3, r3, #7
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d001      	beq.n	8006a5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e0cf      	b.n	8006bfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d010      	beq.n	8006a8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689a      	ldr	r2, [r3, #8]
 8006a6c:	4b66      	ldr	r3, [pc, #408]	@ (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d908      	bls.n	8006a8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a78:	4b63      	ldr	r3, [pc, #396]	@ (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	4960      	ldr	r1, [pc, #384]	@ (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d04c      	beq.n	8006b30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	d107      	bne.n	8006aae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a9e:	4b5a      	ldr	r3, [pc, #360]	@ (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d121      	bne.n	8006aee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e0a6      	b.n	8006bfc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d107      	bne.n	8006ac6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ab6:	4b54      	ldr	r3, [pc, #336]	@ (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d115      	bne.n	8006aee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e09a      	b.n	8006bfc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d107      	bne.n	8006ade <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ace:	4b4e      	ldr	r3, [pc, #312]	@ (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d109      	bne.n	8006aee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e08e      	b.n	8006bfc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ade:	4b4a      	ldr	r3, [pc, #296]	@ (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e086      	b.n	8006bfc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006aee:	4b46      	ldr	r3, [pc, #280]	@ (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f023 0203 	bic.w	r2, r3, #3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	4943      	ldr	r1, [pc, #268]	@ (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b00:	f7fd f8a8 	bl	8003c54 <HAL_GetTick>
 8006b04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b06:	e00a      	b.n	8006b1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b08:	f7fd f8a4 	bl	8003c54 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e06e      	b.n	8006bfc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b1e:	4b3a      	ldr	r3, [pc, #232]	@ (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f003 020c 	and.w	r2, r3, #12
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d1eb      	bne.n	8006b08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d010      	beq.n	8006b5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	4b31      	ldr	r3, [pc, #196]	@ (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d208      	bcs.n	8006b5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b4c:	4b2e      	ldr	r3, [pc, #184]	@ (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	492b      	ldr	r1, [pc, #172]	@ (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b5e:	4b29      	ldr	r3, [pc, #164]	@ (8006c04 <HAL_RCC_ClockConfig+0x1ec>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0307 	and.w	r3, r3, #7
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d210      	bcs.n	8006b8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b6c:	4b25      	ldr	r3, [pc, #148]	@ (8006c04 <HAL_RCC_ClockConfig+0x1ec>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f023 0207 	bic.w	r2, r3, #7
 8006b74:	4923      	ldr	r1, [pc, #140]	@ (8006c04 <HAL_RCC_ClockConfig+0x1ec>)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b7c:	4b21      	ldr	r3, [pc, #132]	@ (8006c04 <HAL_RCC_ClockConfig+0x1ec>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0307 	and.w	r3, r3, #7
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d001      	beq.n	8006b8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e036      	b.n	8006bfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0304 	and.w	r3, r3, #4
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d008      	beq.n	8006bac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	4918      	ldr	r1, [pc, #96]	@ (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0308 	and.w	r3, r3, #8
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d009      	beq.n	8006bcc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bb8:	4b13      	ldr	r3, [pc, #76]	@ (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	00db      	lsls	r3, r3, #3
 8006bc6:	4910      	ldr	r1, [pc, #64]	@ (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006bcc:	f000 f824 	bl	8006c18 <HAL_RCC_GetSysClockFreq>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	091b      	lsrs	r3, r3, #4
 8006bd8:	f003 030f 	and.w	r3, r3, #15
 8006bdc:	490b      	ldr	r1, [pc, #44]	@ (8006c0c <HAL_RCC_ClockConfig+0x1f4>)
 8006bde:	5ccb      	ldrb	r3, [r1, r3]
 8006be0:	f003 031f 	and.w	r3, r3, #31
 8006be4:	fa22 f303 	lsr.w	r3, r2, r3
 8006be8:	4a09      	ldr	r2, [pc, #36]	@ (8006c10 <HAL_RCC_ClockConfig+0x1f8>)
 8006bea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006bec:	4b09      	ldr	r3, [pc, #36]	@ (8006c14 <HAL_RCC_ClockConfig+0x1fc>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7fc ffdf 	bl	8003bb4 <HAL_InitTick>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	72fb      	strb	r3, [r7, #11]

  return status;
 8006bfa:	7afb      	ldrb	r3, [r7, #11]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	40022000 	.word	0x40022000
 8006c08:	40021000 	.word	0x40021000
 8006c0c:	0800e084 	.word	0x0800e084
 8006c10:	20000028 	.word	0x20000028
 8006c14:	20000030 	.word	0x20000030

08006c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b089      	sub	sp, #36	@ 0x24
 8006c1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	61fb      	str	r3, [r7, #28]
 8006c22:	2300      	movs	r3, #0
 8006c24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c26:	4b3e      	ldr	r3, [pc, #248]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f003 030c 	and.w	r3, r3, #12
 8006c2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c30:	4b3b      	ldr	r3, [pc, #236]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	f003 0303 	and.w	r3, r3, #3
 8006c38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d005      	beq.n	8006c4c <HAL_RCC_GetSysClockFreq+0x34>
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	2b0c      	cmp	r3, #12
 8006c44:	d121      	bne.n	8006c8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d11e      	bne.n	8006c8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006c4c:	4b34      	ldr	r3, [pc, #208]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0308 	and.w	r3, r3, #8
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d107      	bne.n	8006c68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006c58:	4b31      	ldr	r3, [pc, #196]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c5e:	0a1b      	lsrs	r3, r3, #8
 8006c60:	f003 030f 	and.w	r3, r3, #15
 8006c64:	61fb      	str	r3, [r7, #28]
 8006c66:	e005      	b.n	8006c74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006c68:	4b2d      	ldr	r3, [pc, #180]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	091b      	lsrs	r3, r3, #4
 8006c6e:	f003 030f 	and.w	r3, r3, #15
 8006c72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006c74:	4a2b      	ldr	r2, [pc, #172]	@ (8006d24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10d      	bne.n	8006ca0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c88:	e00a      	b.n	8006ca0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	2b04      	cmp	r3, #4
 8006c8e:	d102      	bne.n	8006c96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006c90:	4b25      	ldr	r3, [pc, #148]	@ (8006d28 <HAL_RCC_GetSysClockFreq+0x110>)
 8006c92:	61bb      	str	r3, [r7, #24]
 8006c94:	e004      	b.n	8006ca0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	2b08      	cmp	r3, #8
 8006c9a:	d101      	bne.n	8006ca0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006c9c:	4b23      	ldr	r3, [pc, #140]	@ (8006d2c <HAL_RCC_GetSysClockFreq+0x114>)
 8006c9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	2b0c      	cmp	r3, #12
 8006ca4:	d134      	bne.n	8006d10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f003 0303 	and.w	r3, r3, #3
 8006cae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d003      	beq.n	8006cbe <HAL_RCC_GetSysClockFreq+0xa6>
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d003      	beq.n	8006cc4 <HAL_RCC_GetSysClockFreq+0xac>
 8006cbc:	e005      	b.n	8006cca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8006d28 <HAL_RCC_GetSysClockFreq+0x110>)
 8006cc0:	617b      	str	r3, [r7, #20]
      break;
 8006cc2:	e005      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006cc4:	4b19      	ldr	r3, [pc, #100]	@ (8006d2c <HAL_RCC_GetSysClockFreq+0x114>)
 8006cc6:	617b      	str	r3, [r7, #20]
      break;
 8006cc8:	e002      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	617b      	str	r3, [r7, #20]
      break;
 8006cce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006cd0:	4b13      	ldr	r3, [pc, #76]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	091b      	lsrs	r3, r3, #4
 8006cd6:	f003 0307 	and.w	r3, r3, #7
 8006cda:	3301      	adds	r3, #1
 8006cdc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006cde:	4b10      	ldr	r3, [pc, #64]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	0a1b      	lsrs	r3, r3, #8
 8006ce4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	fb03 f202 	mul.w	r2, r3, r2
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	0e5b      	lsrs	r3, r3, #25
 8006cfc:	f003 0303 	and.w	r3, r3, #3
 8006d00:	3301      	adds	r3, #1
 8006d02:	005b      	lsls	r3, r3, #1
 8006d04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006d10:	69bb      	ldr	r3, [r7, #24]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3724      	adds	r7, #36	@ 0x24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	40021000 	.word	0x40021000
 8006d24:	0800e09c 	.word	0x0800e09c
 8006d28:	00f42400 	.word	0x00f42400
 8006d2c:	007a1200 	.word	0x007a1200

08006d30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d30:	b480      	push	{r7}
 8006d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d34:	4b03      	ldr	r3, [pc, #12]	@ (8006d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d36:	681b      	ldr	r3, [r3, #0]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	20000028 	.word	0x20000028

08006d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006d4c:	f7ff fff0 	bl	8006d30 <HAL_RCC_GetHCLKFreq>
 8006d50:	4602      	mov	r2, r0
 8006d52:	4b06      	ldr	r3, [pc, #24]	@ (8006d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	0a1b      	lsrs	r3, r3, #8
 8006d58:	f003 0307 	and.w	r3, r3, #7
 8006d5c:	4904      	ldr	r1, [pc, #16]	@ (8006d70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d5e:	5ccb      	ldrb	r3, [r1, r3]
 8006d60:	f003 031f 	and.w	r3, r3, #31
 8006d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	40021000 	.word	0x40021000
 8006d70:	0800e094 	.word	0x0800e094

08006d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006d78:	f7ff ffda 	bl	8006d30 <HAL_RCC_GetHCLKFreq>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	4b06      	ldr	r3, [pc, #24]	@ (8006d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	0adb      	lsrs	r3, r3, #11
 8006d84:	f003 0307 	and.w	r3, r3, #7
 8006d88:	4904      	ldr	r1, [pc, #16]	@ (8006d9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d8a:	5ccb      	ldrb	r3, [r1, r3]
 8006d8c:	f003 031f 	and.w	r3, r3, #31
 8006d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	40021000 	.word	0x40021000
 8006d9c:	0800e094 	.word	0x0800e094

08006da0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006da8:	2300      	movs	r3, #0
 8006daa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006dac:	4b2a      	ldr	r3, [pc, #168]	@ (8006e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006db0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d003      	beq.n	8006dc0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006db8:	f7ff f9de 	bl	8006178 <HAL_PWREx_GetVoltageRange>
 8006dbc:	6178      	str	r0, [r7, #20]
 8006dbe:	e014      	b.n	8006dea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006dc0:	4b25      	ldr	r3, [pc, #148]	@ (8006e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dc4:	4a24      	ldr	r2, [pc, #144]	@ (8006e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dca:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dcc:	4b22      	ldr	r3, [pc, #136]	@ (8006e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dd4:	60fb      	str	r3, [r7, #12]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006dd8:	f7ff f9ce 	bl	8006178 <HAL_PWREx_GetVoltageRange>
 8006ddc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006dde:	4b1e      	ldr	r3, [pc, #120]	@ (8006e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006de2:	4a1d      	ldr	r2, [pc, #116]	@ (8006e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006de4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006de8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006df0:	d10b      	bne.n	8006e0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b80      	cmp	r3, #128	@ 0x80
 8006df6:	d919      	bls.n	8006e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2ba0      	cmp	r3, #160	@ 0xa0
 8006dfc:	d902      	bls.n	8006e04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006dfe:	2302      	movs	r3, #2
 8006e00:	613b      	str	r3, [r7, #16]
 8006e02:	e013      	b.n	8006e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e04:	2301      	movs	r3, #1
 8006e06:	613b      	str	r3, [r7, #16]
 8006e08:	e010      	b.n	8006e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2b80      	cmp	r3, #128	@ 0x80
 8006e0e:	d902      	bls.n	8006e16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006e10:	2303      	movs	r3, #3
 8006e12:	613b      	str	r3, [r7, #16]
 8006e14:	e00a      	b.n	8006e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b80      	cmp	r3, #128	@ 0x80
 8006e1a:	d102      	bne.n	8006e22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	613b      	str	r3, [r7, #16]
 8006e20:	e004      	b.n	8006e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b70      	cmp	r3, #112	@ 0x70
 8006e26:	d101      	bne.n	8006e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e28:	2301      	movs	r3, #1
 8006e2a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8006e5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f023 0207 	bic.w	r2, r3, #7
 8006e34:	4909      	ldr	r1, [pc, #36]	@ (8006e5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006e3c:	4b07      	ldr	r3, [pc, #28]	@ (8006e5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0307 	and.w	r3, r3, #7
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d001      	beq.n	8006e4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e000      	b.n	8006e50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3718      	adds	r7, #24
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	40021000 	.word	0x40021000
 8006e5c:	40022000 	.word	0x40022000

08006e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e68:	2300      	movs	r3, #0
 8006e6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d041      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e80:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006e84:	d02a      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006e86:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006e8a:	d824      	bhi.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006e8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e90:	d008      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006e92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e96:	d81e      	bhi.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00a      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006e9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ea0:	d010      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006ea2:	e018      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006ea4:	4b86      	ldr	r3, [pc, #536]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	4a85      	ldr	r2, [pc, #532]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006eaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006eae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006eb0:	e015      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fabb 	bl	8007434 <RCCEx_PLLSAI1_Config>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006ec2:	e00c      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3320      	adds	r3, #32
 8006ec8:	2100      	movs	r1, #0
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 fba6 	bl	800761c <RCCEx_PLLSAI2_Config>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006ed4:	e003      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	74fb      	strb	r3, [r7, #19]
      break;
 8006eda:	e000      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006edc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ede:	7cfb      	ldrb	r3, [r7, #19]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10b      	bne.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ee4:	4b76      	ldr	r3, [pc, #472]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ef2:	4973      	ldr	r1, [pc, #460]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006efa:	e001      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efc:	7cfb      	ldrb	r3, [r7, #19]
 8006efe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d041      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f10:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006f14:	d02a      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006f16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006f1a:	d824      	bhi.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006f1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f20:	d008      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006f22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f26:	d81e      	bhi.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00a      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006f2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f30:	d010      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006f32:	e018      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006f34:	4b62      	ldr	r3, [pc, #392]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	4a61      	ldr	r2, [pc, #388]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f3e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006f40:	e015      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	3304      	adds	r3, #4
 8006f46:	2100      	movs	r1, #0
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 fa73 	bl	8007434 <RCCEx_PLLSAI1_Config>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006f52:	e00c      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	3320      	adds	r3, #32
 8006f58:	2100      	movs	r1, #0
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 fb5e 	bl	800761c <RCCEx_PLLSAI2_Config>
 8006f60:	4603      	mov	r3, r0
 8006f62:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006f64:	e003      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	74fb      	strb	r3, [r7, #19]
      break;
 8006f6a:	e000      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006f6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f6e:	7cfb      	ldrb	r3, [r7, #19]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10b      	bne.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006f74:	4b52      	ldr	r3, [pc, #328]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f7a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f82:	494f      	ldr	r1, [pc, #316]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006f8a:	e001      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f8c:	7cfb      	ldrb	r3, [r7, #19]
 8006f8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 80a0 	beq.w	80070de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006fa2:	4b47      	ldr	r3, [pc, #284]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e000      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00d      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fb8:	4b41      	ldr	r3, [pc, #260]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fbc:	4a40      	ldr	r2, [pc, #256]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fc4:	4b3e      	ldr	r3, [pc, #248]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fcc:	60bb      	str	r3, [r7, #8]
 8006fce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fd4:	4b3b      	ldr	r3, [pc, #236]	@ (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a3a      	ldr	r2, [pc, #232]	@ (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006fda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fe0:	f7fc fe38 	bl	8003c54 <HAL_GetTick>
 8006fe4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006fe6:	e009      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fe8:	f7fc fe34 	bl	8003c54 <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d902      	bls.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	74fb      	strb	r3, [r7, #19]
        break;
 8006ffa:	e005      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006ffc:	4b31      	ldr	r3, [pc, #196]	@ (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007004:	2b00      	cmp	r3, #0
 8007006:	d0ef      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007008:	7cfb      	ldrb	r3, [r7, #19]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d15c      	bne.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800700e:	4b2c      	ldr	r3, [pc, #176]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007014:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007018:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d01f      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	429a      	cmp	r2, r3
 800702a:	d019      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800702c:	4b24      	ldr	r3, [pc, #144]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800702e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007032:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007036:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007038:	4b21      	ldr	r3, [pc, #132]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800703a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800703e:	4a20      	ldr	r2, [pc, #128]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007048:	4b1d      	ldr	r3, [pc, #116]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800704a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800704e:	4a1c      	ldr	r2, [pc, #112]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007050:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007054:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007058:	4a19      	ldr	r2, [pc, #100]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b00      	cmp	r3, #0
 8007068:	d016      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800706a:	f7fc fdf3 	bl	8003c54 <HAL_GetTick>
 800706e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007070:	e00b      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007072:	f7fc fdef 	bl	8003c54 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007080:	4293      	cmp	r3, r2
 8007082:	d902      	bls.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	74fb      	strb	r3, [r7, #19]
            break;
 8007088:	e006      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800708a:	4b0d      	ldr	r3, [pc, #52]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800708c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007090:	f003 0302 	and.w	r3, r3, #2
 8007094:	2b00      	cmp	r3, #0
 8007096:	d0ec      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007098:	7cfb      	ldrb	r3, [r7, #19]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10c      	bne.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800709e:	4b08      	ldr	r3, [pc, #32]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070ae:	4904      	ldr	r1, [pc, #16]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80070b6:	e009      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80070b8:	7cfb      	ldrb	r3, [r7, #19]
 80070ba:	74bb      	strb	r3, [r7, #18]
 80070bc:	e006      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80070be:	bf00      	nop
 80070c0:	40021000 	.word	0x40021000
 80070c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c8:	7cfb      	ldrb	r3, [r7, #19]
 80070ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070cc:	7c7b      	ldrb	r3, [r7, #17]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d105      	bne.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070d2:	4b9e      	ldr	r3, [pc, #632]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070d6:	4a9d      	ldr	r2, [pc, #628]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00a      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070ea:	4b98      	ldr	r3, [pc, #608]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070f0:	f023 0203 	bic.w	r2, r3, #3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f8:	4994      	ldr	r1, [pc, #592]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00a      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800710c:	4b8f      	ldr	r3, [pc, #572]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800710e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007112:	f023 020c 	bic.w	r2, r3, #12
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800711a:	498c      	ldr	r1, [pc, #560]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800711c:	4313      	orrs	r3, r2
 800711e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0304 	and.w	r3, r3, #4
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800712e:	4b87      	ldr	r3, [pc, #540]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007134:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800713c:	4983      	ldr	r1, [pc, #524]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800713e:	4313      	orrs	r3, r2
 8007140:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0308 	and.w	r3, r3, #8
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00a      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007150:	4b7e      	ldr	r3, [pc, #504]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007156:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800715e:	497b      	ldr	r1, [pc, #492]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007160:	4313      	orrs	r3, r2
 8007162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0310 	and.w	r3, r3, #16
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00a      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007172:	4b76      	ldr	r3, [pc, #472]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007178:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007180:	4972      	ldr	r1, [pc, #456]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007182:	4313      	orrs	r3, r2
 8007184:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0320 	and.w	r3, r3, #32
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00a      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007194:	4b6d      	ldr	r3, [pc, #436]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800719a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071a2:	496a      	ldr	r1, [pc, #424]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071a4:	4313      	orrs	r3, r2
 80071a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00a      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071b6:	4b65      	ldr	r3, [pc, #404]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071c4:	4961      	ldr	r1, [pc, #388]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00a      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80071d8:	4b5c      	ldr	r3, [pc, #368]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071e6:	4959      	ldr	r1, [pc, #356]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00a      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80071fa:	4b54      	ldr	r3, [pc, #336]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007200:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007208:	4950      	ldr	r1, [pc, #320]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800720a:	4313      	orrs	r3, r2
 800720c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00a      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800721c:	4b4b      	ldr	r3, [pc, #300]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800721e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007222:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800722a:	4948      	ldr	r1, [pc, #288]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800722c:	4313      	orrs	r3, r2
 800722e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00a      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800723e:	4b43      	ldr	r3, [pc, #268]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007244:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800724c:	493f      	ldr	r1, [pc, #252]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800724e:	4313      	orrs	r3, r2
 8007250:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800725c:	2b00      	cmp	r3, #0
 800725e:	d028      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007260:	4b3a      	ldr	r3, [pc, #232]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007266:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800726e:	4937      	ldr	r1, [pc, #220]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007270:	4313      	orrs	r3, r2
 8007272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800727a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800727e:	d106      	bne.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007280:	4b32      	ldr	r3, [pc, #200]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	4a31      	ldr	r2, [pc, #196]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007286:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800728a:	60d3      	str	r3, [r2, #12]
 800728c:	e011      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007292:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007296:	d10c      	bne.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	3304      	adds	r3, #4
 800729c:	2101      	movs	r1, #1
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 f8c8 	bl	8007434 <RCCEx_PLLSAI1_Config>
 80072a4:	4603      	mov	r3, r0
 80072a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80072a8:	7cfb      	ldrb	r3, [r7, #19]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80072ae:	7cfb      	ldrb	r3, [r7, #19]
 80072b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d028      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80072be:	4b23      	ldr	r3, [pc, #140]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072c4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072cc:	491f      	ldr	r1, [pc, #124]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072dc:	d106      	bne.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072de:	4b1b      	ldr	r3, [pc, #108]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	4a1a      	ldr	r2, [pc, #104]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072e8:	60d3      	str	r3, [r2, #12]
 80072ea:	e011      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072f4:	d10c      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	3304      	adds	r3, #4
 80072fa:	2101      	movs	r1, #1
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 f899 	bl	8007434 <RCCEx_PLLSAI1_Config>
 8007302:	4603      	mov	r3, r0
 8007304:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007306:	7cfb      	ldrb	r3, [r7, #19]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800730c:	7cfb      	ldrb	r3, [r7, #19]
 800730e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d02b      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800731c:	4b0b      	ldr	r3, [pc, #44]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800731e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007322:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800732a:	4908      	ldr	r1, [pc, #32]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800732c:	4313      	orrs	r3, r2
 800732e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007336:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800733a:	d109      	bne.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800733c:	4b03      	ldr	r3, [pc, #12]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	4a02      	ldr	r2, [pc, #8]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007342:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007346:	60d3      	str	r3, [r2, #12]
 8007348:	e014      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800734a:	bf00      	nop
 800734c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007354:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007358:	d10c      	bne.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3304      	adds	r3, #4
 800735e:	2101      	movs	r1, #1
 8007360:	4618      	mov	r0, r3
 8007362:	f000 f867 	bl	8007434 <RCCEx_PLLSAI1_Config>
 8007366:	4603      	mov	r3, r0
 8007368:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800736a:	7cfb      	ldrb	r3, [r7, #19]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d001      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007370:	7cfb      	ldrb	r3, [r7, #19]
 8007372:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d02f      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007380:	4b2b      	ldr	r3, [pc, #172]	@ (8007430 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007386:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800738e:	4928      	ldr	r1, [pc, #160]	@ (8007430 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007390:	4313      	orrs	r3, r2
 8007392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800739a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800739e:	d10d      	bne.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	3304      	adds	r3, #4
 80073a4:	2102      	movs	r1, #2
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 f844 	bl	8007434 <RCCEx_PLLSAI1_Config>
 80073ac:	4603      	mov	r3, r0
 80073ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80073b0:	7cfb      	ldrb	r3, [r7, #19]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d014      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80073b6:	7cfb      	ldrb	r3, [r7, #19]
 80073b8:	74bb      	strb	r3, [r7, #18]
 80073ba:	e011      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073c4:	d10c      	bne.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	3320      	adds	r3, #32
 80073ca:	2102      	movs	r1, #2
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 f925 	bl	800761c <RCCEx_PLLSAI2_Config>
 80073d2:	4603      	mov	r3, r0
 80073d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80073d6:	7cfb      	ldrb	r3, [r7, #19]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80073dc:	7cfb      	ldrb	r3, [r7, #19]
 80073de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00a      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80073ec:	4b10      	ldr	r3, [pc, #64]	@ (8007430 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80073ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073f2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073fa:	490d      	ldr	r1, [pc, #52]	@ (8007430 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80073fc:	4313      	orrs	r3, r2
 80073fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00b      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800740e:	4b08      	ldr	r3, [pc, #32]	@ (8007430 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007414:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800741e:	4904      	ldr	r1, [pc, #16]	@ (8007430 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007420:	4313      	orrs	r3, r2
 8007422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007426:	7cbb      	ldrb	r3, [r7, #18]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3718      	adds	r7, #24
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	40021000 	.word	0x40021000

08007434 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007442:	4b75      	ldr	r3, [pc, #468]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	f003 0303 	and.w	r3, r3, #3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d018      	beq.n	8007480 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800744e:	4b72      	ldr	r3, [pc, #456]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	f003 0203 	and.w	r2, r3, #3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	429a      	cmp	r2, r3
 800745c:	d10d      	bne.n	800747a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
       ||
 8007462:	2b00      	cmp	r3, #0
 8007464:	d009      	beq.n	800747a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007466:	4b6c      	ldr	r3, [pc, #432]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	091b      	lsrs	r3, r3, #4
 800746c:	f003 0307 	and.w	r3, r3, #7
 8007470:	1c5a      	adds	r2, r3, #1
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
       ||
 8007476:	429a      	cmp	r2, r3
 8007478:	d047      	beq.n	800750a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	73fb      	strb	r3, [r7, #15]
 800747e:	e044      	b.n	800750a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b03      	cmp	r3, #3
 8007486:	d018      	beq.n	80074ba <RCCEx_PLLSAI1_Config+0x86>
 8007488:	2b03      	cmp	r3, #3
 800748a:	d825      	bhi.n	80074d8 <RCCEx_PLLSAI1_Config+0xa4>
 800748c:	2b01      	cmp	r3, #1
 800748e:	d002      	beq.n	8007496 <RCCEx_PLLSAI1_Config+0x62>
 8007490:	2b02      	cmp	r3, #2
 8007492:	d009      	beq.n	80074a8 <RCCEx_PLLSAI1_Config+0x74>
 8007494:	e020      	b.n	80074d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007496:	4b60      	ldr	r3, [pc, #384]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0302 	and.w	r3, r3, #2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d11d      	bne.n	80074de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074a6:	e01a      	b.n	80074de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80074a8:	4b5b      	ldr	r3, [pc, #364]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d116      	bne.n	80074e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074b8:	e013      	b.n	80074e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80074ba:	4b57      	ldr	r3, [pc, #348]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10f      	bne.n	80074e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80074c6:	4b54      	ldr	r3, [pc, #336]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d109      	bne.n	80074e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80074d6:	e006      	b.n	80074e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	73fb      	strb	r3, [r7, #15]
      break;
 80074dc:	e004      	b.n	80074e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80074de:	bf00      	nop
 80074e0:	e002      	b.n	80074e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80074e2:	bf00      	nop
 80074e4:	e000      	b.n	80074e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80074e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10d      	bne.n	800750a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80074ee:	4b4a      	ldr	r3, [pc, #296]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6819      	ldr	r1, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	3b01      	subs	r3, #1
 8007500:	011b      	lsls	r3, r3, #4
 8007502:	430b      	orrs	r3, r1
 8007504:	4944      	ldr	r1, [pc, #272]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007506:	4313      	orrs	r3, r2
 8007508:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800750a:	7bfb      	ldrb	r3, [r7, #15]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d17d      	bne.n	800760c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007510:	4b41      	ldr	r3, [pc, #260]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a40      	ldr	r2, [pc, #256]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007516:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800751a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800751c:	f7fc fb9a 	bl	8003c54 <HAL_GetTick>
 8007520:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007522:	e009      	b.n	8007538 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007524:	f7fc fb96 	bl	8003c54 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	2b02      	cmp	r3, #2
 8007530:	d902      	bls.n	8007538 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	73fb      	strb	r3, [r7, #15]
        break;
 8007536:	e005      	b.n	8007544 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007538:	4b37      	ldr	r3, [pc, #220]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1ef      	bne.n	8007524 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007544:	7bfb      	ldrb	r3, [r7, #15]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d160      	bne.n	800760c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d111      	bne.n	8007574 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007550:	4b31      	ldr	r3, [pc, #196]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	6892      	ldr	r2, [r2, #8]
 8007560:	0211      	lsls	r1, r2, #8
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	68d2      	ldr	r2, [r2, #12]
 8007566:	0912      	lsrs	r2, r2, #4
 8007568:	0452      	lsls	r2, r2, #17
 800756a:	430a      	orrs	r2, r1
 800756c:	492a      	ldr	r1, [pc, #168]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800756e:	4313      	orrs	r3, r2
 8007570:	610b      	str	r3, [r1, #16]
 8007572:	e027      	b.n	80075c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d112      	bne.n	80075a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800757a:	4b27      	ldr	r3, [pc, #156]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007582:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	6892      	ldr	r2, [r2, #8]
 800758a:	0211      	lsls	r1, r2, #8
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	6912      	ldr	r2, [r2, #16]
 8007590:	0852      	lsrs	r2, r2, #1
 8007592:	3a01      	subs	r2, #1
 8007594:	0552      	lsls	r2, r2, #21
 8007596:	430a      	orrs	r2, r1
 8007598:	491f      	ldr	r1, [pc, #124]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800759a:	4313      	orrs	r3, r2
 800759c:	610b      	str	r3, [r1, #16]
 800759e:	e011      	b.n	80075c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80075a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	6892      	ldr	r2, [r2, #8]
 80075b0:	0211      	lsls	r1, r2, #8
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	6952      	ldr	r2, [r2, #20]
 80075b6:	0852      	lsrs	r2, r2, #1
 80075b8:	3a01      	subs	r2, #1
 80075ba:	0652      	lsls	r2, r2, #25
 80075bc:	430a      	orrs	r2, r1
 80075be:	4916      	ldr	r1, [pc, #88]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075c0:	4313      	orrs	r3, r2
 80075c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80075c4:	4b14      	ldr	r3, [pc, #80]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a13      	ldr	r2, [pc, #76]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80075ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075d0:	f7fc fb40 	bl	8003c54 <HAL_GetTick>
 80075d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80075d6:	e009      	b.n	80075ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80075d8:	f7fc fb3c 	bl	8003c54 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d902      	bls.n	80075ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	73fb      	strb	r3, [r7, #15]
          break;
 80075ea:	e005      	b.n	80075f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80075ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0ef      	beq.n	80075d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d106      	bne.n	800760c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80075fe:	4b06      	ldr	r3, [pc, #24]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007600:	691a      	ldr	r2, [r3, #16]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	4904      	ldr	r1, [pc, #16]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007608:	4313      	orrs	r3, r2
 800760a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800760c:	7bfb      	ldrb	r3, [r7, #15]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	40021000 	.word	0x40021000

0800761c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800762a:	4b6a      	ldr	r3, [pc, #424]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	f003 0303 	and.w	r3, r3, #3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d018      	beq.n	8007668 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007636:	4b67      	ldr	r3, [pc, #412]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f003 0203 	and.w	r2, r3, #3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	429a      	cmp	r2, r3
 8007644:	d10d      	bne.n	8007662 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
       ||
 800764a:	2b00      	cmp	r3, #0
 800764c:	d009      	beq.n	8007662 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800764e:	4b61      	ldr	r3, [pc, #388]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	091b      	lsrs	r3, r3, #4
 8007654:	f003 0307 	and.w	r3, r3, #7
 8007658:	1c5a      	adds	r2, r3, #1
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
       ||
 800765e:	429a      	cmp	r2, r3
 8007660:	d047      	beq.n	80076f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	73fb      	strb	r3, [r7, #15]
 8007666:	e044      	b.n	80076f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b03      	cmp	r3, #3
 800766e:	d018      	beq.n	80076a2 <RCCEx_PLLSAI2_Config+0x86>
 8007670:	2b03      	cmp	r3, #3
 8007672:	d825      	bhi.n	80076c0 <RCCEx_PLLSAI2_Config+0xa4>
 8007674:	2b01      	cmp	r3, #1
 8007676:	d002      	beq.n	800767e <RCCEx_PLLSAI2_Config+0x62>
 8007678:	2b02      	cmp	r3, #2
 800767a:	d009      	beq.n	8007690 <RCCEx_PLLSAI2_Config+0x74>
 800767c:	e020      	b.n	80076c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800767e:	4b55      	ldr	r3, [pc, #340]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	2b00      	cmp	r3, #0
 8007688:	d11d      	bne.n	80076c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800768e:	e01a      	b.n	80076c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007690:	4b50      	ldr	r3, [pc, #320]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007698:	2b00      	cmp	r3, #0
 800769a:	d116      	bne.n	80076ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076a0:	e013      	b.n	80076ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80076a2:	4b4c      	ldr	r3, [pc, #304]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10f      	bne.n	80076ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80076ae:	4b49      	ldr	r3, [pc, #292]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d109      	bne.n	80076ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80076be:	e006      	b.n	80076ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	73fb      	strb	r3, [r7, #15]
      break;
 80076c4:	e004      	b.n	80076d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80076c6:	bf00      	nop
 80076c8:	e002      	b.n	80076d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80076ca:	bf00      	nop
 80076cc:	e000      	b.n	80076d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80076ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10d      	bne.n	80076f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80076d6:	4b3f      	ldr	r3, [pc, #252]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6819      	ldr	r1, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	3b01      	subs	r3, #1
 80076e8:	011b      	lsls	r3, r3, #4
 80076ea:	430b      	orrs	r3, r1
 80076ec:	4939      	ldr	r1, [pc, #228]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076ee:	4313      	orrs	r3, r2
 80076f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d167      	bne.n	80077c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80076f8:	4b36      	ldr	r3, [pc, #216]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a35      	ldr	r2, [pc, #212]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007702:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007704:	f7fc faa6 	bl	8003c54 <HAL_GetTick>
 8007708:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800770a:	e009      	b.n	8007720 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800770c:	f7fc faa2 	bl	8003c54 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	2b02      	cmp	r3, #2
 8007718:	d902      	bls.n	8007720 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	73fb      	strb	r3, [r7, #15]
        break;
 800771e:	e005      	b.n	800772c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007720:	4b2c      	ldr	r3, [pc, #176]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1ef      	bne.n	800770c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800772c:	7bfb      	ldrb	r3, [r7, #15]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d14a      	bne.n	80077c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d111      	bne.n	800775c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007738:	4b26      	ldr	r3, [pc, #152]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007740:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	6892      	ldr	r2, [r2, #8]
 8007748:	0211      	lsls	r1, r2, #8
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	68d2      	ldr	r2, [r2, #12]
 800774e:	0912      	lsrs	r2, r2, #4
 8007750:	0452      	lsls	r2, r2, #17
 8007752:	430a      	orrs	r2, r1
 8007754:	491f      	ldr	r1, [pc, #124]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007756:	4313      	orrs	r3, r2
 8007758:	614b      	str	r3, [r1, #20]
 800775a:	e011      	b.n	8007780 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800775c:	4b1d      	ldr	r3, [pc, #116]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800775e:	695b      	ldr	r3, [r3, #20]
 8007760:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007764:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	6892      	ldr	r2, [r2, #8]
 800776c:	0211      	lsls	r1, r2, #8
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	6912      	ldr	r2, [r2, #16]
 8007772:	0852      	lsrs	r2, r2, #1
 8007774:	3a01      	subs	r2, #1
 8007776:	0652      	lsls	r2, r2, #25
 8007778:	430a      	orrs	r2, r1
 800777a:	4916      	ldr	r1, [pc, #88]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800777c:	4313      	orrs	r3, r2
 800777e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007780:	4b14      	ldr	r3, [pc, #80]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a13      	ldr	r2, [pc, #76]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800778a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800778c:	f7fc fa62 	bl	8003c54 <HAL_GetTick>
 8007790:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007792:	e009      	b.n	80077a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007794:	f7fc fa5e 	bl	8003c54 <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d902      	bls.n	80077a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	73fb      	strb	r3, [r7, #15]
          break;
 80077a6:	e005      	b.n	80077b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80077a8:	4b0a      	ldr	r3, [pc, #40]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d0ef      	beq.n	8007794 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d106      	bne.n	80077c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80077ba:	4b06      	ldr	r3, [pc, #24]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077bc:	695a      	ldr	r2, [r3, #20]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	4904      	ldr	r1, [pc, #16]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	40021000 	.word	0x40021000

080077d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e095      	b.n	8007916 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d108      	bne.n	8007804 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077fa:	d009      	beq.n	8007810 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	61da      	str	r2, [r3, #28]
 8007802:	e005      	b.n	8007810 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d106      	bne.n	8007830 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f7fb fbba 	bl	8002fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2202      	movs	r2, #2
 8007834:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007846:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007850:	d902      	bls.n	8007858 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007852:	2300      	movs	r3, #0
 8007854:	60fb      	str	r3, [r7, #12]
 8007856:	e002      	b.n	800785e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007858:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800785c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007866:	d007      	beq.n	8007878 <HAL_SPI_Init+0xa0>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007870:	d002      	beq.n	8007878 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007888:	431a      	orrs	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	f003 0302 	and.w	r3, r3, #2
 8007892:	431a      	orrs	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	431a      	orrs	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078a6:	431a      	orrs	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078b0:	431a      	orrs	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ba:	ea42 0103 	orr.w	r1, r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	0c1b      	lsrs	r3, r3, #16
 80078d4:	f003 0204 	and.w	r2, r3, #4
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078dc:	f003 0310 	and.w	r3, r3, #16
 80078e0:	431a      	orrs	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078e6:	f003 0308 	and.w	r3, r3, #8
 80078ea:	431a      	orrs	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80078f4:	ea42 0103 	orr.w	r1, r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	430a      	orrs	r2, r1
 8007904:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b088      	sub	sp, #32
 8007922:	af00      	add	r7, sp, #0
 8007924:	60f8      	str	r0, [r7, #12]
 8007926:	60b9      	str	r1, [r7, #8]
 8007928:	603b      	str	r3, [r7, #0]
 800792a:	4613      	mov	r3, r2
 800792c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800792e:	f7fc f991 	bl	8003c54 <HAL_GetTick>
 8007932:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007934:	88fb      	ldrh	r3, [r7, #6]
 8007936:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b01      	cmp	r3, #1
 8007942:	d001      	beq.n	8007948 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007944:	2302      	movs	r3, #2
 8007946:	e15c      	b.n	8007c02 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d002      	beq.n	8007954 <HAL_SPI_Transmit+0x36>
 800794e:	88fb      	ldrh	r3, [r7, #6]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d101      	bne.n	8007958 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	e154      	b.n	8007c02 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800795e:	2b01      	cmp	r3, #1
 8007960:	d101      	bne.n	8007966 <HAL_SPI_Transmit+0x48>
 8007962:	2302      	movs	r3, #2
 8007964:	e14d      	b.n	8007c02 <HAL_SPI_Transmit+0x2e4>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2203      	movs	r2, #3
 8007972:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	88fa      	ldrh	r2, [r7, #6]
 8007986:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	88fa      	ldrh	r2, [r7, #6]
 800798c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079b8:	d10f      	bne.n	80079da <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80079d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079e4:	2b40      	cmp	r3, #64	@ 0x40
 80079e6:	d007      	beq.n	80079f8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007a00:	d952      	bls.n	8007aa8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d002      	beq.n	8007a10 <HAL_SPI_Transmit+0xf2>
 8007a0a:	8b7b      	ldrh	r3, [r7, #26]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d145      	bne.n	8007a9c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a14:	881a      	ldrh	r2, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a20:	1c9a      	adds	r2, r3, #2
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a34:	e032      	b.n	8007a9c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	f003 0302 	and.w	r3, r3, #2
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d112      	bne.n	8007a6a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a48:	881a      	ldrh	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a54:	1c9a      	adds	r2, r3, #2
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	3b01      	subs	r3, #1
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a68:	e018      	b.n	8007a9c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a6a:	f7fc f8f3 	bl	8003c54 <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d803      	bhi.n	8007a82 <HAL_SPI_Transmit+0x164>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a80:	d102      	bne.n	8007a88 <HAL_SPI_Transmit+0x16a>
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d109      	bne.n	8007a9c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e0b2      	b.n	8007c02 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1c7      	bne.n	8007a36 <HAL_SPI_Transmit+0x118>
 8007aa6:	e083      	b.n	8007bb0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d002      	beq.n	8007ab6 <HAL_SPI_Transmit+0x198>
 8007ab0:	8b7b      	ldrh	r3, [r7, #26]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d177      	bne.n	8007ba6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d912      	bls.n	8007ae6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac4:	881a      	ldrh	r2, [r3, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad0:	1c9a      	adds	r2, r3, #2
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	3b02      	subs	r3, #2
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007ae4:	e05f      	b.n	8007ba6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	330c      	adds	r3, #12
 8007af0:	7812      	ldrb	r2, [r2, #0]
 8007af2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af8:	1c5a      	adds	r2, r3, #1
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	3b01      	subs	r3, #1
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007b0c:	e04b      	b.n	8007ba6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f003 0302 	and.w	r3, r3, #2
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d12b      	bne.n	8007b74 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d912      	bls.n	8007b4c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b2a:	881a      	ldrh	r2, [r3, #0]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b36:	1c9a      	adds	r2, r3, #2
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	3b02      	subs	r3, #2
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007b4a:	e02c      	b.n	8007ba6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	330c      	adds	r3, #12
 8007b56:	7812      	ldrb	r2, [r2, #0]
 8007b58:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b5e:	1c5a      	adds	r2, r3, #1
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007b72:	e018      	b.n	8007ba6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b74:	f7fc f86e 	bl	8003c54 <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	683a      	ldr	r2, [r7, #0]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d803      	bhi.n	8007b8c <HAL_SPI_Transmit+0x26e>
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8a:	d102      	bne.n	8007b92 <HAL_SPI_Transmit+0x274>
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d109      	bne.n	8007ba6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e02d      	b.n	8007c02 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1ae      	bne.n	8007b0e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bb0:	69fa      	ldr	r2, [r7, #28]
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f000 fcf5 	bl	80085a4 <SPI_EndRxTxTransaction>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d002      	beq.n	8007bc6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10a      	bne.n	8007be4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bce:	2300      	movs	r3, #0
 8007bd0:	617b      	str	r3, [r7, #20]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	617b      	str	r3, [r7, #20]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	617b      	str	r3, [r7, #20]
 8007be2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e000      	b.n	8007c02 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8007c00:	2300      	movs	r3, #0
  }
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3720      	adds	r7, #32
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b088      	sub	sp, #32
 8007c0e:	af02      	add	r7, sp, #8
 8007c10:	60f8      	str	r0, [r7, #12]
 8007c12:	60b9      	str	r1, [r7, #8]
 8007c14:	603b      	str	r3, [r7, #0]
 8007c16:	4613      	mov	r3, r2
 8007c18:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d001      	beq.n	8007c2a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007c26:	2302      	movs	r3, #2
 8007c28:	e123      	b.n	8007e72 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c32:	d112      	bne.n	8007c5a <HAL_SPI_Receive+0x50>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d10e      	bne.n	8007c5a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2204      	movs	r2, #4
 8007c40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007c44:	88fa      	ldrh	r2, [r7, #6]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	68b9      	ldr	r1, [r7, #8]
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 f912 	bl	8007e7a <HAL_SPI_TransmitReceive>
 8007c56:	4603      	mov	r3, r0
 8007c58:	e10b      	b.n	8007e72 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c5a:	f7fb fffb 	bl	8003c54 <HAL_GetTick>
 8007c5e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d002      	beq.n	8007c6c <HAL_SPI_Receive+0x62>
 8007c66:	88fb      	ldrh	r3, [r7, #6]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d101      	bne.n	8007c70 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e100      	b.n	8007e72 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d101      	bne.n	8007c7e <HAL_SPI_Receive+0x74>
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	e0f9      	b.n	8007e72 <HAL_SPI_Receive+0x268>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2204      	movs	r2, #4
 8007c8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	88fa      	ldrh	r2, [r7, #6]
 8007c9e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	88fa      	ldrh	r2, [r7, #6]
 8007ca6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2200      	movs	r2, #0
 8007cae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007cd0:	d908      	bls.n	8007ce4 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	685a      	ldr	r2, [r3, #4]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007ce0:	605a      	str	r2, [r3, #4]
 8007ce2:	e007      	b.n	8007cf4 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007cf2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cfc:	d10f      	bne.n	8007d1e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007d1c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d28:	2b40      	cmp	r3, #64	@ 0x40
 8007d2a:	d007      	beq.n	8007d3c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d3a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007d44:	d875      	bhi.n	8007e32 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007d46:	e037      	b.n	8007db8 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d117      	bne.n	8007d86 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f103 020c 	add.w	r2, r3, #12
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d62:	7812      	ldrb	r2, [r2, #0]
 8007d64:	b2d2      	uxtb	r2, r2
 8007d66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d6c:	1c5a      	adds	r2, r3, #1
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007d84:	e018      	b.n	8007db8 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d86:	f7fb ff65 	bl	8003c54 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d803      	bhi.n	8007d9e <HAL_SPI_Receive+0x194>
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9c:	d102      	bne.n	8007da4 <HAL_SPI_Receive+0x19a>
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d109      	bne.n	8007db8 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e05c      	b.n	8007e72 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1c1      	bne.n	8007d48 <HAL_SPI_Receive+0x13e>
 8007dc4:	e03b      	b.n	8007e3e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d115      	bne.n	8007e00 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68da      	ldr	r2, [r3, #12]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dde:	b292      	uxth	r2, r2
 8007de0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de6:	1c9a      	adds	r2, r3, #2
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	3b01      	subs	r3, #1
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007dfe:	e018      	b.n	8007e32 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e00:	f7fb ff28 	bl	8003c54 <HAL_GetTick>
 8007e04:	4602      	mov	r2, r0
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d803      	bhi.n	8007e18 <HAL_SPI_Receive+0x20e>
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e16:	d102      	bne.n	8007e1e <HAL_SPI_Receive+0x214>
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d109      	bne.n	8007e32 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e01f      	b.n	8007e72 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1c3      	bne.n	8007dc6 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f000 fb56 	bl	80084f4 <SPI_EndRxTransaction>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d002      	beq.n	8007e54 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2220      	movs	r2, #32
 8007e52:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d001      	beq.n	8007e70 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e000      	b.n	8007e72 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8007e70:	2300      	movs	r3, #0
  }
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3718      	adds	r7, #24
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b08a      	sub	sp, #40	@ 0x28
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	60f8      	str	r0, [r7, #12]
 8007e82:	60b9      	str	r1, [r7, #8]
 8007e84:	607a      	str	r2, [r7, #4]
 8007e86:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e8c:	f7fb fee2 	bl	8003c54 <HAL_GetTick>
 8007e90:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007e98:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007ea0:	887b      	ldrh	r3, [r7, #2]
 8007ea2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8007ea4:	887b      	ldrh	r3, [r7, #2]
 8007ea6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ea8:	7ffb      	ldrb	r3, [r7, #31]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d00c      	beq.n	8007ec8 <HAL_SPI_TransmitReceive+0x4e>
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007eb4:	d106      	bne.n	8007ec4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d102      	bne.n	8007ec4 <HAL_SPI_TransmitReceive+0x4a>
 8007ebe:	7ffb      	ldrb	r3, [r7, #31]
 8007ec0:	2b04      	cmp	r3, #4
 8007ec2:	d001      	beq.n	8007ec8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	e1f3      	b.n	80082b0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d005      	beq.n	8007eda <HAL_SPI_TransmitReceive+0x60>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d002      	beq.n	8007eda <HAL_SPI_TransmitReceive+0x60>
 8007ed4:	887b      	ldrh	r3, [r7, #2]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e1e8      	b.n	80082b0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d101      	bne.n	8007eec <HAL_SPI_TransmitReceive+0x72>
 8007ee8:	2302      	movs	r3, #2
 8007eea:	e1e1      	b.n	80082b0 <HAL_SPI_TransmitReceive+0x436>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b04      	cmp	r3, #4
 8007efe:	d003      	beq.n	8007f08 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2205      	movs	r2, #5
 8007f04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	887a      	ldrh	r2, [r7, #2]
 8007f18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	887a      	ldrh	r2, [r7, #2]
 8007f20:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	887a      	ldrh	r2, [r7, #2]
 8007f2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	887a      	ldrh	r2, [r7, #2]
 8007f34:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007f4a:	d802      	bhi.n	8007f52 <HAL_SPI_TransmitReceive+0xd8>
 8007f4c:	8abb      	ldrh	r3, [r7, #20]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d908      	bls.n	8007f64 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007f60:	605a      	str	r2, [r3, #4]
 8007f62:	e007      	b.n	8007f74 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	685a      	ldr	r2, [r3, #4]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007f72:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f7e:	2b40      	cmp	r3, #64	@ 0x40
 8007f80:	d007      	beq.n	8007f92 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007f9a:	f240 8083 	bls.w	80080a4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d002      	beq.n	8007fac <HAL_SPI_TransmitReceive+0x132>
 8007fa6:	8afb      	ldrh	r3, [r7, #22]
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d16f      	bne.n	800808c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fb0:	881a      	ldrh	r2, [r3, #0]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fbc:	1c9a      	adds	r2, r3, #2
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fd0:	e05c      	b.n	800808c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f003 0302 	and.w	r3, r3, #2
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d11b      	bne.n	8008018 <HAL_SPI_TransmitReceive+0x19e>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d016      	beq.n	8008018 <HAL_SPI_TransmitReceive+0x19e>
 8007fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d113      	bne.n	8008018 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff4:	881a      	ldrh	r2, [r3, #0]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008000:	1c9a      	adds	r2, r3, #2
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800800a:	b29b      	uxth	r3, r3
 800800c:	3b01      	subs	r3, #1
 800800e:	b29a      	uxth	r2, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008014:	2300      	movs	r3, #0
 8008016:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	f003 0301 	and.w	r3, r3, #1
 8008022:	2b01      	cmp	r3, #1
 8008024:	d11c      	bne.n	8008060 <HAL_SPI_TransmitReceive+0x1e6>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800802c:	b29b      	uxth	r3, r3
 800802e:	2b00      	cmp	r3, #0
 8008030:	d016      	beq.n	8008060 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68da      	ldr	r2, [r3, #12]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800803c:	b292      	uxth	r2, r2
 800803e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008044:	1c9a      	adds	r2, r3, #2
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008050:	b29b      	uxth	r3, r3
 8008052:	3b01      	subs	r3, #1
 8008054:	b29a      	uxth	r2, r3
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800805c:	2301      	movs	r3, #1
 800805e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008060:	f7fb fdf8 	bl	8003c54 <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	6a3b      	ldr	r3, [r7, #32]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800806c:	429a      	cmp	r2, r3
 800806e:	d80d      	bhi.n	800808c <HAL_SPI_TransmitReceive+0x212>
 8008070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008076:	d009      	beq.n	800808c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	e111      	b.n	80082b0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008090:	b29b      	uxth	r3, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d19d      	bne.n	8007fd2 <HAL_SPI_TransmitReceive+0x158>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800809c:	b29b      	uxth	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d197      	bne.n	8007fd2 <HAL_SPI_TransmitReceive+0x158>
 80080a2:	e0e5      	b.n	8008270 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d003      	beq.n	80080b4 <HAL_SPI_TransmitReceive+0x23a>
 80080ac:	8afb      	ldrh	r3, [r7, #22]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	f040 80d1 	bne.w	8008256 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d912      	bls.n	80080e4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c2:	881a      	ldrh	r2, [r3, #0]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ce:	1c9a      	adds	r2, r3, #2
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080d8:	b29b      	uxth	r3, r3
 80080da:	3b02      	subs	r3, #2
 80080dc:	b29a      	uxth	r2, r3
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80080e2:	e0b8      	b.n	8008256 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	330c      	adds	r3, #12
 80080ee:	7812      	ldrb	r2, [r2, #0]
 80080f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f6:	1c5a      	adds	r2, r3, #1
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008100:	b29b      	uxth	r3, r3
 8008102:	3b01      	subs	r3, #1
 8008104:	b29a      	uxth	r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800810a:	e0a4      	b.n	8008256 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f003 0302 	and.w	r3, r3, #2
 8008116:	2b02      	cmp	r3, #2
 8008118:	d134      	bne.n	8008184 <HAL_SPI_TransmitReceive+0x30a>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800811e:	b29b      	uxth	r3, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	d02f      	beq.n	8008184 <HAL_SPI_TransmitReceive+0x30a>
 8008124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008126:	2b01      	cmp	r3, #1
 8008128:	d12c      	bne.n	8008184 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800812e:	b29b      	uxth	r3, r3
 8008130:	2b01      	cmp	r3, #1
 8008132:	d912      	bls.n	800815a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008138:	881a      	ldrh	r2, [r3, #0]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008144:	1c9a      	adds	r2, r3, #2
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800814e:	b29b      	uxth	r3, r3
 8008150:	3b02      	subs	r3, #2
 8008152:	b29a      	uxth	r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008158:	e012      	b.n	8008180 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	330c      	adds	r3, #12
 8008164:	7812      	ldrb	r2, [r2, #0]
 8008166:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800816c:	1c5a      	adds	r2, r3, #1
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008176:	b29b      	uxth	r3, r3
 8008178:	3b01      	subs	r3, #1
 800817a:	b29a      	uxth	r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008180:	2300      	movs	r3, #0
 8008182:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	2b01      	cmp	r3, #1
 8008190:	d148      	bne.n	8008224 <HAL_SPI_TransmitReceive+0x3aa>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008198:	b29b      	uxth	r3, r3
 800819a:	2b00      	cmp	r3, #0
 800819c:	d042      	beq.n	8008224 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d923      	bls.n	80081f2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68da      	ldr	r2, [r3, #12]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b4:	b292      	uxth	r2, r2
 80081b6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081bc:	1c9a      	adds	r2, r3, #2
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	3b02      	subs	r3, #2
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80081da:	b29b      	uxth	r3, r3
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d81f      	bhi.n	8008220 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685a      	ldr	r2, [r3, #4]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80081ee:	605a      	str	r2, [r3, #4]
 80081f0:	e016      	b.n	8008220 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f103 020c 	add.w	r2, r3, #12
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081fe:	7812      	ldrb	r2, [r2, #0]
 8008200:	b2d2      	uxtb	r2, r2
 8008202:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008208:	1c5a      	adds	r2, r3, #1
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008214:	b29b      	uxth	r3, r3
 8008216:	3b01      	subs	r3, #1
 8008218:	b29a      	uxth	r2, r3
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008220:	2301      	movs	r3, #1
 8008222:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008224:	f7fb fd16 	bl	8003c54 <HAL_GetTick>
 8008228:	4602      	mov	r2, r0
 800822a:	6a3b      	ldr	r3, [r7, #32]
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008230:	429a      	cmp	r2, r3
 8008232:	d803      	bhi.n	800823c <HAL_SPI_TransmitReceive+0x3c2>
 8008234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800823a:	d102      	bne.n	8008242 <HAL_SPI_TransmitReceive+0x3c8>
 800823c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823e:	2b00      	cmp	r3, #0
 8008240:	d109      	bne.n	8008256 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008252:	2303      	movs	r3, #3
 8008254:	e02c      	b.n	80082b0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800825a:	b29b      	uxth	r3, r3
 800825c:	2b00      	cmp	r3, #0
 800825e:	f47f af55 	bne.w	800810c <HAL_SPI_TransmitReceive+0x292>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008268:	b29b      	uxth	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	f47f af4e 	bne.w	800810c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008270:	6a3a      	ldr	r2, [r7, #32]
 8008272:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f000 f995 	bl	80085a4 <SPI_EndRxTxTransaction>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d008      	beq.n	8008292 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2220      	movs	r2, #32
 8008284:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e00e      	b.n	80082b0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e000      	b.n	80082b0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80082ae:	2300      	movs	r3, #0
  }
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3728      	adds	r7, #40	@ 0x28
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b088      	sub	sp, #32
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	603b      	str	r3, [r7, #0]
 80082c4:	4613      	mov	r3, r2
 80082c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80082c8:	f7fb fcc4 	bl	8003c54 <HAL_GetTick>
 80082cc:	4602      	mov	r2, r0
 80082ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d0:	1a9b      	subs	r3, r3, r2
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	4413      	add	r3, r2
 80082d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80082d8:	f7fb fcbc 	bl	8003c54 <HAL_GetTick>
 80082dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80082de:	4b39      	ldr	r3, [pc, #228]	@ (80083c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	015b      	lsls	r3, r3, #5
 80082e4:	0d1b      	lsrs	r3, r3, #20
 80082e6:	69fa      	ldr	r2, [r7, #28]
 80082e8:	fb02 f303 	mul.w	r3, r2, r3
 80082ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082ee:	e054      	b.n	800839a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f6:	d050      	beq.n	800839a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80082f8:	f7fb fcac 	bl	8003c54 <HAL_GetTick>
 80082fc:	4602      	mov	r2, r0
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	69fa      	ldr	r2, [r7, #28]
 8008304:	429a      	cmp	r2, r3
 8008306:	d902      	bls.n	800830e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d13d      	bne.n	800838a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	685a      	ldr	r2, [r3, #4]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800831c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008326:	d111      	bne.n	800834c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008330:	d004      	beq.n	800833c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800833a:	d107      	bne.n	800834c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800834a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008350:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008354:	d10f      	bne.n	8008376 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008374:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2201      	movs	r2, #1
 800837a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008386:	2303      	movs	r3, #3
 8008388:	e017      	b.n	80083ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008390:	2300      	movs	r3, #0
 8008392:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	3b01      	subs	r3, #1
 8008398:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	689a      	ldr	r2, [r3, #8]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	4013      	ands	r3, r2
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	bf0c      	ite	eq
 80083aa:	2301      	moveq	r3, #1
 80083ac:	2300      	movne	r3, #0
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	461a      	mov	r2, r3
 80083b2:	79fb      	ldrb	r3, [r7, #7]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d19b      	bne.n	80082f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3720      	adds	r7, #32
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	20000028 	.word	0x20000028

080083c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b08a      	sub	sp, #40	@ 0x28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
 80083d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80083d6:	2300      	movs	r3, #0
 80083d8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80083da:	f7fb fc3b 	bl	8003c54 <HAL_GetTick>
 80083de:	4602      	mov	r2, r0
 80083e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e2:	1a9b      	subs	r3, r3, r2
 80083e4:	683a      	ldr	r2, [r7, #0]
 80083e6:	4413      	add	r3, r2
 80083e8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80083ea:	f7fb fc33 	bl	8003c54 <HAL_GetTick>
 80083ee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	330c      	adds	r3, #12
 80083f6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80083f8:	4b3d      	ldr	r3, [pc, #244]	@ (80084f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	4613      	mov	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4413      	add	r3, r2
 8008402:	00da      	lsls	r2, r3, #3
 8008404:	1ad3      	subs	r3, r2, r3
 8008406:	0d1b      	lsrs	r3, r3, #20
 8008408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800840a:	fb02 f303 	mul.w	r3, r2, r3
 800840e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008410:	e060      	b.n	80084d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008418:	d107      	bne.n	800842a <SPI_WaitFifoStateUntilTimeout+0x62>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d104      	bne.n	800842a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	b2db      	uxtb	r3, r3
 8008426:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008428:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008430:	d050      	beq.n	80084d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008432:	f7fb fc0f 	bl	8003c54 <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800843e:	429a      	cmp	r2, r3
 8008440:	d902      	bls.n	8008448 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008444:	2b00      	cmp	r3, #0
 8008446:	d13d      	bne.n	80084c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	685a      	ldr	r2, [r3, #4]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008456:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008460:	d111      	bne.n	8008486 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800846a:	d004      	beq.n	8008476 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008474:	d107      	bne.n	8008486 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008484:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800848a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800848e:	d10f      	bne.n	80084b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800849e:	601a      	str	r2, [r3, #0]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80084ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e010      	b.n	80084e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80084ca:	2300      	movs	r3, #0
 80084cc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	3b01      	subs	r3, #1
 80084d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	689a      	ldr	r2, [r3, #8]
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	4013      	ands	r3, r2
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d196      	bne.n	8008412 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3728      	adds	r7, #40	@ 0x28
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	20000028 	.word	0x20000028

080084f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b086      	sub	sp, #24
 80084f8:	af02      	add	r7, sp, #8
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008508:	d111      	bne.n	800852e <SPI_EndRxTransaction+0x3a>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008512:	d004      	beq.n	800851e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800851c:	d107      	bne.n	800852e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800852c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	2200      	movs	r2, #0
 8008536:	2180      	movs	r1, #128	@ 0x80
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f7ff febd 	bl	80082b8 <SPI_WaitFlagStateUntilTimeout>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d007      	beq.n	8008554 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008548:	f043 0220 	orr.w	r2, r3, #32
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008550:	2303      	movs	r3, #3
 8008552:	e023      	b.n	800859c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800855c:	d11d      	bne.n	800859a <SPI_EndRxTransaction+0xa6>
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008566:	d004      	beq.n	8008572 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008570:	d113      	bne.n	800859a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	9300      	str	r3, [sp, #0]
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	2200      	movs	r2, #0
 800857a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f7ff ff22 	bl	80083c8 <SPI_WaitFifoStateUntilTimeout>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d007      	beq.n	800859a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800858e:	f043 0220 	orr.w	r2, r3, #32
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	e000      	b.n	800859c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af02      	add	r7, sp, #8
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f7ff ff03 	bl	80083c8 <SPI_WaitFifoStateUntilTimeout>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d007      	beq.n	80085d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085cc:	f043 0220 	orr.w	r2, r3, #32
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80085d4:	2303      	movs	r3, #3
 80085d6:	e027      	b.n	8008628 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	2200      	movs	r2, #0
 80085e0:	2180      	movs	r1, #128	@ 0x80
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f7ff fe68 	bl	80082b8 <SPI_WaitFlagStateUntilTimeout>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d007      	beq.n	80085fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085f2:	f043 0220 	orr.w	r2, r3, #32
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80085fa:	2303      	movs	r3, #3
 80085fc:	e014      	b.n	8008628 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	2200      	movs	r2, #0
 8008606:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f7ff fedc 	bl	80083c8 <SPI_WaitFifoStateUntilTimeout>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d007      	beq.n	8008626 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800861a:	f043 0220 	orr.w	r2, r3, #32
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008622:	2303      	movs	r3, #3
 8008624:	e000      	b.n	8008628 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d101      	bne.n	8008642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e040      	b.n	80086c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008646:	2b00      	cmp	r3, #0
 8008648:	d106      	bne.n	8008658 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f7fa fd88 	bl	8003168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2224      	movs	r2, #36	@ 0x24
 800865c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f022 0201 	bic.w	r2, r2, #1
 800866c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008672:	2b00      	cmp	r3, #0
 8008674:	d002      	beq.n	800867c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fae0 	bl	8008c3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f825 	bl	80086cc <UART_SetConfig>
 8008682:	4603      	mov	r3, r0
 8008684:	2b01      	cmp	r3, #1
 8008686:	d101      	bne.n	800868c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	e01b      	b.n	80086c4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	685a      	ldr	r2, [r3, #4]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800869a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	689a      	ldr	r2, [r3, #8]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80086aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f042 0201 	orr.w	r2, r2, #1
 80086ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fb5f 	bl	8008d80 <UART_CheckIdleState>
 80086c2:	4603      	mov	r3, r0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086d0:	b08a      	sub	sp, #40	@ 0x28
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	689a      	ldr	r2, [r3, #8]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	431a      	orrs	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	431a      	orrs	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	69db      	ldr	r3, [r3, #28]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	4ba4      	ldr	r3, [pc, #656]	@ (800898c <UART_SetConfig+0x2c0>)
 80086fc:	4013      	ands	r3, r2
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	6812      	ldr	r2, [r2, #0]
 8008702:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008704:	430b      	orrs	r3, r1
 8008706:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	68da      	ldr	r2, [r3, #12]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	430a      	orrs	r2, r1
 800871c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a99      	ldr	r2, [pc, #612]	@ (8008990 <UART_SetConfig+0x2c4>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d004      	beq.n	8008738 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6a1b      	ldr	r3, [r3, #32]
 8008732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008734:	4313      	orrs	r3, r2
 8008736:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008748:	430a      	orrs	r2, r1
 800874a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a90      	ldr	r2, [pc, #576]	@ (8008994 <UART_SetConfig+0x2c8>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d126      	bne.n	80087a4 <UART_SetConfig+0xd8>
 8008756:	4b90      	ldr	r3, [pc, #576]	@ (8008998 <UART_SetConfig+0x2cc>)
 8008758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800875c:	f003 0303 	and.w	r3, r3, #3
 8008760:	2b03      	cmp	r3, #3
 8008762:	d81b      	bhi.n	800879c <UART_SetConfig+0xd0>
 8008764:	a201      	add	r2, pc, #4	@ (adr r2, 800876c <UART_SetConfig+0xa0>)
 8008766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876a:	bf00      	nop
 800876c:	0800877d 	.word	0x0800877d
 8008770:	0800878d 	.word	0x0800878d
 8008774:	08008785 	.word	0x08008785
 8008778:	08008795 	.word	0x08008795
 800877c:	2301      	movs	r3, #1
 800877e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008782:	e116      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008784:	2302      	movs	r3, #2
 8008786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800878a:	e112      	b.n	80089b2 <UART_SetConfig+0x2e6>
 800878c:	2304      	movs	r3, #4
 800878e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008792:	e10e      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008794:	2308      	movs	r3, #8
 8008796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800879a:	e10a      	b.n	80089b2 <UART_SetConfig+0x2e6>
 800879c:	2310      	movs	r3, #16
 800879e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087a2:	e106      	b.n	80089b2 <UART_SetConfig+0x2e6>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a7c      	ldr	r2, [pc, #496]	@ (800899c <UART_SetConfig+0x2d0>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d138      	bne.n	8008820 <UART_SetConfig+0x154>
 80087ae:	4b7a      	ldr	r3, [pc, #488]	@ (8008998 <UART_SetConfig+0x2cc>)
 80087b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087b4:	f003 030c 	and.w	r3, r3, #12
 80087b8:	2b0c      	cmp	r3, #12
 80087ba:	d82d      	bhi.n	8008818 <UART_SetConfig+0x14c>
 80087bc:	a201      	add	r2, pc, #4	@ (adr r2, 80087c4 <UART_SetConfig+0xf8>)
 80087be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c2:	bf00      	nop
 80087c4:	080087f9 	.word	0x080087f9
 80087c8:	08008819 	.word	0x08008819
 80087cc:	08008819 	.word	0x08008819
 80087d0:	08008819 	.word	0x08008819
 80087d4:	08008809 	.word	0x08008809
 80087d8:	08008819 	.word	0x08008819
 80087dc:	08008819 	.word	0x08008819
 80087e0:	08008819 	.word	0x08008819
 80087e4:	08008801 	.word	0x08008801
 80087e8:	08008819 	.word	0x08008819
 80087ec:	08008819 	.word	0x08008819
 80087f0:	08008819 	.word	0x08008819
 80087f4:	08008811 	.word	0x08008811
 80087f8:	2300      	movs	r3, #0
 80087fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087fe:	e0d8      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008800:	2302      	movs	r3, #2
 8008802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008806:	e0d4      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008808:	2304      	movs	r3, #4
 800880a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800880e:	e0d0      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008810:	2308      	movs	r3, #8
 8008812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008816:	e0cc      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008818:	2310      	movs	r3, #16
 800881a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800881e:	e0c8      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a5e      	ldr	r2, [pc, #376]	@ (80089a0 <UART_SetConfig+0x2d4>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d125      	bne.n	8008876 <UART_SetConfig+0x1aa>
 800882a:	4b5b      	ldr	r3, [pc, #364]	@ (8008998 <UART_SetConfig+0x2cc>)
 800882c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008830:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008834:	2b30      	cmp	r3, #48	@ 0x30
 8008836:	d016      	beq.n	8008866 <UART_SetConfig+0x19a>
 8008838:	2b30      	cmp	r3, #48	@ 0x30
 800883a:	d818      	bhi.n	800886e <UART_SetConfig+0x1a2>
 800883c:	2b20      	cmp	r3, #32
 800883e:	d00a      	beq.n	8008856 <UART_SetConfig+0x18a>
 8008840:	2b20      	cmp	r3, #32
 8008842:	d814      	bhi.n	800886e <UART_SetConfig+0x1a2>
 8008844:	2b00      	cmp	r3, #0
 8008846:	d002      	beq.n	800884e <UART_SetConfig+0x182>
 8008848:	2b10      	cmp	r3, #16
 800884a:	d008      	beq.n	800885e <UART_SetConfig+0x192>
 800884c:	e00f      	b.n	800886e <UART_SetConfig+0x1a2>
 800884e:	2300      	movs	r3, #0
 8008850:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008854:	e0ad      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008856:	2302      	movs	r3, #2
 8008858:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800885c:	e0a9      	b.n	80089b2 <UART_SetConfig+0x2e6>
 800885e:	2304      	movs	r3, #4
 8008860:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008864:	e0a5      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008866:	2308      	movs	r3, #8
 8008868:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800886c:	e0a1      	b.n	80089b2 <UART_SetConfig+0x2e6>
 800886e:	2310      	movs	r3, #16
 8008870:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008874:	e09d      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a4a      	ldr	r2, [pc, #296]	@ (80089a4 <UART_SetConfig+0x2d8>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d125      	bne.n	80088cc <UART_SetConfig+0x200>
 8008880:	4b45      	ldr	r3, [pc, #276]	@ (8008998 <UART_SetConfig+0x2cc>)
 8008882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008886:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800888a:	2bc0      	cmp	r3, #192	@ 0xc0
 800888c:	d016      	beq.n	80088bc <UART_SetConfig+0x1f0>
 800888e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008890:	d818      	bhi.n	80088c4 <UART_SetConfig+0x1f8>
 8008892:	2b80      	cmp	r3, #128	@ 0x80
 8008894:	d00a      	beq.n	80088ac <UART_SetConfig+0x1e0>
 8008896:	2b80      	cmp	r3, #128	@ 0x80
 8008898:	d814      	bhi.n	80088c4 <UART_SetConfig+0x1f8>
 800889a:	2b00      	cmp	r3, #0
 800889c:	d002      	beq.n	80088a4 <UART_SetConfig+0x1d8>
 800889e:	2b40      	cmp	r3, #64	@ 0x40
 80088a0:	d008      	beq.n	80088b4 <UART_SetConfig+0x1e8>
 80088a2:	e00f      	b.n	80088c4 <UART_SetConfig+0x1f8>
 80088a4:	2300      	movs	r3, #0
 80088a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088aa:	e082      	b.n	80089b2 <UART_SetConfig+0x2e6>
 80088ac:	2302      	movs	r3, #2
 80088ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088b2:	e07e      	b.n	80089b2 <UART_SetConfig+0x2e6>
 80088b4:	2304      	movs	r3, #4
 80088b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088ba:	e07a      	b.n	80089b2 <UART_SetConfig+0x2e6>
 80088bc:	2308      	movs	r3, #8
 80088be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088c2:	e076      	b.n	80089b2 <UART_SetConfig+0x2e6>
 80088c4:	2310      	movs	r3, #16
 80088c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088ca:	e072      	b.n	80089b2 <UART_SetConfig+0x2e6>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a35      	ldr	r2, [pc, #212]	@ (80089a8 <UART_SetConfig+0x2dc>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d12a      	bne.n	800892c <UART_SetConfig+0x260>
 80088d6:	4b30      	ldr	r3, [pc, #192]	@ (8008998 <UART_SetConfig+0x2cc>)
 80088d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088e4:	d01a      	beq.n	800891c <UART_SetConfig+0x250>
 80088e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088ea:	d81b      	bhi.n	8008924 <UART_SetConfig+0x258>
 80088ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088f0:	d00c      	beq.n	800890c <UART_SetConfig+0x240>
 80088f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088f6:	d815      	bhi.n	8008924 <UART_SetConfig+0x258>
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d003      	beq.n	8008904 <UART_SetConfig+0x238>
 80088fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008900:	d008      	beq.n	8008914 <UART_SetConfig+0x248>
 8008902:	e00f      	b.n	8008924 <UART_SetConfig+0x258>
 8008904:	2300      	movs	r3, #0
 8008906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800890a:	e052      	b.n	80089b2 <UART_SetConfig+0x2e6>
 800890c:	2302      	movs	r3, #2
 800890e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008912:	e04e      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008914:	2304      	movs	r3, #4
 8008916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800891a:	e04a      	b.n	80089b2 <UART_SetConfig+0x2e6>
 800891c:	2308      	movs	r3, #8
 800891e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008922:	e046      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008924:	2310      	movs	r3, #16
 8008926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800892a:	e042      	b.n	80089b2 <UART_SetConfig+0x2e6>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a17      	ldr	r2, [pc, #92]	@ (8008990 <UART_SetConfig+0x2c4>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d13a      	bne.n	80089ac <UART_SetConfig+0x2e0>
 8008936:	4b18      	ldr	r3, [pc, #96]	@ (8008998 <UART_SetConfig+0x2cc>)
 8008938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800893c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008940:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008944:	d01a      	beq.n	800897c <UART_SetConfig+0x2b0>
 8008946:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800894a:	d81b      	bhi.n	8008984 <UART_SetConfig+0x2b8>
 800894c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008950:	d00c      	beq.n	800896c <UART_SetConfig+0x2a0>
 8008952:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008956:	d815      	bhi.n	8008984 <UART_SetConfig+0x2b8>
 8008958:	2b00      	cmp	r3, #0
 800895a:	d003      	beq.n	8008964 <UART_SetConfig+0x298>
 800895c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008960:	d008      	beq.n	8008974 <UART_SetConfig+0x2a8>
 8008962:	e00f      	b.n	8008984 <UART_SetConfig+0x2b8>
 8008964:	2300      	movs	r3, #0
 8008966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800896a:	e022      	b.n	80089b2 <UART_SetConfig+0x2e6>
 800896c:	2302      	movs	r3, #2
 800896e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008972:	e01e      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008974:	2304      	movs	r3, #4
 8008976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800897a:	e01a      	b.n	80089b2 <UART_SetConfig+0x2e6>
 800897c:	2308      	movs	r3, #8
 800897e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008982:	e016      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008984:	2310      	movs	r3, #16
 8008986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800898a:	e012      	b.n	80089b2 <UART_SetConfig+0x2e6>
 800898c:	efff69f3 	.word	0xefff69f3
 8008990:	40008000 	.word	0x40008000
 8008994:	40013800 	.word	0x40013800
 8008998:	40021000 	.word	0x40021000
 800899c:	40004400 	.word	0x40004400
 80089a0:	40004800 	.word	0x40004800
 80089a4:	40004c00 	.word	0x40004c00
 80089a8:	40005000 	.word	0x40005000
 80089ac:	2310      	movs	r3, #16
 80089ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a9f      	ldr	r2, [pc, #636]	@ (8008c34 <UART_SetConfig+0x568>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d17a      	bne.n	8008ab2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80089c0:	2b08      	cmp	r3, #8
 80089c2:	d824      	bhi.n	8008a0e <UART_SetConfig+0x342>
 80089c4:	a201      	add	r2, pc, #4	@ (adr r2, 80089cc <UART_SetConfig+0x300>)
 80089c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ca:	bf00      	nop
 80089cc:	080089f1 	.word	0x080089f1
 80089d0:	08008a0f 	.word	0x08008a0f
 80089d4:	080089f9 	.word	0x080089f9
 80089d8:	08008a0f 	.word	0x08008a0f
 80089dc:	080089ff 	.word	0x080089ff
 80089e0:	08008a0f 	.word	0x08008a0f
 80089e4:	08008a0f 	.word	0x08008a0f
 80089e8:	08008a0f 	.word	0x08008a0f
 80089ec:	08008a07 	.word	0x08008a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089f0:	f7fe f9aa 	bl	8006d48 <HAL_RCC_GetPCLK1Freq>
 80089f4:	61f8      	str	r0, [r7, #28]
        break;
 80089f6:	e010      	b.n	8008a1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089f8:	4b8f      	ldr	r3, [pc, #572]	@ (8008c38 <UART_SetConfig+0x56c>)
 80089fa:	61fb      	str	r3, [r7, #28]
        break;
 80089fc:	e00d      	b.n	8008a1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089fe:	f7fe f90b 	bl	8006c18 <HAL_RCC_GetSysClockFreq>
 8008a02:	61f8      	str	r0, [r7, #28]
        break;
 8008a04:	e009      	b.n	8008a1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a0a:	61fb      	str	r3, [r7, #28]
        break;
 8008a0c:	e005      	b.n	8008a1a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008a18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 80fb 	beq.w	8008c18 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	685a      	ldr	r2, [r3, #4]
 8008a26:	4613      	mov	r3, r2
 8008a28:	005b      	lsls	r3, r3, #1
 8008a2a:	4413      	add	r3, r2
 8008a2c:	69fa      	ldr	r2, [r7, #28]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d305      	bcc.n	8008a3e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008a38:	69fa      	ldr	r2, [r7, #28]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d903      	bls.n	8008a46 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008a44:	e0e8      	b.n	8008c18 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	461c      	mov	r4, r3
 8008a4c:	4615      	mov	r5, r2
 8008a4e:	f04f 0200 	mov.w	r2, #0
 8008a52:	f04f 0300 	mov.w	r3, #0
 8008a56:	022b      	lsls	r3, r5, #8
 8008a58:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008a5c:	0222      	lsls	r2, r4, #8
 8008a5e:	68f9      	ldr	r1, [r7, #12]
 8008a60:	6849      	ldr	r1, [r1, #4]
 8008a62:	0849      	lsrs	r1, r1, #1
 8008a64:	2000      	movs	r0, #0
 8008a66:	4688      	mov	r8, r1
 8008a68:	4681      	mov	r9, r0
 8008a6a:	eb12 0a08 	adds.w	sl, r2, r8
 8008a6e:	eb43 0b09 	adc.w	fp, r3, r9
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	603b      	str	r3, [r7, #0]
 8008a7a:	607a      	str	r2, [r7, #4]
 8008a7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a80:	4650      	mov	r0, sl
 8008a82:	4659      	mov	r1, fp
 8008a84:	f7f8 f8e0 	bl	8000c48 <__aeabi_uldivmod>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a96:	d308      	bcc.n	8008aaa <UART_SetConfig+0x3de>
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a9e:	d204      	bcs.n	8008aaa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	69ba      	ldr	r2, [r7, #24]
 8008aa6:	60da      	str	r2, [r3, #12]
 8008aa8:	e0b6      	b.n	8008c18 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008ab0:	e0b2      	b.n	8008c18 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	69db      	ldr	r3, [r3, #28]
 8008ab6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008aba:	d15e      	bne.n	8008b7a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008abc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008ac0:	2b08      	cmp	r3, #8
 8008ac2:	d828      	bhi.n	8008b16 <UART_SetConfig+0x44a>
 8008ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8008acc <UART_SetConfig+0x400>)
 8008ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aca:	bf00      	nop
 8008acc:	08008af1 	.word	0x08008af1
 8008ad0:	08008af9 	.word	0x08008af9
 8008ad4:	08008b01 	.word	0x08008b01
 8008ad8:	08008b17 	.word	0x08008b17
 8008adc:	08008b07 	.word	0x08008b07
 8008ae0:	08008b17 	.word	0x08008b17
 8008ae4:	08008b17 	.word	0x08008b17
 8008ae8:	08008b17 	.word	0x08008b17
 8008aec:	08008b0f 	.word	0x08008b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008af0:	f7fe f92a 	bl	8006d48 <HAL_RCC_GetPCLK1Freq>
 8008af4:	61f8      	str	r0, [r7, #28]
        break;
 8008af6:	e014      	b.n	8008b22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008af8:	f7fe f93c 	bl	8006d74 <HAL_RCC_GetPCLK2Freq>
 8008afc:	61f8      	str	r0, [r7, #28]
        break;
 8008afe:	e010      	b.n	8008b22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b00:	4b4d      	ldr	r3, [pc, #308]	@ (8008c38 <UART_SetConfig+0x56c>)
 8008b02:	61fb      	str	r3, [r7, #28]
        break;
 8008b04:	e00d      	b.n	8008b22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b06:	f7fe f887 	bl	8006c18 <HAL_RCC_GetSysClockFreq>
 8008b0a:	61f8      	str	r0, [r7, #28]
        break;
 8008b0c:	e009      	b.n	8008b22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b12:	61fb      	str	r3, [r7, #28]
        break;
 8008b14:	e005      	b.n	8008b22 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008b16:	2300      	movs	r3, #0
 8008b18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008b20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d077      	beq.n	8008c18 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	005a      	lsls	r2, r3, #1
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	085b      	lsrs	r3, r3, #1
 8008b32:	441a      	add	r2, r3
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b3c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	2b0f      	cmp	r3, #15
 8008b42:	d916      	bls.n	8008b72 <UART_SetConfig+0x4a6>
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b4a:	d212      	bcs.n	8008b72 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	f023 030f 	bic.w	r3, r3, #15
 8008b54:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	085b      	lsrs	r3, r3, #1
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	f003 0307 	and.w	r3, r3, #7
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	8afb      	ldrh	r3, [r7, #22]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	8afa      	ldrh	r2, [r7, #22]
 8008b6e:	60da      	str	r2, [r3, #12]
 8008b70:	e052      	b.n	8008c18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008b78:	e04e      	b.n	8008c18 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b7a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008b7e:	2b08      	cmp	r3, #8
 8008b80:	d827      	bhi.n	8008bd2 <UART_SetConfig+0x506>
 8008b82:	a201      	add	r2, pc, #4	@ (adr r2, 8008b88 <UART_SetConfig+0x4bc>)
 8008b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b88:	08008bad 	.word	0x08008bad
 8008b8c:	08008bb5 	.word	0x08008bb5
 8008b90:	08008bbd 	.word	0x08008bbd
 8008b94:	08008bd3 	.word	0x08008bd3
 8008b98:	08008bc3 	.word	0x08008bc3
 8008b9c:	08008bd3 	.word	0x08008bd3
 8008ba0:	08008bd3 	.word	0x08008bd3
 8008ba4:	08008bd3 	.word	0x08008bd3
 8008ba8:	08008bcb 	.word	0x08008bcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bac:	f7fe f8cc 	bl	8006d48 <HAL_RCC_GetPCLK1Freq>
 8008bb0:	61f8      	str	r0, [r7, #28]
        break;
 8008bb2:	e014      	b.n	8008bde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bb4:	f7fe f8de 	bl	8006d74 <HAL_RCC_GetPCLK2Freq>
 8008bb8:	61f8      	str	r0, [r7, #28]
        break;
 8008bba:	e010      	b.n	8008bde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8008c38 <UART_SetConfig+0x56c>)
 8008bbe:	61fb      	str	r3, [r7, #28]
        break;
 8008bc0:	e00d      	b.n	8008bde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bc2:	f7fe f829 	bl	8006c18 <HAL_RCC_GetSysClockFreq>
 8008bc6:	61f8      	str	r0, [r7, #28]
        break;
 8008bc8:	e009      	b.n	8008bde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bce:	61fb      	str	r3, [r7, #28]
        break;
 8008bd0:	e005      	b.n	8008bde <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008bdc:	bf00      	nop
    }

    if (pclk != 0U)
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d019      	beq.n	8008c18 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	085a      	lsrs	r2, r3, #1
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	441a      	add	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bf6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	2b0f      	cmp	r3, #15
 8008bfc:	d909      	bls.n	8008c12 <UART_SetConfig+0x546>
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c04:	d205      	bcs.n	8008c12 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	60da      	str	r2, [r3, #12]
 8008c10:	e002      	b.n	8008c18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008c24:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3728      	adds	r7, #40	@ 0x28
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c32:	bf00      	nop
 8008c34:	40008000 	.word	0x40008000
 8008c38:	00f42400 	.word	0x00f42400

08008c3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c48:	f003 0308 	and.w	r3, r3, #8
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00a      	beq.n	8008c66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	430a      	orrs	r2, r1
 8008c64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00a      	beq.n	8008c88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	430a      	orrs	r2, r1
 8008c86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c8c:	f003 0302 	and.w	r3, r3, #2
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00a      	beq.n	8008caa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	430a      	orrs	r2, r1
 8008ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cae:	f003 0304 	and.w	r3, r3, #4
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00a      	beq.n	8008ccc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cd0:	f003 0310 	and.w	r3, r3, #16
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00a      	beq.n	8008cee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	430a      	orrs	r2, r1
 8008cec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf2:	f003 0320 	and.w	r3, r3, #32
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00a      	beq.n	8008d10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	430a      	orrs	r2, r1
 8008d0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d01a      	beq.n	8008d52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	430a      	orrs	r2, r1
 8008d30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d3a:	d10a      	bne.n	8008d52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	430a      	orrs	r2, r1
 8008d50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00a      	beq.n	8008d74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	430a      	orrs	r2, r1
 8008d72:	605a      	str	r2, [r3, #4]
  }
}
 8008d74:	bf00      	nop
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b098      	sub	sp, #96	@ 0x60
 8008d84:	af02      	add	r7, sp, #8
 8008d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d90:	f7fa ff60 	bl	8003c54 <HAL_GetTick>
 8008d94:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 0308 	and.w	r3, r3, #8
 8008da0:	2b08      	cmp	r3, #8
 8008da2:	d12e      	bne.n	8008e02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008da4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008da8:	9300      	str	r3, [sp, #0]
 8008daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008dac:	2200      	movs	r2, #0
 8008dae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f88c 	bl	8008ed0 <UART_WaitOnFlagUntilTimeout>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d021      	beq.n	8008e02 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc6:	e853 3f00 	ldrex	r3, [r3]
 8008dca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008dd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	461a      	mov	r2, r3
 8008dda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ddc:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dde:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008de2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008de4:	e841 2300 	strex	r3, r2, [r1]
 8008de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1e6      	bne.n	8008dbe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2220      	movs	r2, #32
 8008df4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e062      	b.n	8008ec8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 0304 	and.w	r3, r3, #4
 8008e0c:	2b04      	cmp	r3, #4
 8008e0e:	d149      	bne.n	8008ea4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f856 	bl	8008ed0 <UART_WaitOnFlagUntilTimeout>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d03c      	beq.n	8008ea4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e32:	e853 3f00 	ldrex	r3, [r3]
 8008e36:	623b      	str	r3, [r7, #32]
   return(result);
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	461a      	mov	r2, r3
 8008e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e48:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e50:	e841 2300 	strex	r3, r2, [r1]
 8008e54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1e6      	bne.n	8008e2a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	3308      	adds	r3, #8
 8008e62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	e853 3f00 	ldrex	r3, [r3]
 8008e6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f023 0301 	bic.w	r3, r3, #1
 8008e72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	3308      	adds	r3, #8
 8008e7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e7c:	61fa      	str	r2, [r7, #28]
 8008e7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e80:	69b9      	ldr	r1, [r7, #24]
 8008e82:	69fa      	ldr	r2, [r7, #28]
 8008e84:	e841 2300 	strex	r3, r2, [r1]
 8008e88:	617b      	str	r3, [r7, #20]
   return(result);
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1e5      	bne.n	8008e5c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2220      	movs	r2, #32
 8008e94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	e011      	b.n	8008ec8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2220      	movs	r2, #32
 8008ea8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2220      	movs	r2, #32
 8008eae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3758      	adds	r7, #88	@ 0x58
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	603b      	str	r3, [r7, #0]
 8008edc:	4613      	mov	r3, r2
 8008ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ee0:	e04f      	b.n	8008f82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ee8:	d04b      	beq.n	8008f82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008eea:	f7fa feb3 	bl	8003c54 <HAL_GetTick>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	1ad3      	subs	r3, r2, r3
 8008ef4:	69ba      	ldr	r2, [r7, #24]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d302      	bcc.n	8008f00 <UART_WaitOnFlagUntilTimeout+0x30>
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d101      	bne.n	8008f04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f00:	2303      	movs	r3, #3
 8008f02:	e04e      	b.n	8008fa2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f003 0304 	and.w	r3, r3, #4
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d037      	beq.n	8008f82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	2b80      	cmp	r3, #128	@ 0x80
 8008f16:	d034      	beq.n	8008f82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	2b40      	cmp	r3, #64	@ 0x40
 8008f1c:	d031      	beq.n	8008f82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	69db      	ldr	r3, [r3, #28]
 8008f24:	f003 0308 	and.w	r3, r3, #8
 8008f28:	2b08      	cmp	r3, #8
 8008f2a:	d110      	bne.n	8008f4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2208      	movs	r2, #8
 8008f32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f000 f838 	bl	8008faa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2208      	movs	r2, #8
 8008f3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e029      	b.n	8008fa2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	69db      	ldr	r3, [r3, #28]
 8008f54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f5c:	d111      	bne.n	8008f82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008f66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	f000 f81e 	bl	8008faa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2220      	movs	r2, #32
 8008f72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	e00f      	b.n	8008fa2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	69da      	ldr	r2, [r3, #28]
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	bf0c      	ite	eq
 8008f92:	2301      	moveq	r3, #1
 8008f94:	2300      	movne	r3, #0
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	461a      	mov	r2, r3
 8008f9a:	79fb      	ldrb	r3, [r7, #7]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d0a0      	beq.n	8008ee2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008faa:	b480      	push	{r7}
 8008fac:	b095      	sub	sp, #84	@ 0x54
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fba:	e853 3f00 	ldrex	r3, [r3]
 8008fbe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	461a      	mov	r2, r3
 8008fce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fd2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008fd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008fd8:	e841 2300 	strex	r3, r2, [r1]
 8008fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1e6      	bne.n	8008fb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	3308      	adds	r3, #8
 8008fea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fec:	6a3b      	ldr	r3, [r7, #32]
 8008fee:	e853 3f00 	ldrex	r3, [r3]
 8008ff2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	f023 0301 	bic.w	r3, r3, #1
 8008ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	3308      	adds	r3, #8
 8009002:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009004:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009006:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009008:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800900a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800900c:	e841 2300 	strex	r3, r2, [r1]
 8009010:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1e5      	bne.n	8008fe4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800901c:	2b01      	cmp	r3, #1
 800901e:	d118      	bne.n	8009052 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	e853 3f00 	ldrex	r3, [r3]
 800902c:	60bb      	str	r3, [r7, #8]
   return(result);
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	f023 0310 	bic.w	r3, r3, #16
 8009034:	647b      	str	r3, [r7, #68]	@ 0x44
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	461a      	mov	r2, r3
 800903c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800903e:	61bb      	str	r3, [r7, #24]
 8009040:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009042:	6979      	ldr	r1, [r7, #20]
 8009044:	69ba      	ldr	r2, [r7, #24]
 8009046:	e841 2300 	strex	r3, r2, [r1]
 800904a:	613b      	str	r3, [r7, #16]
   return(result);
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1e6      	bne.n	8009020 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2220      	movs	r2, #32
 8009056:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009066:	bf00      	nop
 8009068:	3754      	adds	r7, #84	@ 0x54
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr

08009072 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009072:	b084      	sub	sp, #16
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	f107 001c 	add.w	r0, r7, #28
 8009080:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 fa69 	bl	8009568 <USB_CoreReset>
 8009096:	4603      	mov	r3, r0
 8009098:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800909a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d106      	bne.n	80090b0 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090a6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80090ae:	e005      	b.n	80090bc <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80090bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090c8:	b004      	add	sp, #16
 80090ca:	4770      	bx	lr

080090cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	f023 0201 	bic.w	r2, r3, #1
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	370c      	adds	r7, #12
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b084      	sub	sp, #16
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	460b      	mov	r3, r1
 80090f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80090fa:	2300      	movs	r3, #0
 80090fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800910a:	78fb      	ldrb	r3, [r7, #3]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d115      	bne.n	800913c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800911c:	200a      	movs	r0, #10
 800911e:	f7fa fda5 	bl	8003c6c <HAL_Delay>
      ms += 10U;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	330a      	adds	r3, #10
 8009126:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 fa0f 	bl	800954c <USB_GetMode>
 800912e:	4603      	mov	r3, r0
 8009130:	2b01      	cmp	r3, #1
 8009132:	d01e      	beq.n	8009172 <USB_SetCurrentMode+0x84>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2bc7      	cmp	r3, #199	@ 0xc7
 8009138:	d9f0      	bls.n	800911c <USB_SetCurrentMode+0x2e>
 800913a:	e01a      	b.n	8009172 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800913c:	78fb      	ldrb	r3, [r7, #3]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d115      	bne.n	800916e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800914e:	200a      	movs	r0, #10
 8009150:	f7fa fd8c 	bl	8003c6c <HAL_Delay>
      ms += 10U;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	330a      	adds	r3, #10
 8009158:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f9f6 	bl	800954c <USB_GetMode>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d005      	beq.n	8009172 <USB_SetCurrentMode+0x84>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2bc7      	cmp	r3, #199	@ 0xc7
 800916a:	d9f0      	bls.n	800914e <USB_SetCurrentMode+0x60>
 800916c:	e001      	b.n	8009172 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e005      	b.n	800917e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2bc8      	cmp	r3, #200	@ 0xc8
 8009176:	d101      	bne.n	800917c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	e000      	b.n	800917e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
	...

08009188 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009188:	b084      	sub	sp, #16
 800918a:	b580      	push	{r7, lr}
 800918c:	b086      	sub	sp, #24
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009196:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800919a:	2300      	movs	r3, #0
 800919c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80091a2:	2300      	movs	r3, #0
 80091a4:	613b      	str	r3, [r7, #16]
 80091a6:	e009      	b.n	80091bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	3340      	adds	r3, #64	@ 0x40
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	4413      	add	r3, r2
 80091b2:	2200      	movs	r2, #0
 80091b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	3301      	adds	r3, #1
 80091ba:	613b      	str	r3, [r7, #16]
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	2b0e      	cmp	r3, #14
 80091c0:	d9f2      	bls.n	80091a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80091c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d11c      	bne.n	8009204 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80091d8:	f043 0302 	orr.w	r3, r3, #2
 80091dc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091e2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	601a      	str	r2, [r3, #0]
 8009202:	e005      	b.n	8009210 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009208:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009216:	461a      	mov	r2, r3
 8009218:	2300      	movs	r3, #0
 800921a:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800921c:	2103      	movs	r1, #3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f95a 	bl	80094d8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009224:	2110      	movs	r1, #16
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f8f6 	bl	8009418 <USB_FlushTxFifo>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d001      	beq.n	8009236 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 f920 	bl	800947c <USB_FlushRxFifo>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d001      	beq.n	8009246 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800924c:	461a      	mov	r2, r3
 800924e:	2300      	movs	r3, #0
 8009250:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009258:	461a      	mov	r2, r3
 800925a:	2300      	movs	r3, #0
 800925c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009264:	461a      	mov	r2, r3
 8009266:	2300      	movs	r3, #0
 8009268:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800926a:	2300      	movs	r3, #0
 800926c:	613b      	str	r3, [r7, #16]
 800926e:	e043      	b.n	80092f8 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	015a      	lsls	r2, r3, #5
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	4413      	add	r3, r2
 8009278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009282:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009286:	d118      	bne.n	80092ba <USB_DevInit+0x132>
    {
      if (i == 0U)
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10a      	bne.n	80092a4 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	015a      	lsls	r2, r3, #5
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	4413      	add	r3, r2
 8009296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800929a:	461a      	mov	r2, r3
 800929c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80092a0:	6013      	str	r3, [r2, #0]
 80092a2:	e013      	b.n	80092cc <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	015a      	lsls	r2, r3, #5
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	4413      	add	r3, r2
 80092ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092b0:	461a      	mov	r2, r3
 80092b2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80092b6:	6013      	str	r3, [r2, #0]
 80092b8:	e008      	b.n	80092cc <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	015a      	lsls	r2, r3, #5
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	4413      	add	r3, r2
 80092c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092c6:	461a      	mov	r2, r3
 80092c8:	2300      	movs	r3, #0
 80092ca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	015a      	lsls	r2, r3, #5
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	4413      	add	r3, r2
 80092d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092d8:	461a      	mov	r2, r3
 80092da:	2300      	movs	r3, #0
 80092dc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	015a      	lsls	r2, r3, #5
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	4413      	add	r3, r2
 80092e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092ea:	461a      	mov	r2, r3
 80092ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80092f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	3301      	adds	r3, #1
 80092f6:	613b      	str	r3, [r7, #16]
 80092f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80092fc:	461a      	mov	r2, r3
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	4293      	cmp	r3, r2
 8009302:	d3b5      	bcc.n	8009270 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009304:	2300      	movs	r3, #0
 8009306:	613b      	str	r3, [r7, #16]
 8009308:	e043      	b.n	8009392 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	015a      	lsls	r2, r3, #5
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	4413      	add	r3, r2
 8009312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800931c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009320:	d118      	bne.n	8009354 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10a      	bne.n	800933e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	015a      	lsls	r2, r3, #5
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	4413      	add	r3, r2
 8009330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009334:	461a      	mov	r2, r3
 8009336:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800933a:	6013      	str	r3, [r2, #0]
 800933c:	e013      	b.n	8009366 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	015a      	lsls	r2, r3, #5
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	4413      	add	r3, r2
 8009346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800934a:	461a      	mov	r2, r3
 800934c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009350:	6013      	str	r3, [r2, #0]
 8009352:	e008      	b.n	8009366 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	015a      	lsls	r2, r3, #5
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	4413      	add	r3, r2
 800935c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009360:	461a      	mov	r2, r3
 8009362:	2300      	movs	r3, #0
 8009364:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	015a      	lsls	r2, r3, #5
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	4413      	add	r3, r2
 800936e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009372:	461a      	mov	r2, r3
 8009374:	2300      	movs	r3, #0
 8009376:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	015a      	lsls	r2, r3, #5
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	4413      	add	r3, r2
 8009380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009384:	461a      	mov	r2, r3
 8009386:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800938a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	3301      	adds	r3, #1
 8009390:	613b      	str	r3, [r7, #16]
 8009392:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009396:	461a      	mov	r2, r3
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	4293      	cmp	r3, r2
 800939c:	d3b5      	bcc.n	800930a <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80093ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093b0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80093be:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	699b      	ldr	r3, [r3, #24]
 80093c4:	f043 0210 	orr.w	r2, r3, #16
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	699a      	ldr	r2, [r3, #24]
 80093d0:	4b10      	ldr	r3, [pc, #64]	@ (8009414 <USB_DevInit+0x28c>)
 80093d2:	4313      	orrs	r3, r2
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80093d8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d005      	beq.n	80093ec <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	f043 0208 	orr.w	r2, r3, #8
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80093ec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d107      	bne.n	8009404 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	699b      	ldr	r3, [r3, #24]
 80093f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80093fc:	f043 0304 	orr.w	r3, r3, #4
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009404:	7dfb      	ldrb	r3, [r7, #23]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3718      	adds	r7, #24
 800940a:	46bd      	mov	sp, r7
 800940c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009410:	b004      	add	sp, #16
 8009412:	4770      	bx	lr
 8009414:	803c3800 	.word	0x803c3800

08009418 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009422:	2300      	movs	r3, #0
 8009424:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	3301      	adds	r3, #1
 800942a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009432:	d901      	bls.n	8009438 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009434:	2303      	movs	r3, #3
 8009436:	e01b      	b.n	8009470 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	2b00      	cmp	r3, #0
 800943e:	daf2      	bge.n	8009426 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009440:	2300      	movs	r3, #0
 8009442:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	019b      	lsls	r3, r3, #6
 8009448:	f043 0220 	orr.w	r2, r3, #32
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	3301      	adds	r3, #1
 8009454:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800945c:	d901      	bls.n	8009462 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800945e:	2303      	movs	r3, #3
 8009460:	e006      	b.n	8009470 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	f003 0320 	and.w	r3, r3, #32
 800946a:	2b20      	cmp	r3, #32
 800946c:	d0f0      	beq.n	8009450 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800946e:	2300      	movs	r3, #0
}
 8009470:	4618      	mov	r0, r3
 8009472:	3714      	adds	r7, #20
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009484:	2300      	movs	r3, #0
 8009486:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	3301      	adds	r3, #1
 800948c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009494:	d901      	bls.n	800949a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009496:	2303      	movs	r3, #3
 8009498:	e018      	b.n	80094cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	daf2      	bge.n	8009488 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80094a2:	2300      	movs	r3, #0
 80094a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2210      	movs	r2, #16
 80094aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	3301      	adds	r3, #1
 80094b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80094b8:	d901      	bls.n	80094be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80094ba:	2303      	movs	r3, #3
 80094bc:	e006      	b.n	80094cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	f003 0310 	and.w	r3, r3, #16
 80094c6:	2b10      	cmp	r3, #16
 80094c8:	d0f0      	beq.n	80094ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3714      	adds	r7, #20
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	460b      	mov	r3, r1
 80094e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	78fb      	ldrb	r3, [r7, #3]
 80094f2:	68f9      	ldr	r1, [r7, #12]
 80094f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80094f8:	4313      	orrs	r3, r2
 80094fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3714      	adds	r7, #20
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr

0800950a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800950a:	b480      	push	{r7}
 800950c:	b085      	sub	sp, #20
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009524:	f023 0303 	bic.w	r3, r3, #3
 8009528:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009538:	f043 0302 	orr.w	r3, r3, #2
 800953c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	3714      	adds	r7, #20
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	695b      	ldr	r3, [r3, #20]
 8009558:	f003 0301 	and.w	r3, r3, #1
}
 800955c:	4618      	mov	r0, r3
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009570:	2300      	movs	r3, #0
 8009572:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	3301      	adds	r3, #1
 8009578:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009580:	d901      	bls.n	8009586 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009582:	2303      	movs	r3, #3
 8009584:	e01b      	b.n	80095be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	2b00      	cmp	r3, #0
 800958c:	daf2      	bge.n	8009574 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800958e:	2300      	movs	r3, #0
 8009590:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	f043 0201 	orr.w	r2, r3, #1
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	3301      	adds	r3, #1
 80095a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095aa:	d901      	bls.n	80095b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80095ac:	2303      	movs	r3, #3
 80095ae:	e006      	b.n	80095be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	f003 0301 	and.w	r3, r3, #1
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d0f0      	beq.n	800959e <USB_CoreReset+0x36>

  return HAL_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3714      	adds	r7, #20
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
	...

080095cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80095d0:	4904      	ldr	r1, [pc, #16]	@ (80095e4 <MX_FATFS_Init+0x18>)
 80095d2:	4805      	ldr	r0, [pc, #20]	@ (80095e8 <MX_FATFS_Init+0x1c>)
 80095d4:	f000 fd8a 	bl	800a0ec <FATFS_LinkDriver>
 80095d8:	4603      	mov	r3, r0
 80095da:	461a      	mov	r2, r3
 80095dc:	4b03      	ldr	r3, [pc, #12]	@ (80095ec <MX_FATFS_Init+0x20>)
 80095de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80095e0:	bf00      	nop
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	20000d08 	.word	0x20000d08
 80095e8:	20000038 	.word	0x20000038
 80095ec:	20000d04 	.word	0x20000d04

080095f0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	4603      	mov	r3, r0
 80095f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 80095fa:	79fb      	ldrb	r3, [r7, #7]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f000 f9d7 	bl	80099b0 <USER_SPI_initialize>
 8009602:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009604:	4618      	mov	r0, r3
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	4603      	mov	r3, r0
 8009614:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8009616:	79fb      	ldrb	r3, [r7, #7]
 8009618:	4618      	mov	r0, r3
 800961a:	f000 fab3 	bl	8009b84 <USER_SPI_status>
 800961e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009620:	4618      	mov	r0, r3
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	60b9      	str	r1, [r7, #8]
 8009630:	607a      	str	r2, [r7, #4]
 8009632:	603b      	str	r3, [r7, #0]
 8009634:	4603      	mov	r3, r0
 8009636:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8009638:	7bf8      	ldrb	r0, [r7, #15]
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	68b9      	ldr	r1, [r7, #8]
 8009640:	f000 fab6 	bl	8009bb0 <USER_SPI_read>
 8009644:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009646:	4618      	mov	r0, r3
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b084      	sub	sp, #16
 8009652:	af00      	add	r7, sp, #0
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
 8009658:	603b      	str	r3, [r7, #0]
 800965a:	4603      	mov	r3, r0
 800965c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 800965e:	7bf8      	ldrb	r0, [r7, #15]
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	68b9      	ldr	r1, [r7, #8]
 8009666:	f000 fb09 	bl	8009c7c <USER_SPI_write>
 800966a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	4603      	mov	r3, r0
 800967c:	603a      	str	r2, [r7, #0]
 800967e:	71fb      	strb	r3, [r7, #7]
 8009680:	460b      	mov	r3, r1
 8009682:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8009684:	79b9      	ldrb	r1, [r7, #6]
 8009686:	79fb      	ldrb	r3, [r7, #7]
 8009688:	683a      	ldr	r2, [r7, #0]
 800968a:	4618      	mov	r0, r3
 800968c:	f000 fb72 	bl	8009d74 <USER_SPI_ioctl>
 8009690:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009692:	4618      	mov	r0, r3
 8009694:	3708      	adds	r7, #8
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
	...

0800969c <SPI_Timer_On>:
static BYTE CardType; /* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80096a4:	f7fa fad6 	bl	8003c54 <HAL_GetTick>
 80096a8:	4603      	mov	r3, r0
 80096aa:	4a04      	ldr	r2, [pc, #16]	@ (80096bc <SPI_Timer_On+0x20>)
 80096ac:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80096ae:	4a04      	ldr	r2, [pc, #16]	@ (80096c0 <SPI_Timer_On+0x24>)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6013      	str	r3, [r2, #0]
}
 80096b4:	bf00      	nop
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	20000d10 	.word	0x20000d10
 80096c0:	20000d14 	.word	0x20000d14

080096c4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80096c4:	b580      	push	{r7, lr}
 80096c6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80096c8:	f7fa fac4 	bl	8003c54 <HAL_GetTick>
 80096cc:	4602      	mov	r2, r0
 80096ce:	4b06      	ldr	r3, [pc, #24]	@ (80096e8 <SPI_Timer_Status+0x24>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	1ad2      	subs	r2, r2, r3
 80096d4:	4b05      	ldr	r3, [pc, #20]	@ (80096ec <SPI_Timer_Status+0x28>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	429a      	cmp	r2, r3
 80096da:	bf34      	ite	cc
 80096dc:	2301      	movcc	r3, #1
 80096de:	2300      	movcs	r3, #0
 80096e0:	b2db      	uxtb	r3, r3
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	20000d10 	.word	0x20000d10
 80096ec:	20000d14 	.word	0x20000d14

080096f0 <xchg_spi>:

/* Exchange a byte */
static BYTE xchg_spi(
        BYTE dat /* Data to send */
        )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b086      	sub	sp, #24
 80096f4:	af02      	add	r7, sp, #8
 80096f6:	4603      	mov	r3, r0
 80096f8:	71fb      	strb	r3, [r7, #7]
    BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi2, &dat, &rxDat, 1, 50);
 80096fa:	f107 020f 	add.w	r2, r7, #15
 80096fe:	1df9      	adds	r1, r7, #7
 8009700:	2332      	movs	r3, #50	@ 0x32
 8009702:	9300      	str	r3, [sp, #0]
 8009704:	2301      	movs	r3, #1
 8009706:	4804      	ldr	r0, [pc, #16]	@ (8009718 <xchg_spi+0x28>)
 8009708:	f7fe fbb7 	bl	8007e7a <HAL_SPI_TransmitReceive>
    return rxDat;
 800970c:	7bfb      	ldrb	r3, [r7, #15]
}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	20000478 	.word	0x20000478

0800971c <rcvr_spi_multi>:
static
void rcvr_spi_multi(
        BYTE *buff, /* Pointer to data buffer */
        UINT btr /* Number of bytes to receive (even number) */
        )
{
 800971c:	b590      	push	{r4, r7, lr}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
    for (UINT i = 0; i < btr; i++) {
 8009726:	2300      	movs	r3, #0
 8009728:	60fb      	str	r3, [r7, #12]
 800972a:	e00a      	b.n	8009742 <rcvr_spi_multi+0x26>
        *(buff + i) = xchg_spi(0xFF);
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	18d4      	adds	r4, r2, r3
 8009732:	20ff      	movs	r0, #255	@ 0xff
 8009734:	f7ff ffdc 	bl	80096f0 <xchg_spi>
 8009738:	4603      	mov	r3, r0
 800973a:	7023      	strb	r3, [r4, #0]
    for (UINT i = 0; i < btr; i++) {
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	3301      	adds	r3, #1
 8009740:	60fb      	str	r3, [r7, #12]
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	429a      	cmp	r2, r3
 8009748:	d3f0      	bcc.n	800972c <rcvr_spi_multi+0x10>
    }
}
 800974a:	bf00      	nop
 800974c:	bf00      	nop
 800974e:	3714      	adds	r7, #20
 8009750:	46bd      	mov	sp, r7
 8009752:	bd90      	pop	{r4, r7, pc}

08009754 <xmit_spi_multi>:
static
void xmit_spi_multi(
        const BYTE *buff, /* Pointer to the data */
        UINT btx /* Number of bytes to send (even number) */
        )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
    HAL_SPI_Transmit(&hspi2, buff, btx, HAL_MAX_DELAY);
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	b29a      	uxth	r2, r3
 8009762:	f04f 33ff 	mov.w	r3, #4294967295
 8009766:	6879      	ldr	r1, [r7, #4]
 8009768:	4803      	ldr	r0, [pc, #12]	@ (8009778 <xmit_spi_multi+0x24>)
 800976a:	f7fe f8d8 	bl	800791e <HAL_SPI_Transmit>
}
 800976e:	bf00      	nop
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	20000478 	.word	0x20000478

0800977c <wait_ready>:

static
int wait_ready( /* 1:Ready, 0:Timeout */
UINT wt /* Timeout [ms] */
)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
    //wait_ready needs its own timer, unfortunately, so it can't use the
    //spi_timer functions
    uint32_t waitSpiTimerTickStart;
    uint32_t waitSpiTimerTickDelay;

    waitSpiTimerTickStart = HAL_GetTick();
 8009784:	f7fa fa66 	bl	8003c54 <HAL_GetTick>
 8009788:	6178      	str	r0, [r7, #20]
    waitSpiTimerTickDelay = (uint32_t) wt;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	613b      	str	r3, [r7, #16]
    do {
        d = xchg_spi(0xFF);
 800978e:	20ff      	movs	r0, #255	@ 0xff
 8009790:	f7ff ffae 	bl	80096f0 <xchg_spi>
 8009794:	4603      	mov	r3, r0
 8009796:	73fb      	strb	r3, [r7, #15]
        /* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
    } while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay)); /* Wait for card goes ready or timeout */
 8009798:	7bfb      	ldrb	r3, [r7, #15]
 800979a:	2bff      	cmp	r3, #255	@ 0xff
 800979c:	d007      	beq.n	80097ae <wait_ready+0x32>
 800979e:	f7fa fa59 	bl	8003c54 <HAL_GetTick>
 80097a2:	4602      	mov	r2, r0
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	1ad3      	subs	r3, r2, r3
 80097a8:	693a      	ldr	r2, [r7, #16]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d8ef      	bhi.n	800978e <wait_ready+0x12>

    return (d == 0xFF) ? 1 : 0;
 80097ae:	7bfb      	ldrb	r3, [r7, #15]
 80097b0:	2bff      	cmp	r3, #255	@ 0xff
 80097b2:	bf0c      	ite	eq
 80097b4:	2301      	moveq	r3, #1
 80097b6:	2300      	movne	r3, #0
 80097b8:	b2db      	uxtb	r3, r3
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3718      	adds	r7, #24
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
	...

080097c4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect(void)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	af00      	add	r7, sp, #0
    CS_HIGH(); /* Set CS# high */
 80097c8:	2201      	movs	r2, #1
 80097ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80097ce:	4804      	ldr	r0, [pc, #16]	@ (80097e0 <despiselect+0x1c>)
 80097d0:	f7fc fa54 	bl	8005c7c <HAL_GPIO_WritePin>
    xchg_spi(0xFF); /* Dummy clock (force DO hi-z for multiple slave SPI) */
 80097d4:	20ff      	movs	r0, #255	@ 0xff
 80097d6:	f7ff ff8b 	bl	80096f0 <xchg_spi>

}
 80097da:	bf00      	nop
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	48000400 	.word	0x48000400

080097e4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect(void) /* 1:OK, 0:Timeout */
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	af00      	add	r7, sp, #0
    CS_LOW(); /* Set CS# low */
 80097e8:	2200      	movs	r2, #0
 80097ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80097ee:	480a      	ldr	r0, [pc, #40]	@ (8009818 <spiselect+0x34>)
 80097f0:	f7fc fa44 	bl	8005c7c <HAL_GPIO_WritePin>
    xchg_spi(0xFF); /* Dummy clock (force DO enabled) */
 80097f4:	20ff      	movs	r0, #255	@ 0xff
 80097f6:	f7ff ff7b 	bl	80096f0 <xchg_spi>
    if (wait_ready(500))
 80097fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80097fe:	f7ff ffbd 	bl	800977c <wait_ready>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <spiselect+0x28>
        return 1; /* Wait for card ready */
 8009808:	2301      	movs	r3, #1
 800980a:	e002      	b.n	8009812 <spiselect+0x2e>

    despiselect();
 800980c:	f7ff ffda 	bl	80097c4 <despiselect>
    return 0; /* Timeout */
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	48000400 	.word	0x48000400

0800981c <rcvr_datablock>:
static
int rcvr_datablock( /* 1:OK, 0:Error */
BYTE *buff, /* Data buffer */
UINT btr /* Data block length (byte) */
)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
    BYTE token;

    SPI_Timer_On(200);
 8009826:	20c8      	movs	r0, #200	@ 0xc8
 8009828:	f7ff ff38 	bl	800969c <SPI_Timer_On>
    do { /* Wait for DataStart token in timeout of 200ms */
        token = xchg_spi(0xFF);
 800982c:	20ff      	movs	r0, #255	@ 0xff
 800982e:	f7ff ff5f 	bl	80096f0 <xchg_spi>
 8009832:	4603      	mov	r3, r0
 8009834:	73fb      	strb	r3, [r7, #15]
        /* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
    } while ((token == 0xFF) && SPI_Timer_Status());
 8009836:	7bfb      	ldrb	r3, [r7, #15]
 8009838:	2bff      	cmp	r3, #255	@ 0xff
 800983a:	d104      	bne.n	8009846 <rcvr_datablock+0x2a>
 800983c:	f7ff ff42 	bl	80096c4 <SPI_Timer_Status>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d1f2      	bne.n	800982c <rcvr_datablock+0x10>
    if (token != 0xFE)
 8009846:	7bfb      	ldrb	r3, [r7, #15]
 8009848:	2bfe      	cmp	r3, #254	@ 0xfe
 800984a:	d001      	beq.n	8009850 <rcvr_datablock+0x34>
        return 0; /* Function fails if invalid DataStart token or timeout */
 800984c:	2300      	movs	r3, #0
 800984e:	e00a      	b.n	8009866 <rcvr_datablock+0x4a>

    rcvr_spi_multi(buff, btr); /* Store trailing data to the buffer */
 8009850:	6839      	ldr	r1, [r7, #0]
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f7ff ff62 	bl	800971c <rcvr_spi_multi>
    xchg_spi(0xFF);
 8009858:	20ff      	movs	r0, #255	@ 0xff
 800985a:	f7ff ff49 	bl	80096f0 <xchg_spi>
    xchg_spi(0xFF); /* Discard CRC */
 800985e:	20ff      	movs	r0, #255	@ 0xff
 8009860:	f7ff ff46 	bl	80096f0 <xchg_spi>

    return 1; /* Function succeeded */
 8009864:	2301      	movs	r3, #1
}
 8009866:	4618      	mov	r0, r3
 8009868:	3710      	adds	r7, #16
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <xmit_datablock>:
static
int xmit_datablock( /* 1:OK, 0:Failed */
const BYTE *buff, /* Ponter to 512 byte data to be sent */
BYTE token /* Token */
)
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b084      	sub	sp, #16
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
 8009876:	460b      	mov	r3, r1
 8009878:	70fb      	strb	r3, [r7, #3]
    BYTE resp;

    if (!wait_ready(500))
 800987a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800987e:	f7ff ff7d 	bl	800977c <wait_ready>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d101      	bne.n	800988c <xmit_datablock+0x1e>
        return 0; /* Wait for card ready */
 8009888:	2300      	movs	r3, #0
 800988a:	e01e      	b.n	80098ca <xmit_datablock+0x5c>

    xchg_spi(token); /* Send token */
 800988c:	78fb      	ldrb	r3, [r7, #3]
 800988e:	4618      	mov	r0, r3
 8009890:	f7ff ff2e 	bl	80096f0 <xchg_spi>
    if (token != 0xFD) { /* Send data if token is other than StopTran */
 8009894:	78fb      	ldrb	r3, [r7, #3]
 8009896:	2bfd      	cmp	r3, #253	@ 0xfd
 8009898:	d016      	beq.n	80098c8 <xmit_datablock+0x5a>
        xmit_spi_multi(buff, 512); /* Data */
 800989a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f7ff ff58 	bl	8009754 <xmit_spi_multi>
        xchg_spi(0xFF);
 80098a4:	20ff      	movs	r0, #255	@ 0xff
 80098a6:	f7ff ff23 	bl	80096f0 <xchg_spi>
        xchg_spi(0xFF); /* Dummy CRC */
 80098aa:	20ff      	movs	r0, #255	@ 0xff
 80098ac:	f7ff ff20 	bl	80096f0 <xchg_spi>

        resp = xchg_spi(0xFF); /* Receive data resp */
 80098b0:	20ff      	movs	r0, #255	@ 0xff
 80098b2:	f7ff ff1d 	bl	80096f0 <xchg_spi>
 80098b6:	4603      	mov	r3, r0
 80098b8:	73fb      	strb	r3, [r7, #15]
        if ((resp & 0x1F) != 0x05)
 80098ba:	7bfb      	ldrb	r3, [r7, #15]
 80098bc:	f003 031f 	and.w	r3, r3, #31
 80098c0:	2b05      	cmp	r3, #5
 80098c2:	d001      	beq.n	80098c8 <xmit_datablock+0x5a>
            return 0; /* Function fails if the data packet was not accepted */
 80098c4:	2300      	movs	r3, #0
 80098c6:	e000      	b.n	80098ca <xmit_datablock+0x5c>
    }
    return 1;
 80098c8:	2301      	movs	r3, #1
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <send_cmd>:

static BYTE send_cmd( /* Return value: R1 resp (bit7==1:Failed to send) */
BYTE cmd, /* Command index */
DWORD arg /* Argument */
)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b084      	sub	sp, #16
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	4603      	mov	r3, r0
 80098da:	6039      	str	r1, [r7, #0]
 80098dc:	71fb      	strb	r3, [r7, #7]
    BYTE n, res;

    if (cmd & 0x80) { /* Send a CMD55 prior to ACMD<n> */
 80098de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	da0e      	bge.n	8009904 <send_cmd+0x32>
        cmd &= 0x7F;
 80098e6:	79fb      	ldrb	r3, [r7, #7]
 80098e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098ec:	71fb      	strb	r3, [r7, #7]
        res = send_cmd(CMD55, 0);
 80098ee:	2100      	movs	r1, #0
 80098f0:	2037      	movs	r0, #55	@ 0x37
 80098f2:	f7ff ffee 	bl	80098d2 <send_cmd>
 80098f6:	4603      	mov	r3, r0
 80098f8:	73bb      	strb	r3, [r7, #14]
        if (res > 1)
 80098fa:	7bbb      	ldrb	r3, [r7, #14]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d901      	bls.n	8009904 <send_cmd+0x32>
            return res;
 8009900:	7bbb      	ldrb	r3, [r7, #14]
 8009902:	e051      	b.n	80099a8 <send_cmd+0xd6>
    }

    /* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12) {
 8009904:	79fb      	ldrb	r3, [r7, #7]
 8009906:	2b0c      	cmp	r3, #12
 8009908:	d008      	beq.n	800991c <send_cmd+0x4a>
        despiselect();
 800990a:	f7ff ff5b 	bl	80097c4 <despiselect>
        if (!spiselect())
 800990e:	f7ff ff69 	bl	80097e4 <spiselect>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d101      	bne.n	800991c <send_cmd+0x4a>
            return 0xFF;
 8009918:	23ff      	movs	r3, #255	@ 0xff
 800991a:	e045      	b.n	80099a8 <send_cmd+0xd6>
    }

    /* Send command packet */
    xchg_spi(0x40 | cmd); /* Start + command index */
 800991c:	79fb      	ldrb	r3, [r7, #7]
 800991e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009922:	b2db      	uxtb	r3, r3
 8009924:	4618      	mov	r0, r3
 8009926:	f7ff fee3 	bl	80096f0 <xchg_spi>
    xchg_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	0e1b      	lsrs	r3, r3, #24
 800992e:	b2db      	uxtb	r3, r3
 8009930:	4618      	mov	r0, r3
 8009932:	f7ff fedd 	bl	80096f0 <xchg_spi>
    xchg_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	0c1b      	lsrs	r3, r3, #16
 800993a:	b2db      	uxtb	r3, r3
 800993c:	4618      	mov	r0, r3
 800993e:	f7ff fed7 	bl	80096f0 <xchg_spi>
    xchg_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	0a1b      	lsrs	r3, r3, #8
 8009946:	b2db      	uxtb	r3, r3
 8009948:	4618      	mov	r0, r3
 800994a:	f7ff fed1 	bl	80096f0 <xchg_spi>
    xchg_spi((BYTE) arg); /* Argument[7..0] */
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	b2db      	uxtb	r3, r3
 8009952:	4618      	mov	r0, r3
 8009954:	f7ff fecc 	bl	80096f0 <xchg_spi>
    n = 0x01; /* Dummy CRC + Stop */
 8009958:	2301      	movs	r3, #1
 800995a:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD0)
 800995c:	79fb      	ldrb	r3, [r7, #7]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d101      	bne.n	8009966 <send_cmd+0x94>
        n = 0x95; /* Valid CRC for CMD0(0) */
 8009962:	2395      	movs	r3, #149	@ 0x95
 8009964:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD8)
 8009966:	79fb      	ldrb	r3, [r7, #7]
 8009968:	2b08      	cmp	r3, #8
 800996a:	d101      	bne.n	8009970 <send_cmd+0x9e>
        n = 0x87; /* Valid CRC for CMD8(0x1AA) */
 800996c:	2387      	movs	r3, #135	@ 0x87
 800996e:	73fb      	strb	r3, [r7, #15]
    xchg_spi(n);
 8009970:	7bfb      	ldrb	r3, [r7, #15]
 8009972:	4618      	mov	r0, r3
 8009974:	f7ff febc 	bl	80096f0 <xchg_spi>

    /* Receive command resp */
    if (cmd == CMD12)
 8009978:	79fb      	ldrb	r3, [r7, #7]
 800997a:	2b0c      	cmp	r3, #12
 800997c:	d102      	bne.n	8009984 <send_cmd+0xb2>
        xchg_spi(0xFF); /* Diacard following one byte when CMD12 */
 800997e:	20ff      	movs	r0, #255	@ 0xff
 8009980:	f7ff feb6 	bl	80096f0 <xchg_spi>
    n = 10; /* Wait for response (10 bytes max) */
 8009984:	230a      	movs	r3, #10
 8009986:	73fb      	strb	r3, [r7, #15]
    do {
        res = xchg_spi(0xFF);
 8009988:	20ff      	movs	r0, #255	@ 0xff
 800998a:	f7ff feb1 	bl	80096f0 <xchg_spi>
 800998e:	4603      	mov	r3, r0
 8009990:	73bb      	strb	r3, [r7, #14]
    } while ((res & 0x80) && --n);
 8009992:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009996:	2b00      	cmp	r3, #0
 8009998:	da05      	bge.n	80099a6 <send_cmd+0xd4>
 800999a:	7bfb      	ldrb	r3, [r7, #15]
 800999c:	3b01      	subs	r3, #1
 800999e:	73fb      	strb	r3, [r7, #15]
 80099a0:	7bfb      	ldrb	r3, [r7, #15]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d1f0      	bne.n	8009988 <send_cmd+0xb6>

    return res; /* Return received response */
 80099a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize(
        BYTE drv /* Physical drive number (0) */
        )
{
 80099b0:	b590      	push	{r4, r7, lr}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	4603      	mov	r3, r0
 80099b8:	71fb      	strb	r3, [r7, #7]
    BYTE n, cmd, ty, ocr[4];

    if (drv != 0)
 80099ba:	79fb      	ldrb	r3, [r7, #7]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d001      	beq.n	80099c4 <USER_SPI_initialize+0x14>
        return STA_NOINIT; /* Supports only drive 0 */
 80099c0:	2301      	movs	r3, #1
 80099c2:	e0d4      	b.n	8009b6e <USER_SPI_initialize+0x1be>
    //assume SPI already init init_spi();	/* Initialize SPI */

    if (Stat & STA_NODISK)
 80099c4:	4b6c      	ldr	r3, [pc, #432]	@ (8009b78 <USER_SPI_initialize+0x1c8>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	f003 0302 	and.w	r3, r3, #2
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d003      	beq.n	80099da <USER_SPI_initialize+0x2a>
        return Stat; /* Is card existing in the soket? */
 80099d2:	4b69      	ldr	r3, [pc, #420]	@ (8009b78 <USER_SPI_initialize+0x1c8>)
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	e0c9      	b.n	8009b6e <USER_SPI_initialize+0x1be>

    FCLK_SLOW();
 80099da:	4b68      	ldr	r3, [pc, #416]	@ (8009b7c <USER_SPI_initialize+0x1cc>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80099e4:	4b65      	ldr	r3, [pc, #404]	@ (8009b7c <USER_SPI_initialize+0x1cc>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80099ec:	601a      	str	r2, [r3, #0]
    for (n = 10; n; n--)
 80099ee:	230a      	movs	r3, #10
 80099f0:	73fb      	strb	r3, [r7, #15]
 80099f2:	e005      	b.n	8009a00 <USER_SPI_initialize+0x50>
        xchg_spi(0xFF); /* Send 80 dummy clocks */
 80099f4:	20ff      	movs	r0, #255	@ 0xff
 80099f6:	f7ff fe7b 	bl	80096f0 <xchg_spi>
    for (n = 10; n; n--)
 80099fa:	7bfb      	ldrb	r3, [r7, #15]
 80099fc:	3b01      	subs	r3, #1
 80099fe:	73fb      	strb	r3, [r7, #15]
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1f6      	bne.n	80099f4 <USER_SPI_initialize+0x44>

    ty = 0;
 8009a06:	2300      	movs	r3, #0
 8009a08:	737b      	strb	r3, [r7, #13]
    if (send_cmd(CMD0, 0) == 1) { /* Put the card SPI/Idle state */
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	2000      	movs	r0, #0
 8009a0e:	f7ff ff60 	bl	80098d2 <send_cmd>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	f040 808b 	bne.w	8009b30 <USER_SPI_initialize+0x180>
        SPI_Timer_On(1000); /* Initialization timeout = 1 sec */
 8009a1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009a1e:	f7ff fe3d 	bl	800969c <SPI_Timer_On>
        if (send_cmd(CMD8, 0x1AA) == 1) { /* SDv2? */
 8009a22:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8009a26:	2008      	movs	r0, #8
 8009a28:	f7ff ff53 	bl	80098d2 <send_cmd>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d151      	bne.n	8009ad6 <USER_SPI_initialize+0x126>
            for (n = 0; n < 4; n++)
 8009a32:	2300      	movs	r3, #0
 8009a34:	73fb      	strb	r3, [r7, #15]
 8009a36:	e00d      	b.n	8009a54 <USER_SPI_initialize+0xa4>
                ocr[n] = xchg_spi(0xFF); /* Get 32 bit return value of R7 resp */
 8009a38:	7bfc      	ldrb	r4, [r7, #15]
 8009a3a:	20ff      	movs	r0, #255	@ 0xff
 8009a3c:	f7ff fe58 	bl	80096f0 <xchg_spi>
 8009a40:	4603      	mov	r3, r0
 8009a42:	461a      	mov	r2, r3
 8009a44:	f104 0310 	add.w	r3, r4, #16
 8009a48:	443b      	add	r3, r7
 8009a4a:	f803 2c08 	strb.w	r2, [r3, #-8]
            for (n = 0; n < 4; n++)
 8009a4e:	7bfb      	ldrb	r3, [r7, #15]
 8009a50:	3301      	adds	r3, #1
 8009a52:	73fb      	strb	r3, [r7, #15]
 8009a54:	7bfb      	ldrb	r3, [r7, #15]
 8009a56:	2b03      	cmp	r3, #3
 8009a58:	d9ee      	bls.n	8009a38 <USER_SPI_initialize+0x88>
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* Is the card supports vcc of 2.7-3.6V? */
 8009a5a:	7abb      	ldrb	r3, [r7, #10]
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d167      	bne.n	8009b30 <USER_SPI_initialize+0x180>
 8009a60:	7afb      	ldrb	r3, [r7, #11]
 8009a62:	2baa      	cmp	r3, #170	@ 0xaa
 8009a64:	d164      	bne.n	8009b30 <USER_SPI_initialize+0x180>
                while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30))
 8009a66:	bf00      	nop
 8009a68:	f7ff fe2c 	bl	80096c4 <SPI_Timer_Status>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d007      	beq.n	8009a82 <USER_SPI_initialize+0xd2>
 8009a72:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8009a76:	20a9      	movs	r0, #169	@ 0xa9
 8009a78:	f7ff ff2b 	bl	80098d2 <send_cmd>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1f2      	bne.n	8009a68 <USER_SPI_initialize+0xb8>
                    ; /* Wait for end of initialization with ACMD41(HCS) */
                if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
 8009a82:	f7ff fe1f 	bl	80096c4 <SPI_Timer_Status>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d051      	beq.n	8009b30 <USER_SPI_initialize+0x180>
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	203a      	movs	r0, #58	@ 0x3a
 8009a90:	f7ff ff1f 	bl	80098d2 <send_cmd>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d14a      	bne.n	8009b30 <USER_SPI_initialize+0x180>
                    for (n = 0; n < 4; n++)
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	73fb      	strb	r3, [r7, #15]
 8009a9e:	e00d      	b.n	8009abc <USER_SPI_initialize+0x10c>
                        ocr[n] = xchg_spi(0xFF);
 8009aa0:	7bfc      	ldrb	r4, [r7, #15]
 8009aa2:	20ff      	movs	r0, #255	@ 0xff
 8009aa4:	f7ff fe24 	bl	80096f0 <xchg_spi>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	461a      	mov	r2, r3
 8009aac:	f104 0310 	add.w	r3, r4, #16
 8009ab0:	443b      	add	r3, r7
 8009ab2:	f803 2c08 	strb.w	r2, [r3, #-8]
                    for (n = 0; n < 4; n++)
 8009ab6:	7bfb      	ldrb	r3, [r7, #15]
 8009ab8:	3301      	adds	r3, #1
 8009aba:	73fb      	strb	r3, [r7, #15]
 8009abc:	7bfb      	ldrb	r3, [r7, #15]
 8009abe:	2b03      	cmp	r3, #3
 8009ac0:	d9ee      	bls.n	8009aa0 <USER_SPI_initialize+0xf0>
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; /* Card id SDv2 */
 8009ac2:	7a3b      	ldrb	r3, [r7, #8]
 8009ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d001      	beq.n	8009ad0 <USER_SPI_initialize+0x120>
 8009acc:	230c      	movs	r3, #12
 8009ace:	e000      	b.n	8009ad2 <USER_SPI_initialize+0x122>
 8009ad0:	2304      	movs	r3, #4
 8009ad2:	737b      	strb	r3, [r7, #13]
 8009ad4:	e02c      	b.n	8009b30 <USER_SPI_initialize+0x180>
                }
            }
        } else { /* Not SDv2 card */
            if (send_cmd(ACMD41, 0) <= 1) { /* SDv1 or MMC? */
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	20a9      	movs	r0, #169	@ 0xa9
 8009ada:	f7ff fefa 	bl	80098d2 <send_cmd>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d804      	bhi.n	8009aee <USER_SPI_initialize+0x13e>
                ty = CT_SD1;
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	737b      	strb	r3, [r7, #13]
                cmd = ACMD41; /* SDv1 (ACMD41(0)) */
 8009ae8:	23a9      	movs	r3, #169	@ 0xa9
 8009aea:	73bb      	strb	r3, [r7, #14]
 8009aec:	e003      	b.n	8009af6 <USER_SPI_initialize+0x146>
            } else {
                ty = CT_MMC;
 8009aee:	2301      	movs	r3, #1
 8009af0:	737b      	strb	r3, [r7, #13]
                cmd = CMD1; /* MMCv3 (CMD1(0)) */
 8009af2:	2301      	movs	r3, #1
 8009af4:	73bb      	strb	r3, [r7, #14]
            }
            while (SPI_Timer_Status() && send_cmd(cmd, 0))
 8009af6:	bf00      	nop
 8009af8:	f7ff fde4 	bl	80096c4 <SPI_Timer_Status>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d007      	beq.n	8009b12 <USER_SPI_initialize+0x162>
 8009b02:	7bbb      	ldrb	r3, [r7, #14]
 8009b04:	2100      	movs	r1, #0
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7ff fee3 	bl	80098d2 <send_cmd>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1f2      	bne.n	8009af8 <USER_SPI_initialize+0x148>
                ; /* Wait for end of initialization */
            if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0) /* Set block length: 512 */
 8009b12:	f7ff fdd7 	bl	80096c4 <SPI_Timer_Status>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d007      	beq.n	8009b2c <USER_SPI_initialize+0x17c>
 8009b1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009b20:	2010      	movs	r0, #16
 8009b22:	f7ff fed6 	bl	80098d2 <send_cmd>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d001      	beq.n	8009b30 <USER_SPI_initialize+0x180>
                ty = 0;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	737b      	strb	r3, [r7, #13]
        }
    }
    CardType = ty; /* Card type */
 8009b30:	4a13      	ldr	r2, [pc, #76]	@ (8009b80 <USER_SPI_initialize+0x1d0>)
 8009b32:	7b7b      	ldrb	r3, [r7, #13]
 8009b34:	7013      	strb	r3, [r2, #0]
    despiselect();
 8009b36:	f7ff fe45 	bl	80097c4 <despiselect>

    if (ty) { /* OK */
 8009b3a:	7b7b      	ldrb	r3, [r7, #13]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d010      	beq.n	8009b62 <USER_SPI_initialize+0x1b2>
        FCLK_FAST(); /* Set fast clock */
 8009b40:	4b0e      	ldr	r3, [pc, #56]	@ (8009b7c <USER_SPI_initialize+0x1cc>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	4b0d      	ldr	r3, [pc, #52]	@ (8009b7c <USER_SPI_initialize+0x1cc>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8009b4e:	601a      	str	r2, [r3, #0]
        Stat &= ~STA_NOINIT; /* Clear STA_NOINIT flag */
 8009b50:	4b09      	ldr	r3, [pc, #36]	@ (8009b78 <USER_SPI_initialize+0x1c8>)
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	f023 0301 	bic.w	r3, r3, #1
 8009b5a:	b2da      	uxtb	r2, r3
 8009b5c:	4b06      	ldr	r3, [pc, #24]	@ (8009b78 <USER_SPI_initialize+0x1c8>)
 8009b5e:	701a      	strb	r2, [r3, #0]
 8009b60:	e002      	b.n	8009b68 <USER_SPI_initialize+0x1b8>
    } else { /* Failed */
        Stat = STA_NOINIT;
 8009b62:	4b05      	ldr	r3, [pc, #20]	@ (8009b78 <USER_SPI_initialize+0x1c8>)
 8009b64:	2201      	movs	r2, #1
 8009b66:	701a      	strb	r2, [r3, #0]
    }

    return Stat;
 8009b68:	4b03      	ldr	r3, [pc, #12]	@ (8009b78 <USER_SPI_initialize+0x1c8>)
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	b2db      	uxtb	r3, r3
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3714      	adds	r7, #20
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd90      	pop	{r4, r7, pc}
 8009b76:	bf00      	nop
 8009b78:	2000004c 	.word	0x2000004c
 8009b7c:	20000478 	.word	0x20000478
 8009b80:	20000d0c 	.word	0x20000d0c

08009b84 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status(
        BYTE drv /* Physical drive number (0) */
        )
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	71fb      	strb	r3, [r7, #7]
    if (drv)
 8009b8e:	79fb      	ldrb	r3, [r7, #7]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d001      	beq.n	8009b98 <USER_SPI_status+0x14>
        return STA_NOINIT; /* Supports only drive 0 */
 8009b94:	2301      	movs	r3, #1
 8009b96:	e002      	b.n	8009b9e <USER_SPI_status+0x1a>

    return Stat; /* Return disk status */
 8009b98:	4b04      	ldr	r3, [pc, #16]	@ (8009bac <USER_SPI_status+0x28>)
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	b2db      	uxtb	r3, r3
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	370c      	adds	r7, #12
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	2000004c 	.word	0x2000004c

08009bb0 <USER_SPI_read>:
        BYTE drv, /* Physical drive number (0) */
        BYTE *buff, /* Pointer to the data buffer to store read data */
        DWORD sector, /* Start sector number (LBA) */
        UINT count /* Number of sectors to read (1..128) */
        )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60b9      	str	r1, [r7, #8]
 8009bb8:	607a      	str	r2, [r7, #4]
 8009bba:	603b      	str	r3, [r7, #0]
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	73fb      	strb	r3, [r7, #15]
    if (drv || !count)
 8009bc0:	7bfb      	ldrb	r3, [r7, #15]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d102      	bne.n	8009bcc <USER_SPI_read+0x1c>
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d101      	bne.n	8009bd0 <USER_SPI_read+0x20>
        return RES_PARERR; /* Check parameter */
 8009bcc:	2304      	movs	r3, #4
 8009bce:	e04d      	b.n	8009c6c <USER_SPI_read+0xbc>
    if (Stat & STA_NOINIT)
 8009bd0:	4b28      	ldr	r3, [pc, #160]	@ (8009c74 <USER_SPI_read+0xc4>)
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	f003 0301 	and.w	r3, r3, #1
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d001      	beq.n	8009be2 <USER_SPI_read+0x32>
        return RES_NOTRDY; /* Check if drive is ready */
 8009bde:	2303      	movs	r3, #3
 8009be0:	e044      	b.n	8009c6c <USER_SPI_read+0xbc>

    if (!(CardType & CT_BLOCK))
 8009be2:	4b25      	ldr	r3, [pc, #148]	@ (8009c78 <USER_SPI_read+0xc8>)
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	f003 0308 	and.w	r3, r3, #8
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d102      	bne.n	8009bf4 <USER_SPI_read+0x44>
        sector *= 512; /* LBA ot BA conversion (byte addressing cards) */
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	025b      	lsls	r3, r3, #9
 8009bf2:	607b      	str	r3, [r7, #4]

    if (count == 1) { /* Single sector read */
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d111      	bne.n	8009c1e <USER_SPI_read+0x6e>
        if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8009bfa:	6879      	ldr	r1, [r7, #4]
 8009bfc:	2011      	movs	r0, #17
 8009bfe:	f7ff fe68 	bl	80098d2 <send_cmd>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d129      	bne.n	8009c5c <USER_SPI_read+0xac>
        && rcvr_datablock(buff, 512)) {
 8009c08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009c0c:	68b8      	ldr	r0, [r7, #8]
 8009c0e:	f7ff fe05 	bl	800981c <rcvr_datablock>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d021      	beq.n	8009c5c <USER_SPI_read+0xac>
            count = 0;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	603b      	str	r3, [r7, #0]
 8009c1c:	e01e      	b.n	8009c5c <USER_SPI_read+0xac>
        }
    }
    else { /* Multiple sector read */
        if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 8009c1e:	6879      	ldr	r1, [r7, #4]
 8009c20:	2012      	movs	r0, #18
 8009c22:	f7ff fe56 	bl	80098d2 <send_cmd>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d117      	bne.n	8009c5c <USER_SPI_read+0xac>
            do {
                if (!rcvr_datablock(buff, 512))
 8009c2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009c30:	68b8      	ldr	r0, [r7, #8]
 8009c32:	f7ff fdf3 	bl	800981c <rcvr_datablock>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d00a      	beq.n	8009c52 <USER_SPI_read+0xa2>
                    break;
                buff += 512;
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009c42:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	3b01      	subs	r3, #1
 8009c48:	603b      	str	r3, [r7, #0]
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d1ed      	bne.n	8009c2c <USER_SPI_read+0x7c>
 8009c50:	e000      	b.n	8009c54 <USER_SPI_read+0xa4>
                    break;
 8009c52:	bf00      	nop
            send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8009c54:	2100      	movs	r1, #0
 8009c56:	200c      	movs	r0, #12
 8009c58:	f7ff fe3b 	bl	80098d2 <send_cmd>
        }
    }
    despiselect();
 8009c5c:	f7ff fdb2 	bl	80097c4 <despiselect>

    return count ? RES_ERROR : RES_OK; /* Return result */
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	bf14      	ite	ne
 8009c66:	2301      	movne	r3, #1
 8009c68:	2300      	moveq	r3, #0
 8009c6a:	b2db      	uxtb	r3, r3
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3710      	adds	r7, #16
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	2000004c 	.word	0x2000004c
 8009c78:	20000d0c 	.word	0x20000d0c

08009c7c <USER_SPI_write>:
        BYTE drv, /* Physical drive number (0) */
        const BYTE *buff, /* Ponter to the data to write */
        DWORD sector, /* Start sector number (LBA) */
        UINT count /* Number of sectors to write (1..128) */
        )
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60b9      	str	r1, [r7, #8]
 8009c84:	607a      	str	r2, [r7, #4]
 8009c86:	603b      	str	r3, [r7, #0]
 8009c88:	4603      	mov	r3, r0
 8009c8a:	73fb      	strb	r3, [r7, #15]
    if (drv || !count)
 8009c8c:	7bfb      	ldrb	r3, [r7, #15]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d102      	bne.n	8009c98 <USER_SPI_write+0x1c>
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d101      	bne.n	8009c9c <USER_SPI_write+0x20>
        return RES_PARERR; /* Check parameter */
 8009c98:	2304      	movs	r3, #4
 8009c9a:	e063      	b.n	8009d64 <USER_SPI_write+0xe8>
    if (Stat & STA_NOINIT)
 8009c9c:	4b33      	ldr	r3, [pc, #204]	@ (8009d6c <USER_SPI_write+0xf0>)
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	f003 0301 	and.w	r3, r3, #1
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d001      	beq.n	8009cae <USER_SPI_write+0x32>
        return RES_NOTRDY; /* Check drive status */
 8009caa:	2303      	movs	r3, #3
 8009cac:	e05a      	b.n	8009d64 <USER_SPI_write+0xe8>
    if (Stat & STA_PROTECT)
 8009cae:	4b2f      	ldr	r3, [pc, #188]	@ (8009d6c <USER_SPI_write+0xf0>)
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	f003 0304 	and.w	r3, r3, #4
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d001      	beq.n	8009cc0 <USER_SPI_write+0x44>
        return RES_WRPRT; /* Check write protect */
 8009cbc:	2302      	movs	r3, #2
 8009cbe:	e051      	b.n	8009d64 <USER_SPI_write+0xe8>

    if (!(CardType & CT_BLOCK))
 8009cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8009d70 <USER_SPI_write+0xf4>)
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	f003 0308 	and.w	r3, r3, #8
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d102      	bne.n	8009cd2 <USER_SPI_write+0x56>
        sector *= 512; /* LBA ==> BA conversion (byte addressing cards) */
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	025b      	lsls	r3, r3, #9
 8009cd0:	607b      	str	r3, [r7, #4]

    if (count == 1) { /* Single sector write */
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d110      	bne.n	8009cfa <USER_SPI_write+0x7e>
        if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 8009cd8:	6879      	ldr	r1, [r7, #4]
 8009cda:	2018      	movs	r0, #24
 8009cdc:	f7ff fdf9 	bl	80098d2 <send_cmd>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d136      	bne.n	8009d54 <USER_SPI_write+0xd8>
        && xmit_datablock(buff, 0xFE)) {
 8009ce6:	21fe      	movs	r1, #254	@ 0xfe
 8009ce8:	68b8      	ldr	r0, [r7, #8]
 8009cea:	f7ff fdc0 	bl	800986e <xmit_datablock>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d02f      	beq.n	8009d54 <USER_SPI_write+0xd8>
            count = 0;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	603b      	str	r3, [r7, #0]
 8009cf8:	e02c      	b.n	8009d54 <USER_SPI_write+0xd8>
        }
    }
    else { /* Multiple sector write */
        if (CardType & CT_SDC)
 8009cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8009d70 <USER_SPI_write+0xf4>)
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	f003 0306 	and.w	r3, r3, #6
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d003      	beq.n	8009d0e <USER_SPI_write+0x92>
            send_cmd(ACMD23, count); /* Predefine number of sectors */
 8009d06:	6839      	ldr	r1, [r7, #0]
 8009d08:	2097      	movs	r0, #151	@ 0x97
 8009d0a:	f7ff fde2 	bl	80098d2 <send_cmd>
        if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 8009d0e:	6879      	ldr	r1, [r7, #4]
 8009d10:	2019      	movs	r0, #25
 8009d12:	f7ff fdde 	bl	80098d2 <send_cmd>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d11b      	bne.n	8009d54 <USER_SPI_write+0xd8>
            do {
                if (!xmit_datablock(buff, 0xFC))
 8009d1c:	21fc      	movs	r1, #252	@ 0xfc
 8009d1e:	68b8      	ldr	r0, [r7, #8]
 8009d20:	f7ff fda5 	bl	800986e <xmit_datablock>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00a      	beq.n	8009d40 <USER_SPI_write+0xc4>
                    break;
                buff += 512;
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009d30:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	3b01      	subs	r3, #1
 8009d36:	603b      	str	r3, [r7, #0]
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d1ee      	bne.n	8009d1c <USER_SPI_write+0xa0>
 8009d3e:	e000      	b.n	8009d42 <USER_SPI_write+0xc6>
                    break;
 8009d40:	bf00      	nop
            if (!xmit_datablock(0, 0xFD))
 8009d42:	21fd      	movs	r1, #253	@ 0xfd
 8009d44:	2000      	movs	r0, #0
 8009d46:	f7ff fd92 	bl	800986e <xmit_datablock>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d101      	bne.n	8009d54 <USER_SPI_write+0xd8>
                count = 1; /* STOP_TRAN token */
 8009d50:	2301      	movs	r3, #1
 8009d52:	603b      	str	r3, [r7, #0]
        }
    }
    despiselect();
 8009d54:	f7ff fd36 	bl	80097c4 <despiselect>

    return count ? RES_ERROR : RES_OK; /* Return result */
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	bf14      	ite	ne
 8009d5e:	2301      	movne	r3, #1
 8009d60:	2300      	moveq	r3, #0
 8009d62:	b2db      	uxtb	r3, r3
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	2000004c 	.word	0x2000004c
 8009d70:	20000d0c 	.word	0x20000d0c

08009d74 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl(
        BYTE drv, /* Physical drive number (0) */
        BYTE cmd, /* Control command code */
        void *buff /* Pointer to the conrtol data */
        )
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b08c      	sub	sp, #48	@ 0x30
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	603a      	str	r2, [r7, #0]
 8009d7e:	71fb      	strb	r3, [r7, #7]
 8009d80:	460b      	mov	r3, r1
 8009d82:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    BYTE n, csd[16];
    DWORD *dp, st, ed, csize;

    if (drv)
 8009d84:	79fb      	ldrb	r3, [r7, #7]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d001      	beq.n	8009d8e <USER_SPI_ioctl+0x1a>
        return RES_PARERR; /* Check parameter */
 8009d8a:	2304      	movs	r3, #4
 8009d8c:	e15a      	b.n	800a044 <USER_SPI_ioctl+0x2d0>
    if (Stat & STA_NOINIT)
 8009d8e:	4baf      	ldr	r3, [pc, #700]	@ (800a04c <USER_SPI_ioctl+0x2d8>)
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	f003 0301 	and.w	r3, r3, #1
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d001      	beq.n	8009da0 <USER_SPI_ioctl+0x2c>
        return RES_NOTRDY; /* Check if drive is ready */
 8009d9c:	2303      	movs	r3, #3
 8009d9e:	e151      	b.n	800a044 <USER_SPI_ioctl+0x2d0>

    res = RES_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    switch (cmd) {
 8009da6:	79bb      	ldrb	r3, [r7, #6]
 8009da8:	2b04      	cmp	r3, #4
 8009daa:	f200 8136 	bhi.w	800a01a <USER_SPI_ioctl+0x2a6>
 8009dae:	a201      	add	r2, pc, #4	@ (adr r2, 8009db4 <USER_SPI_ioctl+0x40>)
 8009db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db4:	08009dc9 	.word	0x08009dc9
 8009db8:	08009ddd 	.word	0x08009ddd
 8009dbc:	0800a01b 	.word	0x0800a01b
 8009dc0:	08009e89 	.word	0x08009e89
 8009dc4:	08009f7f 	.word	0x08009f7f
    case CTRL_SYNC: /* Wait for end of internal write process of the drive */
        if (spiselect())
 8009dc8:	f7ff fd0c 	bl	80097e4 <spiselect>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f000 8127 	beq.w	800a022 <USER_SPI_ioctl+0x2ae>
            res = RES_OK;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        break;
 8009dda:	e122      	b.n	800a022 <USER_SPI_ioctl+0x2ae>

    case GET_SECTOR_COUNT: /* Get drive capacity in unit of sector (DWORD) */
        if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8009ddc:	2100      	movs	r1, #0
 8009dde:	2009      	movs	r0, #9
 8009de0:	f7ff fd77 	bl	80098d2 <send_cmd>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	f040 811d 	bne.w	800a026 <USER_SPI_ioctl+0x2b2>
 8009dec:	f107 030c 	add.w	r3, r7, #12
 8009df0:	2110      	movs	r1, #16
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7ff fd12 	bl	800981c <rcvr_datablock>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	f000 8113 	beq.w	800a026 <USER_SPI_ioctl+0x2b2>
            if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8009e00:	7b3b      	ldrb	r3, [r7, #12]
 8009e02:	099b      	lsrs	r3, r3, #6
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d111      	bne.n	8009e2e <USER_SPI_ioctl+0xba>
                csize = csd[9] + ((WORD) csd[8] << 8) + ((DWORD) (csd[7] & 63) << 16) + 1;
 8009e0a:	7d7b      	ldrb	r3, [r7, #21]
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	7d3b      	ldrb	r3, [r7, #20]
 8009e10:	021b      	lsls	r3, r3, #8
 8009e12:	4413      	add	r3, r2
 8009e14:	461a      	mov	r2, r3
 8009e16:	7cfb      	ldrb	r3, [r7, #19]
 8009e18:	041b      	lsls	r3, r3, #16
 8009e1a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8009e1e:	4413      	add	r3, r2
 8009e20:	3301      	adds	r3, #1
 8009e22:	61fb      	str	r3, [r7, #28]
                *(DWORD*) buff = csize << 10;
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	029a      	lsls	r2, r3, #10
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	601a      	str	r2, [r3, #0]
 8009e2c:	e028      	b.n	8009e80 <USER_SPI_ioctl+0x10c>
            } else { /* SDC ver 1.XX or MMC ver 3 */
                n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8009e2e:	7c7b      	ldrb	r3, [r7, #17]
 8009e30:	f003 030f 	and.w	r3, r3, #15
 8009e34:	b2da      	uxtb	r2, r3
 8009e36:	7dbb      	ldrb	r3, [r7, #22]
 8009e38:	09db      	lsrs	r3, r3, #7
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	4413      	add	r3, r2
 8009e3e:	b2da      	uxtb	r2, r3
 8009e40:	7d7b      	ldrb	r3, [r7, #21]
 8009e42:	005b      	lsls	r3, r3, #1
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	f003 0306 	and.w	r3, r3, #6
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	4413      	add	r3, r2
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	3302      	adds	r3, #2
 8009e52:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8009e56:	7d3b      	ldrb	r3, [r7, #20]
 8009e58:	099b      	lsrs	r3, r3, #6
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	7cfb      	ldrb	r3, [r7, #19]
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	441a      	add	r2, r3
 8009e64:	7cbb      	ldrb	r3, [r7, #18]
 8009e66:	029b      	lsls	r3, r3, #10
 8009e68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009e6c:	4413      	add	r3, r2
 8009e6e:	3301      	adds	r3, #1
 8009e70:	61fb      	str	r3, [r7, #28]
                *(DWORD*) buff = csize << (n - 9);
 8009e72:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009e76:	3b09      	subs	r3, #9
 8009e78:	69fa      	ldr	r2, [r7, #28]
 8009e7a:	409a      	lsls	r2, r3
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	601a      	str	r2, [r3, #0]
            }
            res = RES_OK;
 8009e80:	2300      	movs	r3, #0
 8009e82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }
        break;
 8009e86:	e0ce      	b.n	800a026 <USER_SPI_ioctl+0x2b2>

    case GET_BLOCK_SIZE: /* Get erase block size in unit of sector (DWORD) */
        if (CardType & CT_SD2) { /* SDC ver 2.00 */
 8009e88:	4b71      	ldr	r3, [pc, #452]	@ (800a050 <USER_SPI_ioctl+0x2dc>)
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	f003 0304 	and.w	r3, r3, #4
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d031      	beq.n	8009ef8 <USER_SPI_ioctl+0x184>
            if (send_cmd(ACMD13, 0) == 0) { /* Read SD status */
 8009e94:	2100      	movs	r1, #0
 8009e96:	208d      	movs	r0, #141	@ 0x8d
 8009e98:	f7ff fd1b 	bl	80098d2 <send_cmd>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	f040 80c3 	bne.w	800a02a <USER_SPI_ioctl+0x2b6>
                xchg_spi(0xFF);
 8009ea4:	20ff      	movs	r0, #255	@ 0xff
 8009ea6:	f7ff fc23 	bl	80096f0 <xchg_spi>
                if (rcvr_datablock(csd, 16)) { /* Read partial block */
 8009eaa:	f107 030c 	add.w	r3, r7, #12
 8009eae:	2110      	movs	r1, #16
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7ff fcb3 	bl	800981c <rcvr_datablock>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	f000 80b6 	beq.w	800a02a <USER_SPI_ioctl+0x2b6>
                    for (n = 64 - 16; n; n--)
 8009ebe:	2330      	movs	r3, #48	@ 0x30
 8009ec0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8009ec4:	e007      	b.n	8009ed6 <USER_SPI_ioctl+0x162>
                        xchg_spi(0xFF); /* Purge trailing data */
 8009ec6:	20ff      	movs	r0, #255	@ 0xff
 8009ec8:	f7ff fc12 	bl	80096f0 <xchg_spi>
                    for (n = 64 - 16; n; n--)
 8009ecc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8009ed6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1f3      	bne.n	8009ec6 <USER_SPI_ioctl+0x152>
                    *(DWORD*) buff = 16UL << (csd[10] >> 4);
 8009ede:	7dbb      	ldrb	r3, [r7, #22]
 8009ee0:	091b      	lsrs	r3, r3, #4
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	2310      	movs	r3, #16
 8009ee8:	fa03 f202 	lsl.w	r2, r3, r2
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	601a      	str	r2, [r3, #0]
                    res = RES_OK;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                    *(DWORD*) buff = ((WORD) ((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
                }
                res = RES_OK;
            }
        }
        break;
 8009ef6:	e098      	b.n	800a02a <USER_SPI_ioctl+0x2b6>
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) { /* Read CSD */
 8009ef8:	2100      	movs	r1, #0
 8009efa:	2009      	movs	r0, #9
 8009efc:	f7ff fce9 	bl	80098d2 <send_cmd>
 8009f00:	4603      	mov	r3, r0
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	f040 8091 	bne.w	800a02a <USER_SPI_ioctl+0x2b6>
 8009f08:	f107 030c 	add.w	r3, r7, #12
 8009f0c:	2110      	movs	r1, #16
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7ff fc84 	bl	800981c <rcvr_datablock>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	f000 8087 	beq.w	800a02a <USER_SPI_ioctl+0x2b6>
                if (CardType & CT_SD1) { /* SDC ver 1.XX */
 8009f1c:	4b4c      	ldr	r3, [pc, #304]	@ (800a050 <USER_SPI_ioctl+0x2dc>)
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	f003 0302 	and.w	r3, r3, #2
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d012      	beq.n	8009f4e <USER_SPI_ioctl+0x1da>
                    *(DWORD*) buff = (((csd[10] & 63) << 1) + ((WORD) (csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8009f28:	7dbb      	ldrb	r3, [r7, #22]
 8009f2a:	005b      	lsls	r3, r3, #1
 8009f2c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8009f30:	7dfa      	ldrb	r2, [r7, #23]
 8009f32:	09d2      	lsrs	r2, r2, #7
 8009f34:	b2d2      	uxtb	r2, r2
 8009f36:	4413      	add	r3, r2
 8009f38:	1c5a      	adds	r2, r3, #1
 8009f3a:	7e7b      	ldrb	r3, [r7, #25]
 8009f3c:	099b      	lsrs	r3, r3, #6
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	3b01      	subs	r3, #1
 8009f42:	fa02 f303 	lsl.w	r3, r2, r3
 8009f46:	461a      	mov	r2, r3
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	601a      	str	r2, [r3, #0]
 8009f4c:	e013      	b.n	8009f76 <USER_SPI_ioctl+0x202>
                    *(DWORD*) buff = ((WORD) ((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8009f4e:	7dbb      	ldrb	r3, [r7, #22]
 8009f50:	109b      	asrs	r3, r3, #2
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	f003 031f 	and.w	r3, r3, #31
 8009f58:	3301      	adds	r3, #1
 8009f5a:	7dfa      	ldrb	r2, [r7, #23]
 8009f5c:	00d2      	lsls	r2, r2, #3
 8009f5e:	f002 0218 	and.w	r2, r2, #24
 8009f62:	7df9      	ldrb	r1, [r7, #23]
 8009f64:	0949      	lsrs	r1, r1, #5
 8009f66:	b2c9      	uxtb	r1, r1
 8009f68:	440a      	add	r2, r1
 8009f6a:	3201      	adds	r2, #1
 8009f6c:	fb02 f303 	mul.w	r3, r2, r3
 8009f70:	461a      	mov	r2, r3
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	601a      	str	r2, [r3, #0]
                res = RES_OK;
 8009f76:	2300      	movs	r3, #0
 8009f78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        break;
 8009f7c:	e055      	b.n	800a02a <USER_SPI_ioctl+0x2b6>

    case CTRL_TRIM: /* Erase a block of sectors (used when _USE_ERASE == 1) */
        if (!(CardType & CT_SDC))
 8009f7e:	4b34      	ldr	r3, [pc, #208]	@ (800a050 <USER_SPI_ioctl+0x2dc>)
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	f003 0306 	and.w	r3, r3, #6
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d051      	beq.n	800a02e <USER_SPI_ioctl+0x2ba>
            break; /* Check if the card is SDC */
        if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd))
 8009f8a:	f107 020c 	add.w	r2, r7, #12
 8009f8e:	79fb      	ldrb	r3, [r7, #7]
 8009f90:	210b      	movs	r1, #11
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7ff feee 	bl	8009d74 <USER_SPI_ioctl>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d149      	bne.n	800a032 <USER_SPI_ioctl+0x2be>
            break; /* Get CSD */
        if (!(csd[0] >> 6) && !(csd[10] & 0x40))
 8009f9e:	7b3b      	ldrb	r3, [r7, #12]
 8009fa0:	099b      	lsrs	r3, r3, #6
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d104      	bne.n	8009fb2 <USER_SPI_ioctl+0x23e>
 8009fa8:	7dbb      	ldrb	r3, [r7, #22]
 8009faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d041      	beq.n	800a036 <USER_SPI_ioctl+0x2c2>
            break; /* Check if sector erase can be applied to the card */
        dp = buff;
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	623b      	str	r3, [r7, #32]
        st = dp[0];
 8009fb6:	6a3b      	ldr	r3, [r7, #32]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	62bb      	str	r3, [r7, #40]	@ 0x28
        ed = dp[1]; /* Load sector block */
 8009fbc:	6a3b      	ldr	r3, [r7, #32]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!(CardType & CT_BLOCK)) {
 8009fc2:	4b23      	ldr	r3, [pc, #140]	@ (800a050 <USER_SPI_ioctl+0x2dc>)
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	f003 0308 	and.w	r3, r3, #8
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d105      	bne.n	8009fda <USER_SPI_ioctl+0x266>
            st *= 512;
 8009fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd0:	025b      	lsls	r3, r3, #9
 8009fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
            ed *= 512;
 8009fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fd6:	025b      	lsls	r3, r3, #9
 8009fd8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) { /* Erase sector block */
 8009fda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009fdc:	2020      	movs	r0, #32
 8009fde:	f7ff fc78 	bl	80098d2 <send_cmd>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d128      	bne.n	800a03a <USER_SPI_ioctl+0x2c6>
 8009fe8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009fea:	2021      	movs	r0, #33	@ 0x21
 8009fec:	f7ff fc71 	bl	80098d2 <send_cmd>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d121      	bne.n	800a03a <USER_SPI_ioctl+0x2c6>
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	2026      	movs	r0, #38	@ 0x26
 8009ffa:	f7ff fc6a 	bl	80098d2 <send_cmd>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d11a      	bne.n	800a03a <USER_SPI_ioctl+0x2c6>
 800a004:	f247 5030 	movw	r0, #30000	@ 0x7530
 800a008:	f7ff fbb8 	bl	800977c <wait_ready>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d013      	beq.n	800a03a <USER_SPI_ioctl+0x2c6>
            res = RES_OK; /* FatFs does not check result of this command */
 800a012:	2300      	movs	r3, #0
 800a014:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }
        break;
 800a018:	e00f      	b.n	800a03a <USER_SPI_ioctl+0x2c6>

    default:
        res = RES_PARERR;
 800a01a:	2304      	movs	r3, #4
 800a01c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a020:	e00c      	b.n	800a03c <USER_SPI_ioctl+0x2c8>
        break;
 800a022:	bf00      	nop
 800a024:	e00a      	b.n	800a03c <USER_SPI_ioctl+0x2c8>
        break;
 800a026:	bf00      	nop
 800a028:	e008      	b.n	800a03c <USER_SPI_ioctl+0x2c8>
        break;
 800a02a:	bf00      	nop
 800a02c:	e006      	b.n	800a03c <USER_SPI_ioctl+0x2c8>
            break; /* Check if the card is SDC */
 800a02e:	bf00      	nop
 800a030:	e004      	b.n	800a03c <USER_SPI_ioctl+0x2c8>
            break; /* Get CSD */
 800a032:	bf00      	nop
 800a034:	e002      	b.n	800a03c <USER_SPI_ioctl+0x2c8>
            break; /* Check if sector erase can be applied to the card */
 800a036:	bf00      	nop
 800a038:	e000      	b.n	800a03c <USER_SPI_ioctl+0x2c8>
        break;
 800a03a:	bf00      	nop
    }

    despiselect();
 800a03c:	f7ff fbc2 	bl	80097c4 <despiselect>

    return res;
 800a040:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a044:	4618      	mov	r0, r3
 800a046:	3730      	adds	r7, #48	@ 0x30
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	2000004c 	.word	0x2000004c
 800a050:	20000d0c 	.word	0x20000d0c

0800a054 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a054:	b480      	push	{r7}
 800a056:	b087      	sub	sp, #28
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	4613      	mov	r3, r2
 800a060:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a062:	2301      	movs	r3, #1
 800a064:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a066:	2300      	movs	r3, #0
 800a068:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a06a:	4b1f      	ldr	r3, [pc, #124]	@ (800a0e8 <FATFS_LinkDriverEx+0x94>)
 800a06c:	7a5b      	ldrb	r3, [r3, #9]
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	2b00      	cmp	r3, #0
 800a072:	d131      	bne.n	800a0d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a074:	4b1c      	ldr	r3, [pc, #112]	@ (800a0e8 <FATFS_LinkDriverEx+0x94>)
 800a076:	7a5b      	ldrb	r3, [r3, #9]
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	461a      	mov	r2, r3
 800a07c:	4b1a      	ldr	r3, [pc, #104]	@ (800a0e8 <FATFS_LinkDriverEx+0x94>)
 800a07e:	2100      	movs	r1, #0
 800a080:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a082:	4b19      	ldr	r3, [pc, #100]	@ (800a0e8 <FATFS_LinkDriverEx+0x94>)
 800a084:	7a5b      	ldrb	r3, [r3, #9]
 800a086:	b2db      	uxtb	r3, r3
 800a088:	4a17      	ldr	r2, [pc, #92]	@ (800a0e8 <FATFS_LinkDriverEx+0x94>)
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	4413      	add	r3, r2
 800a08e:	68fa      	ldr	r2, [r7, #12]
 800a090:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a092:	4b15      	ldr	r3, [pc, #84]	@ (800a0e8 <FATFS_LinkDriverEx+0x94>)
 800a094:	7a5b      	ldrb	r3, [r3, #9]
 800a096:	b2db      	uxtb	r3, r3
 800a098:	461a      	mov	r2, r3
 800a09a:	4b13      	ldr	r3, [pc, #76]	@ (800a0e8 <FATFS_LinkDriverEx+0x94>)
 800a09c:	4413      	add	r3, r2
 800a09e:	79fa      	ldrb	r2, [r7, #7]
 800a0a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a0a2:	4b11      	ldr	r3, [pc, #68]	@ (800a0e8 <FATFS_LinkDriverEx+0x94>)
 800a0a4:	7a5b      	ldrb	r3, [r3, #9]
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	1c5a      	adds	r2, r3, #1
 800a0aa:	b2d1      	uxtb	r1, r2
 800a0ac:	4a0e      	ldr	r2, [pc, #56]	@ (800a0e8 <FATFS_LinkDriverEx+0x94>)
 800a0ae:	7251      	strb	r1, [r2, #9]
 800a0b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a0b2:	7dbb      	ldrb	r3, [r7, #22]
 800a0b4:	3330      	adds	r3, #48	@ 0x30
 800a0b6:	b2da      	uxtb	r2, r3
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	223a      	movs	r2, #58	@ 0x3a
 800a0c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	3302      	adds	r3, #2
 800a0c8:	222f      	movs	r2, #47	@ 0x2f
 800a0ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	3303      	adds	r3, #3
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a0d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	371c      	adds	r7, #28
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	20000d18 	.word	0x20000d18

0800a0ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	6839      	ldr	r1, [r7, #0]
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f7ff ffaa 	bl	800a054 <FATFS_LinkDriverEx>
 800a100:	4603      	mov	r3, r0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <__cvt>:
 800a10a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a10e:	ec57 6b10 	vmov	r6, r7, d0
 800a112:	2f00      	cmp	r7, #0
 800a114:	460c      	mov	r4, r1
 800a116:	4619      	mov	r1, r3
 800a118:	463b      	mov	r3, r7
 800a11a:	bfbb      	ittet	lt
 800a11c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a120:	461f      	movlt	r7, r3
 800a122:	2300      	movge	r3, #0
 800a124:	232d      	movlt	r3, #45	@ 0x2d
 800a126:	700b      	strb	r3, [r1, #0]
 800a128:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a12a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a12e:	4691      	mov	r9, r2
 800a130:	f023 0820 	bic.w	r8, r3, #32
 800a134:	bfbc      	itt	lt
 800a136:	4632      	movlt	r2, r6
 800a138:	4616      	movlt	r6, r2
 800a13a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a13e:	d005      	beq.n	800a14c <__cvt+0x42>
 800a140:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a144:	d100      	bne.n	800a148 <__cvt+0x3e>
 800a146:	3401      	adds	r4, #1
 800a148:	2102      	movs	r1, #2
 800a14a:	e000      	b.n	800a14e <__cvt+0x44>
 800a14c:	2103      	movs	r1, #3
 800a14e:	ab03      	add	r3, sp, #12
 800a150:	9301      	str	r3, [sp, #4]
 800a152:	ab02      	add	r3, sp, #8
 800a154:	9300      	str	r3, [sp, #0]
 800a156:	ec47 6b10 	vmov	d0, r6, r7
 800a15a:	4653      	mov	r3, sl
 800a15c:	4622      	mov	r2, r4
 800a15e:	f000 ff77 	bl	800b050 <_dtoa_r>
 800a162:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a166:	4605      	mov	r5, r0
 800a168:	d119      	bne.n	800a19e <__cvt+0x94>
 800a16a:	f019 0f01 	tst.w	r9, #1
 800a16e:	d00e      	beq.n	800a18e <__cvt+0x84>
 800a170:	eb00 0904 	add.w	r9, r0, r4
 800a174:	2200      	movs	r2, #0
 800a176:	2300      	movs	r3, #0
 800a178:	4630      	mov	r0, r6
 800a17a:	4639      	mov	r1, r7
 800a17c:	f7f6 fca4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a180:	b108      	cbz	r0, 800a186 <__cvt+0x7c>
 800a182:	f8cd 900c 	str.w	r9, [sp, #12]
 800a186:	2230      	movs	r2, #48	@ 0x30
 800a188:	9b03      	ldr	r3, [sp, #12]
 800a18a:	454b      	cmp	r3, r9
 800a18c:	d31e      	bcc.n	800a1cc <__cvt+0xc2>
 800a18e:	9b03      	ldr	r3, [sp, #12]
 800a190:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a192:	1b5b      	subs	r3, r3, r5
 800a194:	4628      	mov	r0, r5
 800a196:	6013      	str	r3, [r2, #0]
 800a198:	b004      	add	sp, #16
 800a19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a19e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a1a2:	eb00 0904 	add.w	r9, r0, r4
 800a1a6:	d1e5      	bne.n	800a174 <__cvt+0x6a>
 800a1a8:	7803      	ldrb	r3, [r0, #0]
 800a1aa:	2b30      	cmp	r3, #48	@ 0x30
 800a1ac:	d10a      	bne.n	800a1c4 <__cvt+0xba>
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	4639      	mov	r1, r7
 800a1b6:	f7f6 fc87 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1ba:	b918      	cbnz	r0, 800a1c4 <__cvt+0xba>
 800a1bc:	f1c4 0401 	rsb	r4, r4, #1
 800a1c0:	f8ca 4000 	str.w	r4, [sl]
 800a1c4:	f8da 3000 	ldr.w	r3, [sl]
 800a1c8:	4499      	add	r9, r3
 800a1ca:	e7d3      	b.n	800a174 <__cvt+0x6a>
 800a1cc:	1c59      	adds	r1, r3, #1
 800a1ce:	9103      	str	r1, [sp, #12]
 800a1d0:	701a      	strb	r2, [r3, #0]
 800a1d2:	e7d9      	b.n	800a188 <__cvt+0x7e>

0800a1d4 <__exponent>:
 800a1d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1d6:	2900      	cmp	r1, #0
 800a1d8:	bfba      	itte	lt
 800a1da:	4249      	neglt	r1, r1
 800a1dc:	232d      	movlt	r3, #45	@ 0x2d
 800a1de:	232b      	movge	r3, #43	@ 0x2b
 800a1e0:	2909      	cmp	r1, #9
 800a1e2:	7002      	strb	r2, [r0, #0]
 800a1e4:	7043      	strb	r3, [r0, #1]
 800a1e6:	dd29      	ble.n	800a23c <__exponent+0x68>
 800a1e8:	f10d 0307 	add.w	r3, sp, #7
 800a1ec:	461d      	mov	r5, r3
 800a1ee:	270a      	movs	r7, #10
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	fbb1 f6f7 	udiv	r6, r1, r7
 800a1f6:	fb07 1416 	mls	r4, r7, r6, r1
 800a1fa:	3430      	adds	r4, #48	@ 0x30
 800a1fc:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a200:	460c      	mov	r4, r1
 800a202:	2c63      	cmp	r4, #99	@ 0x63
 800a204:	f103 33ff 	add.w	r3, r3, #4294967295
 800a208:	4631      	mov	r1, r6
 800a20a:	dcf1      	bgt.n	800a1f0 <__exponent+0x1c>
 800a20c:	3130      	adds	r1, #48	@ 0x30
 800a20e:	1e94      	subs	r4, r2, #2
 800a210:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a214:	1c41      	adds	r1, r0, #1
 800a216:	4623      	mov	r3, r4
 800a218:	42ab      	cmp	r3, r5
 800a21a:	d30a      	bcc.n	800a232 <__exponent+0x5e>
 800a21c:	f10d 0309 	add.w	r3, sp, #9
 800a220:	1a9b      	subs	r3, r3, r2
 800a222:	42ac      	cmp	r4, r5
 800a224:	bf88      	it	hi
 800a226:	2300      	movhi	r3, #0
 800a228:	3302      	adds	r3, #2
 800a22a:	4403      	add	r3, r0
 800a22c:	1a18      	subs	r0, r3, r0
 800a22e:	b003      	add	sp, #12
 800a230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a232:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a236:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a23a:	e7ed      	b.n	800a218 <__exponent+0x44>
 800a23c:	2330      	movs	r3, #48	@ 0x30
 800a23e:	3130      	adds	r1, #48	@ 0x30
 800a240:	7083      	strb	r3, [r0, #2]
 800a242:	70c1      	strb	r1, [r0, #3]
 800a244:	1d03      	adds	r3, r0, #4
 800a246:	e7f1      	b.n	800a22c <__exponent+0x58>

0800a248 <_printf_float>:
 800a248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a24c:	b08d      	sub	sp, #52	@ 0x34
 800a24e:	460c      	mov	r4, r1
 800a250:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a254:	4616      	mov	r6, r2
 800a256:	461f      	mov	r7, r3
 800a258:	4605      	mov	r5, r0
 800a25a:	f000 fdf9 	bl	800ae50 <_localeconv_r>
 800a25e:	6803      	ldr	r3, [r0, #0]
 800a260:	9304      	str	r3, [sp, #16]
 800a262:	4618      	mov	r0, r3
 800a264:	f7f6 f804 	bl	8000270 <strlen>
 800a268:	2300      	movs	r3, #0
 800a26a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a26c:	f8d8 3000 	ldr.w	r3, [r8]
 800a270:	9005      	str	r0, [sp, #20]
 800a272:	3307      	adds	r3, #7
 800a274:	f023 0307 	bic.w	r3, r3, #7
 800a278:	f103 0208 	add.w	r2, r3, #8
 800a27c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a280:	f8d4 b000 	ldr.w	fp, [r4]
 800a284:	f8c8 2000 	str.w	r2, [r8]
 800a288:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a28c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a290:	9307      	str	r3, [sp, #28]
 800a292:	f8cd 8018 	str.w	r8, [sp, #24]
 800a296:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a29a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a29e:	4b9c      	ldr	r3, [pc, #624]	@ (800a510 <_printf_float+0x2c8>)
 800a2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a4:	f7f6 fc42 	bl	8000b2c <__aeabi_dcmpun>
 800a2a8:	bb70      	cbnz	r0, 800a308 <_printf_float+0xc0>
 800a2aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2ae:	4b98      	ldr	r3, [pc, #608]	@ (800a510 <_printf_float+0x2c8>)
 800a2b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2b4:	f7f6 fc1c 	bl	8000af0 <__aeabi_dcmple>
 800a2b8:	bb30      	cbnz	r0, 800a308 <_printf_float+0xc0>
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	2300      	movs	r3, #0
 800a2be:	4640      	mov	r0, r8
 800a2c0:	4649      	mov	r1, r9
 800a2c2:	f7f6 fc0b 	bl	8000adc <__aeabi_dcmplt>
 800a2c6:	b110      	cbz	r0, 800a2ce <_printf_float+0x86>
 800a2c8:	232d      	movs	r3, #45	@ 0x2d
 800a2ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2ce:	4a91      	ldr	r2, [pc, #580]	@ (800a514 <_printf_float+0x2cc>)
 800a2d0:	4b91      	ldr	r3, [pc, #580]	@ (800a518 <_printf_float+0x2d0>)
 800a2d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a2d6:	bf8c      	ite	hi
 800a2d8:	4690      	movhi	r8, r2
 800a2da:	4698      	movls	r8, r3
 800a2dc:	2303      	movs	r3, #3
 800a2de:	6123      	str	r3, [r4, #16]
 800a2e0:	f02b 0304 	bic.w	r3, fp, #4
 800a2e4:	6023      	str	r3, [r4, #0]
 800a2e6:	f04f 0900 	mov.w	r9, #0
 800a2ea:	9700      	str	r7, [sp, #0]
 800a2ec:	4633      	mov	r3, r6
 800a2ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a2f0:	4621      	mov	r1, r4
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	f000 f9d2 	bl	800a69c <_printf_common>
 800a2f8:	3001      	adds	r0, #1
 800a2fa:	f040 808d 	bne.w	800a418 <_printf_float+0x1d0>
 800a2fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a302:	b00d      	add	sp, #52	@ 0x34
 800a304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a308:	4642      	mov	r2, r8
 800a30a:	464b      	mov	r3, r9
 800a30c:	4640      	mov	r0, r8
 800a30e:	4649      	mov	r1, r9
 800a310:	f7f6 fc0c 	bl	8000b2c <__aeabi_dcmpun>
 800a314:	b140      	cbz	r0, 800a328 <_printf_float+0xe0>
 800a316:	464b      	mov	r3, r9
 800a318:	2b00      	cmp	r3, #0
 800a31a:	bfbc      	itt	lt
 800a31c:	232d      	movlt	r3, #45	@ 0x2d
 800a31e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a322:	4a7e      	ldr	r2, [pc, #504]	@ (800a51c <_printf_float+0x2d4>)
 800a324:	4b7e      	ldr	r3, [pc, #504]	@ (800a520 <_printf_float+0x2d8>)
 800a326:	e7d4      	b.n	800a2d2 <_printf_float+0x8a>
 800a328:	6863      	ldr	r3, [r4, #4]
 800a32a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a32e:	9206      	str	r2, [sp, #24]
 800a330:	1c5a      	adds	r2, r3, #1
 800a332:	d13b      	bne.n	800a3ac <_printf_float+0x164>
 800a334:	2306      	movs	r3, #6
 800a336:	6063      	str	r3, [r4, #4]
 800a338:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a33c:	2300      	movs	r3, #0
 800a33e:	6022      	str	r2, [r4, #0]
 800a340:	9303      	str	r3, [sp, #12]
 800a342:	ab0a      	add	r3, sp, #40	@ 0x28
 800a344:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a348:	ab09      	add	r3, sp, #36	@ 0x24
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	6861      	ldr	r1, [r4, #4]
 800a34e:	ec49 8b10 	vmov	d0, r8, r9
 800a352:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a356:	4628      	mov	r0, r5
 800a358:	f7ff fed7 	bl	800a10a <__cvt>
 800a35c:	9b06      	ldr	r3, [sp, #24]
 800a35e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a360:	2b47      	cmp	r3, #71	@ 0x47
 800a362:	4680      	mov	r8, r0
 800a364:	d129      	bne.n	800a3ba <_printf_float+0x172>
 800a366:	1cc8      	adds	r0, r1, #3
 800a368:	db02      	blt.n	800a370 <_printf_float+0x128>
 800a36a:	6863      	ldr	r3, [r4, #4]
 800a36c:	4299      	cmp	r1, r3
 800a36e:	dd41      	ble.n	800a3f4 <_printf_float+0x1ac>
 800a370:	f1aa 0a02 	sub.w	sl, sl, #2
 800a374:	fa5f fa8a 	uxtb.w	sl, sl
 800a378:	3901      	subs	r1, #1
 800a37a:	4652      	mov	r2, sl
 800a37c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a380:	9109      	str	r1, [sp, #36]	@ 0x24
 800a382:	f7ff ff27 	bl	800a1d4 <__exponent>
 800a386:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a388:	1813      	adds	r3, r2, r0
 800a38a:	2a01      	cmp	r2, #1
 800a38c:	4681      	mov	r9, r0
 800a38e:	6123      	str	r3, [r4, #16]
 800a390:	dc02      	bgt.n	800a398 <_printf_float+0x150>
 800a392:	6822      	ldr	r2, [r4, #0]
 800a394:	07d2      	lsls	r2, r2, #31
 800a396:	d501      	bpl.n	800a39c <_printf_float+0x154>
 800a398:	3301      	adds	r3, #1
 800a39a:	6123      	str	r3, [r4, #16]
 800a39c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d0a2      	beq.n	800a2ea <_printf_float+0xa2>
 800a3a4:	232d      	movs	r3, #45	@ 0x2d
 800a3a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3aa:	e79e      	b.n	800a2ea <_printf_float+0xa2>
 800a3ac:	9a06      	ldr	r2, [sp, #24]
 800a3ae:	2a47      	cmp	r2, #71	@ 0x47
 800a3b0:	d1c2      	bne.n	800a338 <_printf_float+0xf0>
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1c0      	bne.n	800a338 <_printf_float+0xf0>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e7bd      	b.n	800a336 <_printf_float+0xee>
 800a3ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a3be:	d9db      	bls.n	800a378 <_printf_float+0x130>
 800a3c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a3c4:	d118      	bne.n	800a3f8 <_printf_float+0x1b0>
 800a3c6:	2900      	cmp	r1, #0
 800a3c8:	6863      	ldr	r3, [r4, #4]
 800a3ca:	dd0b      	ble.n	800a3e4 <_printf_float+0x19c>
 800a3cc:	6121      	str	r1, [r4, #16]
 800a3ce:	b913      	cbnz	r3, 800a3d6 <_printf_float+0x18e>
 800a3d0:	6822      	ldr	r2, [r4, #0]
 800a3d2:	07d0      	lsls	r0, r2, #31
 800a3d4:	d502      	bpl.n	800a3dc <_printf_float+0x194>
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	440b      	add	r3, r1
 800a3da:	6123      	str	r3, [r4, #16]
 800a3dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a3de:	f04f 0900 	mov.w	r9, #0
 800a3e2:	e7db      	b.n	800a39c <_printf_float+0x154>
 800a3e4:	b913      	cbnz	r3, 800a3ec <_printf_float+0x1a4>
 800a3e6:	6822      	ldr	r2, [r4, #0]
 800a3e8:	07d2      	lsls	r2, r2, #31
 800a3ea:	d501      	bpl.n	800a3f0 <_printf_float+0x1a8>
 800a3ec:	3302      	adds	r3, #2
 800a3ee:	e7f4      	b.n	800a3da <_printf_float+0x192>
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e7f2      	b.n	800a3da <_printf_float+0x192>
 800a3f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a3f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3fa:	4299      	cmp	r1, r3
 800a3fc:	db05      	blt.n	800a40a <_printf_float+0x1c2>
 800a3fe:	6823      	ldr	r3, [r4, #0]
 800a400:	6121      	str	r1, [r4, #16]
 800a402:	07d8      	lsls	r0, r3, #31
 800a404:	d5ea      	bpl.n	800a3dc <_printf_float+0x194>
 800a406:	1c4b      	adds	r3, r1, #1
 800a408:	e7e7      	b.n	800a3da <_printf_float+0x192>
 800a40a:	2900      	cmp	r1, #0
 800a40c:	bfd4      	ite	le
 800a40e:	f1c1 0202 	rsble	r2, r1, #2
 800a412:	2201      	movgt	r2, #1
 800a414:	4413      	add	r3, r2
 800a416:	e7e0      	b.n	800a3da <_printf_float+0x192>
 800a418:	6823      	ldr	r3, [r4, #0]
 800a41a:	055a      	lsls	r2, r3, #21
 800a41c:	d407      	bmi.n	800a42e <_printf_float+0x1e6>
 800a41e:	6923      	ldr	r3, [r4, #16]
 800a420:	4642      	mov	r2, r8
 800a422:	4631      	mov	r1, r6
 800a424:	4628      	mov	r0, r5
 800a426:	47b8      	blx	r7
 800a428:	3001      	adds	r0, #1
 800a42a:	d12b      	bne.n	800a484 <_printf_float+0x23c>
 800a42c:	e767      	b.n	800a2fe <_printf_float+0xb6>
 800a42e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a432:	f240 80dd 	bls.w	800a5f0 <_printf_float+0x3a8>
 800a436:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a43a:	2200      	movs	r2, #0
 800a43c:	2300      	movs	r3, #0
 800a43e:	f7f6 fb43 	bl	8000ac8 <__aeabi_dcmpeq>
 800a442:	2800      	cmp	r0, #0
 800a444:	d033      	beq.n	800a4ae <_printf_float+0x266>
 800a446:	4a37      	ldr	r2, [pc, #220]	@ (800a524 <_printf_float+0x2dc>)
 800a448:	2301      	movs	r3, #1
 800a44a:	4631      	mov	r1, r6
 800a44c:	4628      	mov	r0, r5
 800a44e:	47b8      	blx	r7
 800a450:	3001      	adds	r0, #1
 800a452:	f43f af54 	beq.w	800a2fe <_printf_float+0xb6>
 800a456:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a45a:	4543      	cmp	r3, r8
 800a45c:	db02      	blt.n	800a464 <_printf_float+0x21c>
 800a45e:	6823      	ldr	r3, [r4, #0]
 800a460:	07d8      	lsls	r0, r3, #31
 800a462:	d50f      	bpl.n	800a484 <_printf_float+0x23c>
 800a464:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a468:	4631      	mov	r1, r6
 800a46a:	4628      	mov	r0, r5
 800a46c:	47b8      	blx	r7
 800a46e:	3001      	adds	r0, #1
 800a470:	f43f af45 	beq.w	800a2fe <_printf_float+0xb6>
 800a474:	f04f 0900 	mov.w	r9, #0
 800a478:	f108 38ff 	add.w	r8, r8, #4294967295
 800a47c:	f104 0a1a 	add.w	sl, r4, #26
 800a480:	45c8      	cmp	r8, r9
 800a482:	dc09      	bgt.n	800a498 <_printf_float+0x250>
 800a484:	6823      	ldr	r3, [r4, #0]
 800a486:	079b      	lsls	r3, r3, #30
 800a488:	f100 8103 	bmi.w	800a692 <_printf_float+0x44a>
 800a48c:	68e0      	ldr	r0, [r4, #12]
 800a48e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a490:	4298      	cmp	r0, r3
 800a492:	bfb8      	it	lt
 800a494:	4618      	movlt	r0, r3
 800a496:	e734      	b.n	800a302 <_printf_float+0xba>
 800a498:	2301      	movs	r3, #1
 800a49a:	4652      	mov	r2, sl
 800a49c:	4631      	mov	r1, r6
 800a49e:	4628      	mov	r0, r5
 800a4a0:	47b8      	blx	r7
 800a4a2:	3001      	adds	r0, #1
 800a4a4:	f43f af2b 	beq.w	800a2fe <_printf_float+0xb6>
 800a4a8:	f109 0901 	add.w	r9, r9, #1
 800a4ac:	e7e8      	b.n	800a480 <_printf_float+0x238>
 800a4ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	dc39      	bgt.n	800a528 <_printf_float+0x2e0>
 800a4b4:	4a1b      	ldr	r2, [pc, #108]	@ (800a524 <_printf_float+0x2dc>)
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	4631      	mov	r1, r6
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	47b8      	blx	r7
 800a4be:	3001      	adds	r0, #1
 800a4c0:	f43f af1d 	beq.w	800a2fe <_printf_float+0xb6>
 800a4c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a4c8:	ea59 0303 	orrs.w	r3, r9, r3
 800a4cc:	d102      	bne.n	800a4d4 <_printf_float+0x28c>
 800a4ce:	6823      	ldr	r3, [r4, #0]
 800a4d0:	07d9      	lsls	r1, r3, #31
 800a4d2:	d5d7      	bpl.n	800a484 <_printf_float+0x23c>
 800a4d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4d8:	4631      	mov	r1, r6
 800a4da:	4628      	mov	r0, r5
 800a4dc:	47b8      	blx	r7
 800a4de:	3001      	adds	r0, #1
 800a4e0:	f43f af0d 	beq.w	800a2fe <_printf_float+0xb6>
 800a4e4:	f04f 0a00 	mov.w	sl, #0
 800a4e8:	f104 0b1a 	add.w	fp, r4, #26
 800a4ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4ee:	425b      	negs	r3, r3
 800a4f0:	4553      	cmp	r3, sl
 800a4f2:	dc01      	bgt.n	800a4f8 <_printf_float+0x2b0>
 800a4f4:	464b      	mov	r3, r9
 800a4f6:	e793      	b.n	800a420 <_printf_float+0x1d8>
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	465a      	mov	r2, fp
 800a4fc:	4631      	mov	r1, r6
 800a4fe:	4628      	mov	r0, r5
 800a500:	47b8      	blx	r7
 800a502:	3001      	adds	r0, #1
 800a504:	f43f aefb 	beq.w	800a2fe <_printf_float+0xb6>
 800a508:	f10a 0a01 	add.w	sl, sl, #1
 800a50c:	e7ee      	b.n	800a4ec <_printf_float+0x2a4>
 800a50e:	bf00      	nop
 800a510:	7fefffff 	.word	0x7fefffff
 800a514:	0800e0d0 	.word	0x0800e0d0
 800a518:	0800e0cc 	.word	0x0800e0cc
 800a51c:	0800e0d8 	.word	0x0800e0d8
 800a520:	0800e0d4 	.word	0x0800e0d4
 800a524:	0800e0dc 	.word	0x0800e0dc
 800a528:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a52a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a52e:	4553      	cmp	r3, sl
 800a530:	bfa8      	it	ge
 800a532:	4653      	movge	r3, sl
 800a534:	2b00      	cmp	r3, #0
 800a536:	4699      	mov	r9, r3
 800a538:	dc36      	bgt.n	800a5a8 <_printf_float+0x360>
 800a53a:	f04f 0b00 	mov.w	fp, #0
 800a53e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a542:	f104 021a 	add.w	r2, r4, #26
 800a546:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a548:	9306      	str	r3, [sp, #24]
 800a54a:	eba3 0309 	sub.w	r3, r3, r9
 800a54e:	455b      	cmp	r3, fp
 800a550:	dc31      	bgt.n	800a5b6 <_printf_float+0x36e>
 800a552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a554:	459a      	cmp	sl, r3
 800a556:	dc3a      	bgt.n	800a5ce <_printf_float+0x386>
 800a558:	6823      	ldr	r3, [r4, #0]
 800a55a:	07da      	lsls	r2, r3, #31
 800a55c:	d437      	bmi.n	800a5ce <_printf_float+0x386>
 800a55e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a560:	ebaa 0903 	sub.w	r9, sl, r3
 800a564:	9b06      	ldr	r3, [sp, #24]
 800a566:	ebaa 0303 	sub.w	r3, sl, r3
 800a56a:	4599      	cmp	r9, r3
 800a56c:	bfa8      	it	ge
 800a56e:	4699      	movge	r9, r3
 800a570:	f1b9 0f00 	cmp.w	r9, #0
 800a574:	dc33      	bgt.n	800a5de <_printf_float+0x396>
 800a576:	f04f 0800 	mov.w	r8, #0
 800a57a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a57e:	f104 0b1a 	add.w	fp, r4, #26
 800a582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a584:	ebaa 0303 	sub.w	r3, sl, r3
 800a588:	eba3 0309 	sub.w	r3, r3, r9
 800a58c:	4543      	cmp	r3, r8
 800a58e:	f77f af79 	ble.w	800a484 <_printf_float+0x23c>
 800a592:	2301      	movs	r3, #1
 800a594:	465a      	mov	r2, fp
 800a596:	4631      	mov	r1, r6
 800a598:	4628      	mov	r0, r5
 800a59a:	47b8      	blx	r7
 800a59c:	3001      	adds	r0, #1
 800a59e:	f43f aeae 	beq.w	800a2fe <_printf_float+0xb6>
 800a5a2:	f108 0801 	add.w	r8, r8, #1
 800a5a6:	e7ec      	b.n	800a582 <_printf_float+0x33a>
 800a5a8:	4642      	mov	r2, r8
 800a5aa:	4631      	mov	r1, r6
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	47b8      	blx	r7
 800a5b0:	3001      	adds	r0, #1
 800a5b2:	d1c2      	bne.n	800a53a <_printf_float+0x2f2>
 800a5b4:	e6a3      	b.n	800a2fe <_printf_float+0xb6>
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	4631      	mov	r1, r6
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	9206      	str	r2, [sp, #24]
 800a5be:	47b8      	blx	r7
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	f43f ae9c 	beq.w	800a2fe <_printf_float+0xb6>
 800a5c6:	9a06      	ldr	r2, [sp, #24]
 800a5c8:	f10b 0b01 	add.w	fp, fp, #1
 800a5cc:	e7bb      	b.n	800a546 <_printf_float+0x2fe>
 800a5ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5d2:	4631      	mov	r1, r6
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	47b8      	blx	r7
 800a5d8:	3001      	adds	r0, #1
 800a5da:	d1c0      	bne.n	800a55e <_printf_float+0x316>
 800a5dc:	e68f      	b.n	800a2fe <_printf_float+0xb6>
 800a5de:	9a06      	ldr	r2, [sp, #24]
 800a5e0:	464b      	mov	r3, r9
 800a5e2:	4442      	add	r2, r8
 800a5e4:	4631      	mov	r1, r6
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	47b8      	blx	r7
 800a5ea:	3001      	adds	r0, #1
 800a5ec:	d1c3      	bne.n	800a576 <_printf_float+0x32e>
 800a5ee:	e686      	b.n	800a2fe <_printf_float+0xb6>
 800a5f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a5f4:	f1ba 0f01 	cmp.w	sl, #1
 800a5f8:	dc01      	bgt.n	800a5fe <_printf_float+0x3b6>
 800a5fa:	07db      	lsls	r3, r3, #31
 800a5fc:	d536      	bpl.n	800a66c <_printf_float+0x424>
 800a5fe:	2301      	movs	r3, #1
 800a600:	4642      	mov	r2, r8
 800a602:	4631      	mov	r1, r6
 800a604:	4628      	mov	r0, r5
 800a606:	47b8      	blx	r7
 800a608:	3001      	adds	r0, #1
 800a60a:	f43f ae78 	beq.w	800a2fe <_printf_float+0xb6>
 800a60e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a612:	4631      	mov	r1, r6
 800a614:	4628      	mov	r0, r5
 800a616:	47b8      	blx	r7
 800a618:	3001      	adds	r0, #1
 800a61a:	f43f ae70 	beq.w	800a2fe <_printf_float+0xb6>
 800a61e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a622:	2200      	movs	r2, #0
 800a624:	2300      	movs	r3, #0
 800a626:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a62a:	f7f6 fa4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a62e:	b9c0      	cbnz	r0, 800a662 <_printf_float+0x41a>
 800a630:	4653      	mov	r3, sl
 800a632:	f108 0201 	add.w	r2, r8, #1
 800a636:	4631      	mov	r1, r6
 800a638:	4628      	mov	r0, r5
 800a63a:	47b8      	blx	r7
 800a63c:	3001      	adds	r0, #1
 800a63e:	d10c      	bne.n	800a65a <_printf_float+0x412>
 800a640:	e65d      	b.n	800a2fe <_printf_float+0xb6>
 800a642:	2301      	movs	r3, #1
 800a644:	465a      	mov	r2, fp
 800a646:	4631      	mov	r1, r6
 800a648:	4628      	mov	r0, r5
 800a64a:	47b8      	blx	r7
 800a64c:	3001      	adds	r0, #1
 800a64e:	f43f ae56 	beq.w	800a2fe <_printf_float+0xb6>
 800a652:	f108 0801 	add.w	r8, r8, #1
 800a656:	45d0      	cmp	r8, sl
 800a658:	dbf3      	blt.n	800a642 <_printf_float+0x3fa>
 800a65a:	464b      	mov	r3, r9
 800a65c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a660:	e6df      	b.n	800a422 <_printf_float+0x1da>
 800a662:	f04f 0800 	mov.w	r8, #0
 800a666:	f104 0b1a 	add.w	fp, r4, #26
 800a66a:	e7f4      	b.n	800a656 <_printf_float+0x40e>
 800a66c:	2301      	movs	r3, #1
 800a66e:	4642      	mov	r2, r8
 800a670:	e7e1      	b.n	800a636 <_printf_float+0x3ee>
 800a672:	2301      	movs	r3, #1
 800a674:	464a      	mov	r2, r9
 800a676:	4631      	mov	r1, r6
 800a678:	4628      	mov	r0, r5
 800a67a:	47b8      	blx	r7
 800a67c:	3001      	adds	r0, #1
 800a67e:	f43f ae3e 	beq.w	800a2fe <_printf_float+0xb6>
 800a682:	f108 0801 	add.w	r8, r8, #1
 800a686:	68e3      	ldr	r3, [r4, #12]
 800a688:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a68a:	1a5b      	subs	r3, r3, r1
 800a68c:	4543      	cmp	r3, r8
 800a68e:	dcf0      	bgt.n	800a672 <_printf_float+0x42a>
 800a690:	e6fc      	b.n	800a48c <_printf_float+0x244>
 800a692:	f04f 0800 	mov.w	r8, #0
 800a696:	f104 0919 	add.w	r9, r4, #25
 800a69a:	e7f4      	b.n	800a686 <_printf_float+0x43e>

0800a69c <_printf_common>:
 800a69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6a0:	4616      	mov	r6, r2
 800a6a2:	4698      	mov	r8, r3
 800a6a4:	688a      	ldr	r2, [r1, #8]
 800a6a6:	690b      	ldr	r3, [r1, #16]
 800a6a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	bfb8      	it	lt
 800a6b0:	4613      	movlt	r3, r2
 800a6b2:	6033      	str	r3, [r6, #0]
 800a6b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a6b8:	4607      	mov	r7, r0
 800a6ba:	460c      	mov	r4, r1
 800a6bc:	b10a      	cbz	r2, 800a6c2 <_printf_common+0x26>
 800a6be:	3301      	adds	r3, #1
 800a6c0:	6033      	str	r3, [r6, #0]
 800a6c2:	6823      	ldr	r3, [r4, #0]
 800a6c4:	0699      	lsls	r1, r3, #26
 800a6c6:	bf42      	ittt	mi
 800a6c8:	6833      	ldrmi	r3, [r6, #0]
 800a6ca:	3302      	addmi	r3, #2
 800a6cc:	6033      	strmi	r3, [r6, #0]
 800a6ce:	6825      	ldr	r5, [r4, #0]
 800a6d0:	f015 0506 	ands.w	r5, r5, #6
 800a6d4:	d106      	bne.n	800a6e4 <_printf_common+0x48>
 800a6d6:	f104 0a19 	add.w	sl, r4, #25
 800a6da:	68e3      	ldr	r3, [r4, #12]
 800a6dc:	6832      	ldr	r2, [r6, #0]
 800a6de:	1a9b      	subs	r3, r3, r2
 800a6e0:	42ab      	cmp	r3, r5
 800a6e2:	dc26      	bgt.n	800a732 <_printf_common+0x96>
 800a6e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a6e8:	6822      	ldr	r2, [r4, #0]
 800a6ea:	3b00      	subs	r3, #0
 800a6ec:	bf18      	it	ne
 800a6ee:	2301      	movne	r3, #1
 800a6f0:	0692      	lsls	r2, r2, #26
 800a6f2:	d42b      	bmi.n	800a74c <_printf_common+0xb0>
 800a6f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a6f8:	4641      	mov	r1, r8
 800a6fa:	4638      	mov	r0, r7
 800a6fc:	47c8      	blx	r9
 800a6fe:	3001      	adds	r0, #1
 800a700:	d01e      	beq.n	800a740 <_printf_common+0xa4>
 800a702:	6823      	ldr	r3, [r4, #0]
 800a704:	6922      	ldr	r2, [r4, #16]
 800a706:	f003 0306 	and.w	r3, r3, #6
 800a70a:	2b04      	cmp	r3, #4
 800a70c:	bf02      	ittt	eq
 800a70e:	68e5      	ldreq	r5, [r4, #12]
 800a710:	6833      	ldreq	r3, [r6, #0]
 800a712:	1aed      	subeq	r5, r5, r3
 800a714:	68a3      	ldr	r3, [r4, #8]
 800a716:	bf0c      	ite	eq
 800a718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a71c:	2500      	movne	r5, #0
 800a71e:	4293      	cmp	r3, r2
 800a720:	bfc4      	itt	gt
 800a722:	1a9b      	subgt	r3, r3, r2
 800a724:	18ed      	addgt	r5, r5, r3
 800a726:	2600      	movs	r6, #0
 800a728:	341a      	adds	r4, #26
 800a72a:	42b5      	cmp	r5, r6
 800a72c:	d11a      	bne.n	800a764 <_printf_common+0xc8>
 800a72e:	2000      	movs	r0, #0
 800a730:	e008      	b.n	800a744 <_printf_common+0xa8>
 800a732:	2301      	movs	r3, #1
 800a734:	4652      	mov	r2, sl
 800a736:	4641      	mov	r1, r8
 800a738:	4638      	mov	r0, r7
 800a73a:	47c8      	blx	r9
 800a73c:	3001      	adds	r0, #1
 800a73e:	d103      	bne.n	800a748 <_printf_common+0xac>
 800a740:	f04f 30ff 	mov.w	r0, #4294967295
 800a744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a748:	3501      	adds	r5, #1
 800a74a:	e7c6      	b.n	800a6da <_printf_common+0x3e>
 800a74c:	18e1      	adds	r1, r4, r3
 800a74e:	1c5a      	adds	r2, r3, #1
 800a750:	2030      	movs	r0, #48	@ 0x30
 800a752:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a756:	4422      	add	r2, r4
 800a758:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a75c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a760:	3302      	adds	r3, #2
 800a762:	e7c7      	b.n	800a6f4 <_printf_common+0x58>
 800a764:	2301      	movs	r3, #1
 800a766:	4622      	mov	r2, r4
 800a768:	4641      	mov	r1, r8
 800a76a:	4638      	mov	r0, r7
 800a76c:	47c8      	blx	r9
 800a76e:	3001      	adds	r0, #1
 800a770:	d0e6      	beq.n	800a740 <_printf_common+0xa4>
 800a772:	3601      	adds	r6, #1
 800a774:	e7d9      	b.n	800a72a <_printf_common+0x8e>
	...

0800a778 <_printf_i>:
 800a778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a77c:	7e0f      	ldrb	r7, [r1, #24]
 800a77e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a780:	2f78      	cmp	r7, #120	@ 0x78
 800a782:	4691      	mov	r9, r2
 800a784:	4680      	mov	r8, r0
 800a786:	460c      	mov	r4, r1
 800a788:	469a      	mov	sl, r3
 800a78a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a78e:	d807      	bhi.n	800a7a0 <_printf_i+0x28>
 800a790:	2f62      	cmp	r7, #98	@ 0x62
 800a792:	d80a      	bhi.n	800a7aa <_printf_i+0x32>
 800a794:	2f00      	cmp	r7, #0
 800a796:	f000 80d1 	beq.w	800a93c <_printf_i+0x1c4>
 800a79a:	2f58      	cmp	r7, #88	@ 0x58
 800a79c:	f000 80b8 	beq.w	800a910 <_printf_i+0x198>
 800a7a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a7a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a7a8:	e03a      	b.n	800a820 <_printf_i+0xa8>
 800a7aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a7ae:	2b15      	cmp	r3, #21
 800a7b0:	d8f6      	bhi.n	800a7a0 <_printf_i+0x28>
 800a7b2:	a101      	add	r1, pc, #4	@ (adr r1, 800a7b8 <_printf_i+0x40>)
 800a7b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7b8:	0800a811 	.word	0x0800a811
 800a7bc:	0800a825 	.word	0x0800a825
 800a7c0:	0800a7a1 	.word	0x0800a7a1
 800a7c4:	0800a7a1 	.word	0x0800a7a1
 800a7c8:	0800a7a1 	.word	0x0800a7a1
 800a7cc:	0800a7a1 	.word	0x0800a7a1
 800a7d0:	0800a825 	.word	0x0800a825
 800a7d4:	0800a7a1 	.word	0x0800a7a1
 800a7d8:	0800a7a1 	.word	0x0800a7a1
 800a7dc:	0800a7a1 	.word	0x0800a7a1
 800a7e0:	0800a7a1 	.word	0x0800a7a1
 800a7e4:	0800a923 	.word	0x0800a923
 800a7e8:	0800a84f 	.word	0x0800a84f
 800a7ec:	0800a8dd 	.word	0x0800a8dd
 800a7f0:	0800a7a1 	.word	0x0800a7a1
 800a7f4:	0800a7a1 	.word	0x0800a7a1
 800a7f8:	0800a945 	.word	0x0800a945
 800a7fc:	0800a7a1 	.word	0x0800a7a1
 800a800:	0800a84f 	.word	0x0800a84f
 800a804:	0800a7a1 	.word	0x0800a7a1
 800a808:	0800a7a1 	.word	0x0800a7a1
 800a80c:	0800a8e5 	.word	0x0800a8e5
 800a810:	6833      	ldr	r3, [r6, #0]
 800a812:	1d1a      	adds	r2, r3, #4
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	6032      	str	r2, [r6, #0]
 800a818:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a81c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a820:	2301      	movs	r3, #1
 800a822:	e09c      	b.n	800a95e <_printf_i+0x1e6>
 800a824:	6833      	ldr	r3, [r6, #0]
 800a826:	6820      	ldr	r0, [r4, #0]
 800a828:	1d19      	adds	r1, r3, #4
 800a82a:	6031      	str	r1, [r6, #0]
 800a82c:	0606      	lsls	r6, r0, #24
 800a82e:	d501      	bpl.n	800a834 <_printf_i+0xbc>
 800a830:	681d      	ldr	r5, [r3, #0]
 800a832:	e003      	b.n	800a83c <_printf_i+0xc4>
 800a834:	0645      	lsls	r5, r0, #25
 800a836:	d5fb      	bpl.n	800a830 <_printf_i+0xb8>
 800a838:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a83c:	2d00      	cmp	r5, #0
 800a83e:	da03      	bge.n	800a848 <_printf_i+0xd0>
 800a840:	232d      	movs	r3, #45	@ 0x2d
 800a842:	426d      	negs	r5, r5
 800a844:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a848:	4858      	ldr	r0, [pc, #352]	@ (800a9ac <_printf_i+0x234>)
 800a84a:	230a      	movs	r3, #10
 800a84c:	e011      	b.n	800a872 <_printf_i+0xfa>
 800a84e:	6821      	ldr	r1, [r4, #0]
 800a850:	6833      	ldr	r3, [r6, #0]
 800a852:	0608      	lsls	r0, r1, #24
 800a854:	f853 5b04 	ldr.w	r5, [r3], #4
 800a858:	d402      	bmi.n	800a860 <_printf_i+0xe8>
 800a85a:	0649      	lsls	r1, r1, #25
 800a85c:	bf48      	it	mi
 800a85e:	b2ad      	uxthmi	r5, r5
 800a860:	2f6f      	cmp	r7, #111	@ 0x6f
 800a862:	4852      	ldr	r0, [pc, #328]	@ (800a9ac <_printf_i+0x234>)
 800a864:	6033      	str	r3, [r6, #0]
 800a866:	bf14      	ite	ne
 800a868:	230a      	movne	r3, #10
 800a86a:	2308      	moveq	r3, #8
 800a86c:	2100      	movs	r1, #0
 800a86e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a872:	6866      	ldr	r6, [r4, #4]
 800a874:	60a6      	str	r6, [r4, #8]
 800a876:	2e00      	cmp	r6, #0
 800a878:	db05      	blt.n	800a886 <_printf_i+0x10e>
 800a87a:	6821      	ldr	r1, [r4, #0]
 800a87c:	432e      	orrs	r6, r5
 800a87e:	f021 0104 	bic.w	r1, r1, #4
 800a882:	6021      	str	r1, [r4, #0]
 800a884:	d04b      	beq.n	800a91e <_printf_i+0x1a6>
 800a886:	4616      	mov	r6, r2
 800a888:	fbb5 f1f3 	udiv	r1, r5, r3
 800a88c:	fb03 5711 	mls	r7, r3, r1, r5
 800a890:	5dc7      	ldrb	r7, [r0, r7]
 800a892:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a896:	462f      	mov	r7, r5
 800a898:	42bb      	cmp	r3, r7
 800a89a:	460d      	mov	r5, r1
 800a89c:	d9f4      	bls.n	800a888 <_printf_i+0x110>
 800a89e:	2b08      	cmp	r3, #8
 800a8a0:	d10b      	bne.n	800a8ba <_printf_i+0x142>
 800a8a2:	6823      	ldr	r3, [r4, #0]
 800a8a4:	07df      	lsls	r7, r3, #31
 800a8a6:	d508      	bpl.n	800a8ba <_printf_i+0x142>
 800a8a8:	6923      	ldr	r3, [r4, #16]
 800a8aa:	6861      	ldr	r1, [r4, #4]
 800a8ac:	4299      	cmp	r1, r3
 800a8ae:	bfde      	ittt	le
 800a8b0:	2330      	movle	r3, #48	@ 0x30
 800a8b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a8b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a8ba:	1b92      	subs	r2, r2, r6
 800a8bc:	6122      	str	r2, [r4, #16]
 800a8be:	f8cd a000 	str.w	sl, [sp]
 800a8c2:	464b      	mov	r3, r9
 800a8c4:	aa03      	add	r2, sp, #12
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	4640      	mov	r0, r8
 800a8ca:	f7ff fee7 	bl	800a69c <_printf_common>
 800a8ce:	3001      	adds	r0, #1
 800a8d0:	d14a      	bne.n	800a968 <_printf_i+0x1f0>
 800a8d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d6:	b004      	add	sp, #16
 800a8d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8dc:	6823      	ldr	r3, [r4, #0]
 800a8de:	f043 0320 	orr.w	r3, r3, #32
 800a8e2:	6023      	str	r3, [r4, #0]
 800a8e4:	4832      	ldr	r0, [pc, #200]	@ (800a9b0 <_printf_i+0x238>)
 800a8e6:	2778      	movs	r7, #120	@ 0x78
 800a8e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a8ec:	6823      	ldr	r3, [r4, #0]
 800a8ee:	6831      	ldr	r1, [r6, #0]
 800a8f0:	061f      	lsls	r7, r3, #24
 800a8f2:	f851 5b04 	ldr.w	r5, [r1], #4
 800a8f6:	d402      	bmi.n	800a8fe <_printf_i+0x186>
 800a8f8:	065f      	lsls	r7, r3, #25
 800a8fa:	bf48      	it	mi
 800a8fc:	b2ad      	uxthmi	r5, r5
 800a8fe:	6031      	str	r1, [r6, #0]
 800a900:	07d9      	lsls	r1, r3, #31
 800a902:	bf44      	itt	mi
 800a904:	f043 0320 	orrmi.w	r3, r3, #32
 800a908:	6023      	strmi	r3, [r4, #0]
 800a90a:	b11d      	cbz	r5, 800a914 <_printf_i+0x19c>
 800a90c:	2310      	movs	r3, #16
 800a90e:	e7ad      	b.n	800a86c <_printf_i+0xf4>
 800a910:	4826      	ldr	r0, [pc, #152]	@ (800a9ac <_printf_i+0x234>)
 800a912:	e7e9      	b.n	800a8e8 <_printf_i+0x170>
 800a914:	6823      	ldr	r3, [r4, #0]
 800a916:	f023 0320 	bic.w	r3, r3, #32
 800a91a:	6023      	str	r3, [r4, #0]
 800a91c:	e7f6      	b.n	800a90c <_printf_i+0x194>
 800a91e:	4616      	mov	r6, r2
 800a920:	e7bd      	b.n	800a89e <_printf_i+0x126>
 800a922:	6833      	ldr	r3, [r6, #0]
 800a924:	6825      	ldr	r5, [r4, #0]
 800a926:	6961      	ldr	r1, [r4, #20]
 800a928:	1d18      	adds	r0, r3, #4
 800a92a:	6030      	str	r0, [r6, #0]
 800a92c:	062e      	lsls	r6, r5, #24
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	d501      	bpl.n	800a936 <_printf_i+0x1be>
 800a932:	6019      	str	r1, [r3, #0]
 800a934:	e002      	b.n	800a93c <_printf_i+0x1c4>
 800a936:	0668      	lsls	r0, r5, #25
 800a938:	d5fb      	bpl.n	800a932 <_printf_i+0x1ba>
 800a93a:	8019      	strh	r1, [r3, #0]
 800a93c:	2300      	movs	r3, #0
 800a93e:	6123      	str	r3, [r4, #16]
 800a940:	4616      	mov	r6, r2
 800a942:	e7bc      	b.n	800a8be <_printf_i+0x146>
 800a944:	6833      	ldr	r3, [r6, #0]
 800a946:	1d1a      	adds	r2, r3, #4
 800a948:	6032      	str	r2, [r6, #0]
 800a94a:	681e      	ldr	r6, [r3, #0]
 800a94c:	6862      	ldr	r2, [r4, #4]
 800a94e:	2100      	movs	r1, #0
 800a950:	4630      	mov	r0, r6
 800a952:	f7f5 fc3d 	bl	80001d0 <memchr>
 800a956:	b108      	cbz	r0, 800a95c <_printf_i+0x1e4>
 800a958:	1b80      	subs	r0, r0, r6
 800a95a:	6060      	str	r0, [r4, #4]
 800a95c:	6863      	ldr	r3, [r4, #4]
 800a95e:	6123      	str	r3, [r4, #16]
 800a960:	2300      	movs	r3, #0
 800a962:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a966:	e7aa      	b.n	800a8be <_printf_i+0x146>
 800a968:	6923      	ldr	r3, [r4, #16]
 800a96a:	4632      	mov	r2, r6
 800a96c:	4649      	mov	r1, r9
 800a96e:	4640      	mov	r0, r8
 800a970:	47d0      	blx	sl
 800a972:	3001      	adds	r0, #1
 800a974:	d0ad      	beq.n	800a8d2 <_printf_i+0x15a>
 800a976:	6823      	ldr	r3, [r4, #0]
 800a978:	079b      	lsls	r3, r3, #30
 800a97a:	d413      	bmi.n	800a9a4 <_printf_i+0x22c>
 800a97c:	68e0      	ldr	r0, [r4, #12]
 800a97e:	9b03      	ldr	r3, [sp, #12]
 800a980:	4298      	cmp	r0, r3
 800a982:	bfb8      	it	lt
 800a984:	4618      	movlt	r0, r3
 800a986:	e7a6      	b.n	800a8d6 <_printf_i+0x15e>
 800a988:	2301      	movs	r3, #1
 800a98a:	4632      	mov	r2, r6
 800a98c:	4649      	mov	r1, r9
 800a98e:	4640      	mov	r0, r8
 800a990:	47d0      	blx	sl
 800a992:	3001      	adds	r0, #1
 800a994:	d09d      	beq.n	800a8d2 <_printf_i+0x15a>
 800a996:	3501      	adds	r5, #1
 800a998:	68e3      	ldr	r3, [r4, #12]
 800a99a:	9903      	ldr	r1, [sp, #12]
 800a99c:	1a5b      	subs	r3, r3, r1
 800a99e:	42ab      	cmp	r3, r5
 800a9a0:	dcf2      	bgt.n	800a988 <_printf_i+0x210>
 800a9a2:	e7eb      	b.n	800a97c <_printf_i+0x204>
 800a9a4:	2500      	movs	r5, #0
 800a9a6:	f104 0619 	add.w	r6, r4, #25
 800a9aa:	e7f5      	b.n	800a998 <_printf_i+0x220>
 800a9ac:	0800e0de 	.word	0x0800e0de
 800a9b0:	0800e0ef 	.word	0x0800e0ef

0800a9b4 <std>:
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	b510      	push	{r4, lr}
 800a9b8:	4604      	mov	r4, r0
 800a9ba:	e9c0 3300 	strd	r3, r3, [r0]
 800a9be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9c2:	6083      	str	r3, [r0, #8]
 800a9c4:	8181      	strh	r1, [r0, #12]
 800a9c6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a9c8:	81c2      	strh	r2, [r0, #14]
 800a9ca:	6183      	str	r3, [r0, #24]
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	2208      	movs	r2, #8
 800a9d0:	305c      	adds	r0, #92	@ 0x5c
 800a9d2:	f000 fa35 	bl	800ae40 <memset>
 800a9d6:	4b0d      	ldr	r3, [pc, #52]	@ (800aa0c <std+0x58>)
 800a9d8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a9da:	4b0d      	ldr	r3, [pc, #52]	@ (800aa10 <std+0x5c>)
 800a9dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a9de:	4b0d      	ldr	r3, [pc, #52]	@ (800aa14 <std+0x60>)
 800a9e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a9e2:	4b0d      	ldr	r3, [pc, #52]	@ (800aa18 <std+0x64>)
 800a9e4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a9e6:	4b0d      	ldr	r3, [pc, #52]	@ (800aa1c <std+0x68>)
 800a9e8:	6224      	str	r4, [r4, #32]
 800a9ea:	429c      	cmp	r4, r3
 800a9ec:	d006      	beq.n	800a9fc <std+0x48>
 800a9ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a9f2:	4294      	cmp	r4, r2
 800a9f4:	d002      	beq.n	800a9fc <std+0x48>
 800a9f6:	33d0      	adds	r3, #208	@ 0xd0
 800a9f8:	429c      	cmp	r4, r3
 800a9fa:	d105      	bne.n	800aa08 <std+0x54>
 800a9fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aa00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa04:	f000 ba98 	b.w	800af38 <__retarget_lock_init_recursive>
 800aa08:	bd10      	pop	{r4, pc}
 800aa0a:	bf00      	nop
 800aa0c:	0800ac19 	.word	0x0800ac19
 800aa10:	0800ac3b 	.word	0x0800ac3b
 800aa14:	0800ac73 	.word	0x0800ac73
 800aa18:	0800ac97 	.word	0x0800ac97
 800aa1c:	20000d24 	.word	0x20000d24

0800aa20 <stdio_exit_handler>:
 800aa20:	4a02      	ldr	r2, [pc, #8]	@ (800aa2c <stdio_exit_handler+0xc>)
 800aa22:	4903      	ldr	r1, [pc, #12]	@ (800aa30 <stdio_exit_handler+0x10>)
 800aa24:	4803      	ldr	r0, [pc, #12]	@ (800aa34 <stdio_exit_handler+0x14>)
 800aa26:	f000 b869 	b.w	800aafc <_fwalk_sglue>
 800aa2a:	bf00      	nop
 800aa2c:	20000050 	.word	0x20000050
 800aa30:	0800cb21 	.word	0x0800cb21
 800aa34:	20000060 	.word	0x20000060

0800aa38 <cleanup_stdio>:
 800aa38:	6841      	ldr	r1, [r0, #4]
 800aa3a:	4b0c      	ldr	r3, [pc, #48]	@ (800aa6c <cleanup_stdio+0x34>)
 800aa3c:	4299      	cmp	r1, r3
 800aa3e:	b510      	push	{r4, lr}
 800aa40:	4604      	mov	r4, r0
 800aa42:	d001      	beq.n	800aa48 <cleanup_stdio+0x10>
 800aa44:	f002 f86c 	bl	800cb20 <_fflush_r>
 800aa48:	68a1      	ldr	r1, [r4, #8]
 800aa4a:	4b09      	ldr	r3, [pc, #36]	@ (800aa70 <cleanup_stdio+0x38>)
 800aa4c:	4299      	cmp	r1, r3
 800aa4e:	d002      	beq.n	800aa56 <cleanup_stdio+0x1e>
 800aa50:	4620      	mov	r0, r4
 800aa52:	f002 f865 	bl	800cb20 <_fflush_r>
 800aa56:	68e1      	ldr	r1, [r4, #12]
 800aa58:	4b06      	ldr	r3, [pc, #24]	@ (800aa74 <cleanup_stdio+0x3c>)
 800aa5a:	4299      	cmp	r1, r3
 800aa5c:	d004      	beq.n	800aa68 <cleanup_stdio+0x30>
 800aa5e:	4620      	mov	r0, r4
 800aa60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa64:	f002 b85c 	b.w	800cb20 <_fflush_r>
 800aa68:	bd10      	pop	{r4, pc}
 800aa6a:	bf00      	nop
 800aa6c:	20000d24 	.word	0x20000d24
 800aa70:	20000d8c 	.word	0x20000d8c
 800aa74:	20000df4 	.word	0x20000df4

0800aa78 <global_stdio_init.part.0>:
 800aa78:	b510      	push	{r4, lr}
 800aa7a:	4b0b      	ldr	r3, [pc, #44]	@ (800aaa8 <global_stdio_init.part.0+0x30>)
 800aa7c:	4c0b      	ldr	r4, [pc, #44]	@ (800aaac <global_stdio_init.part.0+0x34>)
 800aa7e:	4a0c      	ldr	r2, [pc, #48]	@ (800aab0 <global_stdio_init.part.0+0x38>)
 800aa80:	601a      	str	r2, [r3, #0]
 800aa82:	4620      	mov	r0, r4
 800aa84:	2200      	movs	r2, #0
 800aa86:	2104      	movs	r1, #4
 800aa88:	f7ff ff94 	bl	800a9b4 <std>
 800aa8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aa90:	2201      	movs	r2, #1
 800aa92:	2109      	movs	r1, #9
 800aa94:	f7ff ff8e 	bl	800a9b4 <std>
 800aa98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aa9c:	2202      	movs	r2, #2
 800aa9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaa2:	2112      	movs	r1, #18
 800aaa4:	f7ff bf86 	b.w	800a9b4 <std>
 800aaa8:	20000e5c 	.word	0x20000e5c
 800aaac:	20000d24 	.word	0x20000d24
 800aab0:	0800aa21 	.word	0x0800aa21

0800aab4 <__sfp_lock_acquire>:
 800aab4:	4801      	ldr	r0, [pc, #4]	@ (800aabc <__sfp_lock_acquire+0x8>)
 800aab6:	f000 ba40 	b.w	800af3a <__retarget_lock_acquire_recursive>
 800aaba:	bf00      	nop
 800aabc:	20000e65 	.word	0x20000e65

0800aac0 <__sfp_lock_release>:
 800aac0:	4801      	ldr	r0, [pc, #4]	@ (800aac8 <__sfp_lock_release+0x8>)
 800aac2:	f000 ba3b 	b.w	800af3c <__retarget_lock_release_recursive>
 800aac6:	bf00      	nop
 800aac8:	20000e65 	.word	0x20000e65

0800aacc <__sinit>:
 800aacc:	b510      	push	{r4, lr}
 800aace:	4604      	mov	r4, r0
 800aad0:	f7ff fff0 	bl	800aab4 <__sfp_lock_acquire>
 800aad4:	6a23      	ldr	r3, [r4, #32]
 800aad6:	b11b      	cbz	r3, 800aae0 <__sinit+0x14>
 800aad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aadc:	f7ff bff0 	b.w	800aac0 <__sfp_lock_release>
 800aae0:	4b04      	ldr	r3, [pc, #16]	@ (800aaf4 <__sinit+0x28>)
 800aae2:	6223      	str	r3, [r4, #32]
 800aae4:	4b04      	ldr	r3, [pc, #16]	@ (800aaf8 <__sinit+0x2c>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d1f5      	bne.n	800aad8 <__sinit+0xc>
 800aaec:	f7ff ffc4 	bl	800aa78 <global_stdio_init.part.0>
 800aaf0:	e7f2      	b.n	800aad8 <__sinit+0xc>
 800aaf2:	bf00      	nop
 800aaf4:	0800aa39 	.word	0x0800aa39
 800aaf8:	20000e5c 	.word	0x20000e5c

0800aafc <_fwalk_sglue>:
 800aafc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab00:	4607      	mov	r7, r0
 800ab02:	4688      	mov	r8, r1
 800ab04:	4614      	mov	r4, r2
 800ab06:	2600      	movs	r6, #0
 800ab08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab0c:	f1b9 0901 	subs.w	r9, r9, #1
 800ab10:	d505      	bpl.n	800ab1e <_fwalk_sglue+0x22>
 800ab12:	6824      	ldr	r4, [r4, #0]
 800ab14:	2c00      	cmp	r4, #0
 800ab16:	d1f7      	bne.n	800ab08 <_fwalk_sglue+0xc>
 800ab18:	4630      	mov	r0, r6
 800ab1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab1e:	89ab      	ldrh	r3, [r5, #12]
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d907      	bls.n	800ab34 <_fwalk_sglue+0x38>
 800ab24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab28:	3301      	adds	r3, #1
 800ab2a:	d003      	beq.n	800ab34 <_fwalk_sglue+0x38>
 800ab2c:	4629      	mov	r1, r5
 800ab2e:	4638      	mov	r0, r7
 800ab30:	47c0      	blx	r8
 800ab32:	4306      	orrs	r6, r0
 800ab34:	3568      	adds	r5, #104	@ 0x68
 800ab36:	e7e9      	b.n	800ab0c <_fwalk_sglue+0x10>

0800ab38 <iprintf>:
 800ab38:	b40f      	push	{r0, r1, r2, r3}
 800ab3a:	b507      	push	{r0, r1, r2, lr}
 800ab3c:	4906      	ldr	r1, [pc, #24]	@ (800ab58 <iprintf+0x20>)
 800ab3e:	ab04      	add	r3, sp, #16
 800ab40:	6808      	ldr	r0, [r1, #0]
 800ab42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab46:	6881      	ldr	r1, [r0, #8]
 800ab48:	9301      	str	r3, [sp, #4]
 800ab4a:	f001 fe4d 	bl	800c7e8 <_vfiprintf_r>
 800ab4e:	b003      	add	sp, #12
 800ab50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab54:	b004      	add	sp, #16
 800ab56:	4770      	bx	lr
 800ab58:	2000005c 	.word	0x2000005c

0800ab5c <_puts_r>:
 800ab5c:	6a03      	ldr	r3, [r0, #32]
 800ab5e:	b570      	push	{r4, r5, r6, lr}
 800ab60:	6884      	ldr	r4, [r0, #8]
 800ab62:	4605      	mov	r5, r0
 800ab64:	460e      	mov	r6, r1
 800ab66:	b90b      	cbnz	r3, 800ab6c <_puts_r+0x10>
 800ab68:	f7ff ffb0 	bl	800aacc <__sinit>
 800ab6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab6e:	07db      	lsls	r3, r3, #31
 800ab70:	d405      	bmi.n	800ab7e <_puts_r+0x22>
 800ab72:	89a3      	ldrh	r3, [r4, #12]
 800ab74:	0598      	lsls	r0, r3, #22
 800ab76:	d402      	bmi.n	800ab7e <_puts_r+0x22>
 800ab78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab7a:	f000 f9de 	bl	800af3a <__retarget_lock_acquire_recursive>
 800ab7e:	89a3      	ldrh	r3, [r4, #12]
 800ab80:	0719      	lsls	r1, r3, #28
 800ab82:	d502      	bpl.n	800ab8a <_puts_r+0x2e>
 800ab84:	6923      	ldr	r3, [r4, #16]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d135      	bne.n	800abf6 <_puts_r+0x9a>
 800ab8a:	4621      	mov	r1, r4
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	f000 f901 	bl	800ad94 <__swsetup_r>
 800ab92:	b380      	cbz	r0, 800abf6 <_puts_r+0x9a>
 800ab94:	f04f 35ff 	mov.w	r5, #4294967295
 800ab98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab9a:	07da      	lsls	r2, r3, #31
 800ab9c:	d405      	bmi.n	800abaa <_puts_r+0x4e>
 800ab9e:	89a3      	ldrh	r3, [r4, #12]
 800aba0:	059b      	lsls	r3, r3, #22
 800aba2:	d402      	bmi.n	800abaa <_puts_r+0x4e>
 800aba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aba6:	f000 f9c9 	bl	800af3c <__retarget_lock_release_recursive>
 800abaa:	4628      	mov	r0, r5
 800abac:	bd70      	pop	{r4, r5, r6, pc}
 800abae:	2b00      	cmp	r3, #0
 800abb0:	da04      	bge.n	800abbc <_puts_r+0x60>
 800abb2:	69a2      	ldr	r2, [r4, #24]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	dc17      	bgt.n	800abe8 <_puts_r+0x8c>
 800abb8:	290a      	cmp	r1, #10
 800abba:	d015      	beq.n	800abe8 <_puts_r+0x8c>
 800abbc:	6823      	ldr	r3, [r4, #0]
 800abbe:	1c5a      	adds	r2, r3, #1
 800abc0:	6022      	str	r2, [r4, #0]
 800abc2:	7019      	strb	r1, [r3, #0]
 800abc4:	68a3      	ldr	r3, [r4, #8]
 800abc6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800abca:	3b01      	subs	r3, #1
 800abcc:	60a3      	str	r3, [r4, #8]
 800abce:	2900      	cmp	r1, #0
 800abd0:	d1ed      	bne.n	800abae <_puts_r+0x52>
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	da11      	bge.n	800abfa <_puts_r+0x9e>
 800abd6:	4622      	mov	r2, r4
 800abd8:	210a      	movs	r1, #10
 800abda:	4628      	mov	r0, r5
 800abdc:	f000 f89c 	bl	800ad18 <__swbuf_r>
 800abe0:	3001      	adds	r0, #1
 800abe2:	d0d7      	beq.n	800ab94 <_puts_r+0x38>
 800abe4:	250a      	movs	r5, #10
 800abe6:	e7d7      	b.n	800ab98 <_puts_r+0x3c>
 800abe8:	4622      	mov	r2, r4
 800abea:	4628      	mov	r0, r5
 800abec:	f000 f894 	bl	800ad18 <__swbuf_r>
 800abf0:	3001      	adds	r0, #1
 800abf2:	d1e7      	bne.n	800abc4 <_puts_r+0x68>
 800abf4:	e7ce      	b.n	800ab94 <_puts_r+0x38>
 800abf6:	3e01      	subs	r6, #1
 800abf8:	e7e4      	b.n	800abc4 <_puts_r+0x68>
 800abfa:	6823      	ldr	r3, [r4, #0]
 800abfc:	1c5a      	adds	r2, r3, #1
 800abfe:	6022      	str	r2, [r4, #0]
 800ac00:	220a      	movs	r2, #10
 800ac02:	701a      	strb	r2, [r3, #0]
 800ac04:	e7ee      	b.n	800abe4 <_puts_r+0x88>
	...

0800ac08 <puts>:
 800ac08:	4b02      	ldr	r3, [pc, #8]	@ (800ac14 <puts+0xc>)
 800ac0a:	4601      	mov	r1, r0
 800ac0c:	6818      	ldr	r0, [r3, #0]
 800ac0e:	f7ff bfa5 	b.w	800ab5c <_puts_r>
 800ac12:	bf00      	nop
 800ac14:	2000005c 	.word	0x2000005c

0800ac18 <__sread>:
 800ac18:	b510      	push	{r4, lr}
 800ac1a:	460c      	mov	r4, r1
 800ac1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac20:	f000 f93c 	bl	800ae9c <_read_r>
 800ac24:	2800      	cmp	r0, #0
 800ac26:	bfab      	itete	ge
 800ac28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ac2a:	89a3      	ldrhlt	r3, [r4, #12]
 800ac2c:	181b      	addge	r3, r3, r0
 800ac2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ac32:	bfac      	ite	ge
 800ac34:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ac36:	81a3      	strhlt	r3, [r4, #12]
 800ac38:	bd10      	pop	{r4, pc}

0800ac3a <__swrite>:
 800ac3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac3e:	461f      	mov	r7, r3
 800ac40:	898b      	ldrh	r3, [r1, #12]
 800ac42:	05db      	lsls	r3, r3, #23
 800ac44:	4605      	mov	r5, r0
 800ac46:	460c      	mov	r4, r1
 800ac48:	4616      	mov	r6, r2
 800ac4a:	d505      	bpl.n	800ac58 <__swrite+0x1e>
 800ac4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac50:	2302      	movs	r3, #2
 800ac52:	2200      	movs	r2, #0
 800ac54:	f000 f910 	bl	800ae78 <_lseek_r>
 800ac58:	89a3      	ldrh	r3, [r4, #12]
 800ac5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac62:	81a3      	strh	r3, [r4, #12]
 800ac64:	4632      	mov	r2, r6
 800ac66:	463b      	mov	r3, r7
 800ac68:	4628      	mov	r0, r5
 800ac6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac6e:	f000 b927 	b.w	800aec0 <_write_r>

0800ac72 <__sseek>:
 800ac72:	b510      	push	{r4, lr}
 800ac74:	460c      	mov	r4, r1
 800ac76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac7a:	f000 f8fd 	bl	800ae78 <_lseek_r>
 800ac7e:	1c43      	adds	r3, r0, #1
 800ac80:	89a3      	ldrh	r3, [r4, #12]
 800ac82:	bf15      	itete	ne
 800ac84:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ac86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ac8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ac8e:	81a3      	strheq	r3, [r4, #12]
 800ac90:	bf18      	it	ne
 800ac92:	81a3      	strhne	r3, [r4, #12]
 800ac94:	bd10      	pop	{r4, pc}

0800ac96 <__sclose>:
 800ac96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac9a:	f000 b8dd 	b.w	800ae58 <_close_r>

0800ac9e <_vsniprintf_r>:
 800ac9e:	b530      	push	{r4, r5, lr}
 800aca0:	4614      	mov	r4, r2
 800aca2:	2c00      	cmp	r4, #0
 800aca4:	b09b      	sub	sp, #108	@ 0x6c
 800aca6:	4605      	mov	r5, r0
 800aca8:	461a      	mov	r2, r3
 800acaa:	da05      	bge.n	800acb8 <_vsniprintf_r+0x1a>
 800acac:	238b      	movs	r3, #139	@ 0x8b
 800acae:	6003      	str	r3, [r0, #0]
 800acb0:	f04f 30ff 	mov.w	r0, #4294967295
 800acb4:	b01b      	add	sp, #108	@ 0x6c
 800acb6:	bd30      	pop	{r4, r5, pc}
 800acb8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800acbc:	f8ad 300c 	strh.w	r3, [sp, #12]
 800acc0:	f04f 0300 	mov.w	r3, #0
 800acc4:	9319      	str	r3, [sp, #100]	@ 0x64
 800acc6:	bf14      	ite	ne
 800acc8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800accc:	4623      	moveq	r3, r4
 800acce:	9302      	str	r3, [sp, #8]
 800acd0:	9305      	str	r3, [sp, #20]
 800acd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800acd6:	9100      	str	r1, [sp, #0]
 800acd8:	9104      	str	r1, [sp, #16]
 800acda:	f8ad 300e 	strh.w	r3, [sp, #14]
 800acde:	4669      	mov	r1, sp
 800ace0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ace2:	f001 fc5b 	bl	800c59c <_svfiprintf_r>
 800ace6:	1c43      	adds	r3, r0, #1
 800ace8:	bfbc      	itt	lt
 800acea:	238b      	movlt	r3, #139	@ 0x8b
 800acec:	602b      	strlt	r3, [r5, #0]
 800acee:	2c00      	cmp	r4, #0
 800acf0:	d0e0      	beq.n	800acb4 <_vsniprintf_r+0x16>
 800acf2:	9b00      	ldr	r3, [sp, #0]
 800acf4:	2200      	movs	r2, #0
 800acf6:	701a      	strb	r2, [r3, #0]
 800acf8:	e7dc      	b.n	800acb4 <_vsniprintf_r+0x16>
	...

0800acfc <vsniprintf>:
 800acfc:	b507      	push	{r0, r1, r2, lr}
 800acfe:	9300      	str	r3, [sp, #0]
 800ad00:	4613      	mov	r3, r2
 800ad02:	460a      	mov	r2, r1
 800ad04:	4601      	mov	r1, r0
 800ad06:	4803      	ldr	r0, [pc, #12]	@ (800ad14 <vsniprintf+0x18>)
 800ad08:	6800      	ldr	r0, [r0, #0]
 800ad0a:	f7ff ffc8 	bl	800ac9e <_vsniprintf_r>
 800ad0e:	b003      	add	sp, #12
 800ad10:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad14:	2000005c 	.word	0x2000005c

0800ad18 <__swbuf_r>:
 800ad18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad1a:	460e      	mov	r6, r1
 800ad1c:	4614      	mov	r4, r2
 800ad1e:	4605      	mov	r5, r0
 800ad20:	b118      	cbz	r0, 800ad2a <__swbuf_r+0x12>
 800ad22:	6a03      	ldr	r3, [r0, #32]
 800ad24:	b90b      	cbnz	r3, 800ad2a <__swbuf_r+0x12>
 800ad26:	f7ff fed1 	bl	800aacc <__sinit>
 800ad2a:	69a3      	ldr	r3, [r4, #24]
 800ad2c:	60a3      	str	r3, [r4, #8]
 800ad2e:	89a3      	ldrh	r3, [r4, #12]
 800ad30:	071a      	lsls	r2, r3, #28
 800ad32:	d501      	bpl.n	800ad38 <__swbuf_r+0x20>
 800ad34:	6923      	ldr	r3, [r4, #16]
 800ad36:	b943      	cbnz	r3, 800ad4a <__swbuf_r+0x32>
 800ad38:	4621      	mov	r1, r4
 800ad3a:	4628      	mov	r0, r5
 800ad3c:	f000 f82a 	bl	800ad94 <__swsetup_r>
 800ad40:	b118      	cbz	r0, 800ad4a <__swbuf_r+0x32>
 800ad42:	f04f 37ff 	mov.w	r7, #4294967295
 800ad46:	4638      	mov	r0, r7
 800ad48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad4a:	6823      	ldr	r3, [r4, #0]
 800ad4c:	6922      	ldr	r2, [r4, #16]
 800ad4e:	1a98      	subs	r0, r3, r2
 800ad50:	6963      	ldr	r3, [r4, #20]
 800ad52:	b2f6      	uxtb	r6, r6
 800ad54:	4283      	cmp	r3, r0
 800ad56:	4637      	mov	r7, r6
 800ad58:	dc05      	bgt.n	800ad66 <__swbuf_r+0x4e>
 800ad5a:	4621      	mov	r1, r4
 800ad5c:	4628      	mov	r0, r5
 800ad5e:	f001 fedf 	bl	800cb20 <_fflush_r>
 800ad62:	2800      	cmp	r0, #0
 800ad64:	d1ed      	bne.n	800ad42 <__swbuf_r+0x2a>
 800ad66:	68a3      	ldr	r3, [r4, #8]
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	60a3      	str	r3, [r4, #8]
 800ad6c:	6823      	ldr	r3, [r4, #0]
 800ad6e:	1c5a      	adds	r2, r3, #1
 800ad70:	6022      	str	r2, [r4, #0]
 800ad72:	701e      	strb	r6, [r3, #0]
 800ad74:	6962      	ldr	r2, [r4, #20]
 800ad76:	1c43      	adds	r3, r0, #1
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d004      	beq.n	800ad86 <__swbuf_r+0x6e>
 800ad7c:	89a3      	ldrh	r3, [r4, #12]
 800ad7e:	07db      	lsls	r3, r3, #31
 800ad80:	d5e1      	bpl.n	800ad46 <__swbuf_r+0x2e>
 800ad82:	2e0a      	cmp	r6, #10
 800ad84:	d1df      	bne.n	800ad46 <__swbuf_r+0x2e>
 800ad86:	4621      	mov	r1, r4
 800ad88:	4628      	mov	r0, r5
 800ad8a:	f001 fec9 	bl	800cb20 <_fflush_r>
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	d0d9      	beq.n	800ad46 <__swbuf_r+0x2e>
 800ad92:	e7d6      	b.n	800ad42 <__swbuf_r+0x2a>

0800ad94 <__swsetup_r>:
 800ad94:	b538      	push	{r3, r4, r5, lr}
 800ad96:	4b29      	ldr	r3, [pc, #164]	@ (800ae3c <__swsetup_r+0xa8>)
 800ad98:	4605      	mov	r5, r0
 800ad9a:	6818      	ldr	r0, [r3, #0]
 800ad9c:	460c      	mov	r4, r1
 800ad9e:	b118      	cbz	r0, 800ada8 <__swsetup_r+0x14>
 800ada0:	6a03      	ldr	r3, [r0, #32]
 800ada2:	b90b      	cbnz	r3, 800ada8 <__swsetup_r+0x14>
 800ada4:	f7ff fe92 	bl	800aacc <__sinit>
 800ada8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adac:	0719      	lsls	r1, r3, #28
 800adae:	d422      	bmi.n	800adf6 <__swsetup_r+0x62>
 800adb0:	06da      	lsls	r2, r3, #27
 800adb2:	d407      	bmi.n	800adc4 <__swsetup_r+0x30>
 800adb4:	2209      	movs	r2, #9
 800adb6:	602a      	str	r2, [r5, #0]
 800adb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adbc:	81a3      	strh	r3, [r4, #12]
 800adbe:	f04f 30ff 	mov.w	r0, #4294967295
 800adc2:	e033      	b.n	800ae2c <__swsetup_r+0x98>
 800adc4:	0758      	lsls	r0, r3, #29
 800adc6:	d512      	bpl.n	800adee <__swsetup_r+0x5a>
 800adc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800adca:	b141      	cbz	r1, 800adde <__swsetup_r+0x4a>
 800adcc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800add0:	4299      	cmp	r1, r3
 800add2:	d002      	beq.n	800adda <__swsetup_r+0x46>
 800add4:	4628      	mov	r0, r5
 800add6:	f000 ff0b 	bl	800bbf0 <_free_r>
 800adda:	2300      	movs	r3, #0
 800addc:	6363      	str	r3, [r4, #52]	@ 0x34
 800adde:	89a3      	ldrh	r3, [r4, #12]
 800ade0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ade4:	81a3      	strh	r3, [r4, #12]
 800ade6:	2300      	movs	r3, #0
 800ade8:	6063      	str	r3, [r4, #4]
 800adea:	6923      	ldr	r3, [r4, #16]
 800adec:	6023      	str	r3, [r4, #0]
 800adee:	89a3      	ldrh	r3, [r4, #12]
 800adf0:	f043 0308 	orr.w	r3, r3, #8
 800adf4:	81a3      	strh	r3, [r4, #12]
 800adf6:	6923      	ldr	r3, [r4, #16]
 800adf8:	b94b      	cbnz	r3, 800ae0e <__swsetup_r+0x7a>
 800adfa:	89a3      	ldrh	r3, [r4, #12]
 800adfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ae00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae04:	d003      	beq.n	800ae0e <__swsetup_r+0x7a>
 800ae06:	4621      	mov	r1, r4
 800ae08:	4628      	mov	r0, r5
 800ae0a:	f001 fed7 	bl	800cbbc <__smakebuf_r>
 800ae0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae12:	f013 0201 	ands.w	r2, r3, #1
 800ae16:	d00a      	beq.n	800ae2e <__swsetup_r+0x9a>
 800ae18:	2200      	movs	r2, #0
 800ae1a:	60a2      	str	r2, [r4, #8]
 800ae1c:	6962      	ldr	r2, [r4, #20]
 800ae1e:	4252      	negs	r2, r2
 800ae20:	61a2      	str	r2, [r4, #24]
 800ae22:	6922      	ldr	r2, [r4, #16]
 800ae24:	b942      	cbnz	r2, 800ae38 <__swsetup_r+0xa4>
 800ae26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ae2a:	d1c5      	bne.n	800adb8 <__swsetup_r+0x24>
 800ae2c:	bd38      	pop	{r3, r4, r5, pc}
 800ae2e:	0799      	lsls	r1, r3, #30
 800ae30:	bf58      	it	pl
 800ae32:	6962      	ldrpl	r2, [r4, #20]
 800ae34:	60a2      	str	r2, [r4, #8]
 800ae36:	e7f4      	b.n	800ae22 <__swsetup_r+0x8e>
 800ae38:	2000      	movs	r0, #0
 800ae3a:	e7f7      	b.n	800ae2c <__swsetup_r+0x98>
 800ae3c:	2000005c 	.word	0x2000005c

0800ae40 <memset>:
 800ae40:	4402      	add	r2, r0
 800ae42:	4603      	mov	r3, r0
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d100      	bne.n	800ae4a <memset+0xa>
 800ae48:	4770      	bx	lr
 800ae4a:	f803 1b01 	strb.w	r1, [r3], #1
 800ae4e:	e7f9      	b.n	800ae44 <memset+0x4>

0800ae50 <_localeconv_r>:
 800ae50:	4800      	ldr	r0, [pc, #0]	@ (800ae54 <_localeconv_r+0x4>)
 800ae52:	4770      	bx	lr
 800ae54:	2000019c 	.word	0x2000019c

0800ae58 <_close_r>:
 800ae58:	b538      	push	{r3, r4, r5, lr}
 800ae5a:	4d06      	ldr	r5, [pc, #24]	@ (800ae74 <_close_r+0x1c>)
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	4604      	mov	r4, r0
 800ae60:	4608      	mov	r0, r1
 800ae62:	602b      	str	r3, [r5, #0]
 800ae64:	f7f8 fc22 	bl	80036ac <_close>
 800ae68:	1c43      	adds	r3, r0, #1
 800ae6a:	d102      	bne.n	800ae72 <_close_r+0x1a>
 800ae6c:	682b      	ldr	r3, [r5, #0]
 800ae6e:	b103      	cbz	r3, 800ae72 <_close_r+0x1a>
 800ae70:	6023      	str	r3, [r4, #0]
 800ae72:	bd38      	pop	{r3, r4, r5, pc}
 800ae74:	20000e60 	.word	0x20000e60

0800ae78 <_lseek_r>:
 800ae78:	b538      	push	{r3, r4, r5, lr}
 800ae7a:	4d07      	ldr	r5, [pc, #28]	@ (800ae98 <_lseek_r+0x20>)
 800ae7c:	4604      	mov	r4, r0
 800ae7e:	4608      	mov	r0, r1
 800ae80:	4611      	mov	r1, r2
 800ae82:	2200      	movs	r2, #0
 800ae84:	602a      	str	r2, [r5, #0]
 800ae86:	461a      	mov	r2, r3
 800ae88:	f7f8 fc37 	bl	80036fa <_lseek>
 800ae8c:	1c43      	adds	r3, r0, #1
 800ae8e:	d102      	bne.n	800ae96 <_lseek_r+0x1e>
 800ae90:	682b      	ldr	r3, [r5, #0]
 800ae92:	b103      	cbz	r3, 800ae96 <_lseek_r+0x1e>
 800ae94:	6023      	str	r3, [r4, #0]
 800ae96:	bd38      	pop	{r3, r4, r5, pc}
 800ae98:	20000e60 	.word	0x20000e60

0800ae9c <_read_r>:
 800ae9c:	b538      	push	{r3, r4, r5, lr}
 800ae9e:	4d07      	ldr	r5, [pc, #28]	@ (800aebc <_read_r+0x20>)
 800aea0:	4604      	mov	r4, r0
 800aea2:	4608      	mov	r0, r1
 800aea4:	4611      	mov	r1, r2
 800aea6:	2200      	movs	r2, #0
 800aea8:	602a      	str	r2, [r5, #0]
 800aeaa:	461a      	mov	r2, r3
 800aeac:	f7f8 fbe1 	bl	8003672 <_read>
 800aeb0:	1c43      	adds	r3, r0, #1
 800aeb2:	d102      	bne.n	800aeba <_read_r+0x1e>
 800aeb4:	682b      	ldr	r3, [r5, #0]
 800aeb6:	b103      	cbz	r3, 800aeba <_read_r+0x1e>
 800aeb8:	6023      	str	r3, [r4, #0]
 800aeba:	bd38      	pop	{r3, r4, r5, pc}
 800aebc:	20000e60 	.word	0x20000e60

0800aec0 <_write_r>:
 800aec0:	b538      	push	{r3, r4, r5, lr}
 800aec2:	4d07      	ldr	r5, [pc, #28]	@ (800aee0 <_write_r+0x20>)
 800aec4:	4604      	mov	r4, r0
 800aec6:	4608      	mov	r0, r1
 800aec8:	4611      	mov	r1, r2
 800aeca:	2200      	movs	r2, #0
 800aecc:	602a      	str	r2, [r5, #0]
 800aece:	461a      	mov	r2, r3
 800aed0:	f7f7 fa3f 	bl	8002352 <_write>
 800aed4:	1c43      	adds	r3, r0, #1
 800aed6:	d102      	bne.n	800aede <_write_r+0x1e>
 800aed8:	682b      	ldr	r3, [r5, #0]
 800aeda:	b103      	cbz	r3, 800aede <_write_r+0x1e>
 800aedc:	6023      	str	r3, [r4, #0]
 800aede:	bd38      	pop	{r3, r4, r5, pc}
 800aee0:	20000e60 	.word	0x20000e60

0800aee4 <__errno>:
 800aee4:	4b01      	ldr	r3, [pc, #4]	@ (800aeec <__errno+0x8>)
 800aee6:	6818      	ldr	r0, [r3, #0]
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	2000005c 	.word	0x2000005c

0800aef0 <__libc_init_array>:
 800aef0:	b570      	push	{r4, r5, r6, lr}
 800aef2:	4d0d      	ldr	r5, [pc, #52]	@ (800af28 <__libc_init_array+0x38>)
 800aef4:	4c0d      	ldr	r4, [pc, #52]	@ (800af2c <__libc_init_array+0x3c>)
 800aef6:	1b64      	subs	r4, r4, r5
 800aef8:	10a4      	asrs	r4, r4, #2
 800aefa:	2600      	movs	r6, #0
 800aefc:	42a6      	cmp	r6, r4
 800aefe:	d109      	bne.n	800af14 <__libc_init_array+0x24>
 800af00:	4d0b      	ldr	r5, [pc, #44]	@ (800af30 <__libc_init_array+0x40>)
 800af02:	4c0c      	ldr	r4, [pc, #48]	@ (800af34 <__libc_init_array+0x44>)
 800af04:	f002 ff36 	bl	800dd74 <_init>
 800af08:	1b64      	subs	r4, r4, r5
 800af0a:	10a4      	asrs	r4, r4, #2
 800af0c:	2600      	movs	r6, #0
 800af0e:	42a6      	cmp	r6, r4
 800af10:	d105      	bne.n	800af1e <__libc_init_array+0x2e>
 800af12:	bd70      	pop	{r4, r5, r6, pc}
 800af14:	f855 3b04 	ldr.w	r3, [r5], #4
 800af18:	4798      	blx	r3
 800af1a:	3601      	adds	r6, #1
 800af1c:	e7ee      	b.n	800aefc <__libc_init_array+0xc>
 800af1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800af22:	4798      	blx	r3
 800af24:	3601      	adds	r6, #1
 800af26:	e7f2      	b.n	800af0e <__libc_init_array+0x1e>
 800af28:	0800e490 	.word	0x0800e490
 800af2c:	0800e490 	.word	0x0800e490
 800af30:	0800e490 	.word	0x0800e490
 800af34:	0800e494 	.word	0x0800e494

0800af38 <__retarget_lock_init_recursive>:
 800af38:	4770      	bx	lr

0800af3a <__retarget_lock_acquire_recursive>:
 800af3a:	4770      	bx	lr

0800af3c <__retarget_lock_release_recursive>:
 800af3c:	4770      	bx	lr

0800af3e <quorem>:
 800af3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af42:	6903      	ldr	r3, [r0, #16]
 800af44:	690c      	ldr	r4, [r1, #16]
 800af46:	42a3      	cmp	r3, r4
 800af48:	4607      	mov	r7, r0
 800af4a:	db7e      	blt.n	800b04a <quorem+0x10c>
 800af4c:	3c01      	subs	r4, #1
 800af4e:	f101 0814 	add.w	r8, r1, #20
 800af52:	00a3      	lsls	r3, r4, #2
 800af54:	f100 0514 	add.w	r5, r0, #20
 800af58:	9300      	str	r3, [sp, #0]
 800af5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af5e:	9301      	str	r3, [sp, #4]
 800af60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af68:	3301      	adds	r3, #1
 800af6a:	429a      	cmp	r2, r3
 800af6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af70:	fbb2 f6f3 	udiv	r6, r2, r3
 800af74:	d32e      	bcc.n	800afd4 <quorem+0x96>
 800af76:	f04f 0a00 	mov.w	sl, #0
 800af7a:	46c4      	mov	ip, r8
 800af7c:	46ae      	mov	lr, r5
 800af7e:	46d3      	mov	fp, sl
 800af80:	f85c 3b04 	ldr.w	r3, [ip], #4
 800af84:	b298      	uxth	r0, r3
 800af86:	fb06 a000 	mla	r0, r6, r0, sl
 800af8a:	0c02      	lsrs	r2, r0, #16
 800af8c:	0c1b      	lsrs	r3, r3, #16
 800af8e:	fb06 2303 	mla	r3, r6, r3, r2
 800af92:	f8de 2000 	ldr.w	r2, [lr]
 800af96:	b280      	uxth	r0, r0
 800af98:	b292      	uxth	r2, r2
 800af9a:	1a12      	subs	r2, r2, r0
 800af9c:	445a      	add	r2, fp
 800af9e:	f8de 0000 	ldr.w	r0, [lr]
 800afa2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800afac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800afb0:	b292      	uxth	r2, r2
 800afb2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800afb6:	45e1      	cmp	r9, ip
 800afb8:	f84e 2b04 	str.w	r2, [lr], #4
 800afbc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800afc0:	d2de      	bcs.n	800af80 <quorem+0x42>
 800afc2:	9b00      	ldr	r3, [sp, #0]
 800afc4:	58eb      	ldr	r3, [r5, r3]
 800afc6:	b92b      	cbnz	r3, 800afd4 <quorem+0x96>
 800afc8:	9b01      	ldr	r3, [sp, #4]
 800afca:	3b04      	subs	r3, #4
 800afcc:	429d      	cmp	r5, r3
 800afce:	461a      	mov	r2, r3
 800afd0:	d32f      	bcc.n	800b032 <quorem+0xf4>
 800afd2:	613c      	str	r4, [r7, #16]
 800afd4:	4638      	mov	r0, r7
 800afd6:	f001 f97d 	bl	800c2d4 <__mcmp>
 800afda:	2800      	cmp	r0, #0
 800afdc:	db25      	blt.n	800b02a <quorem+0xec>
 800afde:	4629      	mov	r1, r5
 800afe0:	2000      	movs	r0, #0
 800afe2:	f858 2b04 	ldr.w	r2, [r8], #4
 800afe6:	f8d1 c000 	ldr.w	ip, [r1]
 800afea:	fa1f fe82 	uxth.w	lr, r2
 800afee:	fa1f f38c 	uxth.w	r3, ip
 800aff2:	eba3 030e 	sub.w	r3, r3, lr
 800aff6:	4403      	add	r3, r0
 800aff8:	0c12      	lsrs	r2, r2, #16
 800affa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800affe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b002:	b29b      	uxth	r3, r3
 800b004:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b008:	45c1      	cmp	r9, r8
 800b00a:	f841 3b04 	str.w	r3, [r1], #4
 800b00e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b012:	d2e6      	bcs.n	800afe2 <quorem+0xa4>
 800b014:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b018:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b01c:	b922      	cbnz	r2, 800b028 <quorem+0xea>
 800b01e:	3b04      	subs	r3, #4
 800b020:	429d      	cmp	r5, r3
 800b022:	461a      	mov	r2, r3
 800b024:	d30b      	bcc.n	800b03e <quorem+0x100>
 800b026:	613c      	str	r4, [r7, #16]
 800b028:	3601      	adds	r6, #1
 800b02a:	4630      	mov	r0, r6
 800b02c:	b003      	add	sp, #12
 800b02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b032:	6812      	ldr	r2, [r2, #0]
 800b034:	3b04      	subs	r3, #4
 800b036:	2a00      	cmp	r2, #0
 800b038:	d1cb      	bne.n	800afd2 <quorem+0x94>
 800b03a:	3c01      	subs	r4, #1
 800b03c:	e7c6      	b.n	800afcc <quorem+0x8e>
 800b03e:	6812      	ldr	r2, [r2, #0]
 800b040:	3b04      	subs	r3, #4
 800b042:	2a00      	cmp	r2, #0
 800b044:	d1ef      	bne.n	800b026 <quorem+0xe8>
 800b046:	3c01      	subs	r4, #1
 800b048:	e7ea      	b.n	800b020 <quorem+0xe2>
 800b04a:	2000      	movs	r0, #0
 800b04c:	e7ee      	b.n	800b02c <quorem+0xee>
	...

0800b050 <_dtoa_r>:
 800b050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b054:	69c7      	ldr	r7, [r0, #28]
 800b056:	b097      	sub	sp, #92	@ 0x5c
 800b058:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b05c:	ec55 4b10 	vmov	r4, r5, d0
 800b060:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b062:	9107      	str	r1, [sp, #28]
 800b064:	4681      	mov	r9, r0
 800b066:	920c      	str	r2, [sp, #48]	@ 0x30
 800b068:	9311      	str	r3, [sp, #68]	@ 0x44
 800b06a:	b97f      	cbnz	r7, 800b08c <_dtoa_r+0x3c>
 800b06c:	2010      	movs	r0, #16
 800b06e:	f000 fe09 	bl	800bc84 <malloc>
 800b072:	4602      	mov	r2, r0
 800b074:	f8c9 001c 	str.w	r0, [r9, #28]
 800b078:	b920      	cbnz	r0, 800b084 <_dtoa_r+0x34>
 800b07a:	4ba9      	ldr	r3, [pc, #676]	@ (800b320 <_dtoa_r+0x2d0>)
 800b07c:	21ef      	movs	r1, #239	@ 0xef
 800b07e:	48a9      	ldr	r0, [pc, #676]	@ (800b324 <_dtoa_r+0x2d4>)
 800b080:	f001 fe32 	bl	800cce8 <__assert_func>
 800b084:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b088:	6007      	str	r7, [r0, #0]
 800b08a:	60c7      	str	r7, [r0, #12]
 800b08c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b090:	6819      	ldr	r1, [r3, #0]
 800b092:	b159      	cbz	r1, 800b0ac <_dtoa_r+0x5c>
 800b094:	685a      	ldr	r2, [r3, #4]
 800b096:	604a      	str	r2, [r1, #4]
 800b098:	2301      	movs	r3, #1
 800b09a:	4093      	lsls	r3, r2
 800b09c:	608b      	str	r3, [r1, #8]
 800b09e:	4648      	mov	r0, r9
 800b0a0:	f000 fee6 	bl	800be70 <_Bfree>
 800b0a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	601a      	str	r2, [r3, #0]
 800b0ac:	1e2b      	subs	r3, r5, #0
 800b0ae:	bfb9      	ittee	lt
 800b0b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b0b4:	9305      	strlt	r3, [sp, #20]
 800b0b6:	2300      	movge	r3, #0
 800b0b8:	6033      	strge	r3, [r6, #0]
 800b0ba:	9f05      	ldr	r7, [sp, #20]
 800b0bc:	4b9a      	ldr	r3, [pc, #616]	@ (800b328 <_dtoa_r+0x2d8>)
 800b0be:	bfbc      	itt	lt
 800b0c0:	2201      	movlt	r2, #1
 800b0c2:	6032      	strlt	r2, [r6, #0]
 800b0c4:	43bb      	bics	r3, r7
 800b0c6:	d112      	bne.n	800b0ee <_dtoa_r+0x9e>
 800b0c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b0ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b0ce:	6013      	str	r3, [r2, #0]
 800b0d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b0d4:	4323      	orrs	r3, r4
 800b0d6:	f000 855a 	beq.w	800bb8e <_dtoa_r+0xb3e>
 800b0da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b0dc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b33c <_dtoa_r+0x2ec>
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f000 855c 	beq.w	800bb9e <_dtoa_r+0xb4e>
 800b0e6:	f10a 0303 	add.w	r3, sl, #3
 800b0ea:	f000 bd56 	b.w	800bb9a <_dtoa_r+0xb4a>
 800b0ee:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	ec51 0b17 	vmov	r0, r1, d7
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b0fe:	f7f5 fce3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b102:	4680      	mov	r8, r0
 800b104:	b158      	cbz	r0, 800b11e <_dtoa_r+0xce>
 800b106:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b108:	2301      	movs	r3, #1
 800b10a:	6013      	str	r3, [r2, #0]
 800b10c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b10e:	b113      	cbz	r3, 800b116 <_dtoa_r+0xc6>
 800b110:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b112:	4b86      	ldr	r3, [pc, #536]	@ (800b32c <_dtoa_r+0x2dc>)
 800b114:	6013      	str	r3, [r2, #0]
 800b116:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b340 <_dtoa_r+0x2f0>
 800b11a:	f000 bd40 	b.w	800bb9e <_dtoa_r+0xb4e>
 800b11e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b122:	aa14      	add	r2, sp, #80	@ 0x50
 800b124:	a915      	add	r1, sp, #84	@ 0x54
 800b126:	4648      	mov	r0, r9
 800b128:	f001 f984 	bl	800c434 <__d2b>
 800b12c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b130:	9002      	str	r0, [sp, #8]
 800b132:	2e00      	cmp	r6, #0
 800b134:	d078      	beq.n	800b228 <_dtoa_r+0x1d8>
 800b136:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b138:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b13c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b140:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b144:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b148:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b14c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b150:	4619      	mov	r1, r3
 800b152:	2200      	movs	r2, #0
 800b154:	4b76      	ldr	r3, [pc, #472]	@ (800b330 <_dtoa_r+0x2e0>)
 800b156:	f7f5 f897 	bl	8000288 <__aeabi_dsub>
 800b15a:	a36b      	add	r3, pc, #428	@ (adr r3, 800b308 <_dtoa_r+0x2b8>)
 800b15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b160:	f7f5 fa4a 	bl	80005f8 <__aeabi_dmul>
 800b164:	a36a      	add	r3, pc, #424	@ (adr r3, 800b310 <_dtoa_r+0x2c0>)
 800b166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16a:	f7f5 f88f 	bl	800028c <__adddf3>
 800b16e:	4604      	mov	r4, r0
 800b170:	4630      	mov	r0, r6
 800b172:	460d      	mov	r5, r1
 800b174:	f7f5 f9d6 	bl	8000524 <__aeabi_i2d>
 800b178:	a367      	add	r3, pc, #412	@ (adr r3, 800b318 <_dtoa_r+0x2c8>)
 800b17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17e:	f7f5 fa3b 	bl	80005f8 <__aeabi_dmul>
 800b182:	4602      	mov	r2, r0
 800b184:	460b      	mov	r3, r1
 800b186:	4620      	mov	r0, r4
 800b188:	4629      	mov	r1, r5
 800b18a:	f7f5 f87f 	bl	800028c <__adddf3>
 800b18e:	4604      	mov	r4, r0
 800b190:	460d      	mov	r5, r1
 800b192:	f7f5 fce1 	bl	8000b58 <__aeabi_d2iz>
 800b196:	2200      	movs	r2, #0
 800b198:	4607      	mov	r7, r0
 800b19a:	2300      	movs	r3, #0
 800b19c:	4620      	mov	r0, r4
 800b19e:	4629      	mov	r1, r5
 800b1a0:	f7f5 fc9c 	bl	8000adc <__aeabi_dcmplt>
 800b1a4:	b140      	cbz	r0, 800b1b8 <_dtoa_r+0x168>
 800b1a6:	4638      	mov	r0, r7
 800b1a8:	f7f5 f9bc 	bl	8000524 <__aeabi_i2d>
 800b1ac:	4622      	mov	r2, r4
 800b1ae:	462b      	mov	r3, r5
 800b1b0:	f7f5 fc8a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1b4:	b900      	cbnz	r0, 800b1b8 <_dtoa_r+0x168>
 800b1b6:	3f01      	subs	r7, #1
 800b1b8:	2f16      	cmp	r7, #22
 800b1ba:	d852      	bhi.n	800b262 <_dtoa_r+0x212>
 800b1bc:	4b5d      	ldr	r3, [pc, #372]	@ (800b334 <_dtoa_r+0x2e4>)
 800b1be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b1ca:	f7f5 fc87 	bl	8000adc <__aeabi_dcmplt>
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	d049      	beq.n	800b266 <_dtoa_r+0x216>
 800b1d2:	3f01      	subs	r7, #1
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1d8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b1da:	1b9b      	subs	r3, r3, r6
 800b1dc:	1e5a      	subs	r2, r3, #1
 800b1de:	bf45      	ittet	mi
 800b1e0:	f1c3 0301 	rsbmi	r3, r3, #1
 800b1e4:	9300      	strmi	r3, [sp, #0]
 800b1e6:	2300      	movpl	r3, #0
 800b1e8:	2300      	movmi	r3, #0
 800b1ea:	9206      	str	r2, [sp, #24]
 800b1ec:	bf54      	ite	pl
 800b1ee:	9300      	strpl	r3, [sp, #0]
 800b1f0:	9306      	strmi	r3, [sp, #24]
 800b1f2:	2f00      	cmp	r7, #0
 800b1f4:	db39      	blt.n	800b26a <_dtoa_r+0x21a>
 800b1f6:	9b06      	ldr	r3, [sp, #24]
 800b1f8:	970d      	str	r7, [sp, #52]	@ 0x34
 800b1fa:	443b      	add	r3, r7
 800b1fc:	9306      	str	r3, [sp, #24]
 800b1fe:	2300      	movs	r3, #0
 800b200:	9308      	str	r3, [sp, #32]
 800b202:	9b07      	ldr	r3, [sp, #28]
 800b204:	2b09      	cmp	r3, #9
 800b206:	d863      	bhi.n	800b2d0 <_dtoa_r+0x280>
 800b208:	2b05      	cmp	r3, #5
 800b20a:	bfc4      	itt	gt
 800b20c:	3b04      	subgt	r3, #4
 800b20e:	9307      	strgt	r3, [sp, #28]
 800b210:	9b07      	ldr	r3, [sp, #28]
 800b212:	f1a3 0302 	sub.w	r3, r3, #2
 800b216:	bfcc      	ite	gt
 800b218:	2400      	movgt	r4, #0
 800b21a:	2401      	movle	r4, #1
 800b21c:	2b03      	cmp	r3, #3
 800b21e:	d863      	bhi.n	800b2e8 <_dtoa_r+0x298>
 800b220:	e8df f003 	tbb	[pc, r3]
 800b224:	2b375452 	.word	0x2b375452
 800b228:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b22c:	441e      	add	r6, r3
 800b22e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b232:	2b20      	cmp	r3, #32
 800b234:	bfc1      	itttt	gt
 800b236:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b23a:	409f      	lslgt	r7, r3
 800b23c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b240:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b244:	bfd6      	itet	le
 800b246:	f1c3 0320 	rsble	r3, r3, #32
 800b24a:	ea47 0003 	orrgt.w	r0, r7, r3
 800b24e:	fa04 f003 	lslle.w	r0, r4, r3
 800b252:	f7f5 f957 	bl	8000504 <__aeabi_ui2d>
 800b256:	2201      	movs	r2, #1
 800b258:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b25c:	3e01      	subs	r6, #1
 800b25e:	9212      	str	r2, [sp, #72]	@ 0x48
 800b260:	e776      	b.n	800b150 <_dtoa_r+0x100>
 800b262:	2301      	movs	r3, #1
 800b264:	e7b7      	b.n	800b1d6 <_dtoa_r+0x186>
 800b266:	9010      	str	r0, [sp, #64]	@ 0x40
 800b268:	e7b6      	b.n	800b1d8 <_dtoa_r+0x188>
 800b26a:	9b00      	ldr	r3, [sp, #0]
 800b26c:	1bdb      	subs	r3, r3, r7
 800b26e:	9300      	str	r3, [sp, #0]
 800b270:	427b      	negs	r3, r7
 800b272:	9308      	str	r3, [sp, #32]
 800b274:	2300      	movs	r3, #0
 800b276:	930d      	str	r3, [sp, #52]	@ 0x34
 800b278:	e7c3      	b.n	800b202 <_dtoa_r+0x1b2>
 800b27a:	2301      	movs	r3, #1
 800b27c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b27e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b280:	eb07 0b03 	add.w	fp, r7, r3
 800b284:	f10b 0301 	add.w	r3, fp, #1
 800b288:	2b01      	cmp	r3, #1
 800b28a:	9303      	str	r3, [sp, #12]
 800b28c:	bfb8      	it	lt
 800b28e:	2301      	movlt	r3, #1
 800b290:	e006      	b.n	800b2a0 <_dtoa_r+0x250>
 800b292:	2301      	movs	r3, #1
 800b294:	9309      	str	r3, [sp, #36]	@ 0x24
 800b296:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b298:	2b00      	cmp	r3, #0
 800b29a:	dd28      	ble.n	800b2ee <_dtoa_r+0x29e>
 800b29c:	469b      	mov	fp, r3
 800b29e:	9303      	str	r3, [sp, #12]
 800b2a0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b2a4:	2100      	movs	r1, #0
 800b2a6:	2204      	movs	r2, #4
 800b2a8:	f102 0514 	add.w	r5, r2, #20
 800b2ac:	429d      	cmp	r5, r3
 800b2ae:	d926      	bls.n	800b2fe <_dtoa_r+0x2ae>
 800b2b0:	6041      	str	r1, [r0, #4]
 800b2b2:	4648      	mov	r0, r9
 800b2b4:	f000 fd9c 	bl	800bdf0 <_Balloc>
 800b2b8:	4682      	mov	sl, r0
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	d142      	bne.n	800b344 <_dtoa_r+0x2f4>
 800b2be:	4b1e      	ldr	r3, [pc, #120]	@ (800b338 <_dtoa_r+0x2e8>)
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	f240 11af 	movw	r1, #431	@ 0x1af
 800b2c6:	e6da      	b.n	800b07e <_dtoa_r+0x2e>
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	e7e3      	b.n	800b294 <_dtoa_r+0x244>
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	e7d5      	b.n	800b27c <_dtoa_r+0x22c>
 800b2d0:	2401      	movs	r4, #1
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	9307      	str	r3, [sp, #28]
 800b2d6:	9409      	str	r4, [sp, #36]	@ 0x24
 800b2d8:	f04f 3bff 	mov.w	fp, #4294967295
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f8cd b00c 	str.w	fp, [sp, #12]
 800b2e2:	2312      	movs	r3, #18
 800b2e4:	920c      	str	r2, [sp, #48]	@ 0x30
 800b2e6:	e7db      	b.n	800b2a0 <_dtoa_r+0x250>
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2ec:	e7f4      	b.n	800b2d8 <_dtoa_r+0x288>
 800b2ee:	f04f 0b01 	mov.w	fp, #1
 800b2f2:	f8cd b00c 	str.w	fp, [sp, #12]
 800b2f6:	465b      	mov	r3, fp
 800b2f8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b2fc:	e7d0      	b.n	800b2a0 <_dtoa_r+0x250>
 800b2fe:	3101      	adds	r1, #1
 800b300:	0052      	lsls	r2, r2, #1
 800b302:	e7d1      	b.n	800b2a8 <_dtoa_r+0x258>
 800b304:	f3af 8000 	nop.w
 800b308:	636f4361 	.word	0x636f4361
 800b30c:	3fd287a7 	.word	0x3fd287a7
 800b310:	8b60c8b3 	.word	0x8b60c8b3
 800b314:	3fc68a28 	.word	0x3fc68a28
 800b318:	509f79fb 	.word	0x509f79fb
 800b31c:	3fd34413 	.word	0x3fd34413
 800b320:	0800e10d 	.word	0x0800e10d
 800b324:	0800e124 	.word	0x0800e124
 800b328:	7ff00000 	.word	0x7ff00000
 800b32c:	0800e0dd 	.word	0x0800e0dd
 800b330:	3ff80000 	.word	0x3ff80000
 800b334:	0800e278 	.word	0x0800e278
 800b338:	0800e17c 	.word	0x0800e17c
 800b33c:	0800e109 	.word	0x0800e109
 800b340:	0800e0dc 	.word	0x0800e0dc
 800b344:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b348:	6018      	str	r0, [r3, #0]
 800b34a:	9b03      	ldr	r3, [sp, #12]
 800b34c:	2b0e      	cmp	r3, #14
 800b34e:	f200 80a1 	bhi.w	800b494 <_dtoa_r+0x444>
 800b352:	2c00      	cmp	r4, #0
 800b354:	f000 809e 	beq.w	800b494 <_dtoa_r+0x444>
 800b358:	2f00      	cmp	r7, #0
 800b35a:	dd33      	ble.n	800b3c4 <_dtoa_r+0x374>
 800b35c:	4b9c      	ldr	r3, [pc, #624]	@ (800b5d0 <_dtoa_r+0x580>)
 800b35e:	f007 020f 	and.w	r2, r7, #15
 800b362:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b366:	ed93 7b00 	vldr	d7, [r3]
 800b36a:	05f8      	lsls	r0, r7, #23
 800b36c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b370:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b374:	d516      	bpl.n	800b3a4 <_dtoa_r+0x354>
 800b376:	4b97      	ldr	r3, [pc, #604]	@ (800b5d4 <_dtoa_r+0x584>)
 800b378:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b37c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b380:	f7f5 fa64 	bl	800084c <__aeabi_ddiv>
 800b384:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b388:	f004 040f 	and.w	r4, r4, #15
 800b38c:	2603      	movs	r6, #3
 800b38e:	4d91      	ldr	r5, [pc, #580]	@ (800b5d4 <_dtoa_r+0x584>)
 800b390:	b954      	cbnz	r4, 800b3a8 <_dtoa_r+0x358>
 800b392:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b396:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b39a:	f7f5 fa57 	bl	800084c <__aeabi_ddiv>
 800b39e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3a2:	e028      	b.n	800b3f6 <_dtoa_r+0x3a6>
 800b3a4:	2602      	movs	r6, #2
 800b3a6:	e7f2      	b.n	800b38e <_dtoa_r+0x33e>
 800b3a8:	07e1      	lsls	r1, r4, #31
 800b3aa:	d508      	bpl.n	800b3be <_dtoa_r+0x36e>
 800b3ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b3b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b3b4:	f7f5 f920 	bl	80005f8 <__aeabi_dmul>
 800b3b8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b3bc:	3601      	adds	r6, #1
 800b3be:	1064      	asrs	r4, r4, #1
 800b3c0:	3508      	adds	r5, #8
 800b3c2:	e7e5      	b.n	800b390 <_dtoa_r+0x340>
 800b3c4:	f000 80af 	beq.w	800b526 <_dtoa_r+0x4d6>
 800b3c8:	427c      	negs	r4, r7
 800b3ca:	4b81      	ldr	r3, [pc, #516]	@ (800b5d0 <_dtoa_r+0x580>)
 800b3cc:	4d81      	ldr	r5, [pc, #516]	@ (800b5d4 <_dtoa_r+0x584>)
 800b3ce:	f004 020f 	and.w	r2, r4, #15
 800b3d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b3de:	f7f5 f90b 	bl	80005f8 <__aeabi_dmul>
 800b3e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3e6:	1124      	asrs	r4, r4, #4
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	2602      	movs	r6, #2
 800b3ec:	2c00      	cmp	r4, #0
 800b3ee:	f040 808f 	bne.w	800b510 <_dtoa_r+0x4c0>
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d1d3      	bne.n	800b39e <_dtoa_r+0x34e>
 800b3f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b3f8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	f000 8094 	beq.w	800b52a <_dtoa_r+0x4da>
 800b402:	4b75      	ldr	r3, [pc, #468]	@ (800b5d8 <_dtoa_r+0x588>)
 800b404:	2200      	movs	r2, #0
 800b406:	4620      	mov	r0, r4
 800b408:	4629      	mov	r1, r5
 800b40a:	f7f5 fb67 	bl	8000adc <__aeabi_dcmplt>
 800b40e:	2800      	cmp	r0, #0
 800b410:	f000 808b 	beq.w	800b52a <_dtoa_r+0x4da>
 800b414:	9b03      	ldr	r3, [sp, #12]
 800b416:	2b00      	cmp	r3, #0
 800b418:	f000 8087 	beq.w	800b52a <_dtoa_r+0x4da>
 800b41c:	f1bb 0f00 	cmp.w	fp, #0
 800b420:	dd34      	ble.n	800b48c <_dtoa_r+0x43c>
 800b422:	4620      	mov	r0, r4
 800b424:	4b6d      	ldr	r3, [pc, #436]	@ (800b5dc <_dtoa_r+0x58c>)
 800b426:	2200      	movs	r2, #0
 800b428:	4629      	mov	r1, r5
 800b42a:	f7f5 f8e5 	bl	80005f8 <__aeabi_dmul>
 800b42e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b432:	f107 38ff 	add.w	r8, r7, #4294967295
 800b436:	3601      	adds	r6, #1
 800b438:	465c      	mov	r4, fp
 800b43a:	4630      	mov	r0, r6
 800b43c:	f7f5 f872 	bl	8000524 <__aeabi_i2d>
 800b440:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b444:	f7f5 f8d8 	bl	80005f8 <__aeabi_dmul>
 800b448:	4b65      	ldr	r3, [pc, #404]	@ (800b5e0 <_dtoa_r+0x590>)
 800b44a:	2200      	movs	r2, #0
 800b44c:	f7f4 ff1e 	bl	800028c <__adddf3>
 800b450:	4605      	mov	r5, r0
 800b452:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b456:	2c00      	cmp	r4, #0
 800b458:	d16a      	bne.n	800b530 <_dtoa_r+0x4e0>
 800b45a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b45e:	4b61      	ldr	r3, [pc, #388]	@ (800b5e4 <_dtoa_r+0x594>)
 800b460:	2200      	movs	r2, #0
 800b462:	f7f4 ff11 	bl	8000288 <__aeabi_dsub>
 800b466:	4602      	mov	r2, r0
 800b468:	460b      	mov	r3, r1
 800b46a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b46e:	462a      	mov	r2, r5
 800b470:	4633      	mov	r3, r6
 800b472:	f7f5 fb51 	bl	8000b18 <__aeabi_dcmpgt>
 800b476:	2800      	cmp	r0, #0
 800b478:	f040 8298 	bne.w	800b9ac <_dtoa_r+0x95c>
 800b47c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b480:	462a      	mov	r2, r5
 800b482:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b486:	f7f5 fb29 	bl	8000adc <__aeabi_dcmplt>
 800b48a:	bb38      	cbnz	r0, 800b4dc <_dtoa_r+0x48c>
 800b48c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b490:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b494:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b496:	2b00      	cmp	r3, #0
 800b498:	f2c0 8157 	blt.w	800b74a <_dtoa_r+0x6fa>
 800b49c:	2f0e      	cmp	r7, #14
 800b49e:	f300 8154 	bgt.w	800b74a <_dtoa_r+0x6fa>
 800b4a2:	4b4b      	ldr	r3, [pc, #300]	@ (800b5d0 <_dtoa_r+0x580>)
 800b4a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b4a8:	ed93 7b00 	vldr	d7, [r3]
 800b4ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	ed8d 7b00 	vstr	d7, [sp]
 800b4b4:	f280 80e5 	bge.w	800b682 <_dtoa_r+0x632>
 800b4b8:	9b03      	ldr	r3, [sp, #12]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	f300 80e1 	bgt.w	800b682 <_dtoa_r+0x632>
 800b4c0:	d10c      	bne.n	800b4dc <_dtoa_r+0x48c>
 800b4c2:	4b48      	ldr	r3, [pc, #288]	@ (800b5e4 <_dtoa_r+0x594>)
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	ec51 0b17 	vmov	r0, r1, d7
 800b4ca:	f7f5 f895 	bl	80005f8 <__aeabi_dmul>
 800b4ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4d2:	f7f5 fb17 	bl	8000b04 <__aeabi_dcmpge>
 800b4d6:	2800      	cmp	r0, #0
 800b4d8:	f000 8266 	beq.w	800b9a8 <_dtoa_r+0x958>
 800b4dc:	2400      	movs	r4, #0
 800b4de:	4625      	mov	r5, r4
 800b4e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b4e2:	4656      	mov	r6, sl
 800b4e4:	ea6f 0803 	mvn.w	r8, r3
 800b4e8:	2700      	movs	r7, #0
 800b4ea:	4621      	mov	r1, r4
 800b4ec:	4648      	mov	r0, r9
 800b4ee:	f000 fcbf 	bl	800be70 <_Bfree>
 800b4f2:	2d00      	cmp	r5, #0
 800b4f4:	f000 80bd 	beq.w	800b672 <_dtoa_r+0x622>
 800b4f8:	b12f      	cbz	r7, 800b506 <_dtoa_r+0x4b6>
 800b4fa:	42af      	cmp	r7, r5
 800b4fc:	d003      	beq.n	800b506 <_dtoa_r+0x4b6>
 800b4fe:	4639      	mov	r1, r7
 800b500:	4648      	mov	r0, r9
 800b502:	f000 fcb5 	bl	800be70 <_Bfree>
 800b506:	4629      	mov	r1, r5
 800b508:	4648      	mov	r0, r9
 800b50a:	f000 fcb1 	bl	800be70 <_Bfree>
 800b50e:	e0b0      	b.n	800b672 <_dtoa_r+0x622>
 800b510:	07e2      	lsls	r2, r4, #31
 800b512:	d505      	bpl.n	800b520 <_dtoa_r+0x4d0>
 800b514:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b518:	f7f5 f86e 	bl	80005f8 <__aeabi_dmul>
 800b51c:	3601      	adds	r6, #1
 800b51e:	2301      	movs	r3, #1
 800b520:	1064      	asrs	r4, r4, #1
 800b522:	3508      	adds	r5, #8
 800b524:	e762      	b.n	800b3ec <_dtoa_r+0x39c>
 800b526:	2602      	movs	r6, #2
 800b528:	e765      	b.n	800b3f6 <_dtoa_r+0x3a6>
 800b52a:	9c03      	ldr	r4, [sp, #12]
 800b52c:	46b8      	mov	r8, r7
 800b52e:	e784      	b.n	800b43a <_dtoa_r+0x3ea>
 800b530:	4b27      	ldr	r3, [pc, #156]	@ (800b5d0 <_dtoa_r+0x580>)
 800b532:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b534:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b538:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b53c:	4454      	add	r4, sl
 800b53e:	2900      	cmp	r1, #0
 800b540:	d054      	beq.n	800b5ec <_dtoa_r+0x59c>
 800b542:	4929      	ldr	r1, [pc, #164]	@ (800b5e8 <_dtoa_r+0x598>)
 800b544:	2000      	movs	r0, #0
 800b546:	f7f5 f981 	bl	800084c <__aeabi_ddiv>
 800b54a:	4633      	mov	r3, r6
 800b54c:	462a      	mov	r2, r5
 800b54e:	f7f4 fe9b 	bl	8000288 <__aeabi_dsub>
 800b552:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b556:	4656      	mov	r6, sl
 800b558:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b55c:	f7f5 fafc 	bl	8000b58 <__aeabi_d2iz>
 800b560:	4605      	mov	r5, r0
 800b562:	f7f4 ffdf 	bl	8000524 <__aeabi_i2d>
 800b566:	4602      	mov	r2, r0
 800b568:	460b      	mov	r3, r1
 800b56a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b56e:	f7f4 fe8b 	bl	8000288 <__aeabi_dsub>
 800b572:	3530      	adds	r5, #48	@ 0x30
 800b574:	4602      	mov	r2, r0
 800b576:	460b      	mov	r3, r1
 800b578:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b57c:	f806 5b01 	strb.w	r5, [r6], #1
 800b580:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b584:	f7f5 faaa 	bl	8000adc <__aeabi_dcmplt>
 800b588:	2800      	cmp	r0, #0
 800b58a:	d172      	bne.n	800b672 <_dtoa_r+0x622>
 800b58c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b590:	4911      	ldr	r1, [pc, #68]	@ (800b5d8 <_dtoa_r+0x588>)
 800b592:	2000      	movs	r0, #0
 800b594:	f7f4 fe78 	bl	8000288 <__aeabi_dsub>
 800b598:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b59c:	f7f5 fa9e 	bl	8000adc <__aeabi_dcmplt>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	f040 80b4 	bne.w	800b70e <_dtoa_r+0x6be>
 800b5a6:	42a6      	cmp	r6, r4
 800b5a8:	f43f af70 	beq.w	800b48c <_dtoa_r+0x43c>
 800b5ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b5b0:	4b0a      	ldr	r3, [pc, #40]	@ (800b5dc <_dtoa_r+0x58c>)
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	f7f5 f820 	bl	80005f8 <__aeabi_dmul>
 800b5b8:	4b08      	ldr	r3, [pc, #32]	@ (800b5dc <_dtoa_r+0x58c>)
 800b5ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b5be:	2200      	movs	r2, #0
 800b5c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5c4:	f7f5 f818 	bl	80005f8 <__aeabi_dmul>
 800b5c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b5cc:	e7c4      	b.n	800b558 <_dtoa_r+0x508>
 800b5ce:	bf00      	nop
 800b5d0:	0800e278 	.word	0x0800e278
 800b5d4:	0800e250 	.word	0x0800e250
 800b5d8:	3ff00000 	.word	0x3ff00000
 800b5dc:	40240000 	.word	0x40240000
 800b5e0:	401c0000 	.word	0x401c0000
 800b5e4:	40140000 	.word	0x40140000
 800b5e8:	3fe00000 	.word	0x3fe00000
 800b5ec:	4631      	mov	r1, r6
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	f7f5 f802 	bl	80005f8 <__aeabi_dmul>
 800b5f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b5f8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b5fa:	4656      	mov	r6, sl
 800b5fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b600:	f7f5 faaa 	bl	8000b58 <__aeabi_d2iz>
 800b604:	4605      	mov	r5, r0
 800b606:	f7f4 ff8d 	bl	8000524 <__aeabi_i2d>
 800b60a:	4602      	mov	r2, r0
 800b60c:	460b      	mov	r3, r1
 800b60e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b612:	f7f4 fe39 	bl	8000288 <__aeabi_dsub>
 800b616:	3530      	adds	r5, #48	@ 0x30
 800b618:	f806 5b01 	strb.w	r5, [r6], #1
 800b61c:	4602      	mov	r2, r0
 800b61e:	460b      	mov	r3, r1
 800b620:	42a6      	cmp	r6, r4
 800b622:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b626:	f04f 0200 	mov.w	r2, #0
 800b62a:	d124      	bne.n	800b676 <_dtoa_r+0x626>
 800b62c:	4baf      	ldr	r3, [pc, #700]	@ (800b8ec <_dtoa_r+0x89c>)
 800b62e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b632:	f7f4 fe2b 	bl	800028c <__adddf3>
 800b636:	4602      	mov	r2, r0
 800b638:	460b      	mov	r3, r1
 800b63a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b63e:	f7f5 fa6b 	bl	8000b18 <__aeabi_dcmpgt>
 800b642:	2800      	cmp	r0, #0
 800b644:	d163      	bne.n	800b70e <_dtoa_r+0x6be>
 800b646:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b64a:	49a8      	ldr	r1, [pc, #672]	@ (800b8ec <_dtoa_r+0x89c>)
 800b64c:	2000      	movs	r0, #0
 800b64e:	f7f4 fe1b 	bl	8000288 <__aeabi_dsub>
 800b652:	4602      	mov	r2, r0
 800b654:	460b      	mov	r3, r1
 800b656:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b65a:	f7f5 fa3f 	bl	8000adc <__aeabi_dcmplt>
 800b65e:	2800      	cmp	r0, #0
 800b660:	f43f af14 	beq.w	800b48c <_dtoa_r+0x43c>
 800b664:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b666:	1e73      	subs	r3, r6, #1
 800b668:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b66a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b66e:	2b30      	cmp	r3, #48	@ 0x30
 800b670:	d0f8      	beq.n	800b664 <_dtoa_r+0x614>
 800b672:	4647      	mov	r7, r8
 800b674:	e03b      	b.n	800b6ee <_dtoa_r+0x69e>
 800b676:	4b9e      	ldr	r3, [pc, #632]	@ (800b8f0 <_dtoa_r+0x8a0>)
 800b678:	f7f4 ffbe 	bl	80005f8 <__aeabi_dmul>
 800b67c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b680:	e7bc      	b.n	800b5fc <_dtoa_r+0x5ac>
 800b682:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b686:	4656      	mov	r6, sl
 800b688:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b68c:	4620      	mov	r0, r4
 800b68e:	4629      	mov	r1, r5
 800b690:	f7f5 f8dc 	bl	800084c <__aeabi_ddiv>
 800b694:	f7f5 fa60 	bl	8000b58 <__aeabi_d2iz>
 800b698:	4680      	mov	r8, r0
 800b69a:	f7f4 ff43 	bl	8000524 <__aeabi_i2d>
 800b69e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6a2:	f7f4 ffa9 	bl	80005f8 <__aeabi_dmul>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	4629      	mov	r1, r5
 800b6ae:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b6b2:	f7f4 fde9 	bl	8000288 <__aeabi_dsub>
 800b6b6:	f806 4b01 	strb.w	r4, [r6], #1
 800b6ba:	9d03      	ldr	r5, [sp, #12]
 800b6bc:	eba6 040a 	sub.w	r4, r6, sl
 800b6c0:	42a5      	cmp	r5, r4
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	d133      	bne.n	800b730 <_dtoa_r+0x6e0>
 800b6c8:	f7f4 fde0 	bl	800028c <__adddf3>
 800b6cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6d0:	4604      	mov	r4, r0
 800b6d2:	460d      	mov	r5, r1
 800b6d4:	f7f5 fa20 	bl	8000b18 <__aeabi_dcmpgt>
 800b6d8:	b9c0      	cbnz	r0, 800b70c <_dtoa_r+0x6bc>
 800b6da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6de:	4620      	mov	r0, r4
 800b6e0:	4629      	mov	r1, r5
 800b6e2:	f7f5 f9f1 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6e6:	b110      	cbz	r0, 800b6ee <_dtoa_r+0x69e>
 800b6e8:	f018 0f01 	tst.w	r8, #1
 800b6ec:	d10e      	bne.n	800b70c <_dtoa_r+0x6bc>
 800b6ee:	9902      	ldr	r1, [sp, #8]
 800b6f0:	4648      	mov	r0, r9
 800b6f2:	f000 fbbd 	bl	800be70 <_Bfree>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	7033      	strb	r3, [r6, #0]
 800b6fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b6fc:	3701      	adds	r7, #1
 800b6fe:	601f      	str	r7, [r3, #0]
 800b700:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b702:	2b00      	cmp	r3, #0
 800b704:	f000 824b 	beq.w	800bb9e <_dtoa_r+0xb4e>
 800b708:	601e      	str	r6, [r3, #0]
 800b70a:	e248      	b.n	800bb9e <_dtoa_r+0xb4e>
 800b70c:	46b8      	mov	r8, r7
 800b70e:	4633      	mov	r3, r6
 800b710:	461e      	mov	r6, r3
 800b712:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b716:	2a39      	cmp	r2, #57	@ 0x39
 800b718:	d106      	bne.n	800b728 <_dtoa_r+0x6d8>
 800b71a:	459a      	cmp	sl, r3
 800b71c:	d1f8      	bne.n	800b710 <_dtoa_r+0x6c0>
 800b71e:	2230      	movs	r2, #48	@ 0x30
 800b720:	f108 0801 	add.w	r8, r8, #1
 800b724:	f88a 2000 	strb.w	r2, [sl]
 800b728:	781a      	ldrb	r2, [r3, #0]
 800b72a:	3201      	adds	r2, #1
 800b72c:	701a      	strb	r2, [r3, #0]
 800b72e:	e7a0      	b.n	800b672 <_dtoa_r+0x622>
 800b730:	4b6f      	ldr	r3, [pc, #444]	@ (800b8f0 <_dtoa_r+0x8a0>)
 800b732:	2200      	movs	r2, #0
 800b734:	f7f4 ff60 	bl	80005f8 <__aeabi_dmul>
 800b738:	2200      	movs	r2, #0
 800b73a:	2300      	movs	r3, #0
 800b73c:	4604      	mov	r4, r0
 800b73e:	460d      	mov	r5, r1
 800b740:	f7f5 f9c2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b744:	2800      	cmp	r0, #0
 800b746:	d09f      	beq.n	800b688 <_dtoa_r+0x638>
 800b748:	e7d1      	b.n	800b6ee <_dtoa_r+0x69e>
 800b74a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b74c:	2a00      	cmp	r2, #0
 800b74e:	f000 80ea 	beq.w	800b926 <_dtoa_r+0x8d6>
 800b752:	9a07      	ldr	r2, [sp, #28]
 800b754:	2a01      	cmp	r2, #1
 800b756:	f300 80cd 	bgt.w	800b8f4 <_dtoa_r+0x8a4>
 800b75a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b75c:	2a00      	cmp	r2, #0
 800b75e:	f000 80c1 	beq.w	800b8e4 <_dtoa_r+0x894>
 800b762:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b766:	9c08      	ldr	r4, [sp, #32]
 800b768:	9e00      	ldr	r6, [sp, #0]
 800b76a:	9a00      	ldr	r2, [sp, #0]
 800b76c:	441a      	add	r2, r3
 800b76e:	9200      	str	r2, [sp, #0]
 800b770:	9a06      	ldr	r2, [sp, #24]
 800b772:	2101      	movs	r1, #1
 800b774:	441a      	add	r2, r3
 800b776:	4648      	mov	r0, r9
 800b778:	9206      	str	r2, [sp, #24]
 800b77a:	f000 fc2d 	bl	800bfd8 <__i2b>
 800b77e:	4605      	mov	r5, r0
 800b780:	b166      	cbz	r6, 800b79c <_dtoa_r+0x74c>
 800b782:	9b06      	ldr	r3, [sp, #24]
 800b784:	2b00      	cmp	r3, #0
 800b786:	dd09      	ble.n	800b79c <_dtoa_r+0x74c>
 800b788:	42b3      	cmp	r3, r6
 800b78a:	9a00      	ldr	r2, [sp, #0]
 800b78c:	bfa8      	it	ge
 800b78e:	4633      	movge	r3, r6
 800b790:	1ad2      	subs	r2, r2, r3
 800b792:	9200      	str	r2, [sp, #0]
 800b794:	9a06      	ldr	r2, [sp, #24]
 800b796:	1af6      	subs	r6, r6, r3
 800b798:	1ad3      	subs	r3, r2, r3
 800b79a:	9306      	str	r3, [sp, #24]
 800b79c:	9b08      	ldr	r3, [sp, #32]
 800b79e:	b30b      	cbz	r3, 800b7e4 <_dtoa_r+0x794>
 800b7a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	f000 80c6 	beq.w	800b934 <_dtoa_r+0x8e4>
 800b7a8:	2c00      	cmp	r4, #0
 800b7aa:	f000 80c0 	beq.w	800b92e <_dtoa_r+0x8de>
 800b7ae:	4629      	mov	r1, r5
 800b7b0:	4622      	mov	r2, r4
 800b7b2:	4648      	mov	r0, r9
 800b7b4:	f000 fcc8 	bl	800c148 <__pow5mult>
 800b7b8:	9a02      	ldr	r2, [sp, #8]
 800b7ba:	4601      	mov	r1, r0
 800b7bc:	4605      	mov	r5, r0
 800b7be:	4648      	mov	r0, r9
 800b7c0:	f000 fc20 	bl	800c004 <__multiply>
 800b7c4:	9902      	ldr	r1, [sp, #8]
 800b7c6:	4680      	mov	r8, r0
 800b7c8:	4648      	mov	r0, r9
 800b7ca:	f000 fb51 	bl	800be70 <_Bfree>
 800b7ce:	9b08      	ldr	r3, [sp, #32]
 800b7d0:	1b1b      	subs	r3, r3, r4
 800b7d2:	9308      	str	r3, [sp, #32]
 800b7d4:	f000 80b1 	beq.w	800b93a <_dtoa_r+0x8ea>
 800b7d8:	9a08      	ldr	r2, [sp, #32]
 800b7da:	4641      	mov	r1, r8
 800b7dc:	4648      	mov	r0, r9
 800b7de:	f000 fcb3 	bl	800c148 <__pow5mult>
 800b7e2:	9002      	str	r0, [sp, #8]
 800b7e4:	2101      	movs	r1, #1
 800b7e6:	4648      	mov	r0, r9
 800b7e8:	f000 fbf6 	bl	800bfd8 <__i2b>
 800b7ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7ee:	4604      	mov	r4, r0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	f000 81d8 	beq.w	800bba6 <_dtoa_r+0xb56>
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	4601      	mov	r1, r0
 800b7fa:	4648      	mov	r0, r9
 800b7fc:	f000 fca4 	bl	800c148 <__pow5mult>
 800b800:	9b07      	ldr	r3, [sp, #28]
 800b802:	2b01      	cmp	r3, #1
 800b804:	4604      	mov	r4, r0
 800b806:	f300 809f 	bgt.w	800b948 <_dtoa_r+0x8f8>
 800b80a:	9b04      	ldr	r3, [sp, #16]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f040 8097 	bne.w	800b940 <_dtoa_r+0x8f0>
 800b812:	9b05      	ldr	r3, [sp, #20]
 800b814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f040 8093 	bne.w	800b944 <_dtoa_r+0x8f4>
 800b81e:	9b05      	ldr	r3, [sp, #20]
 800b820:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b824:	0d1b      	lsrs	r3, r3, #20
 800b826:	051b      	lsls	r3, r3, #20
 800b828:	b133      	cbz	r3, 800b838 <_dtoa_r+0x7e8>
 800b82a:	9b00      	ldr	r3, [sp, #0]
 800b82c:	3301      	adds	r3, #1
 800b82e:	9300      	str	r3, [sp, #0]
 800b830:	9b06      	ldr	r3, [sp, #24]
 800b832:	3301      	adds	r3, #1
 800b834:	9306      	str	r3, [sp, #24]
 800b836:	2301      	movs	r3, #1
 800b838:	9308      	str	r3, [sp, #32]
 800b83a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	f000 81b8 	beq.w	800bbb2 <_dtoa_r+0xb62>
 800b842:	6923      	ldr	r3, [r4, #16]
 800b844:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b848:	6918      	ldr	r0, [r3, #16]
 800b84a:	f000 fb79 	bl	800bf40 <__hi0bits>
 800b84e:	f1c0 0020 	rsb	r0, r0, #32
 800b852:	9b06      	ldr	r3, [sp, #24]
 800b854:	4418      	add	r0, r3
 800b856:	f010 001f 	ands.w	r0, r0, #31
 800b85a:	f000 8082 	beq.w	800b962 <_dtoa_r+0x912>
 800b85e:	f1c0 0320 	rsb	r3, r0, #32
 800b862:	2b04      	cmp	r3, #4
 800b864:	dd73      	ble.n	800b94e <_dtoa_r+0x8fe>
 800b866:	9b00      	ldr	r3, [sp, #0]
 800b868:	f1c0 001c 	rsb	r0, r0, #28
 800b86c:	4403      	add	r3, r0
 800b86e:	9300      	str	r3, [sp, #0]
 800b870:	9b06      	ldr	r3, [sp, #24]
 800b872:	4403      	add	r3, r0
 800b874:	4406      	add	r6, r0
 800b876:	9306      	str	r3, [sp, #24]
 800b878:	9b00      	ldr	r3, [sp, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	dd05      	ble.n	800b88a <_dtoa_r+0x83a>
 800b87e:	9902      	ldr	r1, [sp, #8]
 800b880:	461a      	mov	r2, r3
 800b882:	4648      	mov	r0, r9
 800b884:	f000 fcba 	bl	800c1fc <__lshift>
 800b888:	9002      	str	r0, [sp, #8]
 800b88a:	9b06      	ldr	r3, [sp, #24]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	dd05      	ble.n	800b89c <_dtoa_r+0x84c>
 800b890:	4621      	mov	r1, r4
 800b892:	461a      	mov	r2, r3
 800b894:	4648      	mov	r0, r9
 800b896:	f000 fcb1 	bl	800c1fc <__lshift>
 800b89a:	4604      	mov	r4, r0
 800b89c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d061      	beq.n	800b966 <_dtoa_r+0x916>
 800b8a2:	9802      	ldr	r0, [sp, #8]
 800b8a4:	4621      	mov	r1, r4
 800b8a6:	f000 fd15 	bl	800c2d4 <__mcmp>
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	da5b      	bge.n	800b966 <_dtoa_r+0x916>
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	9902      	ldr	r1, [sp, #8]
 800b8b2:	220a      	movs	r2, #10
 800b8b4:	4648      	mov	r0, r9
 800b8b6:	f000 fafd 	bl	800beb4 <__multadd>
 800b8ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8bc:	9002      	str	r0, [sp, #8]
 800b8be:	f107 38ff 	add.w	r8, r7, #4294967295
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	f000 8177 	beq.w	800bbb6 <_dtoa_r+0xb66>
 800b8c8:	4629      	mov	r1, r5
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	220a      	movs	r2, #10
 800b8ce:	4648      	mov	r0, r9
 800b8d0:	f000 faf0 	bl	800beb4 <__multadd>
 800b8d4:	f1bb 0f00 	cmp.w	fp, #0
 800b8d8:	4605      	mov	r5, r0
 800b8da:	dc6f      	bgt.n	800b9bc <_dtoa_r+0x96c>
 800b8dc:	9b07      	ldr	r3, [sp, #28]
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	dc49      	bgt.n	800b976 <_dtoa_r+0x926>
 800b8e2:	e06b      	b.n	800b9bc <_dtoa_r+0x96c>
 800b8e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b8e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b8ea:	e73c      	b.n	800b766 <_dtoa_r+0x716>
 800b8ec:	3fe00000 	.word	0x3fe00000
 800b8f0:	40240000 	.word	0x40240000
 800b8f4:	9b03      	ldr	r3, [sp, #12]
 800b8f6:	1e5c      	subs	r4, r3, #1
 800b8f8:	9b08      	ldr	r3, [sp, #32]
 800b8fa:	42a3      	cmp	r3, r4
 800b8fc:	db09      	blt.n	800b912 <_dtoa_r+0x8c2>
 800b8fe:	1b1c      	subs	r4, r3, r4
 800b900:	9b03      	ldr	r3, [sp, #12]
 800b902:	2b00      	cmp	r3, #0
 800b904:	f6bf af30 	bge.w	800b768 <_dtoa_r+0x718>
 800b908:	9b00      	ldr	r3, [sp, #0]
 800b90a:	9a03      	ldr	r2, [sp, #12]
 800b90c:	1a9e      	subs	r6, r3, r2
 800b90e:	2300      	movs	r3, #0
 800b910:	e72b      	b.n	800b76a <_dtoa_r+0x71a>
 800b912:	9b08      	ldr	r3, [sp, #32]
 800b914:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b916:	9408      	str	r4, [sp, #32]
 800b918:	1ae3      	subs	r3, r4, r3
 800b91a:	441a      	add	r2, r3
 800b91c:	9e00      	ldr	r6, [sp, #0]
 800b91e:	9b03      	ldr	r3, [sp, #12]
 800b920:	920d      	str	r2, [sp, #52]	@ 0x34
 800b922:	2400      	movs	r4, #0
 800b924:	e721      	b.n	800b76a <_dtoa_r+0x71a>
 800b926:	9c08      	ldr	r4, [sp, #32]
 800b928:	9e00      	ldr	r6, [sp, #0]
 800b92a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b92c:	e728      	b.n	800b780 <_dtoa_r+0x730>
 800b92e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b932:	e751      	b.n	800b7d8 <_dtoa_r+0x788>
 800b934:	9a08      	ldr	r2, [sp, #32]
 800b936:	9902      	ldr	r1, [sp, #8]
 800b938:	e750      	b.n	800b7dc <_dtoa_r+0x78c>
 800b93a:	f8cd 8008 	str.w	r8, [sp, #8]
 800b93e:	e751      	b.n	800b7e4 <_dtoa_r+0x794>
 800b940:	2300      	movs	r3, #0
 800b942:	e779      	b.n	800b838 <_dtoa_r+0x7e8>
 800b944:	9b04      	ldr	r3, [sp, #16]
 800b946:	e777      	b.n	800b838 <_dtoa_r+0x7e8>
 800b948:	2300      	movs	r3, #0
 800b94a:	9308      	str	r3, [sp, #32]
 800b94c:	e779      	b.n	800b842 <_dtoa_r+0x7f2>
 800b94e:	d093      	beq.n	800b878 <_dtoa_r+0x828>
 800b950:	9a00      	ldr	r2, [sp, #0]
 800b952:	331c      	adds	r3, #28
 800b954:	441a      	add	r2, r3
 800b956:	9200      	str	r2, [sp, #0]
 800b958:	9a06      	ldr	r2, [sp, #24]
 800b95a:	441a      	add	r2, r3
 800b95c:	441e      	add	r6, r3
 800b95e:	9206      	str	r2, [sp, #24]
 800b960:	e78a      	b.n	800b878 <_dtoa_r+0x828>
 800b962:	4603      	mov	r3, r0
 800b964:	e7f4      	b.n	800b950 <_dtoa_r+0x900>
 800b966:	9b03      	ldr	r3, [sp, #12]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	46b8      	mov	r8, r7
 800b96c:	dc20      	bgt.n	800b9b0 <_dtoa_r+0x960>
 800b96e:	469b      	mov	fp, r3
 800b970:	9b07      	ldr	r3, [sp, #28]
 800b972:	2b02      	cmp	r3, #2
 800b974:	dd1e      	ble.n	800b9b4 <_dtoa_r+0x964>
 800b976:	f1bb 0f00 	cmp.w	fp, #0
 800b97a:	f47f adb1 	bne.w	800b4e0 <_dtoa_r+0x490>
 800b97e:	4621      	mov	r1, r4
 800b980:	465b      	mov	r3, fp
 800b982:	2205      	movs	r2, #5
 800b984:	4648      	mov	r0, r9
 800b986:	f000 fa95 	bl	800beb4 <__multadd>
 800b98a:	4601      	mov	r1, r0
 800b98c:	4604      	mov	r4, r0
 800b98e:	9802      	ldr	r0, [sp, #8]
 800b990:	f000 fca0 	bl	800c2d4 <__mcmp>
 800b994:	2800      	cmp	r0, #0
 800b996:	f77f ada3 	ble.w	800b4e0 <_dtoa_r+0x490>
 800b99a:	4656      	mov	r6, sl
 800b99c:	2331      	movs	r3, #49	@ 0x31
 800b99e:	f806 3b01 	strb.w	r3, [r6], #1
 800b9a2:	f108 0801 	add.w	r8, r8, #1
 800b9a6:	e59f      	b.n	800b4e8 <_dtoa_r+0x498>
 800b9a8:	9c03      	ldr	r4, [sp, #12]
 800b9aa:	46b8      	mov	r8, r7
 800b9ac:	4625      	mov	r5, r4
 800b9ae:	e7f4      	b.n	800b99a <_dtoa_r+0x94a>
 800b9b0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b9b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	f000 8101 	beq.w	800bbbe <_dtoa_r+0xb6e>
 800b9bc:	2e00      	cmp	r6, #0
 800b9be:	dd05      	ble.n	800b9cc <_dtoa_r+0x97c>
 800b9c0:	4629      	mov	r1, r5
 800b9c2:	4632      	mov	r2, r6
 800b9c4:	4648      	mov	r0, r9
 800b9c6:	f000 fc19 	bl	800c1fc <__lshift>
 800b9ca:	4605      	mov	r5, r0
 800b9cc:	9b08      	ldr	r3, [sp, #32]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d05c      	beq.n	800ba8c <_dtoa_r+0xa3c>
 800b9d2:	6869      	ldr	r1, [r5, #4]
 800b9d4:	4648      	mov	r0, r9
 800b9d6:	f000 fa0b 	bl	800bdf0 <_Balloc>
 800b9da:	4606      	mov	r6, r0
 800b9dc:	b928      	cbnz	r0, 800b9ea <_dtoa_r+0x99a>
 800b9de:	4b82      	ldr	r3, [pc, #520]	@ (800bbe8 <_dtoa_r+0xb98>)
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b9e6:	f7ff bb4a 	b.w	800b07e <_dtoa_r+0x2e>
 800b9ea:	692a      	ldr	r2, [r5, #16]
 800b9ec:	3202      	adds	r2, #2
 800b9ee:	0092      	lsls	r2, r2, #2
 800b9f0:	f105 010c 	add.w	r1, r5, #12
 800b9f4:	300c      	adds	r0, #12
 800b9f6:	f001 f969 	bl	800cccc <memcpy>
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	4631      	mov	r1, r6
 800b9fe:	4648      	mov	r0, r9
 800ba00:	f000 fbfc 	bl	800c1fc <__lshift>
 800ba04:	f10a 0301 	add.w	r3, sl, #1
 800ba08:	9300      	str	r3, [sp, #0]
 800ba0a:	eb0a 030b 	add.w	r3, sl, fp
 800ba0e:	9308      	str	r3, [sp, #32]
 800ba10:	9b04      	ldr	r3, [sp, #16]
 800ba12:	f003 0301 	and.w	r3, r3, #1
 800ba16:	462f      	mov	r7, r5
 800ba18:	9306      	str	r3, [sp, #24]
 800ba1a:	4605      	mov	r5, r0
 800ba1c:	9b00      	ldr	r3, [sp, #0]
 800ba1e:	9802      	ldr	r0, [sp, #8]
 800ba20:	4621      	mov	r1, r4
 800ba22:	f103 3bff 	add.w	fp, r3, #4294967295
 800ba26:	f7ff fa8a 	bl	800af3e <quorem>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	3330      	adds	r3, #48	@ 0x30
 800ba2e:	9003      	str	r0, [sp, #12]
 800ba30:	4639      	mov	r1, r7
 800ba32:	9802      	ldr	r0, [sp, #8]
 800ba34:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba36:	f000 fc4d 	bl	800c2d4 <__mcmp>
 800ba3a:	462a      	mov	r2, r5
 800ba3c:	9004      	str	r0, [sp, #16]
 800ba3e:	4621      	mov	r1, r4
 800ba40:	4648      	mov	r0, r9
 800ba42:	f000 fc63 	bl	800c30c <__mdiff>
 800ba46:	68c2      	ldr	r2, [r0, #12]
 800ba48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba4a:	4606      	mov	r6, r0
 800ba4c:	bb02      	cbnz	r2, 800ba90 <_dtoa_r+0xa40>
 800ba4e:	4601      	mov	r1, r0
 800ba50:	9802      	ldr	r0, [sp, #8]
 800ba52:	f000 fc3f 	bl	800c2d4 <__mcmp>
 800ba56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba58:	4602      	mov	r2, r0
 800ba5a:	4631      	mov	r1, r6
 800ba5c:	4648      	mov	r0, r9
 800ba5e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ba60:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba62:	f000 fa05 	bl	800be70 <_Bfree>
 800ba66:	9b07      	ldr	r3, [sp, #28]
 800ba68:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ba6a:	9e00      	ldr	r6, [sp, #0]
 800ba6c:	ea42 0103 	orr.w	r1, r2, r3
 800ba70:	9b06      	ldr	r3, [sp, #24]
 800ba72:	4319      	orrs	r1, r3
 800ba74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba76:	d10d      	bne.n	800ba94 <_dtoa_r+0xa44>
 800ba78:	2b39      	cmp	r3, #57	@ 0x39
 800ba7a:	d027      	beq.n	800bacc <_dtoa_r+0xa7c>
 800ba7c:	9a04      	ldr	r2, [sp, #16]
 800ba7e:	2a00      	cmp	r2, #0
 800ba80:	dd01      	ble.n	800ba86 <_dtoa_r+0xa36>
 800ba82:	9b03      	ldr	r3, [sp, #12]
 800ba84:	3331      	adds	r3, #49	@ 0x31
 800ba86:	f88b 3000 	strb.w	r3, [fp]
 800ba8a:	e52e      	b.n	800b4ea <_dtoa_r+0x49a>
 800ba8c:	4628      	mov	r0, r5
 800ba8e:	e7b9      	b.n	800ba04 <_dtoa_r+0x9b4>
 800ba90:	2201      	movs	r2, #1
 800ba92:	e7e2      	b.n	800ba5a <_dtoa_r+0xa0a>
 800ba94:	9904      	ldr	r1, [sp, #16]
 800ba96:	2900      	cmp	r1, #0
 800ba98:	db04      	blt.n	800baa4 <_dtoa_r+0xa54>
 800ba9a:	9807      	ldr	r0, [sp, #28]
 800ba9c:	4301      	orrs	r1, r0
 800ba9e:	9806      	ldr	r0, [sp, #24]
 800baa0:	4301      	orrs	r1, r0
 800baa2:	d120      	bne.n	800bae6 <_dtoa_r+0xa96>
 800baa4:	2a00      	cmp	r2, #0
 800baa6:	ddee      	ble.n	800ba86 <_dtoa_r+0xa36>
 800baa8:	9902      	ldr	r1, [sp, #8]
 800baaa:	9300      	str	r3, [sp, #0]
 800baac:	2201      	movs	r2, #1
 800baae:	4648      	mov	r0, r9
 800bab0:	f000 fba4 	bl	800c1fc <__lshift>
 800bab4:	4621      	mov	r1, r4
 800bab6:	9002      	str	r0, [sp, #8]
 800bab8:	f000 fc0c 	bl	800c2d4 <__mcmp>
 800babc:	2800      	cmp	r0, #0
 800babe:	9b00      	ldr	r3, [sp, #0]
 800bac0:	dc02      	bgt.n	800bac8 <_dtoa_r+0xa78>
 800bac2:	d1e0      	bne.n	800ba86 <_dtoa_r+0xa36>
 800bac4:	07da      	lsls	r2, r3, #31
 800bac6:	d5de      	bpl.n	800ba86 <_dtoa_r+0xa36>
 800bac8:	2b39      	cmp	r3, #57	@ 0x39
 800baca:	d1da      	bne.n	800ba82 <_dtoa_r+0xa32>
 800bacc:	2339      	movs	r3, #57	@ 0x39
 800bace:	f88b 3000 	strb.w	r3, [fp]
 800bad2:	4633      	mov	r3, r6
 800bad4:	461e      	mov	r6, r3
 800bad6:	3b01      	subs	r3, #1
 800bad8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800badc:	2a39      	cmp	r2, #57	@ 0x39
 800bade:	d04e      	beq.n	800bb7e <_dtoa_r+0xb2e>
 800bae0:	3201      	adds	r2, #1
 800bae2:	701a      	strb	r2, [r3, #0]
 800bae4:	e501      	b.n	800b4ea <_dtoa_r+0x49a>
 800bae6:	2a00      	cmp	r2, #0
 800bae8:	dd03      	ble.n	800baf2 <_dtoa_r+0xaa2>
 800baea:	2b39      	cmp	r3, #57	@ 0x39
 800baec:	d0ee      	beq.n	800bacc <_dtoa_r+0xa7c>
 800baee:	3301      	adds	r3, #1
 800baf0:	e7c9      	b.n	800ba86 <_dtoa_r+0xa36>
 800baf2:	9a00      	ldr	r2, [sp, #0]
 800baf4:	9908      	ldr	r1, [sp, #32]
 800baf6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bafa:	428a      	cmp	r2, r1
 800bafc:	d028      	beq.n	800bb50 <_dtoa_r+0xb00>
 800bafe:	9902      	ldr	r1, [sp, #8]
 800bb00:	2300      	movs	r3, #0
 800bb02:	220a      	movs	r2, #10
 800bb04:	4648      	mov	r0, r9
 800bb06:	f000 f9d5 	bl	800beb4 <__multadd>
 800bb0a:	42af      	cmp	r7, r5
 800bb0c:	9002      	str	r0, [sp, #8]
 800bb0e:	f04f 0300 	mov.w	r3, #0
 800bb12:	f04f 020a 	mov.w	r2, #10
 800bb16:	4639      	mov	r1, r7
 800bb18:	4648      	mov	r0, r9
 800bb1a:	d107      	bne.n	800bb2c <_dtoa_r+0xadc>
 800bb1c:	f000 f9ca 	bl	800beb4 <__multadd>
 800bb20:	4607      	mov	r7, r0
 800bb22:	4605      	mov	r5, r0
 800bb24:	9b00      	ldr	r3, [sp, #0]
 800bb26:	3301      	adds	r3, #1
 800bb28:	9300      	str	r3, [sp, #0]
 800bb2a:	e777      	b.n	800ba1c <_dtoa_r+0x9cc>
 800bb2c:	f000 f9c2 	bl	800beb4 <__multadd>
 800bb30:	4629      	mov	r1, r5
 800bb32:	4607      	mov	r7, r0
 800bb34:	2300      	movs	r3, #0
 800bb36:	220a      	movs	r2, #10
 800bb38:	4648      	mov	r0, r9
 800bb3a:	f000 f9bb 	bl	800beb4 <__multadd>
 800bb3e:	4605      	mov	r5, r0
 800bb40:	e7f0      	b.n	800bb24 <_dtoa_r+0xad4>
 800bb42:	f1bb 0f00 	cmp.w	fp, #0
 800bb46:	bfcc      	ite	gt
 800bb48:	465e      	movgt	r6, fp
 800bb4a:	2601      	movle	r6, #1
 800bb4c:	4456      	add	r6, sl
 800bb4e:	2700      	movs	r7, #0
 800bb50:	9902      	ldr	r1, [sp, #8]
 800bb52:	9300      	str	r3, [sp, #0]
 800bb54:	2201      	movs	r2, #1
 800bb56:	4648      	mov	r0, r9
 800bb58:	f000 fb50 	bl	800c1fc <__lshift>
 800bb5c:	4621      	mov	r1, r4
 800bb5e:	9002      	str	r0, [sp, #8]
 800bb60:	f000 fbb8 	bl	800c2d4 <__mcmp>
 800bb64:	2800      	cmp	r0, #0
 800bb66:	dcb4      	bgt.n	800bad2 <_dtoa_r+0xa82>
 800bb68:	d102      	bne.n	800bb70 <_dtoa_r+0xb20>
 800bb6a:	9b00      	ldr	r3, [sp, #0]
 800bb6c:	07db      	lsls	r3, r3, #31
 800bb6e:	d4b0      	bmi.n	800bad2 <_dtoa_r+0xa82>
 800bb70:	4633      	mov	r3, r6
 800bb72:	461e      	mov	r6, r3
 800bb74:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb78:	2a30      	cmp	r2, #48	@ 0x30
 800bb7a:	d0fa      	beq.n	800bb72 <_dtoa_r+0xb22>
 800bb7c:	e4b5      	b.n	800b4ea <_dtoa_r+0x49a>
 800bb7e:	459a      	cmp	sl, r3
 800bb80:	d1a8      	bne.n	800bad4 <_dtoa_r+0xa84>
 800bb82:	2331      	movs	r3, #49	@ 0x31
 800bb84:	f108 0801 	add.w	r8, r8, #1
 800bb88:	f88a 3000 	strb.w	r3, [sl]
 800bb8c:	e4ad      	b.n	800b4ea <_dtoa_r+0x49a>
 800bb8e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bb90:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800bbec <_dtoa_r+0xb9c>
 800bb94:	b11b      	cbz	r3, 800bb9e <_dtoa_r+0xb4e>
 800bb96:	f10a 0308 	add.w	r3, sl, #8
 800bb9a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bb9c:	6013      	str	r3, [r2, #0]
 800bb9e:	4650      	mov	r0, sl
 800bba0:	b017      	add	sp, #92	@ 0x5c
 800bba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba6:	9b07      	ldr	r3, [sp, #28]
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	f77f ae2e 	ble.w	800b80a <_dtoa_r+0x7ba>
 800bbae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bbb0:	9308      	str	r3, [sp, #32]
 800bbb2:	2001      	movs	r0, #1
 800bbb4:	e64d      	b.n	800b852 <_dtoa_r+0x802>
 800bbb6:	f1bb 0f00 	cmp.w	fp, #0
 800bbba:	f77f aed9 	ble.w	800b970 <_dtoa_r+0x920>
 800bbbe:	4656      	mov	r6, sl
 800bbc0:	9802      	ldr	r0, [sp, #8]
 800bbc2:	4621      	mov	r1, r4
 800bbc4:	f7ff f9bb 	bl	800af3e <quorem>
 800bbc8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800bbcc:	f806 3b01 	strb.w	r3, [r6], #1
 800bbd0:	eba6 020a 	sub.w	r2, r6, sl
 800bbd4:	4593      	cmp	fp, r2
 800bbd6:	ddb4      	ble.n	800bb42 <_dtoa_r+0xaf2>
 800bbd8:	9902      	ldr	r1, [sp, #8]
 800bbda:	2300      	movs	r3, #0
 800bbdc:	220a      	movs	r2, #10
 800bbde:	4648      	mov	r0, r9
 800bbe0:	f000 f968 	bl	800beb4 <__multadd>
 800bbe4:	9002      	str	r0, [sp, #8]
 800bbe6:	e7eb      	b.n	800bbc0 <_dtoa_r+0xb70>
 800bbe8:	0800e17c 	.word	0x0800e17c
 800bbec:	0800e100 	.word	0x0800e100

0800bbf0 <_free_r>:
 800bbf0:	b538      	push	{r3, r4, r5, lr}
 800bbf2:	4605      	mov	r5, r0
 800bbf4:	2900      	cmp	r1, #0
 800bbf6:	d041      	beq.n	800bc7c <_free_r+0x8c>
 800bbf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbfc:	1f0c      	subs	r4, r1, #4
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	bfb8      	it	lt
 800bc02:	18e4      	addlt	r4, r4, r3
 800bc04:	f000 f8e8 	bl	800bdd8 <__malloc_lock>
 800bc08:	4a1d      	ldr	r2, [pc, #116]	@ (800bc80 <_free_r+0x90>)
 800bc0a:	6813      	ldr	r3, [r2, #0]
 800bc0c:	b933      	cbnz	r3, 800bc1c <_free_r+0x2c>
 800bc0e:	6063      	str	r3, [r4, #4]
 800bc10:	6014      	str	r4, [r2, #0]
 800bc12:	4628      	mov	r0, r5
 800bc14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc18:	f000 b8e4 	b.w	800bde4 <__malloc_unlock>
 800bc1c:	42a3      	cmp	r3, r4
 800bc1e:	d908      	bls.n	800bc32 <_free_r+0x42>
 800bc20:	6820      	ldr	r0, [r4, #0]
 800bc22:	1821      	adds	r1, r4, r0
 800bc24:	428b      	cmp	r3, r1
 800bc26:	bf01      	itttt	eq
 800bc28:	6819      	ldreq	r1, [r3, #0]
 800bc2a:	685b      	ldreq	r3, [r3, #4]
 800bc2c:	1809      	addeq	r1, r1, r0
 800bc2e:	6021      	streq	r1, [r4, #0]
 800bc30:	e7ed      	b.n	800bc0e <_free_r+0x1e>
 800bc32:	461a      	mov	r2, r3
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	b10b      	cbz	r3, 800bc3c <_free_r+0x4c>
 800bc38:	42a3      	cmp	r3, r4
 800bc3a:	d9fa      	bls.n	800bc32 <_free_r+0x42>
 800bc3c:	6811      	ldr	r1, [r2, #0]
 800bc3e:	1850      	adds	r0, r2, r1
 800bc40:	42a0      	cmp	r0, r4
 800bc42:	d10b      	bne.n	800bc5c <_free_r+0x6c>
 800bc44:	6820      	ldr	r0, [r4, #0]
 800bc46:	4401      	add	r1, r0
 800bc48:	1850      	adds	r0, r2, r1
 800bc4a:	4283      	cmp	r3, r0
 800bc4c:	6011      	str	r1, [r2, #0]
 800bc4e:	d1e0      	bne.n	800bc12 <_free_r+0x22>
 800bc50:	6818      	ldr	r0, [r3, #0]
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	6053      	str	r3, [r2, #4]
 800bc56:	4408      	add	r0, r1
 800bc58:	6010      	str	r0, [r2, #0]
 800bc5a:	e7da      	b.n	800bc12 <_free_r+0x22>
 800bc5c:	d902      	bls.n	800bc64 <_free_r+0x74>
 800bc5e:	230c      	movs	r3, #12
 800bc60:	602b      	str	r3, [r5, #0]
 800bc62:	e7d6      	b.n	800bc12 <_free_r+0x22>
 800bc64:	6820      	ldr	r0, [r4, #0]
 800bc66:	1821      	adds	r1, r4, r0
 800bc68:	428b      	cmp	r3, r1
 800bc6a:	bf04      	itt	eq
 800bc6c:	6819      	ldreq	r1, [r3, #0]
 800bc6e:	685b      	ldreq	r3, [r3, #4]
 800bc70:	6063      	str	r3, [r4, #4]
 800bc72:	bf04      	itt	eq
 800bc74:	1809      	addeq	r1, r1, r0
 800bc76:	6021      	streq	r1, [r4, #0]
 800bc78:	6054      	str	r4, [r2, #4]
 800bc7a:	e7ca      	b.n	800bc12 <_free_r+0x22>
 800bc7c:	bd38      	pop	{r3, r4, r5, pc}
 800bc7e:	bf00      	nop
 800bc80:	20000e6c 	.word	0x20000e6c

0800bc84 <malloc>:
 800bc84:	4b02      	ldr	r3, [pc, #8]	@ (800bc90 <malloc+0xc>)
 800bc86:	4601      	mov	r1, r0
 800bc88:	6818      	ldr	r0, [r3, #0]
 800bc8a:	f000 b825 	b.w	800bcd8 <_malloc_r>
 800bc8e:	bf00      	nop
 800bc90:	2000005c 	.word	0x2000005c

0800bc94 <sbrk_aligned>:
 800bc94:	b570      	push	{r4, r5, r6, lr}
 800bc96:	4e0f      	ldr	r6, [pc, #60]	@ (800bcd4 <sbrk_aligned+0x40>)
 800bc98:	460c      	mov	r4, r1
 800bc9a:	6831      	ldr	r1, [r6, #0]
 800bc9c:	4605      	mov	r5, r0
 800bc9e:	b911      	cbnz	r1, 800bca6 <sbrk_aligned+0x12>
 800bca0:	f001 f804 	bl	800ccac <_sbrk_r>
 800bca4:	6030      	str	r0, [r6, #0]
 800bca6:	4621      	mov	r1, r4
 800bca8:	4628      	mov	r0, r5
 800bcaa:	f000 ffff 	bl	800ccac <_sbrk_r>
 800bcae:	1c43      	adds	r3, r0, #1
 800bcb0:	d103      	bne.n	800bcba <sbrk_aligned+0x26>
 800bcb2:	f04f 34ff 	mov.w	r4, #4294967295
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	bd70      	pop	{r4, r5, r6, pc}
 800bcba:	1cc4      	adds	r4, r0, #3
 800bcbc:	f024 0403 	bic.w	r4, r4, #3
 800bcc0:	42a0      	cmp	r0, r4
 800bcc2:	d0f8      	beq.n	800bcb6 <sbrk_aligned+0x22>
 800bcc4:	1a21      	subs	r1, r4, r0
 800bcc6:	4628      	mov	r0, r5
 800bcc8:	f000 fff0 	bl	800ccac <_sbrk_r>
 800bccc:	3001      	adds	r0, #1
 800bcce:	d1f2      	bne.n	800bcb6 <sbrk_aligned+0x22>
 800bcd0:	e7ef      	b.n	800bcb2 <sbrk_aligned+0x1e>
 800bcd2:	bf00      	nop
 800bcd4:	20000e68 	.word	0x20000e68

0800bcd8 <_malloc_r>:
 800bcd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcdc:	1ccd      	adds	r5, r1, #3
 800bcde:	f025 0503 	bic.w	r5, r5, #3
 800bce2:	3508      	adds	r5, #8
 800bce4:	2d0c      	cmp	r5, #12
 800bce6:	bf38      	it	cc
 800bce8:	250c      	movcc	r5, #12
 800bcea:	2d00      	cmp	r5, #0
 800bcec:	4606      	mov	r6, r0
 800bcee:	db01      	blt.n	800bcf4 <_malloc_r+0x1c>
 800bcf0:	42a9      	cmp	r1, r5
 800bcf2:	d904      	bls.n	800bcfe <_malloc_r+0x26>
 800bcf4:	230c      	movs	r3, #12
 800bcf6:	6033      	str	r3, [r6, #0]
 800bcf8:	2000      	movs	r0, #0
 800bcfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bdd4 <_malloc_r+0xfc>
 800bd02:	f000 f869 	bl	800bdd8 <__malloc_lock>
 800bd06:	f8d8 3000 	ldr.w	r3, [r8]
 800bd0a:	461c      	mov	r4, r3
 800bd0c:	bb44      	cbnz	r4, 800bd60 <_malloc_r+0x88>
 800bd0e:	4629      	mov	r1, r5
 800bd10:	4630      	mov	r0, r6
 800bd12:	f7ff ffbf 	bl	800bc94 <sbrk_aligned>
 800bd16:	1c43      	adds	r3, r0, #1
 800bd18:	4604      	mov	r4, r0
 800bd1a:	d158      	bne.n	800bdce <_malloc_r+0xf6>
 800bd1c:	f8d8 4000 	ldr.w	r4, [r8]
 800bd20:	4627      	mov	r7, r4
 800bd22:	2f00      	cmp	r7, #0
 800bd24:	d143      	bne.n	800bdae <_malloc_r+0xd6>
 800bd26:	2c00      	cmp	r4, #0
 800bd28:	d04b      	beq.n	800bdc2 <_malloc_r+0xea>
 800bd2a:	6823      	ldr	r3, [r4, #0]
 800bd2c:	4639      	mov	r1, r7
 800bd2e:	4630      	mov	r0, r6
 800bd30:	eb04 0903 	add.w	r9, r4, r3
 800bd34:	f000 ffba 	bl	800ccac <_sbrk_r>
 800bd38:	4581      	cmp	r9, r0
 800bd3a:	d142      	bne.n	800bdc2 <_malloc_r+0xea>
 800bd3c:	6821      	ldr	r1, [r4, #0]
 800bd3e:	1a6d      	subs	r5, r5, r1
 800bd40:	4629      	mov	r1, r5
 800bd42:	4630      	mov	r0, r6
 800bd44:	f7ff ffa6 	bl	800bc94 <sbrk_aligned>
 800bd48:	3001      	adds	r0, #1
 800bd4a:	d03a      	beq.n	800bdc2 <_malloc_r+0xea>
 800bd4c:	6823      	ldr	r3, [r4, #0]
 800bd4e:	442b      	add	r3, r5
 800bd50:	6023      	str	r3, [r4, #0]
 800bd52:	f8d8 3000 	ldr.w	r3, [r8]
 800bd56:	685a      	ldr	r2, [r3, #4]
 800bd58:	bb62      	cbnz	r2, 800bdb4 <_malloc_r+0xdc>
 800bd5a:	f8c8 7000 	str.w	r7, [r8]
 800bd5e:	e00f      	b.n	800bd80 <_malloc_r+0xa8>
 800bd60:	6822      	ldr	r2, [r4, #0]
 800bd62:	1b52      	subs	r2, r2, r5
 800bd64:	d420      	bmi.n	800bda8 <_malloc_r+0xd0>
 800bd66:	2a0b      	cmp	r2, #11
 800bd68:	d917      	bls.n	800bd9a <_malloc_r+0xc2>
 800bd6a:	1961      	adds	r1, r4, r5
 800bd6c:	42a3      	cmp	r3, r4
 800bd6e:	6025      	str	r5, [r4, #0]
 800bd70:	bf18      	it	ne
 800bd72:	6059      	strne	r1, [r3, #4]
 800bd74:	6863      	ldr	r3, [r4, #4]
 800bd76:	bf08      	it	eq
 800bd78:	f8c8 1000 	streq.w	r1, [r8]
 800bd7c:	5162      	str	r2, [r4, r5]
 800bd7e:	604b      	str	r3, [r1, #4]
 800bd80:	4630      	mov	r0, r6
 800bd82:	f000 f82f 	bl	800bde4 <__malloc_unlock>
 800bd86:	f104 000b 	add.w	r0, r4, #11
 800bd8a:	1d23      	adds	r3, r4, #4
 800bd8c:	f020 0007 	bic.w	r0, r0, #7
 800bd90:	1ac2      	subs	r2, r0, r3
 800bd92:	bf1c      	itt	ne
 800bd94:	1a1b      	subne	r3, r3, r0
 800bd96:	50a3      	strne	r3, [r4, r2]
 800bd98:	e7af      	b.n	800bcfa <_malloc_r+0x22>
 800bd9a:	6862      	ldr	r2, [r4, #4]
 800bd9c:	42a3      	cmp	r3, r4
 800bd9e:	bf0c      	ite	eq
 800bda0:	f8c8 2000 	streq.w	r2, [r8]
 800bda4:	605a      	strne	r2, [r3, #4]
 800bda6:	e7eb      	b.n	800bd80 <_malloc_r+0xa8>
 800bda8:	4623      	mov	r3, r4
 800bdaa:	6864      	ldr	r4, [r4, #4]
 800bdac:	e7ae      	b.n	800bd0c <_malloc_r+0x34>
 800bdae:	463c      	mov	r4, r7
 800bdb0:	687f      	ldr	r7, [r7, #4]
 800bdb2:	e7b6      	b.n	800bd22 <_malloc_r+0x4a>
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	42a3      	cmp	r3, r4
 800bdba:	d1fb      	bne.n	800bdb4 <_malloc_r+0xdc>
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	6053      	str	r3, [r2, #4]
 800bdc0:	e7de      	b.n	800bd80 <_malloc_r+0xa8>
 800bdc2:	230c      	movs	r3, #12
 800bdc4:	6033      	str	r3, [r6, #0]
 800bdc6:	4630      	mov	r0, r6
 800bdc8:	f000 f80c 	bl	800bde4 <__malloc_unlock>
 800bdcc:	e794      	b.n	800bcf8 <_malloc_r+0x20>
 800bdce:	6005      	str	r5, [r0, #0]
 800bdd0:	e7d6      	b.n	800bd80 <_malloc_r+0xa8>
 800bdd2:	bf00      	nop
 800bdd4:	20000e6c 	.word	0x20000e6c

0800bdd8 <__malloc_lock>:
 800bdd8:	4801      	ldr	r0, [pc, #4]	@ (800bde0 <__malloc_lock+0x8>)
 800bdda:	f7ff b8ae 	b.w	800af3a <__retarget_lock_acquire_recursive>
 800bdde:	bf00      	nop
 800bde0:	20000e64 	.word	0x20000e64

0800bde4 <__malloc_unlock>:
 800bde4:	4801      	ldr	r0, [pc, #4]	@ (800bdec <__malloc_unlock+0x8>)
 800bde6:	f7ff b8a9 	b.w	800af3c <__retarget_lock_release_recursive>
 800bdea:	bf00      	nop
 800bdec:	20000e64 	.word	0x20000e64

0800bdf0 <_Balloc>:
 800bdf0:	b570      	push	{r4, r5, r6, lr}
 800bdf2:	69c6      	ldr	r6, [r0, #28]
 800bdf4:	4604      	mov	r4, r0
 800bdf6:	460d      	mov	r5, r1
 800bdf8:	b976      	cbnz	r6, 800be18 <_Balloc+0x28>
 800bdfa:	2010      	movs	r0, #16
 800bdfc:	f7ff ff42 	bl	800bc84 <malloc>
 800be00:	4602      	mov	r2, r0
 800be02:	61e0      	str	r0, [r4, #28]
 800be04:	b920      	cbnz	r0, 800be10 <_Balloc+0x20>
 800be06:	4b18      	ldr	r3, [pc, #96]	@ (800be68 <_Balloc+0x78>)
 800be08:	4818      	ldr	r0, [pc, #96]	@ (800be6c <_Balloc+0x7c>)
 800be0a:	216b      	movs	r1, #107	@ 0x6b
 800be0c:	f000 ff6c 	bl	800cce8 <__assert_func>
 800be10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be14:	6006      	str	r6, [r0, #0]
 800be16:	60c6      	str	r6, [r0, #12]
 800be18:	69e6      	ldr	r6, [r4, #28]
 800be1a:	68f3      	ldr	r3, [r6, #12]
 800be1c:	b183      	cbz	r3, 800be40 <_Balloc+0x50>
 800be1e:	69e3      	ldr	r3, [r4, #28]
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be26:	b9b8      	cbnz	r0, 800be58 <_Balloc+0x68>
 800be28:	2101      	movs	r1, #1
 800be2a:	fa01 f605 	lsl.w	r6, r1, r5
 800be2e:	1d72      	adds	r2, r6, #5
 800be30:	0092      	lsls	r2, r2, #2
 800be32:	4620      	mov	r0, r4
 800be34:	f000 ff76 	bl	800cd24 <_calloc_r>
 800be38:	b160      	cbz	r0, 800be54 <_Balloc+0x64>
 800be3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800be3e:	e00e      	b.n	800be5e <_Balloc+0x6e>
 800be40:	2221      	movs	r2, #33	@ 0x21
 800be42:	2104      	movs	r1, #4
 800be44:	4620      	mov	r0, r4
 800be46:	f000 ff6d 	bl	800cd24 <_calloc_r>
 800be4a:	69e3      	ldr	r3, [r4, #28]
 800be4c:	60f0      	str	r0, [r6, #12]
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d1e4      	bne.n	800be1e <_Balloc+0x2e>
 800be54:	2000      	movs	r0, #0
 800be56:	bd70      	pop	{r4, r5, r6, pc}
 800be58:	6802      	ldr	r2, [r0, #0]
 800be5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800be5e:	2300      	movs	r3, #0
 800be60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be64:	e7f7      	b.n	800be56 <_Balloc+0x66>
 800be66:	bf00      	nop
 800be68:	0800e10d 	.word	0x0800e10d
 800be6c:	0800e18d 	.word	0x0800e18d

0800be70 <_Bfree>:
 800be70:	b570      	push	{r4, r5, r6, lr}
 800be72:	69c6      	ldr	r6, [r0, #28]
 800be74:	4605      	mov	r5, r0
 800be76:	460c      	mov	r4, r1
 800be78:	b976      	cbnz	r6, 800be98 <_Bfree+0x28>
 800be7a:	2010      	movs	r0, #16
 800be7c:	f7ff ff02 	bl	800bc84 <malloc>
 800be80:	4602      	mov	r2, r0
 800be82:	61e8      	str	r0, [r5, #28]
 800be84:	b920      	cbnz	r0, 800be90 <_Bfree+0x20>
 800be86:	4b09      	ldr	r3, [pc, #36]	@ (800beac <_Bfree+0x3c>)
 800be88:	4809      	ldr	r0, [pc, #36]	@ (800beb0 <_Bfree+0x40>)
 800be8a:	218f      	movs	r1, #143	@ 0x8f
 800be8c:	f000 ff2c 	bl	800cce8 <__assert_func>
 800be90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be94:	6006      	str	r6, [r0, #0]
 800be96:	60c6      	str	r6, [r0, #12]
 800be98:	b13c      	cbz	r4, 800beaa <_Bfree+0x3a>
 800be9a:	69eb      	ldr	r3, [r5, #28]
 800be9c:	6862      	ldr	r2, [r4, #4]
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bea4:	6021      	str	r1, [r4, #0]
 800bea6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800beaa:	bd70      	pop	{r4, r5, r6, pc}
 800beac:	0800e10d 	.word	0x0800e10d
 800beb0:	0800e18d 	.word	0x0800e18d

0800beb4 <__multadd>:
 800beb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beb8:	690d      	ldr	r5, [r1, #16]
 800beba:	4607      	mov	r7, r0
 800bebc:	460c      	mov	r4, r1
 800bebe:	461e      	mov	r6, r3
 800bec0:	f101 0c14 	add.w	ip, r1, #20
 800bec4:	2000      	movs	r0, #0
 800bec6:	f8dc 3000 	ldr.w	r3, [ip]
 800beca:	b299      	uxth	r1, r3
 800becc:	fb02 6101 	mla	r1, r2, r1, r6
 800bed0:	0c1e      	lsrs	r6, r3, #16
 800bed2:	0c0b      	lsrs	r3, r1, #16
 800bed4:	fb02 3306 	mla	r3, r2, r6, r3
 800bed8:	b289      	uxth	r1, r1
 800beda:	3001      	adds	r0, #1
 800bedc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bee0:	4285      	cmp	r5, r0
 800bee2:	f84c 1b04 	str.w	r1, [ip], #4
 800bee6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800beea:	dcec      	bgt.n	800bec6 <__multadd+0x12>
 800beec:	b30e      	cbz	r6, 800bf32 <__multadd+0x7e>
 800beee:	68a3      	ldr	r3, [r4, #8]
 800bef0:	42ab      	cmp	r3, r5
 800bef2:	dc19      	bgt.n	800bf28 <__multadd+0x74>
 800bef4:	6861      	ldr	r1, [r4, #4]
 800bef6:	4638      	mov	r0, r7
 800bef8:	3101      	adds	r1, #1
 800befa:	f7ff ff79 	bl	800bdf0 <_Balloc>
 800befe:	4680      	mov	r8, r0
 800bf00:	b928      	cbnz	r0, 800bf0e <__multadd+0x5a>
 800bf02:	4602      	mov	r2, r0
 800bf04:	4b0c      	ldr	r3, [pc, #48]	@ (800bf38 <__multadd+0x84>)
 800bf06:	480d      	ldr	r0, [pc, #52]	@ (800bf3c <__multadd+0x88>)
 800bf08:	21ba      	movs	r1, #186	@ 0xba
 800bf0a:	f000 feed 	bl	800cce8 <__assert_func>
 800bf0e:	6922      	ldr	r2, [r4, #16]
 800bf10:	3202      	adds	r2, #2
 800bf12:	f104 010c 	add.w	r1, r4, #12
 800bf16:	0092      	lsls	r2, r2, #2
 800bf18:	300c      	adds	r0, #12
 800bf1a:	f000 fed7 	bl	800cccc <memcpy>
 800bf1e:	4621      	mov	r1, r4
 800bf20:	4638      	mov	r0, r7
 800bf22:	f7ff ffa5 	bl	800be70 <_Bfree>
 800bf26:	4644      	mov	r4, r8
 800bf28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf2c:	3501      	adds	r5, #1
 800bf2e:	615e      	str	r6, [r3, #20]
 800bf30:	6125      	str	r5, [r4, #16]
 800bf32:	4620      	mov	r0, r4
 800bf34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf38:	0800e17c 	.word	0x0800e17c
 800bf3c:	0800e18d 	.word	0x0800e18d

0800bf40 <__hi0bits>:
 800bf40:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bf44:	4603      	mov	r3, r0
 800bf46:	bf36      	itet	cc
 800bf48:	0403      	lslcc	r3, r0, #16
 800bf4a:	2000      	movcs	r0, #0
 800bf4c:	2010      	movcc	r0, #16
 800bf4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bf52:	bf3c      	itt	cc
 800bf54:	021b      	lslcc	r3, r3, #8
 800bf56:	3008      	addcc	r0, #8
 800bf58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf5c:	bf3c      	itt	cc
 800bf5e:	011b      	lslcc	r3, r3, #4
 800bf60:	3004      	addcc	r0, #4
 800bf62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf66:	bf3c      	itt	cc
 800bf68:	009b      	lslcc	r3, r3, #2
 800bf6a:	3002      	addcc	r0, #2
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	db05      	blt.n	800bf7c <__hi0bits+0x3c>
 800bf70:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bf74:	f100 0001 	add.w	r0, r0, #1
 800bf78:	bf08      	it	eq
 800bf7a:	2020      	moveq	r0, #32
 800bf7c:	4770      	bx	lr

0800bf7e <__lo0bits>:
 800bf7e:	6803      	ldr	r3, [r0, #0]
 800bf80:	4602      	mov	r2, r0
 800bf82:	f013 0007 	ands.w	r0, r3, #7
 800bf86:	d00b      	beq.n	800bfa0 <__lo0bits+0x22>
 800bf88:	07d9      	lsls	r1, r3, #31
 800bf8a:	d421      	bmi.n	800bfd0 <__lo0bits+0x52>
 800bf8c:	0798      	lsls	r0, r3, #30
 800bf8e:	bf49      	itett	mi
 800bf90:	085b      	lsrmi	r3, r3, #1
 800bf92:	089b      	lsrpl	r3, r3, #2
 800bf94:	2001      	movmi	r0, #1
 800bf96:	6013      	strmi	r3, [r2, #0]
 800bf98:	bf5c      	itt	pl
 800bf9a:	6013      	strpl	r3, [r2, #0]
 800bf9c:	2002      	movpl	r0, #2
 800bf9e:	4770      	bx	lr
 800bfa0:	b299      	uxth	r1, r3
 800bfa2:	b909      	cbnz	r1, 800bfa8 <__lo0bits+0x2a>
 800bfa4:	0c1b      	lsrs	r3, r3, #16
 800bfa6:	2010      	movs	r0, #16
 800bfa8:	b2d9      	uxtb	r1, r3
 800bfaa:	b909      	cbnz	r1, 800bfb0 <__lo0bits+0x32>
 800bfac:	3008      	adds	r0, #8
 800bfae:	0a1b      	lsrs	r3, r3, #8
 800bfb0:	0719      	lsls	r1, r3, #28
 800bfb2:	bf04      	itt	eq
 800bfb4:	091b      	lsreq	r3, r3, #4
 800bfb6:	3004      	addeq	r0, #4
 800bfb8:	0799      	lsls	r1, r3, #30
 800bfba:	bf04      	itt	eq
 800bfbc:	089b      	lsreq	r3, r3, #2
 800bfbe:	3002      	addeq	r0, #2
 800bfc0:	07d9      	lsls	r1, r3, #31
 800bfc2:	d403      	bmi.n	800bfcc <__lo0bits+0x4e>
 800bfc4:	085b      	lsrs	r3, r3, #1
 800bfc6:	f100 0001 	add.w	r0, r0, #1
 800bfca:	d003      	beq.n	800bfd4 <__lo0bits+0x56>
 800bfcc:	6013      	str	r3, [r2, #0]
 800bfce:	4770      	bx	lr
 800bfd0:	2000      	movs	r0, #0
 800bfd2:	4770      	bx	lr
 800bfd4:	2020      	movs	r0, #32
 800bfd6:	4770      	bx	lr

0800bfd8 <__i2b>:
 800bfd8:	b510      	push	{r4, lr}
 800bfda:	460c      	mov	r4, r1
 800bfdc:	2101      	movs	r1, #1
 800bfde:	f7ff ff07 	bl	800bdf0 <_Balloc>
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	b928      	cbnz	r0, 800bff2 <__i2b+0x1a>
 800bfe6:	4b05      	ldr	r3, [pc, #20]	@ (800bffc <__i2b+0x24>)
 800bfe8:	4805      	ldr	r0, [pc, #20]	@ (800c000 <__i2b+0x28>)
 800bfea:	f240 1145 	movw	r1, #325	@ 0x145
 800bfee:	f000 fe7b 	bl	800cce8 <__assert_func>
 800bff2:	2301      	movs	r3, #1
 800bff4:	6144      	str	r4, [r0, #20]
 800bff6:	6103      	str	r3, [r0, #16]
 800bff8:	bd10      	pop	{r4, pc}
 800bffa:	bf00      	nop
 800bffc:	0800e17c 	.word	0x0800e17c
 800c000:	0800e18d 	.word	0x0800e18d

0800c004 <__multiply>:
 800c004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c008:	4617      	mov	r7, r2
 800c00a:	690a      	ldr	r2, [r1, #16]
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	429a      	cmp	r2, r3
 800c010:	bfa8      	it	ge
 800c012:	463b      	movge	r3, r7
 800c014:	4689      	mov	r9, r1
 800c016:	bfa4      	itt	ge
 800c018:	460f      	movge	r7, r1
 800c01a:	4699      	movge	r9, r3
 800c01c:	693d      	ldr	r5, [r7, #16]
 800c01e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	6879      	ldr	r1, [r7, #4]
 800c026:	eb05 060a 	add.w	r6, r5, sl
 800c02a:	42b3      	cmp	r3, r6
 800c02c:	b085      	sub	sp, #20
 800c02e:	bfb8      	it	lt
 800c030:	3101      	addlt	r1, #1
 800c032:	f7ff fedd 	bl	800bdf0 <_Balloc>
 800c036:	b930      	cbnz	r0, 800c046 <__multiply+0x42>
 800c038:	4602      	mov	r2, r0
 800c03a:	4b41      	ldr	r3, [pc, #260]	@ (800c140 <__multiply+0x13c>)
 800c03c:	4841      	ldr	r0, [pc, #260]	@ (800c144 <__multiply+0x140>)
 800c03e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c042:	f000 fe51 	bl	800cce8 <__assert_func>
 800c046:	f100 0414 	add.w	r4, r0, #20
 800c04a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c04e:	4623      	mov	r3, r4
 800c050:	2200      	movs	r2, #0
 800c052:	4573      	cmp	r3, lr
 800c054:	d320      	bcc.n	800c098 <__multiply+0x94>
 800c056:	f107 0814 	add.w	r8, r7, #20
 800c05a:	f109 0114 	add.w	r1, r9, #20
 800c05e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c062:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c066:	9302      	str	r3, [sp, #8]
 800c068:	1beb      	subs	r3, r5, r7
 800c06a:	3b15      	subs	r3, #21
 800c06c:	f023 0303 	bic.w	r3, r3, #3
 800c070:	3304      	adds	r3, #4
 800c072:	3715      	adds	r7, #21
 800c074:	42bd      	cmp	r5, r7
 800c076:	bf38      	it	cc
 800c078:	2304      	movcc	r3, #4
 800c07a:	9301      	str	r3, [sp, #4]
 800c07c:	9b02      	ldr	r3, [sp, #8]
 800c07e:	9103      	str	r1, [sp, #12]
 800c080:	428b      	cmp	r3, r1
 800c082:	d80c      	bhi.n	800c09e <__multiply+0x9a>
 800c084:	2e00      	cmp	r6, #0
 800c086:	dd03      	ble.n	800c090 <__multiply+0x8c>
 800c088:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d055      	beq.n	800c13c <__multiply+0x138>
 800c090:	6106      	str	r6, [r0, #16]
 800c092:	b005      	add	sp, #20
 800c094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c098:	f843 2b04 	str.w	r2, [r3], #4
 800c09c:	e7d9      	b.n	800c052 <__multiply+0x4e>
 800c09e:	f8b1 a000 	ldrh.w	sl, [r1]
 800c0a2:	f1ba 0f00 	cmp.w	sl, #0
 800c0a6:	d01f      	beq.n	800c0e8 <__multiply+0xe4>
 800c0a8:	46c4      	mov	ip, r8
 800c0aa:	46a1      	mov	r9, r4
 800c0ac:	2700      	movs	r7, #0
 800c0ae:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c0b2:	f8d9 3000 	ldr.w	r3, [r9]
 800c0b6:	fa1f fb82 	uxth.w	fp, r2
 800c0ba:	b29b      	uxth	r3, r3
 800c0bc:	fb0a 330b 	mla	r3, sl, fp, r3
 800c0c0:	443b      	add	r3, r7
 800c0c2:	f8d9 7000 	ldr.w	r7, [r9]
 800c0c6:	0c12      	lsrs	r2, r2, #16
 800c0c8:	0c3f      	lsrs	r7, r7, #16
 800c0ca:	fb0a 7202 	mla	r2, sl, r2, r7
 800c0ce:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0d8:	4565      	cmp	r5, ip
 800c0da:	f849 3b04 	str.w	r3, [r9], #4
 800c0de:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c0e2:	d8e4      	bhi.n	800c0ae <__multiply+0xaa>
 800c0e4:	9b01      	ldr	r3, [sp, #4]
 800c0e6:	50e7      	str	r7, [r4, r3]
 800c0e8:	9b03      	ldr	r3, [sp, #12]
 800c0ea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c0ee:	3104      	adds	r1, #4
 800c0f0:	f1b9 0f00 	cmp.w	r9, #0
 800c0f4:	d020      	beq.n	800c138 <__multiply+0x134>
 800c0f6:	6823      	ldr	r3, [r4, #0]
 800c0f8:	4647      	mov	r7, r8
 800c0fa:	46a4      	mov	ip, r4
 800c0fc:	f04f 0a00 	mov.w	sl, #0
 800c100:	f8b7 b000 	ldrh.w	fp, [r7]
 800c104:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c108:	fb09 220b 	mla	r2, r9, fp, r2
 800c10c:	4452      	add	r2, sl
 800c10e:	b29b      	uxth	r3, r3
 800c110:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c114:	f84c 3b04 	str.w	r3, [ip], #4
 800c118:	f857 3b04 	ldr.w	r3, [r7], #4
 800c11c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c120:	f8bc 3000 	ldrh.w	r3, [ip]
 800c124:	fb09 330a 	mla	r3, r9, sl, r3
 800c128:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c12c:	42bd      	cmp	r5, r7
 800c12e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c132:	d8e5      	bhi.n	800c100 <__multiply+0xfc>
 800c134:	9a01      	ldr	r2, [sp, #4]
 800c136:	50a3      	str	r3, [r4, r2]
 800c138:	3404      	adds	r4, #4
 800c13a:	e79f      	b.n	800c07c <__multiply+0x78>
 800c13c:	3e01      	subs	r6, #1
 800c13e:	e7a1      	b.n	800c084 <__multiply+0x80>
 800c140:	0800e17c 	.word	0x0800e17c
 800c144:	0800e18d 	.word	0x0800e18d

0800c148 <__pow5mult>:
 800c148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c14c:	4615      	mov	r5, r2
 800c14e:	f012 0203 	ands.w	r2, r2, #3
 800c152:	4607      	mov	r7, r0
 800c154:	460e      	mov	r6, r1
 800c156:	d007      	beq.n	800c168 <__pow5mult+0x20>
 800c158:	4c25      	ldr	r4, [pc, #148]	@ (800c1f0 <__pow5mult+0xa8>)
 800c15a:	3a01      	subs	r2, #1
 800c15c:	2300      	movs	r3, #0
 800c15e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c162:	f7ff fea7 	bl	800beb4 <__multadd>
 800c166:	4606      	mov	r6, r0
 800c168:	10ad      	asrs	r5, r5, #2
 800c16a:	d03d      	beq.n	800c1e8 <__pow5mult+0xa0>
 800c16c:	69fc      	ldr	r4, [r7, #28]
 800c16e:	b97c      	cbnz	r4, 800c190 <__pow5mult+0x48>
 800c170:	2010      	movs	r0, #16
 800c172:	f7ff fd87 	bl	800bc84 <malloc>
 800c176:	4602      	mov	r2, r0
 800c178:	61f8      	str	r0, [r7, #28]
 800c17a:	b928      	cbnz	r0, 800c188 <__pow5mult+0x40>
 800c17c:	4b1d      	ldr	r3, [pc, #116]	@ (800c1f4 <__pow5mult+0xac>)
 800c17e:	481e      	ldr	r0, [pc, #120]	@ (800c1f8 <__pow5mult+0xb0>)
 800c180:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c184:	f000 fdb0 	bl	800cce8 <__assert_func>
 800c188:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c18c:	6004      	str	r4, [r0, #0]
 800c18e:	60c4      	str	r4, [r0, #12]
 800c190:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c194:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c198:	b94c      	cbnz	r4, 800c1ae <__pow5mult+0x66>
 800c19a:	f240 2171 	movw	r1, #625	@ 0x271
 800c19e:	4638      	mov	r0, r7
 800c1a0:	f7ff ff1a 	bl	800bfd8 <__i2b>
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c1aa:	4604      	mov	r4, r0
 800c1ac:	6003      	str	r3, [r0, #0]
 800c1ae:	f04f 0900 	mov.w	r9, #0
 800c1b2:	07eb      	lsls	r3, r5, #31
 800c1b4:	d50a      	bpl.n	800c1cc <__pow5mult+0x84>
 800c1b6:	4631      	mov	r1, r6
 800c1b8:	4622      	mov	r2, r4
 800c1ba:	4638      	mov	r0, r7
 800c1bc:	f7ff ff22 	bl	800c004 <__multiply>
 800c1c0:	4631      	mov	r1, r6
 800c1c2:	4680      	mov	r8, r0
 800c1c4:	4638      	mov	r0, r7
 800c1c6:	f7ff fe53 	bl	800be70 <_Bfree>
 800c1ca:	4646      	mov	r6, r8
 800c1cc:	106d      	asrs	r5, r5, #1
 800c1ce:	d00b      	beq.n	800c1e8 <__pow5mult+0xa0>
 800c1d0:	6820      	ldr	r0, [r4, #0]
 800c1d2:	b938      	cbnz	r0, 800c1e4 <__pow5mult+0x9c>
 800c1d4:	4622      	mov	r2, r4
 800c1d6:	4621      	mov	r1, r4
 800c1d8:	4638      	mov	r0, r7
 800c1da:	f7ff ff13 	bl	800c004 <__multiply>
 800c1de:	6020      	str	r0, [r4, #0]
 800c1e0:	f8c0 9000 	str.w	r9, [r0]
 800c1e4:	4604      	mov	r4, r0
 800c1e6:	e7e4      	b.n	800c1b2 <__pow5mult+0x6a>
 800c1e8:	4630      	mov	r0, r6
 800c1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1ee:	bf00      	nop
 800c1f0:	0800e240 	.word	0x0800e240
 800c1f4:	0800e10d 	.word	0x0800e10d
 800c1f8:	0800e18d 	.word	0x0800e18d

0800c1fc <__lshift>:
 800c1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c200:	460c      	mov	r4, r1
 800c202:	6849      	ldr	r1, [r1, #4]
 800c204:	6923      	ldr	r3, [r4, #16]
 800c206:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c20a:	68a3      	ldr	r3, [r4, #8]
 800c20c:	4607      	mov	r7, r0
 800c20e:	4691      	mov	r9, r2
 800c210:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c214:	f108 0601 	add.w	r6, r8, #1
 800c218:	42b3      	cmp	r3, r6
 800c21a:	db0b      	blt.n	800c234 <__lshift+0x38>
 800c21c:	4638      	mov	r0, r7
 800c21e:	f7ff fde7 	bl	800bdf0 <_Balloc>
 800c222:	4605      	mov	r5, r0
 800c224:	b948      	cbnz	r0, 800c23a <__lshift+0x3e>
 800c226:	4602      	mov	r2, r0
 800c228:	4b28      	ldr	r3, [pc, #160]	@ (800c2cc <__lshift+0xd0>)
 800c22a:	4829      	ldr	r0, [pc, #164]	@ (800c2d0 <__lshift+0xd4>)
 800c22c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c230:	f000 fd5a 	bl	800cce8 <__assert_func>
 800c234:	3101      	adds	r1, #1
 800c236:	005b      	lsls	r3, r3, #1
 800c238:	e7ee      	b.n	800c218 <__lshift+0x1c>
 800c23a:	2300      	movs	r3, #0
 800c23c:	f100 0114 	add.w	r1, r0, #20
 800c240:	f100 0210 	add.w	r2, r0, #16
 800c244:	4618      	mov	r0, r3
 800c246:	4553      	cmp	r3, sl
 800c248:	db33      	blt.n	800c2b2 <__lshift+0xb6>
 800c24a:	6920      	ldr	r0, [r4, #16]
 800c24c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c250:	f104 0314 	add.w	r3, r4, #20
 800c254:	f019 091f 	ands.w	r9, r9, #31
 800c258:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c25c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c260:	d02b      	beq.n	800c2ba <__lshift+0xbe>
 800c262:	f1c9 0e20 	rsb	lr, r9, #32
 800c266:	468a      	mov	sl, r1
 800c268:	2200      	movs	r2, #0
 800c26a:	6818      	ldr	r0, [r3, #0]
 800c26c:	fa00 f009 	lsl.w	r0, r0, r9
 800c270:	4310      	orrs	r0, r2
 800c272:	f84a 0b04 	str.w	r0, [sl], #4
 800c276:	f853 2b04 	ldr.w	r2, [r3], #4
 800c27a:	459c      	cmp	ip, r3
 800c27c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c280:	d8f3      	bhi.n	800c26a <__lshift+0x6e>
 800c282:	ebac 0304 	sub.w	r3, ip, r4
 800c286:	3b15      	subs	r3, #21
 800c288:	f023 0303 	bic.w	r3, r3, #3
 800c28c:	3304      	adds	r3, #4
 800c28e:	f104 0015 	add.w	r0, r4, #21
 800c292:	4560      	cmp	r0, ip
 800c294:	bf88      	it	hi
 800c296:	2304      	movhi	r3, #4
 800c298:	50ca      	str	r2, [r1, r3]
 800c29a:	b10a      	cbz	r2, 800c2a0 <__lshift+0xa4>
 800c29c:	f108 0602 	add.w	r6, r8, #2
 800c2a0:	3e01      	subs	r6, #1
 800c2a2:	4638      	mov	r0, r7
 800c2a4:	612e      	str	r6, [r5, #16]
 800c2a6:	4621      	mov	r1, r4
 800c2a8:	f7ff fde2 	bl	800be70 <_Bfree>
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	e7c5      	b.n	800c246 <__lshift+0x4a>
 800c2ba:	3904      	subs	r1, #4
 800c2bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c2c4:	459c      	cmp	ip, r3
 800c2c6:	d8f9      	bhi.n	800c2bc <__lshift+0xc0>
 800c2c8:	e7ea      	b.n	800c2a0 <__lshift+0xa4>
 800c2ca:	bf00      	nop
 800c2cc:	0800e17c 	.word	0x0800e17c
 800c2d0:	0800e18d 	.word	0x0800e18d

0800c2d4 <__mcmp>:
 800c2d4:	690a      	ldr	r2, [r1, #16]
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	6900      	ldr	r0, [r0, #16]
 800c2da:	1a80      	subs	r0, r0, r2
 800c2dc:	b530      	push	{r4, r5, lr}
 800c2de:	d10e      	bne.n	800c2fe <__mcmp+0x2a>
 800c2e0:	3314      	adds	r3, #20
 800c2e2:	3114      	adds	r1, #20
 800c2e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c2e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c2ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c2f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c2f4:	4295      	cmp	r5, r2
 800c2f6:	d003      	beq.n	800c300 <__mcmp+0x2c>
 800c2f8:	d205      	bcs.n	800c306 <__mcmp+0x32>
 800c2fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c2fe:	bd30      	pop	{r4, r5, pc}
 800c300:	42a3      	cmp	r3, r4
 800c302:	d3f3      	bcc.n	800c2ec <__mcmp+0x18>
 800c304:	e7fb      	b.n	800c2fe <__mcmp+0x2a>
 800c306:	2001      	movs	r0, #1
 800c308:	e7f9      	b.n	800c2fe <__mcmp+0x2a>
	...

0800c30c <__mdiff>:
 800c30c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c310:	4689      	mov	r9, r1
 800c312:	4606      	mov	r6, r0
 800c314:	4611      	mov	r1, r2
 800c316:	4648      	mov	r0, r9
 800c318:	4614      	mov	r4, r2
 800c31a:	f7ff ffdb 	bl	800c2d4 <__mcmp>
 800c31e:	1e05      	subs	r5, r0, #0
 800c320:	d112      	bne.n	800c348 <__mdiff+0x3c>
 800c322:	4629      	mov	r1, r5
 800c324:	4630      	mov	r0, r6
 800c326:	f7ff fd63 	bl	800bdf0 <_Balloc>
 800c32a:	4602      	mov	r2, r0
 800c32c:	b928      	cbnz	r0, 800c33a <__mdiff+0x2e>
 800c32e:	4b3f      	ldr	r3, [pc, #252]	@ (800c42c <__mdiff+0x120>)
 800c330:	f240 2137 	movw	r1, #567	@ 0x237
 800c334:	483e      	ldr	r0, [pc, #248]	@ (800c430 <__mdiff+0x124>)
 800c336:	f000 fcd7 	bl	800cce8 <__assert_func>
 800c33a:	2301      	movs	r3, #1
 800c33c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c340:	4610      	mov	r0, r2
 800c342:	b003      	add	sp, #12
 800c344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c348:	bfbc      	itt	lt
 800c34a:	464b      	movlt	r3, r9
 800c34c:	46a1      	movlt	r9, r4
 800c34e:	4630      	mov	r0, r6
 800c350:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c354:	bfba      	itte	lt
 800c356:	461c      	movlt	r4, r3
 800c358:	2501      	movlt	r5, #1
 800c35a:	2500      	movge	r5, #0
 800c35c:	f7ff fd48 	bl	800bdf0 <_Balloc>
 800c360:	4602      	mov	r2, r0
 800c362:	b918      	cbnz	r0, 800c36c <__mdiff+0x60>
 800c364:	4b31      	ldr	r3, [pc, #196]	@ (800c42c <__mdiff+0x120>)
 800c366:	f240 2145 	movw	r1, #581	@ 0x245
 800c36a:	e7e3      	b.n	800c334 <__mdiff+0x28>
 800c36c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c370:	6926      	ldr	r6, [r4, #16]
 800c372:	60c5      	str	r5, [r0, #12]
 800c374:	f109 0310 	add.w	r3, r9, #16
 800c378:	f109 0514 	add.w	r5, r9, #20
 800c37c:	f104 0e14 	add.w	lr, r4, #20
 800c380:	f100 0b14 	add.w	fp, r0, #20
 800c384:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c388:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c38c:	9301      	str	r3, [sp, #4]
 800c38e:	46d9      	mov	r9, fp
 800c390:	f04f 0c00 	mov.w	ip, #0
 800c394:	9b01      	ldr	r3, [sp, #4]
 800c396:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c39a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c39e:	9301      	str	r3, [sp, #4]
 800c3a0:	fa1f f38a 	uxth.w	r3, sl
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	b283      	uxth	r3, r0
 800c3a8:	1acb      	subs	r3, r1, r3
 800c3aa:	0c00      	lsrs	r0, r0, #16
 800c3ac:	4463      	add	r3, ip
 800c3ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c3b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c3bc:	4576      	cmp	r6, lr
 800c3be:	f849 3b04 	str.w	r3, [r9], #4
 800c3c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c3c6:	d8e5      	bhi.n	800c394 <__mdiff+0x88>
 800c3c8:	1b33      	subs	r3, r6, r4
 800c3ca:	3b15      	subs	r3, #21
 800c3cc:	f023 0303 	bic.w	r3, r3, #3
 800c3d0:	3415      	adds	r4, #21
 800c3d2:	3304      	adds	r3, #4
 800c3d4:	42a6      	cmp	r6, r4
 800c3d6:	bf38      	it	cc
 800c3d8:	2304      	movcc	r3, #4
 800c3da:	441d      	add	r5, r3
 800c3dc:	445b      	add	r3, fp
 800c3de:	461e      	mov	r6, r3
 800c3e0:	462c      	mov	r4, r5
 800c3e2:	4544      	cmp	r4, r8
 800c3e4:	d30e      	bcc.n	800c404 <__mdiff+0xf8>
 800c3e6:	f108 0103 	add.w	r1, r8, #3
 800c3ea:	1b49      	subs	r1, r1, r5
 800c3ec:	f021 0103 	bic.w	r1, r1, #3
 800c3f0:	3d03      	subs	r5, #3
 800c3f2:	45a8      	cmp	r8, r5
 800c3f4:	bf38      	it	cc
 800c3f6:	2100      	movcc	r1, #0
 800c3f8:	440b      	add	r3, r1
 800c3fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c3fe:	b191      	cbz	r1, 800c426 <__mdiff+0x11a>
 800c400:	6117      	str	r7, [r2, #16]
 800c402:	e79d      	b.n	800c340 <__mdiff+0x34>
 800c404:	f854 1b04 	ldr.w	r1, [r4], #4
 800c408:	46e6      	mov	lr, ip
 800c40a:	0c08      	lsrs	r0, r1, #16
 800c40c:	fa1c fc81 	uxtah	ip, ip, r1
 800c410:	4471      	add	r1, lr
 800c412:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c416:	b289      	uxth	r1, r1
 800c418:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c41c:	f846 1b04 	str.w	r1, [r6], #4
 800c420:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c424:	e7dd      	b.n	800c3e2 <__mdiff+0xd6>
 800c426:	3f01      	subs	r7, #1
 800c428:	e7e7      	b.n	800c3fa <__mdiff+0xee>
 800c42a:	bf00      	nop
 800c42c:	0800e17c 	.word	0x0800e17c
 800c430:	0800e18d 	.word	0x0800e18d

0800c434 <__d2b>:
 800c434:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c438:	460f      	mov	r7, r1
 800c43a:	2101      	movs	r1, #1
 800c43c:	ec59 8b10 	vmov	r8, r9, d0
 800c440:	4616      	mov	r6, r2
 800c442:	f7ff fcd5 	bl	800bdf0 <_Balloc>
 800c446:	4604      	mov	r4, r0
 800c448:	b930      	cbnz	r0, 800c458 <__d2b+0x24>
 800c44a:	4602      	mov	r2, r0
 800c44c:	4b23      	ldr	r3, [pc, #140]	@ (800c4dc <__d2b+0xa8>)
 800c44e:	4824      	ldr	r0, [pc, #144]	@ (800c4e0 <__d2b+0xac>)
 800c450:	f240 310f 	movw	r1, #783	@ 0x30f
 800c454:	f000 fc48 	bl	800cce8 <__assert_func>
 800c458:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c45c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c460:	b10d      	cbz	r5, 800c466 <__d2b+0x32>
 800c462:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c466:	9301      	str	r3, [sp, #4]
 800c468:	f1b8 0300 	subs.w	r3, r8, #0
 800c46c:	d023      	beq.n	800c4b6 <__d2b+0x82>
 800c46e:	4668      	mov	r0, sp
 800c470:	9300      	str	r3, [sp, #0]
 800c472:	f7ff fd84 	bl	800bf7e <__lo0bits>
 800c476:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c47a:	b1d0      	cbz	r0, 800c4b2 <__d2b+0x7e>
 800c47c:	f1c0 0320 	rsb	r3, r0, #32
 800c480:	fa02 f303 	lsl.w	r3, r2, r3
 800c484:	430b      	orrs	r3, r1
 800c486:	40c2      	lsrs	r2, r0
 800c488:	6163      	str	r3, [r4, #20]
 800c48a:	9201      	str	r2, [sp, #4]
 800c48c:	9b01      	ldr	r3, [sp, #4]
 800c48e:	61a3      	str	r3, [r4, #24]
 800c490:	2b00      	cmp	r3, #0
 800c492:	bf0c      	ite	eq
 800c494:	2201      	moveq	r2, #1
 800c496:	2202      	movne	r2, #2
 800c498:	6122      	str	r2, [r4, #16]
 800c49a:	b1a5      	cbz	r5, 800c4c6 <__d2b+0x92>
 800c49c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c4a0:	4405      	add	r5, r0
 800c4a2:	603d      	str	r5, [r7, #0]
 800c4a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c4a8:	6030      	str	r0, [r6, #0]
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	b003      	add	sp, #12
 800c4ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4b2:	6161      	str	r1, [r4, #20]
 800c4b4:	e7ea      	b.n	800c48c <__d2b+0x58>
 800c4b6:	a801      	add	r0, sp, #4
 800c4b8:	f7ff fd61 	bl	800bf7e <__lo0bits>
 800c4bc:	9b01      	ldr	r3, [sp, #4]
 800c4be:	6163      	str	r3, [r4, #20]
 800c4c0:	3020      	adds	r0, #32
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	e7e8      	b.n	800c498 <__d2b+0x64>
 800c4c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c4ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c4ce:	6038      	str	r0, [r7, #0]
 800c4d0:	6918      	ldr	r0, [r3, #16]
 800c4d2:	f7ff fd35 	bl	800bf40 <__hi0bits>
 800c4d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c4da:	e7e5      	b.n	800c4a8 <__d2b+0x74>
 800c4dc:	0800e17c 	.word	0x0800e17c
 800c4e0:	0800e18d 	.word	0x0800e18d

0800c4e4 <__ssputs_r>:
 800c4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4e8:	688e      	ldr	r6, [r1, #8]
 800c4ea:	461f      	mov	r7, r3
 800c4ec:	42be      	cmp	r6, r7
 800c4ee:	680b      	ldr	r3, [r1, #0]
 800c4f0:	4682      	mov	sl, r0
 800c4f2:	460c      	mov	r4, r1
 800c4f4:	4690      	mov	r8, r2
 800c4f6:	d82d      	bhi.n	800c554 <__ssputs_r+0x70>
 800c4f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c4fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c500:	d026      	beq.n	800c550 <__ssputs_r+0x6c>
 800c502:	6965      	ldr	r5, [r4, #20]
 800c504:	6909      	ldr	r1, [r1, #16]
 800c506:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c50a:	eba3 0901 	sub.w	r9, r3, r1
 800c50e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c512:	1c7b      	adds	r3, r7, #1
 800c514:	444b      	add	r3, r9
 800c516:	106d      	asrs	r5, r5, #1
 800c518:	429d      	cmp	r5, r3
 800c51a:	bf38      	it	cc
 800c51c:	461d      	movcc	r5, r3
 800c51e:	0553      	lsls	r3, r2, #21
 800c520:	d527      	bpl.n	800c572 <__ssputs_r+0x8e>
 800c522:	4629      	mov	r1, r5
 800c524:	f7ff fbd8 	bl	800bcd8 <_malloc_r>
 800c528:	4606      	mov	r6, r0
 800c52a:	b360      	cbz	r0, 800c586 <__ssputs_r+0xa2>
 800c52c:	6921      	ldr	r1, [r4, #16]
 800c52e:	464a      	mov	r2, r9
 800c530:	f000 fbcc 	bl	800cccc <memcpy>
 800c534:	89a3      	ldrh	r3, [r4, #12]
 800c536:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c53a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c53e:	81a3      	strh	r3, [r4, #12]
 800c540:	6126      	str	r6, [r4, #16]
 800c542:	6165      	str	r5, [r4, #20]
 800c544:	444e      	add	r6, r9
 800c546:	eba5 0509 	sub.w	r5, r5, r9
 800c54a:	6026      	str	r6, [r4, #0]
 800c54c:	60a5      	str	r5, [r4, #8]
 800c54e:	463e      	mov	r6, r7
 800c550:	42be      	cmp	r6, r7
 800c552:	d900      	bls.n	800c556 <__ssputs_r+0x72>
 800c554:	463e      	mov	r6, r7
 800c556:	6820      	ldr	r0, [r4, #0]
 800c558:	4632      	mov	r2, r6
 800c55a:	4641      	mov	r1, r8
 800c55c:	f000 fb6a 	bl	800cc34 <memmove>
 800c560:	68a3      	ldr	r3, [r4, #8]
 800c562:	1b9b      	subs	r3, r3, r6
 800c564:	60a3      	str	r3, [r4, #8]
 800c566:	6823      	ldr	r3, [r4, #0]
 800c568:	4433      	add	r3, r6
 800c56a:	6023      	str	r3, [r4, #0]
 800c56c:	2000      	movs	r0, #0
 800c56e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c572:	462a      	mov	r2, r5
 800c574:	f000 fbfc 	bl	800cd70 <_realloc_r>
 800c578:	4606      	mov	r6, r0
 800c57a:	2800      	cmp	r0, #0
 800c57c:	d1e0      	bne.n	800c540 <__ssputs_r+0x5c>
 800c57e:	6921      	ldr	r1, [r4, #16]
 800c580:	4650      	mov	r0, sl
 800c582:	f7ff fb35 	bl	800bbf0 <_free_r>
 800c586:	230c      	movs	r3, #12
 800c588:	f8ca 3000 	str.w	r3, [sl]
 800c58c:	89a3      	ldrh	r3, [r4, #12]
 800c58e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c592:	81a3      	strh	r3, [r4, #12]
 800c594:	f04f 30ff 	mov.w	r0, #4294967295
 800c598:	e7e9      	b.n	800c56e <__ssputs_r+0x8a>
	...

0800c59c <_svfiprintf_r>:
 800c59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a0:	4698      	mov	r8, r3
 800c5a2:	898b      	ldrh	r3, [r1, #12]
 800c5a4:	061b      	lsls	r3, r3, #24
 800c5a6:	b09d      	sub	sp, #116	@ 0x74
 800c5a8:	4607      	mov	r7, r0
 800c5aa:	460d      	mov	r5, r1
 800c5ac:	4614      	mov	r4, r2
 800c5ae:	d510      	bpl.n	800c5d2 <_svfiprintf_r+0x36>
 800c5b0:	690b      	ldr	r3, [r1, #16]
 800c5b2:	b973      	cbnz	r3, 800c5d2 <_svfiprintf_r+0x36>
 800c5b4:	2140      	movs	r1, #64	@ 0x40
 800c5b6:	f7ff fb8f 	bl	800bcd8 <_malloc_r>
 800c5ba:	6028      	str	r0, [r5, #0]
 800c5bc:	6128      	str	r0, [r5, #16]
 800c5be:	b930      	cbnz	r0, 800c5ce <_svfiprintf_r+0x32>
 800c5c0:	230c      	movs	r3, #12
 800c5c2:	603b      	str	r3, [r7, #0]
 800c5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5c8:	b01d      	add	sp, #116	@ 0x74
 800c5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ce:	2340      	movs	r3, #64	@ 0x40
 800c5d0:	616b      	str	r3, [r5, #20]
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5d6:	2320      	movs	r3, #32
 800c5d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5e0:	2330      	movs	r3, #48	@ 0x30
 800c5e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c780 <_svfiprintf_r+0x1e4>
 800c5e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c5ea:	f04f 0901 	mov.w	r9, #1
 800c5ee:	4623      	mov	r3, r4
 800c5f0:	469a      	mov	sl, r3
 800c5f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5f6:	b10a      	cbz	r2, 800c5fc <_svfiprintf_r+0x60>
 800c5f8:	2a25      	cmp	r2, #37	@ 0x25
 800c5fa:	d1f9      	bne.n	800c5f0 <_svfiprintf_r+0x54>
 800c5fc:	ebba 0b04 	subs.w	fp, sl, r4
 800c600:	d00b      	beq.n	800c61a <_svfiprintf_r+0x7e>
 800c602:	465b      	mov	r3, fp
 800c604:	4622      	mov	r2, r4
 800c606:	4629      	mov	r1, r5
 800c608:	4638      	mov	r0, r7
 800c60a:	f7ff ff6b 	bl	800c4e4 <__ssputs_r>
 800c60e:	3001      	adds	r0, #1
 800c610:	f000 80a7 	beq.w	800c762 <_svfiprintf_r+0x1c6>
 800c614:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c616:	445a      	add	r2, fp
 800c618:	9209      	str	r2, [sp, #36]	@ 0x24
 800c61a:	f89a 3000 	ldrb.w	r3, [sl]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	f000 809f 	beq.w	800c762 <_svfiprintf_r+0x1c6>
 800c624:	2300      	movs	r3, #0
 800c626:	f04f 32ff 	mov.w	r2, #4294967295
 800c62a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c62e:	f10a 0a01 	add.w	sl, sl, #1
 800c632:	9304      	str	r3, [sp, #16]
 800c634:	9307      	str	r3, [sp, #28]
 800c636:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c63a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c63c:	4654      	mov	r4, sl
 800c63e:	2205      	movs	r2, #5
 800c640:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c644:	484e      	ldr	r0, [pc, #312]	@ (800c780 <_svfiprintf_r+0x1e4>)
 800c646:	f7f3 fdc3 	bl	80001d0 <memchr>
 800c64a:	9a04      	ldr	r2, [sp, #16]
 800c64c:	b9d8      	cbnz	r0, 800c686 <_svfiprintf_r+0xea>
 800c64e:	06d0      	lsls	r0, r2, #27
 800c650:	bf44      	itt	mi
 800c652:	2320      	movmi	r3, #32
 800c654:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c658:	0711      	lsls	r1, r2, #28
 800c65a:	bf44      	itt	mi
 800c65c:	232b      	movmi	r3, #43	@ 0x2b
 800c65e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c662:	f89a 3000 	ldrb.w	r3, [sl]
 800c666:	2b2a      	cmp	r3, #42	@ 0x2a
 800c668:	d015      	beq.n	800c696 <_svfiprintf_r+0xfa>
 800c66a:	9a07      	ldr	r2, [sp, #28]
 800c66c:	4654      	mov	r4, sl
 800c66e:	2000      	movs	r0, #0
 800c670:	f04f 0c0a 	mov.w	ip, #10
 800c674:	4621      	mov	r1, r4
 800c676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c67a:	3b30      	subs	r3, #48	@ 0x30
 800c67c:	2b09      	cmp	r3, #9
 800c67e:	d94b      	bls.n	800c718 <_svfiprintf_r+0x17c>
 800c680:	b1b0      	cbz	r0, 800c6b0 <_svfiprintf_r+0x114>
 800c682:	9207      	str	r2, [sp, #28]
 800c684:	e014      	b.n	800c6b0 <_svfiprintf_r+0x114>
 800c686:	eba0 0308 	sub.w	r3, r0, r8
 800c68a:	fa09 f303 	lsl.w	r3, r9, r3
 800c68e:	4313      	orrs	r3, r2
 800c690:	9304      	str	r3, [sp, #16]
 800c692:	46a2      	mov	sl, r4
 800c694:	e7d2      	b.n	800c63c <_svfiprintf_r+0xa0>
 800c696:	9b03      	ldr	r3, [sp, #12]
 800c698:	1d19      	adds	r1, r3, #4
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	9103      	str	r1, [sp, #12]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	bfbb      	ittet	lt
 800c6a2:	425b      	neglt	r3, r3
 800c6a4:	f042 0202 	orrlt.w	r2, r2, #2
 800c6a8:	9307      	strge	r3, [sp, #28]
 800c6aa:	9307      	strlt	r3, [sp, #28]
 800c6ac:	bfb8      	it	lt
 800c6ae:	9204      	strlt	r2, [sp, #16]
 800c6b0:	7823      	ldrb	r3, [r4, #0]
 800c6b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6b4:	d10a      	bne.n	800c6cc <_svfiprintf_r+0x130>
 800c6b6:	7863      	ldrb	r3, [r4, #1]
 800c6b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6ba:	d132      	bne.n	800c722 <_svfiprintf_r+0x186>
 800c6bc:	9b03      	ldr	r3, [sp, #12]
 800c6be:	1d1a      	adds	r2, r3, #4
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	9203      	str	r2, [sp, #12]
 800c6c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6c8:	3402      	adds	r4, #2
 800c6ca:	9305      	str	r3, [sp, #20]
 800c6cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c790 <_svfiprintf_r+0x1f4>
 800c6d0:	7821      	ldrb	r1, [r4, #0]
 800c6d2:	2203      	movs	r2, #3
 800c6d4:	4650      	mov	r0, sl
 800c6d6:	f7f3 fd7b 	bl	80001d0 <memchr>
 800c6da:	b138      	cbz	r0, 800c6ec <_svfiprintf_r+0x150>
 800c6dc:	9b04      	ldr	r3, [sp, #16]
 800c6de:	eba0 000a 	sub.w	r0, r0, sl
 800c6e2:	2240      	movs	r2, #64	@ 0x40
 800c6e4:	4082      	lsls	r2, r0
 800c6e6:	4313      	orrs	r3, r2
 800c6e8:	3401      	adds	r4, #1
 800c6ea:	9304      	str	r3, [sp, #16]
 800c6ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6f0:	4824      	ldr	r0, [pc, #144]	@ (800c784 <_svfiprintf_r+0x1e8>)
 800c6f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c6f6:	2206      	movs	r2, #6
 800c6f8:	f7f3 fd6a 	bl	80001d0 <memchr>
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	d036      	beq.n	800c76e <_svfiprintf_r+0x1d2>
 800c700:	4b21      	ldr	r3, [pc, #132]	@ (800c788 <_svfiprintf_r+0x1ec>)
 800c702:	bb1b      	cbnz	r3, 800c74c <_svfiprintf_r+0x1b0>
 800c704:	9b03      	ldr	r3, [sp, #12]
 800c706:	3307      	adds	r3, #7
 800c708:	f023 0307 	bic.w	r3, r3, #7
 800c70c:	3308      	adds	r3, #8
 800c70e:	9303      	str	r3, [sp, #12]
 800c710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c712:	4433      	add	r3, r6
 800c714:	9309      	str	r3, [sp, #36]	@ 0x24
 800c716:	e76a      	b.n	800c5ee <_svfiprintf_r+0x52>
 800c718:	fb0c 3202 	mla	r2, ip, r2, r3
 800c71c:	460c      	mov	r4, r1
 800c71e:	2001      	movs	r0, #1
 800c720:	e7a8      	b.n	800c674 <_svfiprintf_r+0xd8>
 800c722:	2300      	movs	r3, #0
 800c724:	3401      	adds	r4, #1
 800c726:	9305      	str	r3, [sp, #20]
 800c728:	4619      	mov	r1, r3
 800c72a:	f04f 0c0a 	mov.w	ip, #10
 800c72e:	4620      	mov	r0, r4
 800c730:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c734:	3a30      	subs	r2, #48	@ 0x30
 800c736:	2a09      	cmp	r2, #9
 800c738:	d903      	bls.n	800c742 <_svfiprintf_r+0x1a6>
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d0c6      	beq.n	800c6cc <_svfiprintf_r+0x130>
 800c73e:	9105      	str	r1, [sp, #20]
 800c740:	e7c4      	b.n	800c6cc <_svfiprintf_r+0x130>
 800c742:	fb0c 2101 	mla	r1, ip, r1, r2
 800c746:	4604      	mov	r4, r0
 800c748:	2301      	movs	r3, #1
 800c74a:	e7f0      	b.n	800c72e <_svfiprintf_r+0x192>
 800c74c:	ab03      	add	r3, sp, #12
 800c74e:	9300      	str	r3, [sp, #0]
 800c750:	462a      	mov	r2, r5
 800c752:	4b0e      	ldr	r3, [pc, #56]	@ (800c78c <_svfiprintf_r+0x1f0>)
 800c754:	a904      	add	r1, sp, #16
 800c756:	4638      	mov	r0, r7
 800c758:	f7fd fd76 	bl	800a248 <_printf_float>
 800c75c:	1c42      	adds	r2, r0, #1
 800c75e:	4606      	mov	r6, r0
 800c760:	d1d6      	bne.n	800c710 <_svfiprintf_r+0x174>
 800c762:	89ab      	ldrh	r3, [r5, #12]
 800c764:	065b      	lsls	r3, r3, #25
 800c766:	f53f af2d 	bmi.w	800c5c4 <_svfiprintf_r+0x28>
 800c76a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c76c:	e72c      	b.n	800c5c8 <_svfiprintf_r+0x2c>
 800c76e:	ab03      	add	r3, sp, #12
 800c770:	9300      	str	r3, [sp, #0]
 800c772:	462a      	mov	r2, r5
 800c774:	4b05      	ldr	r3, [pc, #20]	@ (800c78c <_svfiprintf_r+0x1f0>)
 800c776:	a904      	add	r1, sp, #16
 800c778:	4638      	mov	r0, r7
 800c77a:	f7fd fffd 	bl	800a778 <_printf_i>
 800c77e:	e7ed      	b.n	800c75c <_svfiprintf_r+0x1c0>
 800c780:	0800e1e6 	.word	0x0800e1e6
 800c784:	0800e1f0 	.word	0x0800e1f0
 800c788:	0800a249 	.word	0x0800a249
 800c78c:	0800c4e5 	.word	0x0800c4e5
 800c790:	0800e1ec 	.word	0x0800e1ec

0800c794 <__sfputc_r>:
 800c794:	6893      	ldr	r3, [r2, #8]
 800c796:	3b01      	subs	r3, #1
 800c798:	2b00      	cmp	r3, #0
 800c79a:	b410      	push	{r4}
 800c79c:	6093      	str	r3, [r2, #8]
 800c79e:	da08      	bge.n	800c7b2 <__sfputc_r+0x1e>
 800c7a0:	6994      	ldr	r4, [r2, #24]
 800c7a2:	42a3      	cmp	r3, r4
 800c7a4:	db01      	blt.n	800c7aa <__sfputc_r+0x16>
 800c7a6:	290a      	cmp	r1, #10
 800c7a8:	d103      	bne.n	800c7b2 <__sfputc_r+0x1e>
 800c7aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7ae:	f7fe bab3 	b.w	800ad18 <__swbuf_r>
 800c7b2:	6813      	ldr	r3, [r2, #0]
 800c7b4:	1c58      	adds	r0, r3, #1
 800c7b6:	6010      	str	r0, [r2, #0]
 800c7b8:	7019      	strb	r1, [r3, #0]
 800c7ba:	4608      	mov	r0, r1
 800c7bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7c0:	4770      	bx	lr

0800c7c2 <__sfputs_r>:
 800c7c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7c4:	4606      	mov	r6, r0
 800c7c6:	460f      	mov	r7, r1
 800c7c8:	4614      	mov	r4, r2
 800c7ca:	18d5      	adds	r5, r2, r3
 800c7cc:	42ac      	cmp	r4, r5
 800c7ce:	d101      	bne.n	800c7d4 <__sfputs_r+0x12>
 800c7d0:	2000      	movs	r0, #0
 800c7d2:	e007      	b.n	800c7e4 <__sfputs_r+0x22>
 800c7d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7d8:	463a      	mov	r2, r7
 800c7da:	4630      	mov	r0, r6
 800c7dc:	f7ff ffda 	bl	800c794 <__sfputc_r>
 800c7e0:	1c43      	adds	r3, r0, #1
 800c7e2:	d1f3      	bne.n	800c7cc <__sfputs_r+0xa>
 800c7e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c7e8 <_vfiprintf_r>:
 800c7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ec:	460d      	mov	r5, r1
 800c7ee:	b09d      	sub	sp, #116	@ 0x74
 800c7f0:	4614      	mov	r4, r2
 800c7f2:	4698      	mov	r8, r3
 800c7f4:	4606      	mov	r6, r0
 800c7f6:	b118      	cbz	r0, 800c800 <_vfiprintf_r+0x18>
 800c7f8:	6a03      	ldr	r3, [r0, #32]
 800c7fa:	b90b      	cbnz	r3, 800c800 <_vfiprintf_r+0x18>
 800c7fc:	f7fe f966 	bl	800aacc <__sinit>
 800c800:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c802:	07d9      	lsls	r1, r3, #31
 800c804:	d405      	bmi.n	800c812 <_vfiprintf_r+0x2a>
 800c806:	89ab      	ldrh	r3, [r5, #12]
 800c808:	059a      	lsls	r2, r3, #22
 800c80a:	d402      	bmi.n	800c812 <_vfiprintf_r+0x2a>
 800c80c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c80e:	f7fe fb94 	bl	800af3a <__retarget_lock_acquire_recursive>
 800c812:	89ab      	ldrh	r3, [r5, #12]
 800c814:	071b      	lsls	r3, r3, #28
 800c816:	d501      	bpl.n	800c81c <_vfiprintf_r+0x34>
 800c818:	692b      	ldr	r3, [r5, #16]
 800c81a:	b99b      	cbnz	r3, 800c844 <_vfiprintf_r+0x5c>
 800c81c:	4629      	mov	r1, r5
 800c81e:	4630      	mov	r0, r6
 800c820:	f7fe fab8 	bl	800ad94 <__swsetup_r>
 800c824:	b170      	cbz	r0, 800c844 <_vfiprintf_r+0x5c>
 800c826:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c828:	07dc      	lsls	r4, r3, #31
 800c82a:	d504      	bpl.n	800c836 <_vfiprintf_r+0x4e>
 800c82c:	f04f 30ff 	mov.w	r0, #4294967295
 800c830:	b01d      	add	sp, #116	@ 0x74
 800c832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c836:	89ab      	ldrh	r3, [r5, #12]
 800c838:	0598      	lsls	r0, r3, #22
 800c83a:	d4f7      	bmi.n	800c82c <_vfiprintf_r+0x44>
 800c83c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c83e:	f7fe fb7d 	bl	800af3c <__retarget_lock_release_recursive>
 800c842:	e7f3      	b.n	800c82c <_vfiprintf_r+0x44>
 800c844:	2300      	movs	r3, #0
 800c846:	9309      	str	r3, [sp, #36]	@ 0x24
 800c848:	2320      	movs	r3, #32
 800c84a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c84e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c852:	2330      	movs	r3, #48	@ 0x30
 800c854:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ca04 <_vfiprintf_r+0x21c>
 800c858:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c85c:	f04f 0901 	mov.w	r9, #1
 800c860:	4623      	mov	r3, r4
 800c862:	469a      	mov	sl, r3
 800c864:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c868:	b10a      	cbz	r2, 800c86e <_vfiprintf_r+0x86>
 800c86a:	2a25      	cmp	r2, #37	@ 0x25
 800c86c:	d1f9      	bne.n	800c862 <_vfiprintf_r+0x7a>
 800c86e:	ebba 0b04 	subs.w	fp, sl, r4
 800c872:	d00b      	beq.n	800c88c <_vfiprintf_r+0xa4>
 800c874:	465b      	mov	r3, fp
 800c876:	4622      	mov	r2, r4
 800c878:	4629      	mov	r1, r5
 800c87a:	4630      	mov	r0, r6
 800c87c:	f7ff ffa1 	bl	800c7c2 <__sfputs_r>
 800c880:	3001      	adds	r0, #1
 800c882:	f000 80a7 	beq.w	800c9d4 <_vfiprintf_r+0x1ec>
 800c886:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c888:	445a      	add	r2, fp
 800c88a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c88c:	f89a 3000 	ldrb.w	r3, [sl]
 800c890:	2b00      	cmp	r3, #0
 800c892:	f000 809f 	beq.w	800c9d4 <_vfiprintf_r+0x1ec>
 800c896:	2300      	movs	r3, #0
 800c898:	f04f 32ff 	mov.w	r2, #4294967295
 800c89c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8a0:	f10a 0a01 	add.w	sl, sl, #1
 800c8a4:	9304      	str	r3, [sp, #16]
 800c8a6:	9307      	str	r3, [sp, #28]
 800c8a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c8ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800c8ae:	4654      	mov	r4, sl
 800c8b0:	2205      	movs	r2, #5
 800c8b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8b6:	4853      	ldr	r0, [pc, #332]	@ (800ca04 <_vfiprintf_r+0x21c>)
 800c8b8:	f7f3 fc8a 	bl	80001d0 <memchr>
 800c8bc:	9a04      	ldr	r2, [sp, #16]
 800c8be:	b9d8      	cbnz	r0, 800c8f8 <_vfiprintf_r+0x110>
 800c8c0:	06d1      	lsls	r1, r2, #27
 800c8c2:	bf44      	itt	mi
 800c8c4:	2320      	movmi	r3, #32
 800c8c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8ca:	0713      	lsls	r3, r2, #28
 800c8cc:	bf44      	itt	mi
 800c8ce:	232b      	movmi	r3, #43	@ 0x2b
 800c8d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c8d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8da:	d015      	beq.n	800c908 <_vfiprintf_r+0x120>
 800c8dc:	9a07      	ldr	r2, [sp, #28]
 800c8de:	4654      	mov	r4, sl
 800c8e0:	2000      	movs	r0, #0
 800c8e2:	f04f 0c0a 	mov.w	ip, #10
 800c8e6:	4621      	mov	r1, r4
 800c8e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8ec:	3b30      	subs	r3, #48	@ 0x30
 800c8ee:	2b09      	cmp	r3, #9
 800c8f0:	d94b      	bls.n	800c98a <_vfiprintf_r+0x1a2>
 800c8f2:	b1b0      	cbz	r0, 800c922 <_vfiprintf_r+0x13a>
 800c8f4:	9207      	str	r2, [sp, #28]
 800c8f6:	e014      	b.n	800c922 <_vfiprintf_r+0x13a>
 800c8f8:	eba0 0308 	sub.w	r3, r0, r8
 800c8fc:	fa09 f303 	lsl.w	r3, r9, r3
 800c900:	4313      	orrs	r3, r2
 800c902:	9304      	str	r3, [sp, #16]
 800c904:	46a2      	mov	sl, r4
 800c906:	e7d2      	b.n	800c8ae <_vfiprintf_r+0xc6>
 800c908:	9b03      	ldr	r3, [sp, #12]
 800c90a:	1d19      	adds	r1, r3, #4
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	9103      	str	r1, [sp, #12]
 800c910:	2b00      	cmp	r3, #0
 800c912:	bfbb      	ittet	lt
 800c914:	425b      	neglt	r3, r3
 800c916:	f042 0202 	orrlt.w	r2, r2, #2
 800c91a:	9307      	strge	r3, [sp, #28]
 800c91c:	9307      	strlt	r3, [sp, #28]
 800c91e:	bfb8      	it	lt
 800c920:	9204      	strlt	r2, [sp, #16]
 800c922:	7823      	ldrb	r3, [r4, #0]
 800c924:	2b2e      	cmp	r3, #46	@ 0x2e
 800c926:	d10a      	bne.n	800c93e <_vfiprintf_r+0x156>
 800c928:	7863      	ldrb	r3, [r4, #1]
 800c92a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c92c:	d132      	bne.n	800c994 <_vfiprintf_r+0x1ac>
 800c92e:	9b03      	ldr	r3, [sp, #12]
 800c930:	1d1a      	adds	r2, r3, #4
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	9203      	str	r2, [sp, #12]
 800c936:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c93a:	3402      	adds	r4, #2
 800c93c:	9305      	str	r3, [sp, #20]
 800c93e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ca14 <_vfiprintf_r+0x22c>
 800c942:	7821      	ldrb	r1, [r4, #0]
 800c944:	2203      	movs	r2, #3
 800c946:	4650      	mov	r0, sl
 800c948:	f7f3 fc42 	bl	80001d0 <memchr>
 800c94c:	b138      	cbz	r0, 800c95e <_vfiprintf_r+0x176>
 800c94e:	9b04      	ldr	r3, [sp, #16]
 800c950:	eba0 000a 	sub.w	r0, r0, sl
 800c954:	2240      	movs	r2, #64	@ 0x40
 800c956:	4082      	lsls	r2, r0
 800c958:	4313      	orrs	r3, r2
 800c95a:	3401      	adds	r4, #1
 800c95c:	9304      	str	r3, [sp, #16]
 800c95e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c962:	4829      	ldr	r0, [pc, #164]	@ (800ca08 <_vfiprintf_r+0x220>)
 800c964:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c968:	2206      	movs	r2, #6
 800c96a:	f7f3 fc31 	bl	80001d0 <memchr>
 800c96e:	2800      	cmp	r0, #0
 800c970:	d03f      	beq.n	800c9f2 <_vfiprintf_r+0x20a>
 800c972:	4b26      	ldr	r3, [pc, #152]	@ (800ca0c <_vfiprintf_r+0x224>)
 800c974:	bb1b      	cbnz	r3, 800c9be <_vfiprintf_r+0x1d6>
 800c976:	9b03      	ldr	r3, [sp, #12]
 800c978:	3307      	adds	r3, #7
 800c97a:	f023 0307 	bic.w	r3, r3, #7
 800c97e:	3308      	adds	r3, #8
 800c980:	9303      	str	r3, [sp, #12]
 800c982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c984:	443b      	add	r3, r7
 800c986:	9309      	str	r3, [sp, #36]	@ 0x24
 800c988:	e76a      	b.n	800c860 <_vfiprintf_r+0x78>
 800c98a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c98e:	460c      	mov	r4, r1
 800c990:	2001      	movs	r0, #1
 800c992:	e7a8      	b.n	800c8e6 <_vfiprintf_r+0xfe>
 800c994:	2300      	movs	r3, #0
 800c996:	3401      	adds	r4, #1
 800c998:	9305      	str	r3, [sp, #20]
 800c99a:	4619      	mov	r1, r3
 800c99c:	f04f 0c0a 	mov.w	ip, #10
 800c9a0:	4620      	mov	r0, r4
 800c9a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9a6:	3a30      	subs	r2, #48	@ 0x30
 800c9a8:	2a09      	cmp	r2, #9
 800c9aa:	d903      	bls.n	800c9b4 <_vfiprintf_r+0x1cc>
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d0c6      	beq.n	800c93e <_vfiprintf_r+0x156>
 800c9b0:	9105      	str	r1, [sp, #20]
 800c9b2:	e7c4      	b.n	800c93e <_vfiprintf_r+0x156>
 800c9b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9b8:	4604      	mov	r4, r0
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	e7f0      	b.n	800c9a0 <_vfiprintf_r+0x1b8>
 800c9be:	ab03      	add	r3, sp, #12
 800c9c0:	9300      	str	r3, [sp, #0]
 800c9c2:	462a      	mov	r2, r5
 800c9c4:	4b12      	ldr	r3, [pc, #72]	@ (800ca10 <_vfiprintf_r+0x228>)
 800c9c6:	a904      	add	r1, sp, #16
 800c9c8:	4630      	mov	r0, r6
 800c9ca:	f7fd fc3d 	bl	800a248 <_printf_float>
 800c9ce:	4607      	mov	r7, r0
 800c9d0:	1c78      	adds	r0, r7, #1
 800c9d2:	d1d6      	bne.n	800c982 <_vfiprintf_r+0x19a>
 800c9d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9d6:	07d9      	lsls	r1, r3, #31
 800c9d8:	d405      	bmi.n	800c9e6 <_vfiprintf_r+0x1fe>
 800c9da:	89ab      	ldrh	r3, [r5, #12]
 800c9dc:	059a      	lsls	r2, r3, #22
 800c9de:	d402      	bmi.n	800c9e6 <_vfiprintf_r+0x1fe>
 800c9e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9e2:	f7fe faab 	bl	800af3c <__retarget_lock_release_recursive>
 800c9e6:	89ab      	ldrh	r3, [r5, #12]
 800c9e8:	065b      	lsls	r3, r3, #25
 800c9ea:	f53f af1f 	bmi.w	800c82c <_vfiprintf_r+0x44>
 800c9ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c9f0:	e71e      	b.n	800c830 <_vfiprintf_r+0x48>
 800c9f2:	ab03      	add	r3, sp, #12
 800c9f4:	9300      	str	r3, [sp, #0]
 800c9f6:	462a      	mov	r2, r5
 800c9f8:	4b05      	ldr	r3, [pc, #20]	@ (800ca10 <_vfiprintf_r+0x228>)
 800c9fa:	a904      	add	r1, sp, #16
 800c9fc:	4630      	mov	r0, r6
 800c9fe:	f7fd febb 	bl	800a778 <_printf_i>
 800ca02:	e7e4      	b.n	800c9ce <_vfiprintf_r+0x1e6>
 800ca04:	0800e1e6 	.word	0x0800e1e6
 800ca08:	0800e1f0 	.word	0x0800e1f0
 800ca0c:	0800a249 	.word	0x0800a249
 800ca10:	0800c7c3 	.word	0x0800c7c3
 800ca14:	0800e1ec 	.word	0x0800e1ec

0800ca18 <__sflush_r>:
 800ca18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca20:	0716      	lsls	r6, r2, #28
 800ca22:	4605      	mov	r5, r0
 800ca24:	460c      	mov	r4, r1
 800ca26:	d454      	bmi.n	800cad2 <__sflush_r+0xba>
 800ca28:	684b      	ldr	r3, [r1, #4]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	dc02      	bgt.n	800ca34 <__sflush_r+0x1c>
 800ca2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	dd48      	ble.n	800cac6 <__sflush_r+0xae>
 800ca34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca36:	2e00      	cmp	r6, #0
 800ca38:	d045      	beq.n	800cac6 <__sflush_r+0xae>
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ca40:	682f      	ldr	r7, [r5, #0]
 800ca42:	6a21      	ldr	r1, [r4, #32]
 800ca44:	602b      	str	r3, [r5, #0]
 800ca46:	d030      	beq.n	800caaa <__sflush_r+0x92>
 800ca48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ca4a:	89a3      	ldrh	r3, [r4, #12]
 800ca4c:	0759      	lsls	r1, r3, #29
 800ca4e:	d505      	bpl.n	800ca5c <__sflush_r+0x44>
 800ca50:	6863      	ldr	r3, [r4, #4]
 800ca52:	1ad2      	subs	r2, r2, r3
 800ca54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ca56:	b10b      	cbz	r3, 800ca5c <__sflush_r+0x44>
 800ca58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ca5a:	1ad2      	subs	r2, r2, r3
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca60:	6a21      	ldr	r1, [r4, #32]
 800ca62:	4628      	mov	r0, r5
 800ca64:	47b0      	blx	r6
 800ca66:	1c43      	adds	r3, r0, #1
 800ca68:	89a3      	ldrh	r3, [r4, #12]
 800ca6a:	d106      	bne.n	800ca7a <__sflush_r+0x62>
 800ca6c:	6829      	ldr	r1, [r5, #0]
 800ca6e:	291d      	cmp	r1, #29
 800ca70:	d82b      	bhi.n	800caca <__sflush_r+0xb2>
 800ca72:	4a2a      	ldr	r2, [pc, #168]	@ (800cb1c <__sflush_r+0x104>)
 800ca74:	40ca      	lsrs	r2, r1
 800ca76:	07d6      	lsls	r6, r2, #31
 800ca78:	d527      	bpl.n	800caca <__sflush_r+0xb2>
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	6062      	str	r2, [r4, #4]
 800ca7e:	04d9      	lsls	r1, r3, #19
 800ca80:	6922      	ldr	r2, [r4, #16]
 800ca82:	6022      	str	r2, [r4, #0]
 800ca84:	d504      	bpl.n	800ca90 <__sflush_r+0x78>
 800ca86:	1c42      	adds	r2, r0, #1
 800ca88:	d101      	bne.n	800ca8e <__sflush_r+0x76>
 800ca8a:	682b      	ldr	r3, [r5, #0]
 800ca8c:	b903      	cbnz	r3, 800ca90 <__sflush_r+0x78>
 800ca8e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ca90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca92:	602f      	str	r7, [r5, #0]
 800ca94:	b1b9      	cbz	r1, 800cac6 <__sflush_r+0xae>
 800ca96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca9a:	4299      	cmp	r1, r3
 800ca9c:	d002      	beq.n	800caa4 <__sflush_r+0x8c>
 800ca9e:	4628      	mov	r0, r5
 800caa0:	f7ff f8a6 	bl	800bbf0 <_free_r>
 800caa4:	2300      	movs	r3, #0
 800caa6:	6363      	str	r3, [r4, #52]	@ 0x34
 800caa8:	e00d      	b.n	800cac6 <__sflush_r+0xae>
 800caaa:	2301      	movs	r3, #1
 800caac:	4628      	mov	r0, r5
 800caae:	47b0      	blx	r6
 800cab0:	4602      	mov	r2, r0
 800cab2:	1c50      	adds	r0, r2, #1
 800cab4:	d1c9      	bne.n	800ca4a <__sflush_r+0x32>
 800cab6:	682b      	ldr	r3, [r5, #0]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d0c6      	beq.n	800ca4a <__sflush_r+0x32>
 800cabc:	2b1d      	cmp	r3, #29
 800cabe:	d001      	beq.n	800cac4 <__sflush_r+0xac>
 800cac0:	2b16      	cmp	r3, #22
 800cac2:	d11e      	bne.n	800cb02 <__sflush_r+0xea>
 800cac4:	602f      	str	r7, [r5, #0]
 800cac6:	2000      	movs	r0, #0
 800cac8:	e022      	b.n	800cb10 <__sflush_r+0xf8>
 800caca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cace:	b21b      	sxth	r3, r3
 800cad0:	e01b      	b.n	800cb0a <__sflush_r+0xf2>
 800cad2:	690f      	ldr	r7, [r1, #16]
 800cad4:	2f00      	cmp	r7, #0
 800cad6:	d0f6      	beq.n	800cac6 <__sflush_r+0xae>
 800cad8:	0793      	lsls	r3, r2, #30
 800cada:	680e      	ldr	r6, [r1, #0]
 800cadc:	bf08      	it	eq
 800cade:	694b      	ldreq	r3, [r1, #20]
 800cae0:	600f      	str	r7, [r1, #0]
 800cae2:	bf18      	it	ne
 800cae4:	2300      	movne	r3, #0
 800cae6:	eba6 0807 	sub.w	r8, r6, r7
 800caea:	608b      	str	r3, [r1, #8]
 800caec:	f1b8 0f00 	cmp.w	r8, #0
 800caf0:	dde9      	ble.n	800cac6 <__sflush_r+0xae>
 800caf2:	6a21      	ldr	r1, [r4, #32]
 800caf4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800caf6:	4643      	mov	r3, r8
 800caf8:	463a      	mov	r2, r7
 800cafa:	4628      	mov	r0, r5
 800cafc:	47b0      	blx	r6
 800cafe:	2800      	cmp	r0, #0
 800cb00:	dc08      	bgt.n	800cb14 <__sflush_r+0xfc>
 800cb02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb0a:	81a3      	strh	r3, [r4, #12]
 800cb0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb14:	4407      	add	r7, r0
 800cb16:	eba8 0800 	sub.w	r8, r8, r0
 800cb1a:	e7e7      	b.n	800caec <__sflush_r+0xd4>
 800cb1c:	20400001 	.word	0x20400001

0800cb20 <_fflush_r>:
 800cb20:	b538      	push	{r3, r4, r5, lr}
 800cb22:	690b      	ldr	r3, [r1, #16]
 800cb24:	4605      	mov	r5, r0
 800cb26:	460c      	mov	r4, r1
 800cb28:	b913      	cbnz	r3, 800cb30 <_fflush_r+0x10>
 800cb2a:	2500      	movs	r5, #0
 800cb2c:	4628      	mov	r0, r5
 800cb2e:	bd38      	pop	{r3, r4, r5, pc}
 800cb30:	b118      	cbz	r0, 800cb3a <_fflush_r+0x1a>
 800cb32:	6a03      	ldr	r3, [r0, #32]
 800cb34:	b90b      	cbnz	r3, 800cb3a <_fflush_r+0x1a>
 800cb36:	f7fd ffc9 	bl	800aacc <__sinit>
 800cb3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d0f3      	beq.n	800cb2a <_fflush_r+0xa>
 800cb42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cb44:	07d0      	lsls	r0, r2, #31
 800cb46:	d404      	bmi.n	800cb52 <_fflush_r+0x32>
 800cb48:	0599      	lsls	r1, r3, #22
 800cb4a:	d402      	bmi.n	800cb52 <_fflush_r+0x32>
 800cb4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb4e:	f7fe f9f4 	bl	800af3a <__retarget_lock_acquire_recursive>
 800cb52:	4628      	mov	r0, r5
 800cb54:	4621      	mov	r1, r4
 800cb56:	f7ff ff5f 	bl	800ca18 <__sflush_r>
 800cb5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb5c:	07da      	lsls	r2, r3, #31
 800cb5e:	4605      	mov	r5, r0
 800cb60:	d4e4      	bmi.n	800cb2c <_fflush_r+0xc>
 800cb62:	89a3      	ldrh	r3, [r4, #12]
 800cb64:	059b      	lsls	r3, r3, #22
 800cb66:	d4e1      	bmi.n	800cb2c <_fflush_r+0xc>
 800cb68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb6a:	f7fe f9e7 	bl	800af3c <__retarget_lock_release_recursive>
 800cb6e:	e7dd      	b.n	800cb2c <_fflush_r+0xc>

0800cb70 <__swhatbuf_r>:
 800cb70:	b570      	push	{r4, r5, r6, lr}
 800cb72:	460c      	mov	r4, r1
 800cb74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb78:	2900      	cmp	r1, #0
 800cb7a:	b096      	sub	sp, #88	@ 0x58
 800cb7c:	4615      	mov	r5, r2
 800cb7e:	461e      	mov	r6, r3
 800cb80:	da0d      	bge.n	800cb9e <__swhatbuf_r+0x2e>
 800cb82:	89a3      	ldrh	r3, [r4, #12]
 800cb84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cb88:	f04f 0100 	mov.w	r1, #0
 800cb8c:	bf14      	ite	ne
 800cb8e:	2340      	movne	r3, #64	@ 0x40
 800cb90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cb94:	2000      	movs	r0, #0
 800cb96:	6031      	str	r1, [r6, #0]
 800cb98:	602b      	str	r3, [r5, #0]
 800cb9a:	b016      	add	sp, #88	@ 0x58
 800cb9c:	bd70      	pop	{r4, r5, r6, pc}
 800cb9e:	466a      	mov	r2, sp
 800cba0:	f000 f862 	bl	800cc68 <_fstat_r>
 800cba4:	2800      	cmp	r0, #0
 800cba6:	dbec      	blt.n	800cb82 <__swhatbuf_r+0x12>
 800cba8:	9901      	ldr	r1, [sp, #4]
 800cbaa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cbae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cbb2:	4259      	negs	r1, r3
 800cbb4:	4159      	adcs	r1, r3
 800cbb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cbba:	e7eb      	b.n	800cb94 <__swhatbuf_r+0x24>

0800cbbc <__smakebuf_r>:
 800cbbc:	898b      	ldrh	r3, [r1, #12]
 800cbbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbc0:	079d      	lsls	r5, r3, #30
 800cbc2:	4606      	mov	r6, r0
 800cbc4:	460c      	mov	r4, r1
 800cbc6:	d507      	bpl.n	800cbd8 <__smakebuf_r+0x1c>
 800cbc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cbcc:	6023      	str	r3, [r4, #0]
 800cbce:	6123      	str	r3, [r4, #16]
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	6163      	str	r3, [r4, #20]
 800cbd4:	b003      	add	sp, #12
 800cbd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbd8:	ab01      	add	r3, sp, #4
 800cbda:	466a      	mov	r2, sp
 800cbdc:	f7ff ffc8 	bl	800cb70 <__swhatbuf_r>
 800cbe0:	9f00      	ldr	r7, [sp, #0]
 800cbe2:	4605      	mov	r5, r0
 800cbe4:	4639      	mov	r1, r7
 800cbe6:	4630      	mov	r0, r6
 800cbe8:	f7ff f876 	bl	800bcd8 <_malloc_r>
 800cbec:	b948      	cbnz	r0, 800cc02 <__smakebuf_r+0x46>
 800cbee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbf2:	059a      	lsls	r2, r3, #22
 800cbf4:	d4ee      	bmi.n	800cbd4 <__smakebuf_r+0x18>
 800cbf6:	f023 0303 	bic.w	r3, r3, #3
 800cbfa:	f043 0302 	orr.w	r3, r3, #2
 800cbfe:	81a3      	strh	r3, [r4, #12]
 800cc00:	e7e2      	b.n	800cbc8 <__smakebuf_r+0xc>
 800cc02:	89a3      	ldrh	r3, [r4, #12]
 800cc04:	6020      	str	r0, [r4, #0]
 800cc06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc0a:	81a3      	strh	r3, [r4, #12]
 800cc0c:	9b01      	ldr	r3, [sp, #4]
 800cc0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cc12:	b15b      	cbz	r3, 800cc2c <__smakebuf_r+0x70>
 800cc14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc18:	4630      	mov	r0, r6
 800cc1a:	f000 f837 	bl	800cc8c <_isatty_r>
 800cc1e:	b128      	cbz	r0, 800cc2c <__smakebuf_r+0x70>
 800cc20:	89a3      	ldrh	r3, [r4, #12]
 800cc22:	f023 0303 	bic.w	r3, r3, #3
 800cc26:	f043 0301 	orr.w	r3, r3, #1
 800cc2a:	81a3      	strh	r3, [r4, #12]
 800cc2c:	89a3      	ldrh	r3, [r4, #12]
 800cc2e:	431d      	orrs	r5, r3
 800cc30:	81a5      	strh	r5, [r4, #12]
 800cc32:	e7cf      	b.n	800cbd4 <__smakebuf_r+0x18>

0800cc34 <memmove>:
 800cc34:	4288      	cmp	r0, r1
 800cc36:	b510      	push	{r4, lr}
 800cc38:	eb01 0402 	add.w	r4, r1, r2
 800cc3c:	d902      	bls.n	800cc44 <memmove+0x10>
 800cc3e:	4284      	cmp	r4, r0
 800cc40:	4623      	mov	r3, r4
 800cc42:	d807      	bhi.n	800cc54 <memmove+0x20>
 800cc44:	1e43      	subs	r3, r0, #1
 800cc46:	42a1      	cmp	r1, r4
 800cc48:	d008      	beq.n	800cc5c <memmove+0x28>
 800cc4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc52:	e7f8      	b.n	800cc46 <memmove+0x12>
 800cc54:	4402      	add	r2, r0
 800cc56:	4601      	mov	r1, r0
 800cc58:	428a      	cmp	r2, r1
 800cc5a:	d100      	bne.n	800cc5e <memmove+0x2a>
 800cc5c:	bd10      	pop	{r4, pc}
 800cc5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc66:	e7f7      	b.n	800cc58 <memmove+0x24>

0800cc68 <_fstat_r>:
 800cc68:	b538      	push	{r3, r4, r5, lr}
 800cc6a:	4d07      	ldr	r5, [pc, #28]	@ (800cc88 <_fstat_r+0x20>)
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	4604      	mov	r4, r0
 800cc70:	4608      	mov	r0, r1
 800cc72:	4611      	mov	r1, r2
 800cc74:	602b      	str	r3, [r5, #0]
 800cc76:	f7f6 fd25 	bl	80036c4 <_fstat>
 800cc7a:	1c43      	adds	r3, r0, #1
 800cc7c:	d102      	bne.n	800cc84 <_fstat_r+0x1c>
 800cc7e:	682b      	ldr	r3, [r5, #0]
 800cc80:	b103      	cbz	r3, 800cc84 <_fstat_r+0x1c>
 800cc82:	6023      	str	r3, [r4, #0]
 800cc84:	bd38      	pop	{r3, r4, r5, pc}
 800cc86:	bf00      	nop
 800cc88:	20000e60 	.word	0x20000e60

0800cc8c <_isatty_r>:
 800cc8c:	b538      	push	{r3, r4, r5, lr}
 800cc8e:	4d06      	ldr	r5, [pc, #24]	@ (800cca8 <_isatty_r+0x1c>)
 800cc90:	2300      	movs	r3, #0
 800cc92:	4604      	mov	r4, r0
 800cc94:	4608      	mov	r0, r1
 800cc96:	602b      	str	r3, [r5, #0]
 800cc98:	f7f6 fd24 	bl	80036e4 <_isatty>
 800cc9c:	1c43      	adds	r3, r0, #1
 800cc9e:	d102      	bne.n	800cca6 <_isatty_r+0x1a>
 800cca0:	682b      	ldr	r3, [r5, #0]
 800cca2:	b103      	cbz	r3, 800cca6 <_isatty_r+0x1a>
 800cca4:	6023      	str	r3, [r4, #0]
 800cca6:	bd38      	pop	{r3, r4, r5, pc}
 800cca8:	20000e60 	.word	0x20000e60

0800ccac <_sbrk_r>:
 800ccac:	b538      	push	{r3, r4, r5, lr}
 800ccae:	4d06      	ldr	r5, [pc, #24]	@ (800ccc8 <_sbrk_r+0x1c>)
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	4604      	mov	r4, r0
 800ccb4:	4608      	mov	r0, r1
 800ccb6:	602b      	str	r3, [r5, #0]
 800ccb8:	f7f6 fd2c 	bl	8003714 <_sbrk>
 800ccbc:	1c43      	adds	r3, r0, #1
 800ccbe:	d102      	bne.n	800ccc6 <_sbrk_r+0x1a>
 800ccc0:	682b      	ldr	r3, [r5, #0]
 800ccc2:	b103      	cbz	r3, 800ccc6 <_sbrk_r+0x1a>
 800ccc4:	6023      	str	r3, [r4, #0]
 800ccc6:	bd38      	pop	{r3, r4, r5, pc}
 800ccc8:	20000e60 	.word	0x20000e60

0800cccc <memcpy>:
 800cccc:	440a      	add	r2, r1
 800ccce:	4291      	cmp	r1, r2
 800ccd0:	f100 33ff 	add.w	r3, r0, #4294967295
 800ccd4:	d100      	bne.n	800ccd8 <memcpy+0xc>
 800ccd6:	4770      	bx	lr
 800ccd8:	b510      	push	{r4, lr}
 800ccda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccde:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cce2:	4291      	cmp	r1, r2
 800cce4:	d1f9      	bne.n	800ccda <memcpy+0xe>
 800cce6:	bd10      	pop	{r4, pc}

0800cce8 <__assert_func>:
 800cce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ccea:	4614      	mov	r4, r2
 800ccec:	461a      	mov	r2, r3
 800ccee:	4b09      	ldr	r3, [pc, #36]	@ (800cd14 <__assert_func+0x2c>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	4605      	mov	r5, r0
 800ccf4:	68d8      	ldr	r0, [r3, #12]
 800ccf6:	b14c      	cbz	r4, 800cd0c <__assert_func+0x24>
 800ccf8:	4b07      	ldr	r3, [pc, #28]	@ (800cd18 <__assert_func+0x30>)
 800ccfa:	9100      	str	r1, [sp, #0]
 800ccfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd00:	4906      	ldr	r1, [pc, #24]	@ (800cd1c <__assert_func+0x34>)
 800cd02:	462b      	mov	r3, r5
 800cd04:	f000 f870 	bl	800cde8 <fiprintf>
 800cd08:	f000 f880 	bl	800ce0c <abort>
 800cd0c:	4b04      	ldr	r3, [pc, #16]	@ (800cd20 <__assert_func+0x38>)
 800cd0e:	461c      	mov	r4, r3
 800cd10:	e7f3      	b.n	800ccfa <__assert_func+0x12>
 800cd12:	bf00      	nop
 800cd14:	2000005c 	.word	0x2000005c
 800cd18:	0800e201 	.word	0x0800e201
 800cd1c:	0800e20e 	.word	0x0800e20e
 800cd20:	0800e23c 	.word	0x0800e23c

0800cd24 <_calloc_r>:
 800cd24:	b570      	push	{r4, r5, r6, lr}
 800cd26:	fba1 5402 	umull	r5, r4, r1, r2
 800cd2a:	b934      	cbnz	r4, 800cd3a <_calloc_r+0x16>
 800cd2c:	4629      	mov	r1, r5
 800cd2e:	f7fe ffd3 	bl	800bcd8 <_malloc_r>
 800cd32:	4606      	mov	r6, r0
 800cd34:	b928      	cbnz	r0, 800cd42 <_calloc_r+0x1e>
 800cd36:	4630      	mov	r0, r6
 800cd38:	bd70      	pop	{r4, r5, r6, pc}
 800cd3a:	220c      	movs	r2, #12
 800cd3c:	6002      	str	r2, [r0, #0]
 800cd3e:	2600      	movs	r6, #0
 800cd40:	e7f9      	b.n	800cd36 <_calloc_r+0x12>
 800cd42:	462a      	mov	r2, r5
 800cd44:	4621      	mov	r1, r4
 800cd46:	f7fe f87b 	bl	800ae40 <memset>
 800cd4a:	e7f4      	b.n	800cd36 <_calloc_r+0x12>

0800cd4c <__ascii_mbtowc>:
 800cd4c:	b082      	sub	sp, #8
 800cd4e:	b901      	cbnz	r1, 800cd52 <__ascii_mbtowc+0x6>
 800cd50:	a901      	add	r1, sp, #4
 800cd52:	b142      	cbz	r2, 800cd66 <__ascii_mbtowc+0x1a>
 800cd54:	b14b      	cbz	r3, 800cd6a <__ascii_mbtowc+0x1e>
 800cd56:	7813      	ldrb	r3, [r2, #0]
 800cd58:	600b      	str	r3, [r1, #0]
 800cd5a:	7812      	ldrb	r2, [r2, #0]
 800cd5c:	1e10      	subs	r0, r2, #0
 800cd5e:	bf18      	it	ne
 800cd60:	2001      	movne	r0, #1
 800cd62:	b002      	add	sp, #8
 800cd64:	4770      	bx	lr
 800cd66:	4610      	mov	r0, r2
 800cd68:	e7fb      	b.n	800cd62 <__ascii_mbtowc+0x16>
 800cd6a:	f06f 0001 	mvn.w	r0, #1
 800cd6e:	e7f8      	b.n	800cd62 <__ascii_mbtowc+0x16>

0800cd70 <_realloc_r>:
 800cd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd74:	4607      	mov	r7, r0
 800cd76:	4614      	mov	r4, r2
 800cd78:	460d      	mov	r5, r1
 800cd7a:	b921      	cbnz	r1, 800cd86 <_realloc_r+0x16>
 800cd7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd80:	4611      	mov	r1, r2
 800cd82:	f7fe bfa9 	b.w	800bcd8 <_malloc_r>
 800cd86:	b92a      	cbnz	r2, 800cd94 <_realloc_r+0x24>
 800cd88:	f7fe ff32 	bl	800bbf0 <_free_r>
 800cd8c:	4625      	mov	r5, r4
 800cd8e:	4628      	mov	r0, r5
 800cd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd94:	f000 f841 	bl	800ce1a <_malloc_usable_size_r>
 800cd98:	4284      	cmp	r4, r0
 800cd9a:	4606      	mov	r6, r0
 800cd9c:	d802      	bhi.n	800cda4 <_realloc_r+0x34>
 800cd9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cda2:	d8f4      	bhi.n	800cd8e <_realloc_r+0x1e>
 800cda4:	4621      	mov	r1, r4
 800cda6:	4638      	mov	r0, r7
 800cda8:	f7fe ff96 	bl	800bcd8 <_malloc_r>
 800cdac:	4680      	mov	r8, r0
 800cdae:	b908      	cbnz	r0, 800cdb4 <_realloc_r+0x44>
 800cdb0:	4645      	mov	r5, r8
 800cdb2:	e7ec      	b.n	800cd8e <_realloc_r+0x1e>
 800cdb4:	42b4      	cmp	r4, r6
 800cdb6:	4622      	mov	r2, r4
 800cdb8:	4629      	mov	r1, r5
 800cdba:	bf28      	it	cs
 800cdbc:	4632      	movcs	r2, r6
 800cdbe:	f7ff ff85 	bl	800cccc <memcpy>
 800cdc2:	4629      	mov	r1, r5
 800cdc4:	4638      	mov	r0, r7
 800cdc6:	f7fe ff13 	bl	800bbf0 <_free_r>
 800cdca:	e7f1      	b.n	800cdb0 <_realloc_r+0x40>

0800cdcc <__ascii_wctomb>:
 800cdcc:	4603      	mov	r3, r0
 800cdce:	4608      	mov	r0, r1
 800cdd0:	b141      	cbz	r1, 800cde4 <__ascii_wctomb+0x18>
 800cdd2:	2aff      	cmp	r2, #255	@ 0xff
 800cdd4:	d904      	bls.n	800cde0 <__ascii_wctomb+0x14>
 800cdd6:	228a      	movs	r2, #138	@ 0x8a
 800cdd8:	601a      	str	r2, [r3, #0]
 800cdda:	f04f 30ff 	mov.w	r0, #4294967295
 800cdde:	4770      	bx	lr
 800cde0:	700a      	strb	r2, [r1, #0]
 800cde2:	2001      	movs	r0, #1
 800cde4:	4770      	bx	lr
	...

0800cde8 <fiprintf>:
 800cde8:	b40e      	push	{r1, r2, r3}
 800cdea:	b503      	push	{r0, r1, lr}
 800cdec:	4601      	mov	r1, r0
 800cdee:	ab03      	add	r3, sp, #12
 800cdf0:	4805      	ldr	r0, [pc, #20]	@ (800ce08 <fiprintf+0x20>)
 800cdf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdf6:	6800      	ldr	r0, [r0, #0]
 800cdf8:	9301      	str	r3, [sp, #4]
 800cdfa:	f7ff fcf5 	bl	800c7e8 <_vfiprintf_r>
 800cdfe:	b002      	add	sp, #8
 800ce00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce04:	b003      	add	sp, #12
 800ce06:	4770      	bx	lr
 800ce08:	2000005c 	.word	0x2000005c

0800ce0c <abort>:
 800ce0c:	b508      	push	{r3, lr}
 800ce0e:	2006      	movs	r0, #6
 800ce10:	f000 f834 	bl	800ce7c <raise>
 800ce14:	2001      	movs	r0, #1
 800ce16:	f7f6 fc21 	bl	800365c <_exit>

0800ce1a <_malloc_usable_size_r>:
 800ce1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce1e:	1f18      	subs	r0, r3, #4
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	bfbc      	itt	lt
 800ce24:	580b      	ldrlt	r3, [r1, r0]
 800ce26:	18c0      	addlt	r0, r0, r3
 800ce28:	4770      	bx	lr

0800ce2a <_raise_r>:
 800ce2a:	291f      	cmp	r1, #31
 800ce2c:	b538      	push	{r3, r4, r5, lr}
 800ce2e:	4605      	mov	r5, r0
 800ce30:	460c      	mov	r4, r1
 800ce32:	d904      	bls.n	800ce3e <_raise_r+0x14>
 800ce34:	2316      	movs	r3, #22
 800ce36:	6003      	str	r3, [r0, #0]
 800ce38:	f04f 30ff 	mov.w	r0, #4294967295
 800ce3c:	bd38      	pop	{r3, r4, r5, pc}
 800ce3e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ce40:	b112      	cbz	r2, 800ce48 <_raise_r+0x1e>
 800ce42:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce46:	b94b      	cbnz	r3, 800ce5c <_raise_r+0x32>
 800ce48:	4628      	mov	r0, r5
 800ce4a:	f000 f831 	bl	800ceb0 <_getpid_r>
 800ce4e:	4622      	mov	r2, r4
 800ce50:	4601      	mov	r1, r0
 800ce52:	4628      	mov	r0, r5
 800ce54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce58:	f000 b818 	b.w	800ce8c <_kill_r>
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	d00a      	beq.n	800ce76 <_raise_r+0x4c>
 800ce60:	1c59      	adds	r1, r3, #1
 800ce62:	d103      	bne.n	800ce6c <_raise_r+0x42>
 800ce64:	2316      	movs	r3, #22
 800ce66:	6003      	str	r3, [r0, #0]
 800ce68:	2001      	movs	r0, #1
 800ce6a:	e7e7      	b.n	800ce3c <_raise_r+0x12>
 800ce6c:	2100      	movs	r1, #0
 800ce6e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ce72:	4620      	mov	r0, r4
 800ce74:	4798      	blx	r3
 800ce76:	2000      	movs	r0, #0
 800ce78:	e7e0      	b.n	800ce3c <_raise_r+0x12>
	...

0800ce7c <raise>:
 800ce7c:	4b02      	ldr	r3, [pc, #8]	@ (800ce88 <raise+0xc>)
 800ce7e:	4601      	mov	r1, r0
 800ce80:	6818      	ldr	r0, [r3, #0]
 800ce82:	f7ff bfd2 	b.w	800ce2a <_raise_r>
 800ce86:	bf00      	nop
 800ce88:	2000005c 	.word	0x2000005c

0800ce8c <_kill_r>:
 800ce8c:	b538      	push	{r3, r4, r5, lr}
 800ce8e:	4d07      	ldr	r5, [pc, #28]	@ (800ceac <_kill_r+0x20>)
 800ce90:	2300      	movs	r3, #0
 800ce92:	4604      	mov	r4, r0
 800ce94:	4608      	mov	r0, r1
 800ce96:	4611      	mov	r1, r2
 800ce98:	602b      	str	r3, [r5, #0]
 800ce9a:	f7f6 fbcf 	bl	800363c <_kill>
 800ce9e:	1c43      	adds	r3, r0, #1
 800cea0:	d102      	bne.n	800cea8 <_kill_r+0x1c>
 800cea2:	682b      	ldr	r3, [r5, #0]
 800cea4:	b103      	cbz	r3, 800cea8 <_kill_r+0x1c>
 800cea6:	6023      	str	r3, [r4, #0]
 800cea8:	bd38      	pop	{r3, r4, r5, pc}
 800ceaa:	bf00      	nop
 800ceac:	20000e60 	.word	0x20000e60

0800ceb0 <_getpid_r>:
 800ceb0:	f7f6 bbbc 	b.w	800362c <_getpid>

0800ceb4 <pow>:
 800ceb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceb6:	ed2d 8b02 	vpush	{d8}
 800ceba:	eeb0 8a40 	vmov.f32	s16, s0
 800cebe:	eef0 8a60 	vmov.f32	s17, s1
 800cec2:	ec55 4b11 	vmov	r4, r5, d1
 800cec6:	f000 f873 	bl	800cfb0 <__ieee754_pow>
 800ceca:	4622      	mov	r2, r4
 800cecc:	462b      	mov	r3, r5
 800cece:	4620      	mov	r0, r4
 800ced0:	4629      	mov	r1, r5
 800ced2:	ec57 6b10 	vmov	r6, r7, d0
 800ced6:	f7f3 fe29 	bl	8000b2c <__aeabi_dcmpun>
 800ceda:	2800      	cmp	r0, #0
 800cedc:	d13b      	bne.n	800cf56 <pow+0xa2>
 800cede:	ec51 0b18 	vmov	r0, r1, d8
 800cee2:	2200      	movs	r2, #0
 800cee4:	2300      	movs	r3, #0
 800cee6:	f7f3 fdef 	bl	8000ac8 <__aeabi_dcmpeq>
 800ceea:	b1b8      	cbz	r0, 800cf1c <pow+0x68>
 800ceec:	2200      	movs	r2, #0
 800ceee:	2300      	movs	r3, #0
 800cef0:	4620      	mov	r0, r4
 800cef2:	4629      	mov	r1, r5
 800cef4:	f7f3 fde8 	bl	8000ac8 <__aeabi_dcmpeq>
 800cef8:	2800      	cmp	r0, #0
 800cefa:	d146      	bne.n	800cf8a <pow+0xd6>
 800cefc:	ec45 4b10 	vmov	d0, r4, r5
 800cf00:	f000 f848 	bl	800cf94 <finite>
 800cf04:	b338      	cbz	r0, 800cf56 <pow+0xa2>
 800cf06:	2200      	movs	r2, #0
 800cf08:	2300      	movs	r3, #0
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	4629      	mov	r1, r5
 800cf0e:	f7f3 fde5 	bl	8000adc <__aeabi_dcmplt>
 800cf12:	b300      	cbz	r0, 800cf56 <pow+0xa2>
 800cf14:	f7fd ffe6 	bl	800aee4 <__errno>
 800cf18:	2322      	movs	r3, #34	@ 0x22
 800cf1a:	e01b      	b.n	800cf54 <pow+0xa0>
 800cf1c:	ec47 6b10 	vmov	d0, r6, r7
 800cf20:	f000 f838 	bl	800cf94 <finite>
 800cf24:	b9e0      	cbnz	r0, 800cf60 <pow+0xac>
 800cf26:	eeb0 0a48 	vmov.f32	s0, s16
 800cf2a:	eef0 0a68 	vmov.f32	s1, s17
 800cf2e:	f000 f831 	bl	800cf94 <finite>
 800cf32:	b1a8      	cbz	r0, 800cf60 <pow+0xac>
 800cf34:	ec45 4b10 	vmov	d0, r4, r5
 800cf38:	f000 f82c 	bl	800cf94 <finite>
 800cf3c:	b180      	cbz	r0, 800cf60 <pow+0xac>
 800cf3e:	4632      	mov	r2, r6
 800cf40:	463b      	mov	r3, r7
 800cf42:	4630      	mov	r0, r6
 800cf44:	4639      	mov	r1, r7
 800cf46:	f7f3 fdf1 	bl	8000b2c <__aeabi_dcmpun>
 800cf4a:	2800      	cmp	r0, #0
 800cf4c:	d0e2      	beq.n	800cf14 <pow+0x60>
 800cf4e:	f7fd ffc9 	bl	800aee4 <__errno>
 800cf52:	2321      	movs	r3, #33	@ 0x21
 800cf54:	6003      	str	r3, [r0, #0]
 800cf56:	ecbd 8b02 	vpop	{d8}
 800cf5a:	ec47 6b10 	vmov	d0, r6, r7
 800cf5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf60:	2200      	movs	r2, #0
 800cf62:	2300      	movs	r3, #0
 800cf64:	4630      	mov	r0, r6
 800cf66:	4639      	mov	r1, r7
 800cf68:	f7f3 fdae 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf6c:	2800      	cmp	r0, #0
 800cf6e:	d0f2      	beq.n	800cf56 <pow+0xa2>
 800cf70:	eeb0 0a48 	vmov.f32	s0, s16
 800cf74:	eef0 0a68 	vmov.f32	s1, s17
 800cf78:	f000 f80c 	bl	800cf94 <finite>
 800cf7c:	2800      	cmp	r0, #0
 800cf7e:	d0ea      	beq.n	800cf56 <pow+0xa2>
 800cf80:	ec45 4b10 	vmov	d0, r4, r5
 800cf84:	f000 f806 	bl	800cf94 <finite>
 800cf88:	e7c3      	b.n	800cf12 <pow+0x5e>
 800cf8a:	4f01      	ldr	r7, [pc, #4]	@ (800cf90 <pow+0xdc>)
 800cf8c:	2600      	movs	r6, #0
 800cf8e:	e7e2      	b.n	800cf56 <pow+0xa2>
 800cf90:	3ff00000 	.word	0x3ff00000

0800cf94 <finite>:
 800cf94:	b082      	sub	sp, #8
 800cf96:	ed8d 0b00 	vstr	d0, [sp]
 800cf9a:	9801      	ldr	r0, [sp, #4]
 800cf9c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800cfa0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800cfa4:	0fc0      	lsrs	r0, r0, #31
 800cfa6:	b002      	add	sp, #8
 800cfa8:	4770      	bx	lr
 800cfaa:	0000      	movs	r0, r0
 800cfac:	0000      	movs	r0, r0
	...

0800cfb0 <__ieee754_pow>:
 800cfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfb4:	b091      	sub	sp, #68	@ 0x44
 800cfb6:	ed8d 1b00 	vstr	d1, [sp]
 800cfba:	e9dd 1900 	ldrd	r1, r9, [sp]
 800cfbe:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800cfc2:	ea5a 0001 	orrs.w	r0, sl, r1
 800cfc6:	ec57 6b10 	vmov	r6, r7, d0
 800cfca:	d113      	bne.n	800cff4 <__ieee754_pow+0x44>
 800cfcc:	19b3      	adds	r3, r6, r6
 800cfce:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800cfd2:	4152      	adcs	r2, r2
 800cfd4:	4298      	cmp	r0, r3
 800cfd6:	4b9a      	ldr	r3, [pc, #616]	@ (800d240 <__ieee754_pow+0x290>)
 800cfd8:	4193      	sbcs	r3, r2
 800cfda:	f080 84ee 	bcs.w	800d9ba <__ieee754_pow+0xa0a>
 800cfde:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfe2:	4630      	mov	r0, r6
 800cfe4:	4639      	mov	r1, r7
 800cfe6:	f7f3 f951 	bl	800028c <__adddf3>
 800cfea:	ec41 0b10 	vmov	d0, r0, r1
 800cfee:	b011      	add	sp, #68	@ 0x44
 800cff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cff4:	4a93      	ldr	r2, [pc, #588]	@ (800d244 <__ieee754_pow+0x294>)
 800cff6:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800cffa:	4295      	cmp	r5, r2
 800cffc:	46b8      	mov	r8, r7
 800cffe:	4633      	mov	r3, r6
 800d000:	d80a      	bhi.n	800d018 <__ieee754_pow+0x68>
 800d002:	d104      	bne.n	800d00e <__ieee754_pow+0x5e>
 800d004:	2e00      	cmp	r6, #0
 800d006:	d1ea      	bne.n	800cfde <__ieee754_pow+0x2e>
 800d008:	45aa      	cmp	sl, r5
 800d00a:	d8e8      	bhi.n	800cfde <__ieee754_pow+0x2e>
 800d00c:	e001      	b.n	800d012 <__ieee754_pow+0x62>
 800d00e:	4592      	cmp	sl, r2
 800d010:	d802      	bhi.n	800d018 <__ieee754_pow+0x68>
 800d012:	4592      	cmp	sl, r2
 800d014:	d10f      	bne.n	800d036 <__ieee754_pow+0x86>
 800d016:	b171      	cbz	r1, 800d036 <__ieee754_pow+0x86>
 800d018:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800d01c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800d020:	ea58 0803 	orrs.w	r8, r8, r3
 800d024:	d1db      	bne.n	800cfde <__ieee754_pow+0x2e>
 800d026:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d02a:	18db      	adds	r3, r3, r3
 800d02c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800d030:	4152      	adcs	r2, r2
 800d032:	4598      	cmp	r8, r3
 800d034:	e7cf      	b.n	800cfd6 <__ieee754_pow+0x26>
 800d036:	f1b8 0f00 	cmp.w	r8, #0
 800d03a:	46ab      	mov	fp, r5
 800d03c:	da43      	bge.n	800d0c6 <__ieee754_pow+0x116>
 800d03e:	4a82      	ldr	r2, [pc, #520]	@ (800d248 <__ieee754_pow+0x298>)
 800d040:	4592      	cmp	sl, r2
 800d042:	d856      	bhi.n	800d0f2 <__ieee754_pow+0x142>
 800d044:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800d048:	4592      	cmp	sl, r2
 800d04a:	f240 84c5 	bls.w	800d9d8 <__ieee754_pow+0xa28>
 800d04e:	ea4f 522a 	mov.w	r2, sl, asr #20
 800d052:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800d056:	2a14      	cmp	r2, #20
 800d058:	dd18      	ble.n	800d08c <__ieee754_pow+0xdc>
 800d05a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800d05e:	fa21 f402 	lsr.w	r4, r1, r2
 800d062:	fa04 f202 	lsl.w	r2, r4, r2
 800d066:	428a      	cmp	r2, r1
 800d068:	f040 84b6 	bne.w	800d9d8 <__ieee754_pow+0xa28>
 800d06c:	f004 0401 	and.w	r4, r4, #1
 800d070:	f1c4 0402 	rsb	r4, r4, #2
 800d074:	2900      	cmp	r1, #0
 800d076:	d159      	bne.n	800d12c <__ieee754_pow+0x17c>
 800d078:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800d07c:	d148      	bne.n	800d110 <__ieee754_pow+0x160>
 800d07e:	4632      	mov	r2, r6
 800d080:	463b      	mov	r3, r7
 800d082:	4630      	mov	r0, r6
 800d084:	4639      	mov	r1, r7
 800d086:	f7f3 fab7 	bl	80005f8 <__aeabi_dmul>
 800d08a:	e7ae      	b.n	800cfea <__ieee754_pow+0x3a>
 800d08c:	2900      	cmp	r1, #0
 800d08e:	d14c      	bne.n	800d12a <__ieee754_pow+0x17a>
 800d090:	f1c2 0214 	rsb	r2, r2, #20
 800d094:	fa4a f402 	asr.w	r4, sl, r2
 800d098:	fa04 f202 	lsl.w	r2, r4, r2
 800d09c:	4552      	cmp	r2, sl
 800d09e:	f040 8498 	bne.w	800d9d2 <__ieee754_pow+0xa22>
 800d0a2:	f004 0401 	and.w	r4, r4, #1
 800d0a6:	f1c4 0402 	rsb	r4, r4, #2
 800d0aa:	4a68      	ldr	r2, [pc, #416]	@ (800d24c <__ieee754_pow+0x29c>)
 800d0ac:	4592      	cmp	sl, r2
 800d0ae:	d1e3      	bne.n	800d078 <__ieee754_pow+0xc8>
 800d0b0:	f1b9 0f00 	cmp.w	r9, #0
 800d0b4:	f280 8489 	bge.w	800d9ca <__ieee754_pow+0xa1a>
 800d0b8:	4964      	ldr	r1, [pc, #400]	@ (800d24c <__ieee754_pow+0x29c>)
 800d0ba:	4632      	mov	r2, r6
 800d0bc:	463b      	mov	r3, r7
 800d0be:	2000      	movs	r0, #0
 800d0c0:	f7f3 fbc4 	bl	800084c <__aeabi_ddiv>
 800d0c4:	e791      	b.n	800cfea <__ieee754_pow+0x3a>
 800d0c6:	2400      	movs	r4, #0
 800d0c8:	bb81      	cbnz	r1, 800d12c <__ieee754_pow+0x17c>
 800d0ca:	4a5e      	ldr	r2, [pc, #376]	@ (800d244 <__ieee754_pow+0x294>)
 800d0cc:	4592      	cmp	sl, r2
 800d0ce:	d1ec      	bne.n	800d0aa <__ieee754_pow+0xfa>
 800d0d0:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800d0d4:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800d0d8:	431a      	orrs	r2, r3
 800d0da:	f000 846e 	beq.w	800d9ba <__ieee754_pow+0xa0a>
 800d0de:	4b5c      	ldr	r3, [pc, #368]	@ (800d250 <__ieee754_pow+0x2a0>)
 800d0e0:	429d      	cmp	r5, r3
 800d0e2:	d908      	bls.n	800d0f6 <__ieee754_pow+0x146>
 800d0e4:	f1b9 0f00 	cmp.w	r9, #0
 800d0e8:	f280 846b 	bge.w	800d9c2 <__ieee754_pow+0xa12>
 800d0ec:	2000      	movs	r0, #0
 800d0ee:	2100      	movs	r1, #0
 800d0f0:	e77b      	b.n	800cfea <__ieee754_pow+0x3a>
 800d0f2:	2402      	movs	r4, #2
 800d0f4:	e7e8      	b.n	800d0c8 <__ieee754_pow+0x118>
 800d0f6:	f1b9 0f00 	cmp.w	r9, #0
 800d0fa:	f04f 0000 	mov.w	r0, #0
 800d0fe:	f04f 0100 	mov.w	r1, #0
 800d102:	f6bf af72 	bge.w	800cfea <__ieee754_pow+0x3a>
 800d106:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d10a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d10e:	e76c      	b.n	800cfea <__ieee754_pow+0x3a>
 800d110:	4a50      	ldr	r2, [pc, #320]	@ (800d254 <__ieee754_pow+0x2a4>)
 800d112:	4591      	cmp	r9, r2
 800d114:	d10a      	bne.n	800d12c <__ieee754_pow+0x17c>
 800d116:	f1b8 0f00 	cmp.w	r8, #0
 800d11a:	db07      	blt.n	800d12c <__ieee754_pow+0x17c>
 800d11c:	ec47 6b10 	vmov	d0, r6, r7
 800d120:	b011      	add	sp, #68	@ 0x44
 800d122:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d126:	f000 bd4f 	b.w	800dbc8 <__ieee754_sqrt>
 800d12a:	2400      	movs	r4, #0
 800d12c:	ec47 6b10 	vmov	d0, r6, r7
 800d130:	9302      	str	r3, [sp, #8]
 800d132:	f000 fc87 	bl	800da44 <fabs>
 800d136:	9b02      	ldr	r3, [sp, #8]
 800d138:	ec51 0b10 	vmov	r0, r1, d0
 800d13c:	bb43      	cbnz	r3, 800d190 <__ieee754_pow+0x1e0>
 800d13e:	4b43      	ldr	r3, [pc, #268]	@ (800d24c <__ieee754_pow+0x29c>)
 800d140:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800d144:	429a      	cmp	r2, r3
 800d146:	d000      	beq.n	800d14a <__ieee754_pow+0x19a>
 800d148:	bb15      	cbnz	r5, 800d190 <__ieee754_pow+0x1e0>
 800d14a:	f1b9 0f00 	cmp.w	r9, #0
 800d14e:	da05      	bge.n	800d15c <__ieee754_pow+0x1ac>
 800d150:	4602      	mov	r2, r0
 800d152:	460b      	mov	r3, r1
 800d154:	2000      	movs	r0, #0
 800d156:	493d      	ldr	r1, [pc, #244]	@ (800d24c <__ieee754_pow+0x29c>)
 800d158:	f7f3 fb78 	bl	800084c <__aeabi_ddiv>
 800d15c:	f1b8 0f00 	cmp.w	r8, #0
 800d160:	f6bf af43 	bge.w	800cfea <__ieee754_pow+0x3a>
 800d164:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800d168:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800d16c:	4325      	orrs	r5, r4
 800d16e:	d108      	bne.n	800d182 <__ieee754_pow+0x1d2>
 800d170:	4602      	mov	r2, r0
 800d172:	460b      	mov	r3, r1
 800d174:	4610      	mov	r0, r2
 800d176:	4619      	mov	r1, r3
 800d178:	f7f3 f886 	bl	8000288 <__aeabi_dsub>
 800d17c:	4602      	mov	r2, r0
 800d17e:	460b      	mov	r3, r1
 800d180:	e79e      	b.n	800d0c0 <__ieee754_pow+0x110>
 800d182:	2c01      	cmp	r4, #1
 800d184:	f47f af31 	bne.w	800cfea <__ieee754_pow+0x3a>
 800d188:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d18c:	4619      	mov	r1, r3
 800d18e:	e72c      	b.n	800cfea <__ieee754_pow+0x3a>
 800d190:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800d194:	3b01      	subs	r3, #1
 800d196:	ea53 0204 	orrs.w	r2, r3, r4
 800d19a:	d102      	bne.n	800d1a2 <__ieee754_pow+0x1f2>
 800d19c:	4632      	mov	r2, r6
 800d19e:	463b      	mov	r3, r7
 800d1a0:	e7e8      	b.n	800d174 <__ieee754_pow+0x1c4>
 800d1a2:	3c01      	subs	r4, #1
 800d1a4:	431c      	orrs	r4, r3
 800d1a6:	d016      	beq.n	800d1d6 <__ieee754_pow+0x226>
 800d1a8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d230 <__ieee754_pow+0x280>
 800d1ac:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800d1b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d1b4:	f240 8110 	bls.w	800d3d8 <__ieee754_pow+0x428>
 800d1b8:	4b27      	ldr	r3, [pc, #156]	@ (800d258 <__ieee754_pow+0x2a8>)
 800d1ba:	459a      	cmp	sl, r3
 800d1bc:	4b24      	ldr	r3, [pc, #144]	@ (800d250 <__ieee754_pow+0x2a0>)
 800d1be:	d916      	bls.n	800d1ee <__ieee754_pow+0x23e>
 800d1c0:	429d      	cmp	r5, r3
 800d1c2:	d80b      	bhi.n	800d1dc <__ieee754_pow+0x22c>
 800d1c4:	f1b9 0f00 	cmp.w	r9, #0
 800d1c8:	da0b      	bge.n	800d1e2 <__ieee754_pow+0x232>
 800d1ca:	2000      	movs	r0, #0
 800d1cc:	b011      	add	sp, #68	@ 0x44
 800d1ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1d2:	f000 bcf1 	b.w	800dbb8 <__math_oflow>
 800d1d6:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 800d238 <__ieee754_pow+0x288>
 800d1da:	e7e7      	b.n	800d1ac <__ieee754_pow+0x1fc>
 800d1dc:	f1b9 0f00 	cmp.w	r9, #0
 800d1e0:	dcf3      	bgt.n	800d1ca <__ieee754_pow+0x21a>
 800d1e2:	2000      	movs	r0, #0
 800d1e4:	b011      	add	sp, #68	@ 0x44
 800d1e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ea:	f000 bcdd 	b.w	800dba8 <__math_uflow>
 800d1ee:	429d      	cmp	r5, r3
 800d1f0:	d20c      	bcs.n	800d20c <__ieee754_pow+0x25c>
 800d1f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	f7f3 fc6f 	bl	8000adc <__aeabi_dcmplt>
 800d1fe:	3800      	subs	r0, #0
 800d200:	bf18      	it	ne
 800d202:	2001      	movne	r0, #1
 800d204:	f1b9 0f00 	cmp.w	r9, #0
 800d208:	daec      	bge.n	800d1e4 <__ieee754_pow+0x234>
 800d20a:	e7df      	b.n	800d1cc <__ieee754_pow+0x21c>
 800d20c:	4b0f      	ldr	r3, [pc, #60]	@ (800d24c <__ieee754_pow+0x29c>)
 800d20e:	429d      	cmp	r5, r3
 800d210:	f04f 0200 	mov.w	r2, #0
 800d214:	d922      	bls.n	800d25c <__ieee754_pow+0x2ac>
 800d216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d21a:	2300      	movs	r3, #0
 800d21c:	f7f3 fc5e 	bl	8000adc <__aeabi_dcmplt>
 800d220:	3800      	subs	r0, #0
 800d222:	bf18      	it	ne
 800d224:	2001      	movne	r0, #1
 800d226:	f1b9 0f00 	cmp.w	r9, #0
 800d22a:	dccf      	bgt.n	800d1cc <__ieee754_pow+0x21c>
 800d22c:	e7da      	b.n	800d1e4 <__ieee754_pow+0x234>
 800d22e:	bf00      	nop
 800d230:	00000000 	.word	0x00000000
 800d234:	3ff00000 	.word	0x3ff00000
 800d238:	00000000 	.word	0x00000000
 800d23c:	bff00000 	.word	0xbff00000
 800d240:	fff00000 	.word	0xfff00000
 800d244:	7ff00000 	.word	0x7ff00000
 800d248:	433fffff 	.word	0x433fffff
 800d24c:	3ff00000 	.word	0x3ff00000
 800d250:	3fefffff 	.word	0x3fefffff
 800d254:	3fe00000 	.word	0x3fe00000
 800d258:	43f00000 	.word	0x43f00000
 800d25c:	4b5a      	ldr	r3, [pc, #360]	@ (800d3c8 <__ieee754_pow+0x418>)
 800d25e:	f7f3 f813 	bl	8000288 <__aeabi_dsub>
 800d262:	a351      	add	r3, pc, #324	@ (adr r3, 800d3a8 <__ieee754_pow+0x3f8>)
 800d264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d268:	4604      	mov	r4, r0
 800d26a:	460d      	mov	r5, r1
 800d26c:	f7f3 f9c4 	bl	80005f8 <__aeabi_dmul>
 800d270:	a34f      	add	r3, pc, #316	@ (adr r3, 800d3b0 <__ieee754_pow+0x400>)
 800d272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d276:	4606      	mov	r6, r0
 800d278:	460f      	mov	r7, r1
 800d27a:	4620      	mov	r0, r4
 800d27c:	4629      	mov	r1, r5
 800d27e:	f7f3 f9bb 	bl	80005f8 <__aeabi_dmul>
 800d282:	4b52      	ldr	r3, [pc, #328]	@ (800d3cc <__ieee754_pow+0x41c>)
 800d284:	4682      	mov	sl, r0
 800d286:	468b      	mov	fp, r1
 800d288:	2200      	movs	r2, #0
 800d28a:	4620      	mov	r0, r4
 800d28c:	4629      	mov	r1, r5
 800d28e:	f7f3 f9b3 	bl	80005f8 <__aeabi_dmul>
 800d292:	4602      	mov	r2, r0
 800d294:	460b      	mov	r3, r1
 800d296:	a148      	add	r1, pc, #288	@ (adr r1, 800d3b8 <__ieee754_pow+0x408>)
 800d298:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d29c:	f7f2 fff4 	bl	8000288 <__aeabi_dsub>
 800d2a0:	4622      	mov	r2, r4
 800d2a2:	462b      	mov	r3, r5
 800d2a4:	f7f3 f9a8 	bl	80005f8 <__aeabi_dmul>
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	2000      	movs	r0, #0
 800d2ae:	4948      	ldr	r1, [pc, #288]	@ (800d3d0 <__ieee754_pow+0x420>)
 800d2b0:	f7f2 ffea 	bl	8000288 <__aeabi_dsub>
 800d2b4:	4622      	mov	r2, r4
 800d2b6:	4680      	mov	r8, r0
 800d2b8:	4689      	mov	r9, r1
 800d2ba:	462b      	mov	r3, r5
 800d2bc:	4620      	mov	r0, r4
 800d2be:	4629      	mov	r1, r5
 800d2c0:	f7f3 f99a 	bl	80005f8 <__aeabi_dmul>
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	460b      	mov	r3, r1
 800d2c8:	4640      	mov	r0, r8
 800d2ca:	4649      	mov	r1, r9
 800d2cc:	f7f3 f994 	bl	80005f8 <__aeabi_dmul>
 800d2d0:	a33b      	add	r3, pc, #236	@ (adr r3, 800d3c0 <__ieee754_pow+0x410>)
 800d2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d6:	f7f3 f98f 	bl	80005f8 <__aeabi_dmul>
 800d2da:	4602      	mov	r2, r0
 800d2dc:	460b      	mov	r3, r1
 800d2de:	4650      	mov	r0, sl
 800d2e0:	4659      	mov	r1, fp
 800d2e2:	f7f2 ffd1 	bl	8000288 <__aeabi_dsub>
 800d2e6:	4602      	mov	r2, r0
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	4680      	mov	r8, r0
 800d2ec:	4689      	mov	r9, r1
 800d2ee:	4630      	mov	r0, r6
 800d2f0:	4639      	mov	r1, r7
 800d2f2:	f7f2 ffcb 	bl	800028c <__adddf3>
 800d2f6:	2400      	movs	r4, #0
 800d2f8:	4632      	mov	r2, r6
 800d2fa:	463b      	mov	r3, r7
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	460d      	mov	r5, r1
 800d300:	f7f2 ffc2 	bl	8000288 <__aeabi_dsub>
 800d304:	4602      	mov	r2, r0
 800d306:	460b      	mov	r3, r1
 800d308:	4640      	mov	r0, r8
 800d30a:	4649      	mov	r1, r9
 800d30c:	f7f2 ffbc 	bl	8000288 <__aeabi_dsub>
 800d310:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d314:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d318:	2300      	movs	r3, #0
 800d31a:	9304      	str	r3, [sp, #16]
 800d31c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d320:	4606      	mov	r6, r0
 800d322:	460f      	mov	r7, r1
 800d324:	465b      	mov	r3, fp
 800d326:	4652      	mov	r2, sl
 800d328:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d32c:	f7f2 ffac 	bl	8000288 <__aeabi_dsub>
 800d330:	4622      	mov	r2, r4
 800d332:	462b      	mov	r3, r5
 800d334:	f7f3 f960 	bl	80005f8 <__aeabi_dmul>
 800d338:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d33c:	4680      	mov	r8, r0
 800d33e:	4689      	mov	r9, r1
 800d340:	4630      	mov	r0, r6
 800d342:	4639      	mov	r1, r7
 800d344:	f7f3 f958 	bl	80005f8 <__aeabi_dmul>
 800d348:	4602      	mov	r2, r0
 800d34a:	460b      	mov	r3, r1
 800d34c:	4640      	mov	r0, r8
 800d34e:	4649      	mov	r1, r9
 800d350:	f7f2 ff9c 	bl	800028c <__adddf3>
 800d354:	465b      	mov	r3, fp
 800d356:	4606      	mov	r6, r0
 800d358:	460f      	mov	r7, r1
 800d35a:	4652      	mov	r2, sl
 800d35c:	4620      	mov	r0, r4
 800d35e:	4629      	mov	r1, r5
 800d360:	f7f3 f94a 	bl	80005f8 <__aeabi_dmul>
 800d364:	460b      	mov	r3, r1
 800d366:	4602      	mov	r2, r0
 800d368:	4680      	mov	r8, r0
 800d36a:	4689      	mov	r9, r1
 800d36c:	4630      	mov	r0, r6
 800d36e:	4639      	mov	r1, r7
 800d370:	f7f2 ff8c 	bl	800028c <__adddf3>
 800d374:	4b17      	ldr	r3, [pc, #92]	@ (800d3d4 <__ieee754_pow+0x424>)
 800d376:	4299      	cmp	r1, r3
 800d378:	4604      	mov	r4, r0
 800d37a:	460d      	mov	r5, r1
 800d37c:	468b      	mov	fp, r1
 800d37e:	f340 820b 	ble.w	800d798 <__ieee754_pow+0x7e8>
 800d382:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800d386:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800d38a:	4303      	orrs	r3, r0
 800d38c:	f000 81ea 	beq.w	800d764 <__ieee754_pow+0x7b4>
 800d390:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d394:	2200      	movs	r2, #0
 800d396:	2300      	movs	r3, #0
 800d398:	f7f3 fba0 	bl	8000adc <__aeabi_dcmplt>
 800d39c:	3800      	subs	r0, #0
 800d39e:	bf18      	it	ne
 800d3a0:	2001      	movne	r0, #1
 800d3a2:	e713      	b.n	800d1cc <__ieee754_pow+0x21c>
 800d3a4:	f3af 8000 	nop.w
 800d3a8:	60000000 	.word	0x60000000
 800d3ac:	3ff71547 	.word	0x3ff71547
 800d3b0:	f85ddf44 	.word	0xf85ddf44
 800d3b4:	3e54ae0b 	.word	0x3e54ae0b
 800d3b8:	55555555 	.word	0x55555555
 800d3bc:	3fd55555 	.word	0x3fd55555
 800d3c0:	652b82fe 	.word	0x652b82fe
 800d3c4:	3ff71547 	.word	0x3ff71547
 800d3c8:	3ff00000 	.word	0x3ff00000
 800d3cc:	3fd00000 	.word	0x3fd00000
 800d3d0:	3fe00000 	.word	0x3fe00000
 800d3d4:	408fffff 	.word	0x408fffff
 800d3d8:	4bd5      	ldr	r3, [pc, #852]	@ (800d730 <__ieee754_pow+0x780>)
 800d3da:	ea08 0303 	and.w	r3, r8, r3
 800d3de:	2200      	movs	r2, #0
 800d3e0:	b92b      	cbnz	r3, 800d3ee <__ieee754_pow+0x43e>
 800d3e2:	4bd4      	ldr	r3, [pc, #848]	@ (800d734 <__ieee754_pow+0x784>)
 800d3e4:	f7f3 f908 	bl	80005f8 <__aeabi_dmul>
 800d3e8:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800d3ec:	468b      	mov	fp, r1
 800d3ee:	ea4f 532b 	mov.w	r3, fp, asr #20
 800d3f2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800d3f6:	4413      	add	r3, r2
 800d3f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3fa:	4bcf      	ldr	r3, [pc, #828]	@ (800d738 <__ieee754_pow+0x788>)
 800d3fc:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800d400:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800d404:	459b      	cmp	fp, r3
 800d406:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d40a:	dd08      	ble.n	800d41e <__ieee754_pow+0x46e>
 800d40c:	4bcb      	ldr	r3, [pc, #812]	@ (800d73c <__ieee754_pow+0x78c>)
 800d40e:	459b      	cmp	fp, r3
 800d410:	f340 81a5 	ble.w	800d75e <__ieee754_pow+0x7ae>
 800d414:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d416:	3301      	adds	r3, #1
 800d418:	930a      	str	r3, [sp, #40]	@ 0x28
 800d41a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800d41e:	f04f 0a00 	mov.w	sl, #0
 800d422:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800d426:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d428:	4bc5      	ldr	r3, [pc, #788]	@ (800d740 <__ieee754_pow+0x790>)
 800d42a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d42e:	ed93 7b00 	vldr	d7, [r3]
 800d432:	4629      	mov	r1, r5
 800d434:	ec53 2b17 	vmov	r2, r3, d7
 800d438:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d43c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d440:	f7f2 ff22 	bl	8000288 <__aeabi_dsub>
 800d444:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d448:	4606      	mov	r6, r0
 800d44a:	460f      	mov	r7, r1
 800d44c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d450:	f7f2 ff1c 	bl	800028c <__adddf3>
 800d454:	4602      	mov	r2, r0
 800d456:	460b      	mov	r3, r1
 800d458:	2000      	movs	r0, #0
 800d45a:	49ba      	ldr	r1, [pc, #744]	@ (800d744 <__ieee754_pow+0x794>)
 800d45c:	f7f3 f9f6 	bl	800084c <__aeabi_ddiv>
 800d460:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800d464:	4602      	mov	r2, r0
 800d466:	460b      	mov	r3, r1
 800d468:	4630      	mov	r0, r6
 800d46a:	4639      	mov	r1, r7
 800d46c:	f7f3 f8c4 	bl	80005f8 <__aeabi_dmul>
 800d470:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d474:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800d478:	106d      	asrs	r5, r5, #1
 800d47a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800d47e:	f04f 0b00 	mov.w	fp, #0
 800d482:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800d486:	4661      	mov	r1, ip
 800d488:	2200      	movs	r2, #0
 800d48a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800d48e:	4658      	mov	r0, fp
 800d490:	46e1      	mov	r9, ip
 800d492:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800d496:	4614      	mov	r4, r2
 800d498:	461d      	mov	r5, r3
 800d49a:	f7f3 f8ad 	bl	80005f8 <__aeabi_dmul>
 800d49e:	4602      	mov	r2, r0
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	4630      	mov	r0, r6
 800d4a4:	4639      	mov	r1, r7
 800d4a6:	f7f2 feef 	bl	8000288 <__aeabi_dsub>
 800d4aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d4ae:	4606      	mov	r6, r0
 800d4b0:	460f      	mov	r7, r1
 800d4b2:	4620      	mov	r0, r4
 800d4b4:	4629      	mov	r1, r5
 800d4b6:	f7f2 fee7 	bl	8000288 <__aeabi_dsub>
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	460b      	mov	r3, r1
 800d4be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d4c2:	f7f2 fee1 	bl	8000288 <__aeabi_dsub>
 800d4c6:	465a      	mov	r2, fp
 800d4c8:	464b      	mov	r3, r9
 800d4ca:	f7f3 f895 	bl	80005f8 <__aeabi_dmul>
 800d4ce:	4602      	mov	r2, r0
 800d4d0:	460b      	mov	r3, r1
 800d4d2:	4630      	mov	r0, r6
 800d4d4:	4639      	mov	r1, r7
 800d4d6:	f7f2 fed7 	bl	8000288 <__aeabi_dsub>
 800d4da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d4de:	f7f3 f88b 	bl	80005f8 <__aeabi_dmul>
 800d4e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d4ea:	4610      	mov	r0, r2
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	f7f3 f883 	bl	80005f8 <__aeabi_dmul>
 800d4f2:	a37d      	add	r3, pc, #500	@ (adr r3, 800d6e8 <__ieee754_pow+0x738>)
 800d4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f8:	4604      	mov	r4, r0
 800d4fa:	460d      	mov	r5, r1
 800d4fc:	f7f3 f87c 	bl	80005f8 <__aeabi_dmul>
 800d500:	a37b      	add	r3, pc, #492	@ (adr r3, 800d6f0 <__ieee754_pow+0x740>)
 800d502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d506:	f7f2 fec1 	bl	800028c <__adddf3>
 800d50a:	4622      	mov	r2, r4
 800d50c:	462b      	mov	r3, r5
 800d50e:	f7f3 f873 	bl	80005f8 <__aeabi_dmul>
 800d512:	a379      	add	r3, pc, #484	@ (adr r3, 800d6f8 <__ieee754_pow+0x748>)
 800d514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d518:	f7f2 feb8 	bl	800028c <__adddf3>
 800d51c:	4622      	mov	r2, r4
 800d51e:	462b      	mov	r3, r5
 800d520:	f7f3 f86a 	bl	80005f8 <__aeabi_dmul>
 800d524:	a376      	add	r3, pc, #472	@ (adr r3, 800d700 <__ieee754_pow+0x750>)
 800d526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52a:	f7f2 feaf 	bl	800028c <__adddf3>
 800d52e:	4622      	mov	r2, r4
 800d530:	462b      	mov	r3, r5
 800d532:	f7f3 f861 	bl	80005f8 <__aeabi_dmul>
 800d536:	a374      	add	r3, pc, #464	@ (adr r3, 800d708 <__ieee754_pow+0x758>)
 800d538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53c:	f7f2 fea6 	bl	800028c <__adddf3>
 800d540:	4622      	mov	r2, r4
 800d542:	462b      	mov	r3, r5
 800d544:	f7f3 f858 	bl	80005f8 <__aeabi_dmul>
 800d548:	a371      	add	r3, pc, #452	@ (adr r3, 800d710 <__ieee754_pow+0x760>)
 800d54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d54e:	f7f2 fe9d 	bl	800028c <__adddf3>
 800d552:	4622      	mov	r2, r4
 800d554:	4606      	mov	r6, r0
 800d556:	460f      	mov	r7, r1
 800d558:	462b      	mov	r3, r5
 800d55a:	4620      	mov	r0, r4
 800d55c:	4629      	mov	r1, r5
 800d55e:	f7f3 f84b 	bl	80005f8 <__aeabi_dmul>
 800d562:	4602      	mov	r2, r0
 800d564:	460b      	mov	r3, r1
 800d566:	4630      	mov	r0, r6
 800d568:	4639      	mov	r1, r7
 800d56a:	f7f3 f845 	bl	80005f8 <__aeabi_dmul>
 800d56e:	465a      	mov	r2, fp
 800d570:	4604      	mov	r4, r0
 800d572:	460d      	mov	r5, r1
 800d574:	464b      	mov	r3, r9
 800d576:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d57a:	f7f2 fe87 	bl	800028c <__adddf3>
 800d57e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d582:	f7f3 f839 	bl	80005f8 <__aeabi_dmul>
 800d586:	4622      	mov	r2, r4
 800d588:	462b      	mov	r3, r5
 800d58a:	f7f2 fe7f 	bl	800028c <__adddf3>
 800d58e:	465a      	mov	r2, fp
 800d590:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d594:	464b      	mov	r3, r9
 800d596:	4658      	mov	r0, fp
 800d598:	4649      	mov	r1, r9
 800d59a:	f7f3 f82d 	bl	80005f8 <__aeabi_dmul>
 800d59e:	4b6a      	ldr	r3, [pc, #424]	@ (800d748 <__ieee754_pow+0x798>)
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	4606      	mov	r6, r0
 800d5a4:	460f      	mov	r7, r1
 800d5a6:	f7f2 fe71 	bl	800028c <__adddf3>
 800d5aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d5ae:	f7f2 fe6d 	bl	800028c <__adddf3>
 800d5b2:	46d8      	mov	r8, fp
 800d5b4:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800d5b8:	460d      	mov	r5, r1
 800d5ba:	465a      	mov	r2, fp
 800d5bc:	460b      	mov	r3, r1
 800d5be:	4640      	mov	r0, r8
 800d5c0:	4649      	mov	r1, r9
 800d5c2:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800d5c6:	f7f3 f817 	bl	80005f8 <__aeabi_dmul>
 800d5ca:	465c      	mov	r4, fp
 800d5cc:	4680      	mov	r8, r0
 800d5ce:	4689      	mov	r9, r1
 800d5d0:	4b5d      	ldr	r3, [pc, #372]	@ (800d748 <__ieee754_pow+0x798>)
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	4629      	mov	r1, r5
 800d5d8:	f7f2 fe56 	bl	8000288 <__aeabi_dsub>
 800d5dc:	4632      	mov	r2, r6
 800d5de:	463b      	mov	r3, r7
 800d5e0:	f7f2 fe52 	bl	8000288 <__aeabi_dsub>
 800d5e4:	4602      	mov	r2, r0
 800d5e6:	460b      	mov	r3, r1
 800d5e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d5ec:	f7f2 fe4c 	bl	8000288 <__aeabi_dsub>
 800d5f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5f4:	f7f3 f800 	bl	80005f8 <__aeabi_dmul>
 800d5f8:	4622      	mov	r2, r4
 800d5fa:	4606      	mov	r6, r0
 800d5fc:	460f      	mov	r7, r1
 800d5fe:	462b      	mov	r3, r5
 800d600:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d604:	f7f2 fff8 	bl	80005f8 <__aeabi_dmul>
 800d608:	4602      	mov	r2, r0
 800d60a:	460b      	mov	r3, r1
 800d60c:	4630      	mov	r0, r6
 800d60e:	4639      	mov	r1, r7
 800d610:	f7f2 fe3c 	bl	800028c <__adddf3>
 800d614:	4606      	mov	r6, r0
 800d616:	460f      	mov	r7, r1
 800d618:	4602      	mov	r2, r0
 800d61a:	460b      	mov	r3, r1
 800d61c:	4640      	mov	r0, r8
 800d61e:	4649      	mov	r1, r9
 800d620:	f7f2 fe34 	bl	800028c <__adddf3>
 800d624:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800d628:	a33b      	add	r3, pc, #236	@ (adr r3, 800d718 <__ieee754_pow+0x768>)
 800d62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d62e:	4658      	mov	r0, fp
 800d630:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800d634:	460d      	mov	r5, r1
 800d636:	f7f2 ffdf 	bl	80005f8 <__aeabi_dmul>
 800d63a:	465c      	mov	r4, fp
 800d63c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d640:	4642      	mov	r2, r8
 800d642:	464b      	mov	r3, r9
 800d644:	4620      	mov	r0, r4
 800d646:	4629      	mov	r1, r5
 800d648:	f7f2 fe1e 	bl	8000288 <__aeabi_dsub>
 800d64c:	4602      	mov	r2, r0
 800d64e:	460b      	mov	r3, r1
 800d650:	4630      	mov	r0, r6
 800d652:	4639      	mov	r1, r7
 800d654:	f7f2 fe18 	bl	8000288 <__aeabi_dsub>
 800d658:	a331      	add	r3, pc, #196	@ (adr r3, 800d720 <__ieee754_pow+0x770>)
 800d65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d65e:	f7f2 ffcb 	bl	80005f8 <__aeabi_dmul>
 800d662:	a331      	add	r3, pc, #196	@ (adr r3, 800d728 <__ieee754_pow+0x778>)
 800d664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d668:	4606      	mov	r6, r0
 800d66a:	460f      	mov	r7, r1
 800d66c:	4620      	mov	r0, r4
 800d66e:	4629      	mov	r1, r5
 800d670:	f7f2 ffc2 	bl	80005f8 <__aeabi_dmul>
 800d674:	4602      	mov	r2, r0
 800d676:	460b      	mov	r3, r1
 800d678:	4630      	mov	r0, r6
 800d67a:	4639      	mov	r1, r7
 800d67c:	f7f2 fe06 	bl	800028c <__adddf3>
 800d680:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d682:	4b32      	ldr	r3, [pc, #200]	@ (800d74c <__ieee754_pow+0x79c>)
 800d684:	4413      	add	r3, r2
 800d686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d68a:	f7f2 fdff 	bl	800028c <__adddf3>
 800d68e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d692:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d694:	f7f2 ff46 	bl	8000524 <__aeabi_i2d>
 800d698:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d69a:	4b2d      	ldr	r3, [pc, #180]	@ (800d750 <__ieee754_pow+0x7a0>)
 800d69c:	4413      	add	r3, r2
 800d69e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d6a2:	4606      	mov	r6, r0
 800d6a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d6a8:	460f      	mov	r7, r1
 800d6aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d6ae:	f7f2 fded 	bl	800028c <__adddf3>
 800d6b2:	4642      	mov	r2, r8
 800d6b4:	464b      	mov	r3, r9
 800d6b6:	f7f2 fde9 	bl	800028c <__adddf3>
 800d6ba:	4632      	mov	r2, r6
 800d6bc:	463b      	mov	r3, r7
 800d6be:	f7f2 fde5 	bl	800028c <__adddf3>
 800d6c2:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800d6c6:	4632      	mov	r2, r6
 800d6c8:	463b      	mov	r3, r7
 800d6ca:	4658      	mov	r0, fp
 800d6cc:	460d      	mov	r5, r1
 800d6ce:	f7f2 fddb 	bl	8000288 <__aeabi_dsub>
 800d6d2:	4642      	mov	r2, r8
 800d6d4:	464b      	mov	r3, r9
 800d6d6:	f7f2 fdd7 	bl	8000288 <__aeabi_dsub>
 800d6da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d6de:	f7f2 fdd3 	bl	8000288 <__aeabi_dsub>
 800d6e2:	465c      	mov	r4, fp
 800d6e4:	e036      	b.n	800d754 <__ieee754_pow+0x7a4>
 800d6e6:	bf00      	nop
 800d6e8:	4a454eef 	.word	0x4a454eef
 800d6ec:	3fca7e28 	.word	0x3fca7e28
 800d6f0:	93c9db65 	.word	0x93c9db65
 800d6f4:	3fcd864a 	.word	0x3fcd864a
 800d6f8:	a91d4101 	.word	0xa91d4101
 800d6fc:	3fd17460 	.word	0x3fd17460
 800d700:	518f264d 	.word	0x518f264d
 800d704:	3fd55555 	.word	0x3fd55555
 800d708:	db6fabff 	.word	0xdb6fabff
 800d70c:	3fdb6db6 	.word	0x3fdb6db6
 800d710:	33333303 	.word	0x33333303
 800d714:	3fe33333 	.word	0x3fe33333
 800d718:	e0000000 	.word	0xe0000000
 800d71c:	3feec709 	.word	0x3feec709
 800d720:	dc3a03fd 	.word	0xdc3a03fd
 800d724:	3feec709 	.word	0x3feec709
 800d728:	145b01f5 	.word	0x145b01f5
 800d72c:	be3e2fe0 	.word	0xbe3e2fe0
 800d730:	7ff00000 	.word	0x7ff00000
 800d734:	43400000 	.word	0x43400000
 800d738:	0003988e 	.word	0x0003988e
 800d73c:	000bb679 	.word	0x000bb679
 800d740:	0800e468 	.word	0x0800e468
 800d744:	3ff00000 	.word	0x3ff00000
 800d748:	40080000 	.word	0x40080000
 800d74c:	0800e448 	.word	0x0800e448
 800d750:	0800e458 	.word	0x0800e458
 800d754:	4602      	mov	r2, r0
 800d756:	460b      	mov	r3, r1
 800d758:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d75c:	e5d6      	b.n	800d30c <__ieee754_pow+0x35c>
 800d75e:	f04f 0a01 	mov.w	sl, #1
 800d762:	e65e      	b.n	800d422 <__ieee754_pow+0x472>
 800d764:	a3b5      	add	r3, pc, #724	@ (adr r3, 800da3c <__ieee754_pow+0xa8c>)
 800d766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76a:	4630      	mov	r0, r6
 800d76c:	4639      	mov	r1, r7
 800d76e:	f7f2 fd8d 	bl	800028c <__adddf3>
 800d772:	4642      	mov	r2, r8
 800d774:	e9cd 0100 	strd	r0, r1, [sp]
 800d778:	464b      	mov	r3, r9
 800d77a:	4620      	mov	r0, r4
 800d77c:	4629      	mov	r1, r5
 800d77e:	f7f2 fd83 	bl	8000288 <__aeabi_dsub>
 800d782:	4602      	mov	r2, r0
 800d784:	460b      	mov	r3, r1
 800d786:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d78a:	f7f3 f9c5 	bl	8000b18 <__aeabi_dcmpgt>
 800d78e:	2800      	cmp	r0, #0
 800d790:	f47f adfe 	bne.w	800d390 <__ieee754_pow+0x3e0>
 800d794:	4ba2      	ldr	r3, [pc, #648]	@ (800da20 <__ieee754_pow+0xa70>)
 800d796:	e022      	b.n	800d7de <__ieee754_pow+0x82e>
 800d798:	4ca2      	ldr	r4, [pc, #648]	@ (800da24 <__ieee754_pow+0xa74>)
 800d79a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d79e:	42a3      	cmp	r3, r4
 800d7a0:	d919      	bls.n	800d7d6 <__ieee754_pow+0x826>
 800d7a2:	4ba1      	ldr	r3, [pc, #644]	@ (800da28 <__ieee754_pow+0xa78>)
 800d7a4:	440b      	add	r3, r1
 800d7a6:	4303      	orrs	r3, r0
 800d7a8:	d009      	beq.n	800d7be <__ieee754_pow+0x80e>
 800d7aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	f7f3 f993 	bl	8000adc <__aeabi_dcmplt>
 800d7b6:	3800      	subs	r0, #0
 800d7b8:	bf18      	it	ne
 800d7ba:	2001      	movne	r0, #1
 800d7bc:	e512      	b.n	800d1e4 <__ieee754_pow+0x234>
 800d7be:	4642      	mov	r2, r8
 800d7c0:	464b      	mov	r3, r9
 800d7c2:	f7f2 fd61 	bl	8000288 <__aeabi_dsub>
 800d7c6:	4632      	mov	r2, r6
 800d7c8:	463b      	mov	r3, r7
 800d7ca:	f7f3 f99b 	bl	8000b04 <__aeabi_dcmpge>
 800d7ce:	2800      	cmp	r0, #0
 800d7d0:	d1eb      	bne.n	800d7aa <__ieee754_pow+0x7fa>
 800d7d2:	4b96      	ldr	r3, [pc, #600]	@ (800da2c <__ieee754_pow+0xa7c>)
 800d7d4:	e003      	b.n	800d7de <__ieee754_pow+0x82e>
 800d7d6:	4a96      	ldr	r2, [pc, #600]	@ (800da30 <__ieee754_pow+0xa80>)
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	f240 80e7 	bls.w	800d9ac <__ieee754_pow+0x9fc>
 800d7de:	151b      	asrs	r3, r3, #20
 800d7e0:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800d7e4:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800d7e8:	fa4a fa03 	asr.w	sl, sl, r3
 800d7ec:	44da      	add	sl, fp
 800d7ee:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800d7f2:	4890      	ldr	r0, [pc, #576]	@ (800da34 <__ieee754_pow+0xa84>)
 800d7f4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800d7f8:	4108      	asrs	r0, r1
 800d7fa:	ea00 030a 	and.w	r3, r0, sl
 800d7fe:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800d802:	f1c1 0114 	rsb	r1, r1, #20
 800d806:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800d80a:	fa4a fa01 	asr.w	sl, sl, r1
 800d80e:	f1bb 0f00 	cmp.w	fp, #0
 800d812:	4640      	mov	r0, r8
 800d814:	4649      	mov	r1, r9
 800d816:	f04f 0200 	mov.w	r2, #0
 800d81a:	bfb8      	it	lt
 800d81c:	f1ca 0a00 	rsblt	sl, sl, #0
 800d820:	f7f2 fd32 	bl	8000288 <__aeabi_dsub>
 800d824:	4680      	mov	r8, r0
 800d826:	4689      	mov	r9, r1
 800d828:	4632      	mov	r2, r6
 800d82a:	463b      	mov	r3, r7
 800d82c:	4640      	mov	r0, r8
 800d82e:	4649      	mov	r1, r9
 800d830:	f7f2 fd2c 	bl	800028c <__adddf3>
 800d834:	2400      	movs	r4, #0
 800d836:	a36a      	add	r3, pc, #424	@ (adr r3, 800d9e0 <__ieee754_pow+0xa30>)
 800d838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d83c:	4620      	mov	r0, r4
 800d83e:	460d      	mov	r5, r1
 800d840:	f7f2 feda 	bl	80005f8 <__aeabi_dmul>
 800d844:	4642      	mov	r2, r8
 800d846:	e9cd 0100 	strd	r0, r1, [sp]
 800d84a:	464b      	mov	r3, r9
 800d84c:	4620      	mov	r0, r4
 800d84e:	4629      	mov	r1, r5
 800d850:	f7f2 fd1a 	bl	8000288 <__aeabi_dsub>
 800d854:	4602      	mov	r2, r0
 800d856:	460b      	mov	r3, r1
 800d858:	4630      	mov	r0, r6
 800d85a:	4639      	mov	r1, r7
 800d85c:	f7f2 fd14 	bl	8000288 <__aeabi_dsub>
 800d860:	a361      	add	r3, pc, #388	@ (adr r3, 800d9e8 <__ieee754_pow+0xa38>)
 800d862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d866:	f7f2 fec7 	bl	80005f8 <__aeabi_dmul>
 800d86a:	a361      	add	r3, pc, #388	@ (adr r3, 800d9f0 <__ieee754_pow+0xa40>)
 800d86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d870:	4680      	mov	r8, r0
 800d872:	4689      	mov	r9, r1
 800d874:	4620      	mov	r0, r4
 800d876:	4629      	mov	r1, r5
 800d878:	f7f2 febe 	bl	80005f8 <__aeabi_dmul>
 800d87c:	4602      	mov	r2, r0
 800d87e:	460b      	mov	r3, r1
 800d880:	4640      	mov	r0, r8
 800d882:	4649      	mov	r1, r9
 800d884:	f7f2 fd02 	bl	800028c <__adddf3>
 800d888:	4604      	mov	r4, r0
 800d88a:	460d      	mov	r5, r1
 800d88c:	4602      	mov	r2, r0
 800d88e:	460b      	mov	r3, r1
 800d890:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d894:	f7f2 fcfa 	bl	800028c <__adddf3>
 800d898:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d89c:	4680      	mov	r8, r0
 800d89e:	4689      	mov	r9, r1
 800d8a0:	f7f2 fcf2 	bl	8000288 <__aeabi_dsub>
 800d8a4:	4602      	mov	r2, r0
 800d8a6:	460b      	mov	r3, r1
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	4629      	mov	r1, r5
 800d8ac:	f7f2 fcec 	bl	8000288 <__aeabi_dsub>
 800d8b0:	4642      	mov	r2, r8
 800d8b2:	4606      	mov	r6, r0
 800d8b4:	460f      	mov	r7, r1
 800d8b6:	464b      	mov	r3, r9
 800d8b8:	4640      	mov	r0, r8
 800d8ba:	4649      	mov	r1, r9
 800d8bc:	f7f2 fe9c 	bl	80005f8 <__aeabi_dmul>
 800d8c0:	a34d      	add	r3, pc, #308	@ (adr r3, 800d9f8 <__ieee754_pow+0xa48>)
 800d8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c6:	4604      	mov	r4, r0
 800d8c8:	460d      	mov	r5, r1
 800d8ca:	f7f2 fe95 	bl	80005f8 <__aeabi_dmul>
 800d8ce:	a34c      	add	r3, pc, #304	@ (adr r3, 800da00 <__ieee754_pow+0xa50>)
 800d8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d4:	f7f2 fcd8 	bl	8000288 <__aeabi_dsub>
 800d8d8:	4622      	mov	r2, r4
 800d8da:	462b      	mov	r3, r5
 800d8dc:	f7f2 fe8c 	bl	80005f8 <__aeabi_dmul>
 800d8e0:	a349      	add	r3, pc, #292	@ (adr r3, 800da08 <__ieee754_pow+0xa58>)
 800d8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e6:	f7f2 fcd1 	bl	800028c <__adddf3>
 800d8ea:	4622      	mov	r2, r4
 800d8ec:	462b      	mov	r3, r5
 800d8ee:	f7f2 fe83 	bl	80005f8 <__aeabi_dmul>
 800d8f2:	a347      	add	r3, pc, #284	@ (adr r3, 800da10 <__ieee754_pow+0xa60>)
 800d8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f8:	f7f2 fcc6 	bl	8000288 <__aeabi_dsub>
 800d8fc:	4622      	mov	r2, r4
 800d8fe:	462b      	mov	r3, r5
 800d900:	f7f2 fe7a 	bl	80005f8 <__aeabi_dmul>
 800d904:	a344      	add	r3, pc, #272	@ (adr r3, 800da18 <__ieee754_pow+0xa68>)
 800d906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90a:	f7f2 fcbf 	bl	800028c <__adddf3>
 800d90e:	4622      	mov	r2, r4
 800d910:	462b      	mov	r3, r5
 800d912:	f7f2 fe71 	bl	80005f8 <__aeabi_dmul>
 800d916:	4602      	mov	r2, r0
 800d918:	460b      	mov	r3, r1
 800d91a:	4640      	mov	r0, r8
 800d91c:	4649      	mov	r1, r9
 800d91e:	f7f2 fcb3 	bl	8000288 <__aeabi_dsub>
 800d922:	4604      	mov	r4, r0
 800d924:	460d      	mov	r5, r1
 800d926:	4602      	mov	r2, r0
 800d928:	460b      	mov	r3, r1
 800d92a:	4640      	mov	r0, r8
 800d92c:	4649      	mov	r1, r9
 800d92e:	f7f2 fe63 	bl	80005f8 <__aeabi_dmul>
 800d932:	2200      	movs	r2, #0
 800d934:	e9cd 0100 	strd	r0, r1, [sp]
 800d938:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d93c:	4620      	mov	r0, r4
 800d93e:	4629      	mov	r1, r5
 800d940:	f7f2 fca2 	bl	8000288 <__aeabi_dsub>
 800d944:	4602      	mov	r2, r0
 800d946:	460b      	mov	r3, r1
 800d948:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d94c:	f7f2 ff7e 	bl	800084c <__aeabi_ddiv>
 800d950:	4632      	mov	r2, r6
 800d952:	4604      	mov	r4, r0
 800d954:	460d      	mov	r5, r1
 800d956:	463b      	mov	r3, r7
 800d958:	4640      	mov	r0, r8
 800d95a:	4649      	mov	r1, r9
 800d95c:	f7f2 fe4c 	bl	80005f8 <__aeabi_dmul>
 800d960:	4632      	mov	r2, r6
 800d962:	463b      	mov	r3, r7
 800d964:	f7f2 fc92 	bl	800028c <__adddf3>
 800d968:	4602      	mov	r2, r0
 800d96a:	460b      	mov	r3, r1
 800d96c:	4620      	mov	r0, r4
 800d96e:	4629      	mov	r1, r5
 800d970:	f7f2 fc8a 	bl	8000288 <__aeabi_dsub>
 800d974:	4642      	mov	r2, r8
 800d976:	464b      	mov	r3, r9
 800d978:	f7f2 fc86 	bl	8000288 <__aeabi_dsub>
 800d97c:	460b      	mov	r3, r1
 800d97e:	4602      	mov	r2, r0
 800d980:	492d      	ldr	r1, [pc, #180]	@ (800da38 <__ieee754_pow+0xa88>)
 800d982:	2000      	movs	r0, #0
 800d984:	f7f2 fc80 	bl	8000288 <__aeabi_dsub>
 800d988:	ec41 0b10 	vmov	d0, r0, r1
 800d98c:	ee10 3a90 	vmov	r3, s1
 800d990:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d994:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d998:	da0b      	bge.n	800d9b2 <__ieee754_pow+0xa02>
 800d99a:	4650      	mov	r0, sl
 800d99c:	f000 f85c 	bl	800da58 <scalbn>
 800d9a0:	ec51 0b10 	vmov	r0, r1, d0
 800d9a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9a8:	f7ff bb6d 	b.w	800d086 <__ieee754_pow+0xd6>
 800d9ac:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d9b0:	e73a      	b.n	800d828 <__ieee754_pow+0x878>
 800d9b2:	ec51 0b10 	vmov	r0, r1, d0
 800d9b6:	4619      	mov	r1, r3
 800d9b8:	e7f4      	b.n	800d9a4 <__ieee754_pow+0x9f4>
 800d9ba:	491f      	ldr	r1, [pc, #124]	@ (800da38 <__ieee754_pow+0xa88>)
 800d9bc:	2000      	movs	r0, #0
 800d9be:	f7ff bb14 	b.w	800cfea <__ieee754_pow+0x3a>
 800d9c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d9c6:	f7ff bb10 	b.w	800cfea <__ieee754_pow+0x3a>
 800d9ca:	4630      	mov	r0, r6
 800d9cc:	4639      	mov	r1, r7
 800d9ce:	f7ff bb0c 	b.w	800cfea <__ieee754_pow+0x3a>
 800d9d2:	460c      	mov	r4, r1
 800d9d4:	f7ff bb69 	b.w	800d0aa <__ieee754_pow+0xfa>
 800d9d8:	2400      	movs	r4, #0
 800d9da:	f7ff bb4b 	b.w	800d074 <__ieee754_pow+0xc4>
 800d9de:	bf00      	nop
 800d9e0:	00000000 	.word	0x00000000
 800d9e4:	3fe62e43 	.word	0x3fe62e43
 800d9e8:	fefa39ef 	.word	0xfefa39ef
 800d9ec:	3fe62e42 	.word	0x3fe62e42
 800d9f0:	0ca86c39 	.word	0x0ca86c39
 800d9f4:	be205c61 	.word	0xbe205c61
 800d9f8:	72bea4d0 	.word	0x72bea4d0
 800d9fc:	3e663769 	.word	0x3e663769
 800da00:	c5d26bf1 	.word	0xc5d26bf1
 800da04:	3ebbbd41 	.word	0x3ebbbd41
 800da08:	af25de2c 	.word	0xaf25de2c
 800da0c:	3f11566a 	.word	0x3f11566a
 800da10:	16bebd93 	.word	0x16bebd93
 800da14:	3f66c16c 	.word	0x3f66c16c
 800da18:	5555553e 	.word	0x5555553e
 800da1c:	3fc55555 	.word	0x3fc55555
 800da20:	40900000 	.word	0x40900000
 800da24:	4090cbff 	.word	0x4090cbff
 800da28:	3f6f3400 	.word	0x3f6f3400
 800da2c:	4090cc00 	.word	0x4090cc00
 800da30:	3fe00000 	.word	0x3fe00000
 800da34:	fff00000 	.word	0xfff00000
 800da38:	3ff00000 	.word	0x3ff00000
 800da3c:	652b82fe 	.word	0x652b82fe
 800da40:	3c971547 	.word	0x3c971547

0800da44 <fabs>:
 800da44:	ec51 0b10 	vmov	r0, r1, d0
 800da48:	4602      	mov	r2, r0
 800da4a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800da4e:	ec43 2b10 	vmov	d0, r2, r3
 800da52:	4770      	bx	lr
 800da54:	0000      	movs	r0, r0
	...

0800da58 <scalbn>:
 800da58:	b570      	push	{r4, r5, r6, lr}
 800da5a:	ec55 4b10 	vmov	r4, r5, d0
 800da5e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800da62:	4606      	mov	r6, r0
 800da64:	462b      	mov	r3, r5
 800da66:	b991      	cbnz	r1, 800da8e <scalbn+0x36>
 800da68:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800da6c:	4323      	orrs	r3, r4
 800da6e:	d03b      	beq.n	800dae8 <scalbn+0x90>
 800da70:	4b33      	ldr	r3, [pc, #204]	@ (800db40 <scalbn+0xe8>)
 800da72:	4620      	mov	r0, r4
 800da74:	4629      	mov	r1, r5
 800da76:	2200      	movs	r2, #0
 800da78:	f7f2 fdbe 	bl	80005f8 <__aeabi_dmul>
 800da7c:	4b31      	ldr	r3, [pc, #196]	@ (800db44 <scalbn+0xec>)
 800da7e:	429e      	cmp	r6, r3
 800da80:	4604      	mov	r4, r0
 800da82:	460d      	mov	r5, r1
 800da84:	da0f      	bge.n	800daa6 <scalbn+0x4e>
 800da86:	a326      	add	r3, pc, #152	@ (adr r3, 800db20 <scalbn+0xc8>)
 800da88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da8c:	e01e      	b.n	800dacc <scalbn+0x74>
 800da8e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800da92:	4291      	cmp	r1, r2
 800da94:	d10b      	bne.n	800daae <scalbn+0x56>
 800da96:	4622      	mov	r2, r4
 800da98:	4620      	mov	r0, r4
 800da9a:	4629      	mov	r1, r5
 800da9c:	f7f2 fbf6 	bl	800028c <__adddf3>
 800daa0:	4604      	mov	r4, r0
 800daa2:	460d      	mov	r5, r1
 800daa4:	e020      	b.n	800dae8 <scalbn+0x90>
 800daa6:	460b      	mov	r3, r1
 800daa8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800daac:	3936      	subs	r1, #54	@ 0x36
 800daae:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800dab2:	4296      	cmp	r6, r2
 800dab4:	dd0d      	ble.n	800dad2 <scalbn+0x7a>
 800dab6:	2d00      	cmp	r5, #0
 800dab8:	a11b      	add	r1, pc, #108	@ (adr r1, 800db28 <scalbn+0xd0>)
 800daba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dabe:	da02      	bge.n	800dac6 <scalbn+0x6e>
 800dac0:	a11b      	add	r1, pc, #108	@ (adr r1, 800db30 <scalbn+0xd8>)
 800dac2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dac6:	a318      	add	r3, pc, #96	@ (adr r3, 800db28 <scalbn+0xd0>)
 800dac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dacc:	f7f2 fd94 	bl	80005f8 <__aeabi_dmul>
 800dad0:	e7e6      	b.n	800daa0 <scalbn+0x48>
 800dad2:	1872      	adds	r2, r6, r1
 800dad4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800dad8:	428a      	cmp	r2, r1
 800dada:	dcec      	bgt.n	800dab6 <scalbn+0x5e>
 800dadc:	2a00      	cmp	r2, #0
 800dade:	dd06      	ble.n	800daee <scalbn+0x96>
 800dae0:	f36f 531e 	bfc	r3, #20, #11
 800dae4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dae8:	ec45 4b10 	vmov	d0, r4, r5
 800daec:	bd70      	pop	{r4, r5, r6, pc}
 800daee:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800daf2:	da08      	bge.n	800db06 <scalbn+0xae>
 800daf4:	2d00      	cmp	r5, #0
 800daf6:	a10a      	add	r1, pc, #40	@ (adr r1, 800db20 <scalbn+0xc8>)
 800daf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dafc:	dac3      	bge.n	800da86 <scalbn+0x2e>
 800dafe:	a10e      	add	r1, pc, #56	@ (adr r1, 800db38 <scalbn+0xe0>)
 800db00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db04:	e7bf      	b.n	800da86 <scalbn+0x2e>
 800db06:	3236      	adds	r2, #54	@ 0x36
 800db08:	f36f 531e 	bfc	r3, #20, #11
 800db0c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800db10:	4620      	mov	r0, r4
 800db12:	4b0d      	ldr	r3, [pc, #52]	@ (800db48 <scalbn+0xf0>)
 800db14:	4629      	mov	r1, r5
 800db16:	2200      	movs	r2, #0
 800db18:	e7d8      	b.n	800dacc <scalbn+0x74>
 800db1a:	bf00      	nop
 800db1c:	f3af 8000 	nop.w
 800db20:	c2f8f359 	.word	0xc2f8f359
 800db24:	01a56e1f 	.word	0x01a56e1f
 800db28:	8800759c 	.word	0x8800759c
 800db2c:	7e37e43c 	.word	0x7e37e43c
 800db30:	8800759c 	.word	0x8800759c
 800db34:	fe37e43c 	.word	0xfe37e43c
 800db38:	c2f8f359 	.word	0xc2f8f359
 800db3c:	81a56e1f 	.word	0x81a56e1f
 800db40:	43500000 	.word	0x43500000
 800db44:	ffff3cb0 	.word	0xffff3cb0
 800db48:	3c900000 	.word	0x3c900000

0800db4c <with_errno>:
 800db4c:	b510      	push	{r4, lr}
 800db4e:	ed2d 8b02 	vpush	{d8}
 800db52:	eeb0 8a40 	vmov.f32	s16, s0
 800db56:	eef0 8a60 	vmov.f32	s17, s1
 800db5a:	4604      	mov	r4, r0
 800db5c:	f7fd f9c2 	bl	800aee4 <__errno>
 800db60:	eeb0 0a48 	vmov.f32	s0, s16
 800db64:	eef0 0a68 	vmov.f32	s1, s17
 800db68:	ecbd 8b02 	vpop	{d8}
 800db6c:	6004      	str	r4, [r0, #0]
 800db6e:	bd10      	pop	{r4, pc}

0800db70 <xflow>:
 800db70:	4603      	mov	r3, r0
 800db72:	b507      	push	{r0, r1, r2, lr}
 800db74:	ec51 0b10 	vmov	r0, r1, d0
 800db78:	b183      	cbz	r3, 800db9c <xflow+0x2c>
 800db7a:	4602      	mov	r2, r0
 800db7c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800db80:	e9cd 2300 	strd	r2, r3, [sp]
 800db84:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db88:	f7f2 fd36 	bl	80005f8 <__aeabi_dmul>
 800db8c:	ec41 0b10 	vmov	d0, r0, r1
 800db90:	2022      	movs	r0, #34	@ 0x22
 800db92:	b003      	add	sp, #12
 800db94:	f85d eb04 	ldr.w	lr, [sp], #4
 800db98:	f7ff bfd8 	b.w	800db4c <with_errno>
 800db9c:	4602      	mov	r2, r0
 800db9e:	460b      	mov	r3, r1
 800dba0:	e7ee      	b.n	800db80 <xflow+0x10>
 800dba2:	0000      	movs	r0, r0
 800dba4:	0000      	movs	r0, r0
	...

0800dba8 <__math_uflow>:
 800dba8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dbb0 <__math_uflow+0x8>
 800dbac:	f7ff bfe0 	b.w	800db70 <xflow>
 800dbb0:	00000000 	.word	0x00000000
 800dbb4:	10000000 	.word	0x10000000

0800dbb8 <__math_oflow>:
 800dbb8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dbc0 <__math_oflow+0x8>
 800dbbc:	f7ff bfd8 	b.w	800db70 <xflow>
 800dbc0:	00000000 	.word	0x00000000
 800dbc4:	70000000 	.word	0x70000000

0800dbc8 <__ieee754_sqrt>:
 800dbc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbcc:	4a66      	ldr	r2, [pc, #408]	@ (800dd68 <__ieee754_sqrt+0x1a0>)
 800dbce:	ec55 4b10 	vmov	r4, r5, d0
 800dbd2:	43aa      	bics	r2, r5
 800dbd4:	462b      	mov	r3, r5
 800dbd6:	4621      	mov	r1, r4
 800dbd8:	d110      	bne.n	800dbfc <__ieee754_sqrt+0x34>
 800dbda:	4622      	mov	r2, r4
 800dbdc:	4620      	mov	r0, r4
 800dbde:	4629      	mov	r1, r5
 800dbe0:	f7f2 fd0a 	bl	80005f8 <__aeabi_dmul>
 800dbe4:	4602      	mov	r2, r0
 800dbe6:	460b      	mov	r3, r1
 800dbe8:	4620      	mov	r0, r4
 800dbea:	4629      	mov	r1, r5
 800dbec:	f7f2 fb4e 	bl	800028c <__adddf3>
 800dbf0:	4604      	mov	r4, r0
 800dbf2:	460d      	mov	r5, r1
 800dbf4:	ec45 4b10 	vmov	d0, r4, r5
 800dbf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbfc:	2d00      	cmp	r5, #0
 800dbfe:	dc0e      	bgt.n	800dc1e <__ieee754_sqrt+0x56>
 800dc00:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800dc04:	4322      	orrs	r2, r4
 800dc06:	d0f5      	beq.n	800dbf4 <__ieee754_sqrt+0x2c>
 800dc08:	b19d      	cbz	r5, 800dc32 <__ieee754_sqrt+0x6a>
 800dc0a:	4622      	mov	r2, r4
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	4629      	mov	r1, r5
 800dc10:	f7f2 fb3a 	bl	8000288 <__aeabi_dsub>
 800dc14:	4602      	mov	r2, r0
 800dc16:	460b      	mov	r3, r1
 800dc18:	f7f2 fe18 	bl	800084c <__aeabi_ddiv>
 800dc1c:	e7e8      	b.n	800dbf0 <__ieee754_sqrt+0x28>
 800dc1e:	152a      	asrs	r2, r5, #20
 800dc20:	d115      	bne.n	800dc4e <__ieee754_sqrt+0x86>
 800dc22:	2000      	movs	r0, #0
 800dc24:	e009      	b.n	800dc3a <__ieee754_sqrt+0x72>
 800dc26:	0acb      	lsrs	r3, r1, #11
 800dc28:	3a15      	subs	r2, #21
 800dc2a:	0549      	lsls	r1, r1, #21
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d0fa      	beq.n	800dc26 <__ieee754_sqrt+0x5e>
 800dc30:	e7f7      	b.n	800dc22 <__ieee754_sqrt+0x5a>
 800dc32:	462a      	mov	r2, r5
 800dc34:	e7fa      	b.n	800dc2c <__ieee754_sqrt+0x64>
 800dc36:	005b      	lsls	r3, r3, #1
 800dc38:	3001      	adds	r0, #1
 800dc3a:	02dc      	lsls	r4, r3, #11
 800dc3c:	d5fb      	bpl.n	800dc36 <__ieee754_sqrt+0x6e>
 800dc3e:	1e44      	subs	r4, r0, #1
 800dc40:	1b12      	subs	r2, r2, r4
 800dc42:	f1c0 0420 	rsb	r4, r0, #32
 800dc46:	fa21 f404 	lsr.w	r4, r1, r4
 800dc4a:	4323      	orrs	r3, r4
 800dc4c:	4081      	lsls	r1, r0
 800dc4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc52:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800dc56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dc5a:	07d2      	lsls	r2, r2, #31
 800dc5c:	bf5c      	itt	pl
 800dc5e:	005b      	lslpl	r3, r3, #1
 800dc60:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800dc64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dc68:	bf58      	it	pl
 800dc6a:	0049      	lslpl	r1, r1, #1
 800dc6c:	2600      	movs	r6, #0
 800dc6e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800dc72:	107f      	asrs	r7, r7, #1
 800dc74:	0049      	lsls	r1, r1, #1
 800dc76:	2016      	movs	r0, #22
 800dc78:	4632      	mov	r2, r6
 800dc7a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800dc7e:	1915      	adds	r5, r2, r4
 800dc80:	429d      	cmp	r5, r3
 800dc82:	bfde      	ittt	le
 800dc84:	192a      	addle	r2, r5, r4
 800dc86:	1b5b      	suble	r3, r3, r5
 800dc88:	1936      	addle	r6, r6, r4
 800dc8a:	0fcd      	lsrs	r5, r1, #31
 800dc8c:	3801      	subs	r0, #1
 800dc8e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800dc92:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dc96:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800dc9a:	d1f0      	bne.n	800dc7e <__ieee754_sqrt+0xb6>
 800dc9c:	4605      	mov	r5, r0
 800dc9e:	2420      	movs	r4, #32
 800dca0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800dca4:	4293      	cmp	r3, r2
 800dca6:	eb0c 0e00 	add.w	lr, ip, r0
 800dcaa:	dc02      	bgt.n	800dcb2 <__ieee754_sqrt+0xea>
 800dcac:	d113      	bne.n	800dcd6 <__ieee754_sqrt+0x10e>
 800dcae:	458e      	cmp	lr, r1
 800dcb0:	d811      	bhi.n	800dcd6 <__ieee754_sqrt+0x10e>
 800dcb2:	f1be 0f00 	cmp.w	lr, #0
 800dcb6:	eb0e 000c 	add.w	r0, lr, ip
 800dcba:	da3f      	bge.n	800dd3c <__ieee754_sqrt+0x174>
 800dcbc:	2800      	cmp	r0, #0
 800dcbe:	db3d      	blt.n	800dd3c <__ieee754_sqrt+0x174>
 800dcc0:	f102 0801 	add.w	r8, r2, #1
 800dcc4:	1a9b      	subs	r3, r3, r2
 800dcc6:	458e      	cmp	lr, r1
 800dcc8:	bf88      	it	hi
 800dcca:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800dcce:	eba1 010e 	sub.w	r1, r1, lr
 800dcd2:	4465      	add	r5, ip
 800dcd4:	4642      	mov	r2, r8
 800dcd6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800dcda:	3c01      	subs	r4, #1
 800dcdc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800dce0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dce4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800dce8:	d1dc      	bne.n	800dca4 <__ieee754_sqrt+0xdc>
 800dcea:	4319      	orrs	r1, r3
 800dcec:	d01b      	beq.n	800dd26 <__ieee754_sqrt+0x15e>
 800dcee:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800dd6c <__ieee754_sqrt+0x1a4>
 800dcf2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800dd70 <__ieee754_sqrt+0x1a8>
 800dcf6:	e9da 0100 	ldrd	r0, r1, [sl]
 800dcfa:	e9db 2300 	ldrd	r2, r3, [fp]
 800dcfe:	f7f2 fac3 	bl	8000288 <__aeabi_dsub>
 800dd02:	e9da 8900 	ldrd	r8, r9, [sl]
 800dd06:	4602      	mov	r2, r0
 800dd08:	460b      	mov	r3, r1
 800dd0a:	4640      	mov	r0, r8
 800dd0c:	4649      	mov	r1, r9
 800dd0e:	f7f2 feef 	bl	8000af0 <__aeabi_dcmple>
 800dd12:	b140      	cbz	r0, 800dd26 <__ieee754_sqrt+0x15e>
 800dd14:	f1b5 3fff 	cmp.w	r5, #4294967295
 800dd18:	e9da 0100 	ldrd	r0, r1, [sl]
 800dd1c:	e9db 2300 	ldrd	r2, r3, [fp]
 800dd20:	d10e      	bne.n	800dd40 <__ieee754_sqrt+0x178>
 800dd22:	3601      	adds	r6, #1
 800dd24:	4625      	mov	r5, r4
 800dd26:	1073      	asrs	r3, r6, #1
 800dd28:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800dd2c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800dd30:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800dd34:	086b      	lsrs	r3, r5, #1
 800dd36:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800dd3a:	e759      	b.n	800dbf0 <__ieee754_sqrt+0x28>
 800dd3c:	4690      	mov	r8, r2
 800dd3e:	e7c1      	b.n	800dcc4 <__ieee754_sqrt+0xfc>
 800dd40:	f7f2 faa4 	bl	800028c <__adddf3>
 800dd44:	e9da 8900 	ldrd	r8, r9, [sl]
 800dd48:	4602      	mov	r2, r0
 800dd4a:	460b      	mov	r3, r1
 800dd4c:	4640      	mov	r0, r8
 800dd4e:	4649      	mov	r1, r9
 800dd50:	f7f2 fec4 	bl	8000adc <__aeabi_dcmplt>
 800dd54:	b120      	cbz	r0, 800dd60 <__ieee754_sqrt+0x198>
 800dd56:	1cab      	adds	r3, r5, #2
 800dd58:	bf08      	it	eq
 800dd5a:	3601      	addeq	r6, #1
 800dd5c:	3502      	adds	r5, #2
 800dd5e:	e7e2      	b.n	800dd26 <__ieee754_sqrt+0x15e>
 800dd60:	1c6b      	adds	r3, r5, #1
 800dd62:	f023 0501 	bic.w	r5, r3, #1
 800dd66:	e7de      	b.n	800dd26 <__ieee754_sqrt+0x15e>
 800dd68:	7ff00000 	.word	0x7ff00000
 800dd6c:	0800e480 	.word	0x0800e480
 800dd70:	0800e478 	.word	0x0800e478

0800dd74 <_init>:
 800dd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd76:	bf00      	nop
 800dd78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd7a:	bc08      	pop	{r3}
 800dd7c:	469e      	mov	lr, r3
 800dd7e:	4770      	bx	lr

0800dd80 <_fini>:
 800dd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd82:	bf00      	nop
 800dd84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd86:	bc08      	pop	{r3}
 800dd88:	469e      	mov	lr, r3
 800dd8a:	4770      	bx	lr
