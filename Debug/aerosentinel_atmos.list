
aerosentinel_atmos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012cf8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001108  08012e88  08012e88  00013e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013f90  08013f90  00015260  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08013f90  08013f90  00014f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013f98  08013f98  00015260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013f98  08013f98  00014f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013f9c  08013f9c  00014f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000260  20000000  08013fa0  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001568  20000260  08014200  00015260  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017c8  08014200  000157c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015260  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023068  00000000  00000000  00015290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000527f  00000000  00000000  000382f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001db8  00000000  00000000  0003d578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016d2  00000000  00000000  0003f330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e3d5  00000000  00000000  00040a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028525  00000000  00000000  0006edd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107b70  00000000  00000000  000972fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019ee6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000918c  00000000  00000000  0019eeb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001a803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000260 	.word	0x20000260
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012e70 	.word	0x08012e70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000264 	.word	0x20000264
 80001cc:	08012e70 	.word	0x08012e70

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <AHT21_init>:


uint8_t AHT_21_ADDR = 0x38 << 1;
uint32_t i2c_RETRY_TIME = 100;

HAL_StatusTypeDef AHT21_init(void) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret;
	uint8_t buff[8];

	ret = HAL_I2C_IsDeviceReady(&AHT21_I2C_PORT, AHT_21_ADDR, 2,
 8000f7a:	4b20      	ldr	r3, [pc, #128]	@ (8000ffc <AHT21_init+0x88>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4b1f      	ldr	r3, [pc, #124]	@ (8001000 <AHT21_init+0x8c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2202      	movs	r2, #2
 8000f86:	481f      	ldr	r0, [pc, #124]	@ (8001004 <AHT21_init+0x90>)
 8000f88:	f005 fc9e 	bl	80068c8 <HAL_I2C_IsDeviceReady>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	73fb      	strb	r3, [r7, #15]
			i2c_RETRY_TIME); // is device avaialble ?
	if (ret != HAL_OK) {
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <AHT21_init+0x26>
		return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e02b      	b.n	8000ff2 <AHT21_init+0x7e>
	}
	buff[0] = 0x71;
 8000f9a:	2371      	movs	r3, #113	@ 0x71
 8000f9c:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&AHT21_I2C_PORT, AHT_21_ADDR, buff, 1,
 8000f9e:	4b17      	ldr	r3, [pc, #92]	@ (8000ffc <AHT21_init+0x88>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <AHT21_init+0x8c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	1d3a      	adds	r2, r7, #4
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2301      	movs	r3, #1
 8000fae:	4815      	ldr	r0, [pc, #84]	@ (8001004 <AHT21_init+0x90>)
 8000fb0:	f005 f84e 	bl	8006050 <HAL_I2C_Master_Transmit>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	73fb      	strb	r3, [r7, #15]
			i2c_RETRY_TIME);
	if (ret != HAL_OK) {
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <AHT21_init+0x4e>
		return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e017      	b.n	8000ff2 <AHT21_init+0x7e>
	}
	ret = HAL_I2C_Master_Receive(&AHT21_I2C_PORT, AHT_21_ADDR, buff, 1,
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <AHT21_init+0x88>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <AHT21_init+0x8c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	1d3a      	adds	r2, r7, #4
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	480c      	ldr	r0, [pc, #48]	@ (8001004 <AHT21_init+0x90>)
 8000fd4:	f005 f954 	bl	8006280 <HAL_I2C_Master_Receive>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	73fb      	strb	r3, [r7, #15]
			i2c_RETRY_TIME);
	buff[0] = buff[0] & 0x18;
 8000fdc:	793b      	ldrb	r3, [r7, #4]
 8000fde:	f003 0318 	and.w	r3, r3, #24
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	713b      	strb	r3, [r7, #4]
	if (buff[0] != 0x18) {
 8000fe6:	793b      	ldrb	r3, [r7, #4]
 8000fe8:	2b18      	cmp	r3, #24
 8000fea:	d001      	beq.n	8000ff0 <AHT21_init+0x7c>
		return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e000      	b.n	8000ff2 <AHT21_init+0x7e>
	}
	return ret;
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000000 	.word	0x20000000
 8001000:	20000004 	.word	0x20000004
 8001004:	20000aac 	.word	0x20000aac

08001008 <AHT21_Read_Humidity>:

uint32_t AHT21_Read_Humidity(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret;
	uint8_t buff[8];
	uint32_t humidity;

	buff[0] = 0xAC;
 800100e:	23ac      	movs	r3, #172	@ 0xac
 8001010:	703b      	strb	r3, [r7, #0]
	buff[1] = 0X33;
 8001012:	2333      	movs	r3, #51	@ 0x33
 8001014:	707b      	strb	r3, [r7, #1]
	buff[2] = 0x00;
 8001016:	2300      	movs	r3, #0
 8001018:	70bb      	strb	r3, [r7, #2]
	ret = HAL_I2C_Master_Transmit(&AHT21_I2C_PORT, AHT_21_ADDR, buff, 3,
 800101a:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <AHT21_Read_Humidity+0x80>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	4619      	mov	r1, r3
 8001020:	4b1a      	ldr	r3, [pc, #104]	@ (800108c <AHT21_Read_Humidity+0x84>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	463a      	mov	r2, r7
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2303      	movs	r3, #3
 800102a:	4819      	ldr	r0, [pc, #100]	@ (8001090 <AHT21_Read_Humidity+0x88>)
 800102c:	f005 f810 	bl	8006050 <HAL_I2C_Master_Transmit>
 8001030:	4603      	mov	r3, r0
 8001032:	73fb      	strb	r3, [r7, #15]
			i2c_RETRY_TIME);
	if (ret != HAL_OK) {
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <AHT21_Read_Humidity+0x36>
		return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e01f      	b.n	800107e <AHT21_Read_Humidity+0x76>
	}
	//HAL_Delay(100);
	ret = HAL_I2C_Master_Receive(&AHT21_I2C_PORT, AHT_21_ADDR, buff, 6,
 800103e:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <AHT21_Read_Humidity+0x80>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	4619      	mov	r1, r3
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <AHT21_Read_Humidity+0x84>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	463a      	mov	r2, r7
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2306      	movs	r3, #6
 800104e:	4810      	ldr	r0, [pc, #64]	@ (8001090 <AHT21_Read_Humidity+0x88>)
 8001050:	f005 f916 	bl	8006280 <HAL_I2C_Master_Receive>
 8001054:	4603      	mov	r3, r0
 8001056:	73fb      	strb	r3, [r7, #15]
			i2c_RETRY_TIME);
	//CALCULATING HUMIDITY
	humidity = (buff[1] << 12) | (buff[2] << 4) | (buff[3] >> 4);
 8001058:	787b      	ldrb	r3, [r7, #1]
 800105a:	031a      	lsls	r2, r3, #12
 800105c:	78bb      	ldrb	r3, [r7, #2]
 800105e:	011b      	lsls	r3, r3, #4
 8001060:	4313      	orrs	r3, r2
 8001062:	78fa      	ldrb	r2, [r7, #3]
 8001064:	0912      	lsrs	r2, r2, #4
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	4313      	orrs	r3, r2
 800106a:	60bb      	str	r3, [r7, #8]
	humidity = (humidity * 100);
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	2264      	movs	r2, #100	@ 0x64
 8001070:	fb02 f303 	mul.w	r3, r2, r3
 8001074:	60bb      	str	r3, [r7, #8]
	humidity = humidity / 0x100000;
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	0d1b      	lsrs	r3, r3, #20
 800107a:	60bb      	str	r3, [r7, #8]
	return humidity;
 800107c:	68bb      	ldr	r3, [r7, #8]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000000 	.word	0x20000000
 800108c:	20000004 	.word	0x20000004
 8001090:	20000aac 	.word	0x20000aac

08001094 <AHT21_Read_Temperature>:

int32_t AHT21_Read_Temperature(void) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret;
	uint8_t buff[8];
	uint32_t temperature;

	buff[0] = 0xAC;
 800109a:	23ac      	movs	r3, #172	@ 0xac
 800109c:	703b      	strb	r3, [r7, #0]
	buff[1] = 0X33;
 800109e:	2333      	movs	r3, #51	@ 0x33
 80010a0:	707b      	strb	r3, [r7, #1]
	buff[2] = 0x00;
 80010a2:	2300      	movs	r3, #0
 80010a4:	70bb      	strb	r3, [r7, #2]
	ret = HAL_I2C_Master_Transmit(&AHT21_I2C_PORT, AHT_21_ADDR, buff, 3,
 80010a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001118 <AHT21_Read_Temperature+0x84>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	4619      	mov	r1, r3
 80010ac:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <AHT21_Read_Temperature+0x88>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	463a      	mov	r2, r7
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2303      	movs	r3, #3
 80010b6:	481a      	ldr	r0, [pc, #104]	@ (8001120 <AHT21_Read_Temperature+0x8c>)
 80010b8:	f004 ffca 	bl	8006050 <HAL_I2C_Master_Transmit>
 80010bc:	4603      	mov	r3, r0
 80010be:	73fb      	strb	r3, [r7, #15]
			i2c_RETRY_TIME);
	if (ret != HAL_OK) {
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <AHT21_Read_Temperature+0x36>
		return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e022      	b.n	8001110 <AHT21_Read_Temperature+0x7c>
	}
	//HAL_Delay(100);
	ret = HAL_I2C_Master_Receive(&AHT21_I2C_PORT, AHT_21_ADDR, buff, 6,
 80010ca:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <AHT21_Read_Temperature+0x84>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	4619      	mov	r1, r3
 80010d0:	4b12      	ldr	r3, [pc, #72]	@ (800111c <AHT21_Read_Temperature+0x88>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	463a      	mov	r2, r7
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2306      	movs	r3, #6
 80010da:	4811      	ldr	r0, [pc, #68]	@ (8001120 <AHT21_Read_Temperature+0x8c>)
 80010dc:	f005 f8d0 	bl	8006280 <HAL_I2C_Master_Receive>
 80010e0:	4603      	mov	r3, r0
 80010e2:	73fb      	strb	r3, [r7, #15]
			i2c_RETRY_TIME);
	//CALCULATING TEMPERATURE
	temperature = ((buff[3] & 0xF) << 16) | (buff[4] << 8) | (buff[5]);
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	041b      	lsls	r3, r3, #16
 80010e8:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 80010ec:	793b      	ldrb	r3, [r7, #4]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	4313      	orrs	r3, r2
 80010f2:	797a      	ldrb	r2, [r7, #5]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	60bb      	str	r3, [r7, #8]
	temperature = (temperature * 200);
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	22c8      	movs	r2, #200	@ 0xc8
 80010fc:	fb02 f303 	mul.w	r3, r2, r3
 8001100:	60bb      	str	r3, [r7, #8]
	temperature = temperature / 0x100000;
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	0d1b      	lsrs	r3, r3, #20
 8001106:	60bb      	str	r3, [r7, #8]
	temperature = temperature - 50;
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	3b32      	subs	r3, #50	@ 0x32
 800110c:	60bb      	str	r3, [r7, #8]
	return temperature;
 800110e:	68bb      	ldr	r3, [r7, #8]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000000 	.word	0x20000000
 800111c:	20000004 	.word	0x20000004
 8001120:	20000aac 	.word	0x20000aac

08001124 <get_next_available_filename>:
    "FR_INVALID_NAME","FR_DENIED","FR_EXIST","FR_INVALID_OBJECT","FR_WRITE_PROTECTED",
    "FR_INVALID_DRIVE","FR_NOT_ENABLED","FR_NO_FILESYSTEM","FR_MKFS_ABORTED","FR_TIMEOUT",
    "FR_LOCKED","FR_NOT_ENOUGH_CORE","FR_TOO_MANY_OPEN_FILES","FR_INVALID_PARAMETER"
};

static void get_next_available_filename(const char *base, const char *ext, char *out, int outlen) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af02      	add	r7, sp, #8
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
 8001130:	603b      	str	r3, [r7, #0]
    int idx = 1;
 8001132:	2301      	movs	r3, #1
 8001134:	617b      	str	r3, [r7, #20]
    do {
        snprintf(out, outlen, "%s%03d.%s", base, idx, ext);
 8001136:	6839      	ldr	r1, [r7, #0]
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4a0d      	ldr	r2, [pc, #52]	@ (8001178 <get_next_available_filename+0x54>)
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f00e fc81 	bl	800fa4c <sniprintf>
        if (!file_exists(out)) {
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 f816 	bl	800117c <file_exists>
 8001150:	4603      	mov	r3, r0
 8001152:	f083 0301 	eor.w	r3, r3, #1
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2b00      	cmp	r3, #0
 800115a:	d107      	bne.n	800116c <get_next_available_filename+0x48>
            break;
        }
        idx++;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	3301      	adds	r3, #1
 8001160:	617b      	str	r3, [r7, #20]
    } while (idx < 1000);
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001168:	dbe5      	blt.n	8001136 <get_next_available_filename+0x12>
}
 800116a:	e000      	b.n	800116e <get_next_available_filename+0x4a>
            break;
 800116c:	bf00      	nop
}
 800116e:	bf00      	nop
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	08012fc4 	.word	0x08012fc4

0800117c <file_exists>:

bool file_exists(const char* filename) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b0ca      	sub	sp, #296	@ 0x128
 8001180:	af00      	add	r7, sp, #0
 8001182:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001186:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800118a:	6018      	str	r0, [r3, #0]
    FILINFO fno;
    FRESULT result = f_stat(filename, &fno);
 800118c:	f107 020c 	add.w	r2, r7, #12
 8001190:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001194:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001198:	4611      	mov	r1, r2
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	f00d fdef 	bl	800ed7e <f_stat>
 80011a0:	4603      	mov	r3, r0
 80011a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    return result == FR_OK && !(fno.fattrib & AM_DIR);
 80011a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d10a      	bne.n	80011c4 <file_exists+0x48>
 80011ae:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80011b2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80011b6:	7a1b      	ldrb	r3, [r3, #8]
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d101      	bne.n	80011c4 <file_exists+0x48>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <file_exists+0x4a>
 80011c4:	2300      	movs	r3, #0
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	b2db      	uxtb	r3, r3
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <mount_sd_card>:

// Mount SD card (returns 0 if OK, 1 if error)
int8_t mount_sd_card(){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
    fresult = f_mount(&fs, "0:/",1);
 80011dc:	2201      	movs	r2, #1
 80011de:	490b      	ldr	r1, [pc, #44]	@ (800120c <mount_sd_card+0x34>)
 80011e0:	480b      	ldr	r0, [pc, #44]	@ (8001210 <mount_sd_card+0x38>)
 80011e2:	f00d f9af 	bl	800e544 <f_mount>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <mount_sd_card+0x3c>)
 80011ec:	701a      	strb	r2, [r3, #0]
    if(fresult != FR_OK) {
 80011ee:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <mount_sd_card+0x3c>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d004      	beq.n	8001200 <mount_sd_card+0x28>
        printf("*               Error mounting the SD Card              *\r\n");
 80011f6:	4808      	ldr	r0, [pc, #32]	@ (8001218 <mount_sd_card+0x40>)
 80011f8:	f00e fdc4 	bl	800fd84 <puts>
        return 1;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e003      	b.n	8001208 <mount_sd_card+0x30>
    } else {
        printf("*              SD Card mounted successfully!            *\r\n");
 8001200:	4806      	ldr	r0, [pc, #24]	@ (800121c <mount_sd_card+0x44>)
 8001202:	f00e fdbf 	bl	800fd84 <puts>
        return 0;
 8001206:	2300      	movs	r3, #0
    }
}
 8001208:	4618      	mov	r0, r3
 800120a:	bd80      	pop	{r7, pc}
 800120c:	08012fd0 	.word	0x08012fd0
 8001210:	2000027c 	.word	0x2000027c
 8001214:	200004b0 	.word	0x200004b0
 8001218:	08012fd4 	.word	0x08012fd4
 800121c:	08013010 	.word	0x08013010

08001220 <unmount_sd_card>:

// Unmount SD card
void unmount_sd_card(){
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
    fresult = f_mount(NULL, "/", 1);
 8001224:	2201      	movs	r2, #1
 8001226:	4908      	ldr	r1, [pc, #32]	@ (8001248 <unmount_sd_card+0x28>)
 8001228:	2000      	movs	r0, #0
 800122a:	f00d f98b 	bl	800e544 <f_mount>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	4b06      	ldr	r3, [pc, #24]	@ (800124c <unmount_sd_card+0x2c>)
 8001234:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK) printf ("SD CARD UNMOUNTED successfully...\r\n");
 8001236:	4b05      	ldr	r3, [pc, #20]	@ (800124c <unmount_sd_card+0x2c>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d102      	bne.n	8001244 <unmount_sd_card+0x24>
 800123e:	4804      	ldr	r0, [pc, #16]	@ (8001250 <unmount_sd_card+0x30>)
 8001240:	f00e fda0 	bl	800fd84 <puts>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	0801304c 	.word	0x0801304c
 800124c:	200004b0 	.word	0x200004b0
 8001250:	08013050 	.word	0x08013050

08001254 <check_free_space>:

// Print free space in GB
void check_free_space(void) {
 8001254:	b5b0      	push	{r4, r5, r7, lr}
 8001256:	b08a      	sub	sp, #40	@ 0x28
 8001258:	af02      	add	r7, sp, #8
    FATFS* pfs;
    DWORD fre_clust;
    FRESULT fres;
    DWORD free_sectors, total_sectors;

    fres = f_getfree("", &fre_clust, &pfs);
 800125a:	f107 0208 	add.w	r2, r7, #8
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4619      	mov	r1, r3
 8001262:	4828      	ldr	r0, [pc, #160]	@ (8001304 <check_free_space+0xb0>)
 8001264:	f00d fdc4 	bl	800edf0 <f_getfree>
 8001268:	4603      	mov	r3, r0
 800126a:	77fb      	strb	r3, [r7, #31]
    if (fres != FR_OK) {
 800126c:	7ffb      	ldrb	r3, [r7, #31]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d006      	beq.n	8001280 <check_free_space+0x2c>
        printf("f_getfree error (%i)\r\n", fres);
 8001272:	7ffb      	ldrb	r3, [r7, #31]
 8001274:	4619      	mov	r1, r3
 8001276:	4824      	ldr	r0, [pc, #144]	@ (8001308 <check_free_space+0xb4>)
 8001278:	f00e fd1c 	bl	800fcb4 <iprintf>
        while(1);
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <check_free_space+0x28>
    }

    total_sectors = (pfs->n_fatent - 2) * pfs->csize;
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	3b02      	subs	r3, #2
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	8952      	ldrh	r2, [r2, #10]
 800128a:	fb02 f303 	mul.w	r3, r2, r3
 800128e:	61bb      	str	r3, [r7, #24]
    free_sectors = fre_clust * pfs->csize;
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	895b      	ldrh	r3, [r3, #10]
 8001294:	461a      	mov	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	fb02 f303 	mul.w	r3, r2, r3
 800129c:	617b      	str	r3, [r7, #20]

    float total_GB = (float)total_sectors * 512.0f / (1024.0f * 1024.0f * 1024.0f);
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	ee07 3a90 	vmov	s15, r3
 80012a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012a8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800130c <check_free_space+0xb8>
 80012ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012b0:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001310 <check_free_space+0xbc>
 80012b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b8:	edc7 7a04 	vstr	s15, [r7, #16]
    float free_GB  = (float)free_sectors * 512.0f / (1024.0f * 1024.0f * 1024.0f);
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012c6:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800130c <check_free_space+0xb8>
 80012ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012ce:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001310 <check_free_space+0xbc>
 80012d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d6:	edc7 7a03 	vstr	s15, [r7, #12]

    printf("SD card stats:\r\n%10.2f GB total drive space.\r\n%10.2f GB available.\r\n",
 80012da:	6938      	ldr	r0, [r7, #16]
 80012dc:	f7ff f934 	bl	8000548 <__aeabi_f2d>
 80012e0:	4604      	mov	r4, r0
 80012e2:	460d      	mov	r5, r1
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	f7ff f92f 	bl	8000548 <__aeabi_f2d>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	e9cd 2300 	strd	r2, r3, [sp]
 80012f2:	4622      	mov	r2, r4
 80012f4:	462b      	mov	r3, r5
 80012f6:	4807      	ldr	r0, [pc, #28]	@ (8001314 <check_free_space+0xc0>)
 80012f8:	f00e fcdc 	bl	800fcb4 <iprintf>
           total_GB, free_GB);
}
 80012fc:	bf00      	nop
 80012fe:	3720      	adds	r7, #32
 8001300:	46bd      	mov	sp, r7
 8001302:	bdb0      	pop	{r4, r5, r7, pc}
 8001304:	08013074 	.word	0x08013074
 8001308:	08013078 	.word	0x08013078
 800130c:	44000000 	.word	0x44000000
 8001310:	4e800000 	.word	0x4e800000
 8001314:	08013090 	.word	0x08013090

08001318 <ensure_file_with_header>:

// --- Internal: Write file header if missing, open for append ---
static FRESULT ensure_file_with_header(const char* filename, const char* header, FIL* f) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
    if (!file_exists(filename)) {
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f7ff ff29 	bl	800117c <file_exists>
 800132a:	4603      	mov	r3, r0
 800132c:	f083 0301 	eor.w	r3, r3, #1
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d01c      	beq.n	8001370 <ensure_file_with_header+0x58>
        FRESULT res = f_open(f, filename, FA_CREATE_ALWAYS | FA_WRITE);
 8001336:	220a      	movs	r2, #10
 8001338:	68f9      	ldr	r1, [r7, #12]
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f00d f948 	bl	800e5d0 <f_open>
 8001340:	4603      	mov	r3, r0
 8001342:	75fb      	strb	r3, [r7, #23]
        if (res == FR_OK) {
 8001344:	7dfb      	ldrb	r3, [r7, #23]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d110      	bne.n	800136c <ensure_file_with_header+0x54>
            UINT bw;
            f_write(f, header, strlen(header), &bw);
 800134a:	68b8      	ldr	r0, [r7, #8]
 800134c:	f7fe ff90 	bl	8000270 <strlen>
 8001350:	4602      	mov	r2, r0
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	68b9      	ldr	r1, [r7, #8]
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f00d faf3 	bl	800e944 <f_write>
            f_sync(f);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f00d fc65 	bl	800ec2e <f_sync>
            f_close(f);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f00d fce0 	bl	800ed2a <f_close>
 800136a:	e001      	b.n	8001370 <ensure_file_with_header+0x58>
        } else {
            return res;
 800136c:	7dfb      	ldrb	r3, [r7, #23]
 800136e:	e005      	b.n	800137c <ensure_file_with_header+0x64>
        }
    }
    // Open for appending
    return f_open(f, filename, FA_OPEN_APPEND | FA_WRITE);
 8001370:	2232      	movs	r2, #50	@ 0x32
 8001372:	68f9      	ldr	r1, [r7, #12]
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f00d f92b 	bl	800e5d0 <f_open>
 800137a:	4603      	mov	r3, r0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <black_box_init>:

// --- Init and flush functions ---
void black_box_init(void) {
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
    log_file_ready = false;
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <black_box_init+0x38>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
    telemetry_file_ready = false;
 800138e:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <black_box_init+0x3c>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
    log_write_counter = 0;
 8001394:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <black_box_init+0x40>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
    telemetry_write_counter = 0;
 800139a:	4b0b      	ldr	r3, [pc, #44]	@ (80013c8 <black_box_init+0x44>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
    // Generate unique filenames for this session
    get_next_available_filename("logs", "csv", log_filename, sizeof(log_filename));
 80013a0:	2320      	movs	r3, #32
 80013a2:	4a0a      	ldr	r2, [pc, #40]	@ (80013cc <black_box_init+0x48>)
 80013a4:	490a      	ldr	r1, [pc, #40]	@ (80013d0 <black_box_init+0x4c>)
 80013a6:	480b      	ldr	r0, [pc, #44]	@ (80013d4 <black_box_init+0x50>)
 80013a8:	f7ff febc 	bl	8001124 <get_next_available_filename>
    get_next_available_filename("telemetry", "csv", telemetry_filename, sizeof(telemetry_filename));
 80013ac:	2320      	movs	r3, #32
 80013ae:	4a0a      	ldr	r2, [pc, #40]	@ (80013d8 <black_box_init+0x54>)
 80013b0:	4907      	ldr	r1, [pc, #28]	@ (80013d0 <black_box_init+0x4c>)
 80013b2:	480a      	ldr	r0, [pc, #40]	@ (80013dc <black_box_init+0x58>)
 80013b4:	f7ff feb6 	bl	8001124 <get_next_available_filename>
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000914 	.word	0x20000914
 80013c0:	20000915 	.word	0x20000915
 80013c4:	20000918 	.word	0x20000918
 80013c8:	2000091c 	.word	0x2000091c
 80013cc:	20000008 	.word	0x20000008
 80013d0:	080130d8 	.word	0x080130d8
 80013d4:	080130dc 	.word	0x080130dc
 80013d8:	20000028 	.word	0x20000028
 80013dc:	080130e4 	.word	0x080130e4

080013e0 <black_box_flush_all>:


void black_box_flush_all(void) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
    if (log_file_ready) {
 80013e4:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <black_box_flush_all+0x3c>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d008      	beq.n	80013fe <black_box_flush_all+0x1e>
        f_sync(&log_fil);
 80013ec:	480c      	ldr	r0, [pc, #48]	@ (8001420 <black_box_flush_all+0x40>)
 80013ee:	f00d fc1e 	bl	800ec2e <f_sync>
        f_close(&log_fil);
 80013f2:	480b      	ldr	r0, [pc, #44]	@ (8001420 <black_box_flush_all+0x40>)
 80013f4:	f00d fc99 	bl	800ed2a <f_close>
        log_file_ready = false;
 80013f8:	4b08      	ldr	r3, [pc, #32]	@ (800141c <black_box_flush_all+0x3c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
    }
    if (telemetry_file_ready) {
 80013fe:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <black_box_flush_all+0x44>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d008      	beq.n	8001418 <black_box_flush_all+0x38>
        f_sync(&telemetry_fil);
 8001406:	4808      	ldr	r0, [pc, #32]	@ (8001428 <black_box_flush_all+0x48>)
 8001408:	f00d fc11 	bl	800ec2e <f_sync>
        f_close(&telemetry_fil);
 800140c:	4806      	ldr	r0, [pc, #24]	@ (8001428 <black_box_flush_all+0x48>)
 800140e:	f00d fc8c 	bl	800ed2a <f_close>
        telemetry_file_ready = false;
 8001412:	4b04      	ldr	r3, [pc, #16]	@ (8001424 <black_box_flush_all+0x44>)
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
    }
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000914 	.word	0x20000914
 8001420:	200004b4 	.word	0x200004b4
 8001424:	20000915 	.word	0x20000915
 8001428:	200006e4 	.word	0x200006e4

0800142c <log_event>:

// --- Event Logging: logs.csv ---
void log_event(uint8_t hour, uint8_t min, uint8_t sec, uint16_t ms,
               const char* log_level, const char* message) {
 800142c:	b5b0      	push	{r4, r5, r7, lr}
 800142e:	b0cc      	sub	sp, #304	@ 0x130
 8001430:	af06      	add	r7, sp, #24
 8001432:	4605      	mov	r5, r0
 8001434:	460c      	mov	r4, r1
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800143e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8001442:	462a      	mov	r2, r5
 8001444:	701a      	strb	r2, [r3, #0]
 8001446:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800144a:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 800144e:	4622      	mov	r2, r4
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001456:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 800145a:	4602      	mov	r2, r0
 800145c:	701a      	strb	r2, [r3, #0]
 800145e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001462:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8001466:	460a      	mov	r2, r1
 8001468:	801a      	strh	r2, [r3, #0]
    FRESULT res;
    char line[256];

    if (!log_file_ready) {
 800146a:	4b49      	ldr	r3, [pc, #292]	@ (8001590 <log_event+0x164>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	f083 0301 	eor.w	r3, r3, #1
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	d01c      	beq.n	80014b2 <log_event+0x86>
        const char* header = "TIMESTAMP,LOG_LEVEL,MESSAGE\r\n";
 8001478:	4b46      	ldr	r3, [pc, #280]	@ (8001594 <log_event+0x168>)
 800147a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        res = ensure_file_with_header(log_filename, header, &log_fil);
 800147e:	4a46      	ldr	r2, [pc, #280]	@ (8001598 <log_event+0x16c>)
 8001480:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8001484:	4845      	ldr	r0, [pc, #276]	@ (800159c <log_event+0x170>)
 8001486:	f7ff ff47 	bl	8001318 <ensure_file_with_header>
 800148a:	4603      	mov	r3, r0
 800148c:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
        if (res != FR_OK) {
 8001490:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 8001494:	2b00      	cmp	r3, #0
 8001496:	d006      	beq.n	80014a6 <log_event+0x7a>
            printf("Can't open log file! FR = %d\r\n", res);
 8001498:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 800149c:	4619      	mov	r1, r3
 800149e:	4840      	ldr	r0, [pc, #256]	@ (80015a0 <log_event+0x174>)
 80014a0:	f00e fc08 	bl	800fcb4 <iprintf>
            return;
 80014a4:	e070      	b.n	8001588 <log_event+0x15c>
        }
        log_file_ready = true;
 80014a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001590 <log_event+0x164>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]
        log_write_counter = 0;
 80014ac:	4b3d      	ldr	r3, [pc, #244]	@ (80015a4 <log_event+0x178>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
    }

    snprintf(line, sizeof(line), "%02u:%02u:%02u:%03u,%s,%s\r\n",
 80014b2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014b6:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80014ba:	781d      	ldrb	r5, [r3, #0]
 80014bc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014c0:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80014ca:	f2a2 1213 	subw	r2, r2, #275	@ 0x113
 80014ce:	7812      	ldrb	r2, [r2, #0]
 80014d0:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80014d4:	f5a1 718b 	sub.w	r1, r1, #278	@ 0x116
 80014d8:	8809      	ldrh	r1, [r1, #0]
 80014da:	f107 0410 	add.w	r4, r7, #16
 80014de:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 80014e2:	9004      	str	r0, [sp, #16]
 80014e4:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 80014e8:	9003      	str	r0, [sp, #12]
 80014ea:	9102      	str	r1, [sp, #8]
 80014ec:	9201      	str	r2, [sp, #4]
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	462b      	mov	r3, r5
 80014f2:	4a2d      	ldr	r2, [pc, #180]	@ (80015a8 <log_event+0x17c>)
 80014f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014f8:	4620      	mov	r0, r4
 80014fa:	f00e faa7 	bl	800fa4c <sniprintf>
             hour, min, sec, ms, log_level, message);

    UINT bw;
    res = f_write(&log_fil, line, strlen(line), &bw);
 80014fe:	f107 0310 	add.w	r3, r7, #16
 8001502:	4618      	mov	r0, r3
 8001504:	f7fe feb4 	bl	8000270 <strlen>
 8001508:	4602      	mov	r2, r0
 800150a:	f107 030c 	add.w	r3, r7, #12
 800150e:	f107 0110 	add.w	r1, r7, #16
 8001512:	4821      	ldr	r0, [pc, #132]	@ (8001598 <log_event+0x16c>)
 8001514:	f00d fa16 	bl	800e944 <f_write>
 8001518:	4603      	mov	r3, r0
 800151a:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
    if (res != FR_OK || bw != strlen(line)) {
 800151e:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10c      	bne.n	8001540 <log_event+0x114>
 8001526:	f107 0310 	add.w	r3, r7, #16
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe fea0 	bl	8000270 <strlen>
 8001530:	4602      	mov	r2, r0
 8001532:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001536:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	d011      	beq.n	8001564 <log_event+0x138>
        printf("Log file write failed! FR = %d, bytes = %u\r\n", res, bw);
 8001540:	f897 1113 	ldrb.w	r1, [r7, #275]	@ 0x113
 8001544:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001548:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	4816      	ldr	r0, [pc, #88]	@ (80015ac <log_event+0x180>)
 8001552:	f00e fbaf 	bl	800fcb4 <iprintf>
        log_file_ready = false;
 8001556:	4b0e      	ldr	r3, [pc, #56]	@ (8001590 <log_event+0x164>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
        f_close(&log_fil);
 800155c:	480e      	ldr	r0, [pc, #56]	@ (8001598 <log_event+0x16c>)
 800155e:	f00d fbe4 	bl	800ed2a <f_close>
        return;
 8001562:	e011      	b.n	8001588 <log_event+0x15c>
    }

    log_write_counter++;
 8001564:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <log_event+0x178>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	3301      	adds	r3, #1
 800156a:	4a0e      	ldr	r2, [pc, #56]	@ (80015a4 <log_event+0x178>)
 800156c:	6013      	str	r3, [r2, #0]
    if (log_write_counter >= LOG_BURST_N) {
 800156e:	4b0d      	ldr	r3, [pc, #52]	@ (80015a4 <log_event+0x178>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b1f      	cmp	r3, #31
 8001574:	d908      	bls.n	8001588 <log_event+0x15c>
        f_sync(&log_fil);
 8001576:	4808      	ldr	r0, [pc, #32]	@ (8001598 <log_event+0x16c>)
 8001578:	f00d fb59 	bl	800ec2e <f_sync>
        f_close(&log_fil);
 800157c:	4806      	ldr	r0, [pc, #24]	@ (8001598 <log_event+0x16c>)
 800157e:	f00d fbd4 	bl	800ed2a <f_close>
        log_file_ready = false;
 8001582:	4b03      	ldr	r3, [pc, #12]	@ (8001590 <log_event+0x164>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
    }
}
 8001588:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800158c:	46bd      	mov	sp, r7
 800158e:	bdb0      	pop	{r4, r5, r7, pc}
 8001590:	20000914 	.word	0x20000914
 8001594:	080130f0 	.word	0x080130f0
 8001598:	200004b4 	.word	0x200004b4
 800159c:	20000008 	.word	0x20000008
 80015a0:	08013110 	.word	0x08013110
 80015a4:	20000918 	.word	0x20000918
 80015a8:	08013130 	.word	0x08013130
 80015ac:	0801314c 	.word	0x0801314c

080015b0 <log_telemetry>:
// --- Telemetry Logging: telemetry.csv ---
void log_telemetry(uint8_t hour, uint8_t min, uint8_t sec, uint16_t ms,
                   float ms5607_temperature, float ms5607_pressure, float ms5607_altitude,
                   float sds011_pm2_5, float sds011_pm10,
                   float ens160_AQI, float ens160_TVOC, float ens160_eCO2,
                   float aht21_temperature, float aht21_humidity) {
 80015b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015b4:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 80015b8:	af18      	add	r7, sp, #96	@ 0x60
 80015ba:	4605      	mov	r5, r0
 80015bc:	460c      	mov	r4, r1
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80015c6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80015ca:	ed83 0a00 	vstr	s0, [r3]
 80015ce:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80015d2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80015d6:	edc3 0a00 	vstr	s1, [r3]
 80015da:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80015de:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80015e2:	ed83 1a00 	vstr	s2, [r3]
 80015e6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80015ea:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80015ee:	edc3 1a00 	vstr	s3, [r3]
 80015f2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80015f6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80015fa:	ed83 2a00 	vstr	s4, [r3]
 80015fe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001602:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001606:	edc3 2a00 	vstr	s5, [r3]
 800160a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800160e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001612:	ed83 3a00 	vstr	s6, [r3]
 8001616:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800161a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800161e:	edc3 3a00 	vstr	s7, [r3]
 8001622:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001626:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800162a:	ed83 4a00 	vstr	s8, [r3]
 800162e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001632:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001636:	edc3 4a00 	vstr	s9, [r3]
 800163a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800163e:	f2a3 1351 	subw	r3, r3, #337	@ 0x151
 8001642:	462a      	mov	r2, r5
 8001644:	701a      	strb	r2, [r3, #0]
 8001646:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800164a:	f5a3 73a9 	sub.w	r3, r3, #338	@ 0x152
 800164e:	4622      	mov	r2, r4
 8001650:	701a      	strb	r2, [r3, #0]
 8001652:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001656:	f2a3 1353 	subw	r3, r3, #339	@ 0x153
 800165a:	4602      	mov	r2, r0
 800165c:	701a      	strb	r2, [r3, #0]
 800165e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001662:	f5a3 73ab 	sub.w	r3, r3, #342	@ 0x156
 8001666:	460a      	mov	r2, r1
 8001668:	801a      	strh	r2, [r3, #0]
    FRESULT res;
    char line[320];

    if (!telemetry_file_ready) {
 800166a:	4b86      	ldr	r3, [pc, #536]	@ (8001884 <log_telemetry+0x2d4>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	f083 0301 	eor.w	r3, r3, #1
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b00      	cmp	r3, #0
 8001676:	d01c      	beq.n	80016b2 <log_telemetry+0x102>
        const char* header = "TIMESTAMP,ms5607_temperature,ms5607_pressure,ms5607_altitude,"
 8001678:	4b83      	ldr	r3, [pc, #524]	@ (8001888 <log_telemetry+0x2d8>)
 800167a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
                             "sds011_pm2_5,sds011_pm10,ens160_AQI,ens160_TVOC,ens160_eCO2,"
                             "aht21_temperature,aht21_humidity\r\n";
        res = ensure_file_with_header(telemetry_filename, header, &telemetry_fil);
 800167e:	4a83      	ldr	r2, [pc, #524]	@ (800188c <log_telemetry+0x2dc>)
 8001680:	f8d7 11bc 	ldr.w	r1, [r7, #444]	@ 0x1bc
 8001684:	4882      	ldr	r0, [pc, #520]	@ (8001890 <log_telemetry+0x2e0>)
 8001686:	f7ff fe47 	bl	8001318 <ensure_file_with_header>
 800168a:	4603      	mov	r3, r0
 800168c:	f887 31bb 	strb.w	r3, [r7, #443]	@ 0x1bb
        if (res != FR_OK) {
 8001690:	f897 31bb 	ldrb.w	r3, [r7, #443]	@ 0x1bb
 8001694:	2b00      	cmp	r3, #0
 8001696:	d006      	beq.n	80016a6 <log_telemetry+0xf6>
            printf("Can't open telemetry file! FR = %d\r\n", res);
 8001698:	f897 31bb 	ldrb.w	r3, [r7, #443]	@ 0x1bb
 800169c:	4619      	mov	r1, r3
 800169e:	487d      	ldr	r0, [pc, #500]	@ (8001894 <log_telemetry+0x2e4>)
 80016a0:	f00e fb08 	bl	800fcb4 <iprintf>
            return;
 80016a4:	e0e8      	b.n	8001878 <log_telemetry+0x2c8>
        }
        telemetry_file_ready = true;
 80016a6:	4b77      	ldr	r3, [pc, #476]	@ (8001884 <log_telemetry+0x2d4>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
        telemetry_write_counter = 0;
 80016ac:	4b7a      	ldr	r3, [pc, #488]	@ (8001898 <log_telemetry+0x2e8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
    }

    snprintf(line, sizeof(line),
 80016b2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80016b6:	f2a3 1351 	subw	r3, r3, #337	@ 0x151
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016be:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80016c2:	f5a3 73a9 	sub.w	r3, r3, #338	@ 0x152
 80016c6:	781e      	ldrb	r6, [r3, #0]
 80016c8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80016cc:	f2a3 1353 	subw	r3, r3, #339	@ 0x153
 80016d0:	781a      	ldrb	r2, [r3, #0]
 80016d2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80016d4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80016d8:	f5a3 73ab 	sub.w	r3, r3, #342	@ 0x156
 80016dc:	8819      	ldrh	r1, [r3, #0]
 80016de:	6379      	str	r1, [r7, #52]	@ 0x34
 80016e0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80016e4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80016e8:	6818      	ldr	r0, [r3, #0]
 80016ea:	f7fe ff2d 	bl	8000548 <__aeabi_f2d>
 80016ee:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 80016f2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80016f6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80016fa:	6818      	ldr	r0, [r3, #0]
 80016fc:	f7fe ff24 	bl	8000548 <__aeabi_f2d>
 8001700:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001704:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001708:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800170c:	6818      	ldr	r0, [r3, #0]
 800170e:	f7fe ff1b 	bl	8000548 <__aeabi_f2d>
 8001712:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001716:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800171a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800171e:	6818      	ldr	r0, [r3, #0]
 8001720:	f7fe ff12 	bl	8000548 <__aeabi_f2d>
 8001724:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001728:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800172c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001730:	6818      	ldr	r0, [r3, #0]
 8001732:	f7fe ff09 	bl	8000548 <__aeabi_f2d>
 8001736:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800173a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800173e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001742:	6818      	ldr	r0, [r3, #0]
 8001744:	f7fe ff00 	bl	8000548 <__aeabi_f2d>
 8001748:	e9c7 0100 	strd	r0, r1, [r7]
 800174c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001750:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	f7fe fef7 	bl	8000548 <__aeabi_f2d>
 800175a:	4682      	mov	sl, r0
 800175c:	468b      	mov	fp, r1
 800175e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001762:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	f7fe feee 	bl	8000548 <__aeabi_f2d>
 800176c:	4680      	mov	r8, r0
 800176e:	4689      	mov	r9, r1
 8001770:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001774:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001778:	6818      	ldr	r0, [r3, #0]
 800177a:	f7fe fee5 	bl	8000548 <__aeabi_f2d>
 800177e:	4604      	mov	r4, r0
 8001780:	460d      	mov	r5, r1
 8001782:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001786:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800178a:	6818      	ldr	r0, [r3, #0]
 800178c:	f7fe fedc 	bl	8000548 <__aeabi_f2d>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 8001798:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 800179c:	e9cd 4514 	strd	r4, r5, [sp, #80]	@ 0x50
 80017a0:	e9cd 8912 	strd	r8, r9, [sp, #72]	@ 0x48
 80017a4:	e9cd ab10 	strd	sl, fp, [sp, #64]	@ 0x40
 80017a8:	ed97 7b00 	vldr	d7, [r7]
 80017ac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80017b0:	ed97 7b02 	vldr	d7, [r7, #8]
 80017b4:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80017b8:	ed97 7b04 	vldr	d7, [r7, #16]
 80017bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80017c0:	ed97 7b06 	vldr	d7, [r7, #24]
 80017c4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80017c8:	ed97 7b08 	vldr	d7, [r7, #32]
 80017cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80017d0:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 80017d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80017d8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80017da:	9102      	str	r1, [sp, #8]
 80017dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80017de:	9201      	str	r2, [sp, #4]
 80017e0:	9600      	str	r6, [sp, #0]
 80017e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017e4:	4a2d      	ldr	r2, [pc, #180]	@ (800189c <log_telemetry+0x2ec>)
 80017e6:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80017ea:	f00e f92f 	bl	800fa4c <sniprintf>
             sds011_pm2_5, sds011_pm10,
             ens160_AQI, ens160_TVOC, ens160_eCO2,
             aht21_temperature, aht21_humidity);

    UINT bw;
    res = f_write(&telemetry_fil, line, strlen(line), &bw);
 80017ee:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fd3c 	bl	8000270 <strlen>
 80017f8:	4602      	mov	r2, r0
 80017fa:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80017fe:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001802:	4822      	ldr	r0, [pc, #136]	@ (800188c <log_telemetry+0x2dc>)
 8001804:	f00d f89e 	bl	800e944 <f_write>
 8001808:	4603      	mov	r3, r0
 800180a:	f887 31bb 	strb.w	r3, [r7, #443]	@ 0x1bb
    if (res != FR_OK || bw != strlen(line)) {
 800180e:	f897 31bb 	ldrb.w	r3, [r7, #443]	@ 0x1bb
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10c      	bne.n	8001830 <log_telemetry+0x280>
 8001816:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fd28 	bl	8000270 <strlen>
 8001820:	4602      	mov	r2, r0
 8001822:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001826:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	d011      	beq.n	8001854 <log_telemetry+0x2a4>
        printf("Telemetry file write failed! FR = %d, bytes = %u\r\n", res, bw);
 8001830:	f897 11bb 	ldrb.w	r1, [r7, #443]	@ 0x1bb
 8001834:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001838:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	4817      	ldr	r0, [pc, #92]	@ (80018a0 <log_telemetry+0x2f0>)
 8001842:	f00e fa37 	bl	800fcb4 <iprintf>
        telemetry_file_ready = false;
 8001846:	4b0f      	ldr	r3, [pc, #60]	@ (8001884 <log_telemetry+0x2d4>)
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
        f_close(&telemetry_fil);
 800184c:	480f      	ldr	r0, [pc, #60]	@ (800188c <log_telemetry+0x2dc>)
 800184e:	f00d fa6c 	bl	800ed2a <f_close>
        return;
 8001852:	e011      	b.n	8001878 <log_telemetry+0x2c8>
    }

    telemetry_write_counter++;
 8001854:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <log_telemetry+0x2e8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	3301      	adds	r3, #1
 800185a:	4a0f      	ldr	r2, [pc, #60]	@ (8001898 <log_telemetry+0x2e8>)
 800185c:	6013      	str	r3, [r2, #0]
    if (telemetry_write_counter >= TELEMETRY_BURST_N) {
 800185e:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <log_telemetry+0x2e8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b1f      	cmp	r3, #31
 8001864:	d908      	bls.n	8001878 <log_telemetry+0x2c8>
        f_sync(&telemetry_fil);
 8001866:	4809      	ldr	r0, [pc, #36]	@ (800188c <log_telemetry+0x2dc>)
 8001868:	f00d f9e1 	bl	800ec2e <f_sync>
        f_close(&telemetry_fil);
 800186c:	4807      	ldr	r0, [pc, #28]	@ (800188c <log_telemetry+0x2dc>)
 800186e:	f00d fa5c 	bl	800ed2a <f_close>
        telemetry_file_ready = false;
 8001872:	4b04      	ldr	r3, [pc, #16]	@ (8001884 <log_telemetry+0x2d4>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
    }
}
 8001878:	f507 77e2 	add.w	r7, r7, #452	@ 0x1c4
 800187c:	46bd      	mov	sp, r7
 800187e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001882:	bf00      	nop
 8001884:	20000915 	.word	0x20000915
 8001888:	0801317c 	.word	0x0801317c
 800188c:	200006e4 	.word	0x200006e4
 8001890:	20000028 	.word	0x20000028
 8001894:	08013218 	.word	0x08013218
 8001898:	2000091c 	.word	0x2000091c
 800189c:	08013240 	.word	0x08013240
 80018a0:	08013288 	.word	0x08013288

080018a4 <ENS160_ReadRegister>:
#include "drivers_h/ens160.h"

// ============ Low-Level I2C Read/Write Helpers ============

uint8_t ENS160_ReadRegister(ENS160_t *dev, uint8_t reg, uint8_t *data, uint16_t len) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af04      	add	r7, sp, #16
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	461a      	mov	r2, r3
 80018b0:	460b      	mov	r3, r1
 80018b2:	72fb      	strb	r3, [r7, #11]
 80018b4:	4613      	mov	r3, r2
 80018b6:	813b      	strh	r3, [r7, #8]
    if (HAL_I2C_Mem_Read(dev->i2c, dev->address, reg, I2C_MEMADD_SIZE_8BIT, data, len, 100) != HAL_OK)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	791b      	ldrb	r3, [r3, #4]
 80018c0:	4619      	mov	r1, r3
 80018c2:	7afb      	ldrb	r3, [r7, #11]
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	2364      	movs	r3, #100	@ 0x64
 80018c8:	9302      	str	r3, [sp, #8]
 80018ca:	893b      	ldrh	r3, [r7, #8]
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	2301      	movs	r3, #1
 80018d4:	f004 fede 	bl	8006694 <HAL_I2C_Mem_Read>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <ENS160_ReadRegister+0x3e>
        return ENS160_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <ENS160_ReadRegister+0x40>
    return ENS160_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <ENS160_WriteRegister>:

uint8_t ENS160_WriteRegister(ENS160_t *dev, uint8_t reg, uint8_t *data, uint16_t len) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af04      	add	r7, sp, #16
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	607a      	str	r2, [r7, #4]
 80018f6:	461a      	mov	r2, r3
 80018f8:	460b      	mov	r3, r1
 80018fa:	72fb      	strb	r3, [r7, #11]
 80018fc:	4613      	mov	r3, r2
 80018fe:	813b      	strh	r3, [r7, #8]
    if (HAL_I2C_Mem_Write(dev->i2c, dev->address, reg, I2C_MEMADD_SIZE_8BIT, data, len, 100) != HAL_OK)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	791b      	ldrb	r3, [r3, #4]
 8001908:	4619      	mov	r1, r3
 800190a:	7afb      	ldrb	r3, [r7, #11]
 800190c:	b29a      	uxth	r2, r3
 800190e:	2364      	movs	r3, #100	@ 0x64
 8001910:	9302      	str	r3, [sp, #8]
 8001912:	893b      	ldrh	r3, [r7, #8]
 8001914:	9301      	str	r3, [sp, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	2301      	movs	r3, #1
 800191c:	f004 fda6 	bl	800646c <HAL_I2C_Mem_Write>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <ENS160_WriteRegister+0x3e>
        return ENS160_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <ENS160_WriteRegister+0x40>
    return ENS160_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <ENS160_Init>:

// ============ Public API ============

void ENS160_Init(ENS160_t *dev) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
    dev->i2c     = &ENS160_I2C_HANDLE;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a0d      	ldr	r2, [pc, #52]	@ (8001974 <ENS160_Init+0x40>)
 8001940:	601a      	str	r2, [r3, #0]
    dev->address = ENS160_I2C_ADDR_DEFAULT;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	22a6      	movs	r2, #166	@ 0xa6
 8001946:	711a      	strb	r2, [r3, #4]
    dev->status  = 0;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	715a      	strb	r2, [r3, #5]
    dev->aqi     = 0;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	719a      	strb	r2, [r3, #6]
    dev->tvoc    = 0;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	811a      	strh	r2, [r3, #8]
    dev->eco2    = 0;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	815a      	strh	r2, [r3, #10]
    // Optionally, perform a reset
    ENS160_SoftwareReset(dev);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 f809 	bl	8001978 <ENS160_SoftwareReset>
    HAL_Delay(10);
 8001966:	200a      	movs	r0, #10
 8001968:	f002 fe54 	bl	8004614 <HAL_Delay>
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000aac 	.word	0x20000aac

08001978 <ENS160_SoftwareReset>:
    uint8_t id = 0;
    ENS160_ReadRegister(dev, ENS160_REG_PART_ID, &id, 1);
    return id;
}

uint8_t ENS160_SoftwareReset(ENS160_t *dev) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
    uint8_t mode = ENS160_OPMODE_RESET;
 8001980:	23f0      	movs	r3, #240	@ 0xf0
 8001982:	73fb      	strb	r3, [r7, #15]
    if (ENS160_WriteRegister(dev, ENS160_REG_OPMODE, &mode, 1) != ENS160_OK)
 8001984:	f107 020f 	add.w	r2, r7, #15
 8001988:	2301      	movs	r3, #1
 800198a:	2110      	movs	r1, #16
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ffad 	bl	80018ec <ENS160_WriteRegister>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <ENS160_SoftwareReset+0x24>
        return ENS160_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e003      	b.n	80019a4 <ENS160_SoftwareReset+0x2c>
    HAL_Delay(10); // Give it time to reset
 800199c:	200a      	movs	r0, #10
 800199e:	f002 fe39 	bl	8004614 <HAL_Delay>
    return ENS160_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <ENS160_SetMode>:

uint8_t ENS160_SetMode(ENS160_t *dev, uint8_t mode) {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	70fb      	strb	r3, [r7, #3]
    if (ENS160_WriteRegister(dev, ENS160_REG_OPMODE, &mode, 1) != ENS160_OK)
 80019b8:	1cfa      	adds	r2, r7, #3
 80019ba:	2301      	movs	r3, #1
 80019bc:	2110      	movs	r1, #16
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ff94 	bl	80018ec <ENS160_WriteRegister>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <ENS160_SetMode+0x22>
        return ENS160_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e003      	b.n	80019d6 <ENS160_SetMode+0x2a>
    HAL_Delay(2); // Short delay for mode change
 80019ce:	2002      	movs	r0, #2
 80019d0:	f002 fe20 	bl	8004614 <HAL_Delay>
    return ENS160_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <ENS160_ReadData>:
    if (ENS160_WriteRegister(dev, ENS160_REG_RH_IN, rh_buf, 2) != ENS160_OK)
        return ENS160_ERROR;
    return ENS160_OK;
}

uint8_t ENS160_ReadData(ENS160_t *dev) {
 80019de:	b580      	push	{r7, lr}
 80019e0:	b084      	sub	sp, #16
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
    uint8_t status = 0, aqi = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	73fb      	strb	r3, [r7, #15]
 80019ea:	2300      	movs	r3, #0
 80019ec:	73bb      	strb	r3, [r7, #14]
    uint8_t tvoc_buf[2] = {0}, eco2_buf[2] = {0};
 80019ee:	2300      	movs	r3, #0
 80019f0:	81bb      	strh	r3, [r7, #12]
 80019f2:	2300      	movs	r3, #0
 80019f4:	813b      	strh	r3, [r7, #8]

    if (ENS160_ReadRegister(dev, ENS160_REG_DATA_STATUS, &status, 1) != ENS160_OK)
 80019f6:	f107 020f 	add.w	r2, r7, #15
 80019fa:	2301      	movs	r3, #1
 80019fc:	2120      	movs	r1, #32
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ff50 	bl	80018a4 <ENS160_ReadRegister>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <ENS160_ReadData+0x30>
        return ENS160_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e040      	b.n	8001a90 <ENS160_ReadData+0xb2>
    dev->status = status;
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	715a      	strb	r2, [r3, #5]

    if (ENS160_ReadRegister(dev, ENS160_REG_AQI, &aqi, 1) != ENS160_OK)
 8001a14:	f107 020e 	add.w	r2, r7, #14
 8001a18:	2301      	movs	r3, #1
 8001a1a:	2121      	movs	r1, #33	@ 0x21
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff41 	bl	80018a4 <ENS160_ReadRegister>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <ENS160_ReadData+0x4e>
        return ENS160_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e031      	b.n	8001a90 <ENS160_ReadData+0xb2>
    dev->aqi = aqi;
 8001a2c:	7bba      	ldrb	r2, [r7, #14]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	719a      	strb	r2, [r3, #6]

    if (ENS160_ReadRegister(dev, ENS160_REG_TVOC, tvoc_buf, 2) != ENS160_OK)
 8001a32:	f107 020c 	add.w	r2, r7, #12
 8001a36:	2302      	movs	r3, #2
 8001a38:	2122      	movs	r1, #34	@ 0x22
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ff32 	bl	80018a4 <ENS160_ReadRegister>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <ENS160_ReadData+0x6c>
        return ENS160_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e022      	b.n	8001a90 <ENS160_ReadData+0xb2>
    dev->tvoc = (uint16_t)tvoc_buf[0] | ((uint16_t)tvoc_buf[1] << 8);
 8001a4a:	7b3b      	ldrb	r3, [r7, #12]
 8001a4c:	b21a      	sxth	r2, r3
 8001a4e:	7b7b      	ldrb	r3, [r7, #13]
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	021b      	lsls	r3, r3, #8
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	4313      	orrs	r3, r2
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	811a      	strh	r2, [r3, #8]

    if (ENS160_ReadRegister(dev, ENS160_REG_ECO2, eco2_buf, 2) != ENS160_OK)
 8001a60:	f107 0208 	add.w	r2, r7, #8
 8001a64:	2302      	movs	r3, #2
 8001a66:	2124      	movs	r1, #36	@ 0x24
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ff1b 	bl	80018a4 <ENS160_ReadRegister>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <ENS160_ReadData+0x9a>
        return ENS160_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e00b      	b.n	8001a90 <ENS160_ReadData+0xb2>
    dev->eco2 = (uint16_t)eco2_buf[0] | ((uint16_t)eco2_buf[1] << 8);
 8001a78:	7a3b      	ldrb	r3, [r7, #8]
 8001a7a:	b21a      	sxth	r2, r3
 8001a7c:	7a7b      	ldrb	r3, [r7, #9]
 8001a7e:	b21b      	sxth	r3, r3
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	4313      	orrs	r3, r2
 8001a86:	b21b      	sxth	r3, r3
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	815a      	strh	r2, [r3, #10]

    return ENS160_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <log_print>:

/* ========================== */
/*        LOGGER FUNCTION     */
/* ========================== */

static inline void log_print(const char *format, ...) {
 8001a98:	b40f      	push	{r0, r1, r2, r3}
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b0c2      	sub	sp, #264	@ 0x108
 8001a9e:	af00      	add	r7, sp, #0
#ifdef LOGGER
    char buffer[LOG_BUFFER_SIZE];
    va_list args;
    va_start(args, format);
 8001aa0:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8001aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001aa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001aac:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, LOG_BUFFER_SIZE, format, args);
 8001aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001ab2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ab6:	f107 0008 	add.w	r0, r7, #8
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001ac0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ac4:	f00e f8ca 	bl	800fc5c <vsniprintf>
    va_end(args);

#ifdef SWV_DEBUG
    printf("%s", buffer); // SWV output
 8001ac8:	f107 0308 	add.w	r3, r7, #8
 8001acc:	4619      	mov	r1, r3
 8001ace:	4805      	ldr	r0, [pc, #20]	@ (8001ae4 <log_print+0x4c>)
 8001ad0:	f00e f8f0 	bl	800fcb4 <iprintf>
#endif

#endif // LOGGER
}
 8001ad4:	bf00      	nop
 8001ad6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001ada:	46bd      	mov	sp, r7
 8001adc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ae0:	b004      	add	sp, #16
 8001ae2:	4770      	bx	lr
 8001ae4:	080132bc 	.word	0x080132bc

08001ae8 <LED_SetOK>:
void LED_Init(void) {
    HAL_GPIO_WritePin(led_ok.GPIO_Port, led_ok.GPIO_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(led_error.GPIO_Port, led_error.GPIO_Pin, GPIO_PIN_RESET);
}

void LED_SetOK(LED_Mode mode) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
    led_ok.mode = mode;
 8001af2:	4a0e      	ldr	r2, [pc, #56]	@ (8001b2c <LED_SetOK+0x44>)
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	7193      	strb	r3, [r2, #6]
    HAL_GPIO_WritePin(led_ok.GPIO_Port, led_ok.GPIO_Pin,
 8001af8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <LED_SetOK+0x44>)
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <LED_SetOK+0x44>)
 8001afe:	8899      	ldrh	r1, [r3, #4]
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	bf0c      	ite	eq
 8001b06:	2301      	moveq	r3, #1
 8001b08:	2300      	movne	r3, #0
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	f004 f9eb 	bl	8005ee8 <HAL_GPIO_WritePin>
                      (mode == LED_MODE_SOLID) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    led_ok.current_state = (mode == LED_MODE_SOLID) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	bf0c      	ite	eq
 8001b18:	2301      	moveq	r3, #1
 8001b1a:	2300      	movne	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4b02      	ldr	r3, [pc, #8]	@ (8001b2c <LED_SetOK+0x44>)
 8001b22:	731a      	strb	r2, [r3, #12]
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000048 	.word	0x20000048

08001b30 <LED_SetError>:

void LED_SetError(LED_Mode mode) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
    led_error.mode = mode;
 8001b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b74 <LED_SetError+0x44>)
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	7193      	strb	r3, [r2, #6]
    HAL_GPIO_WritePin(led_error.GPIO_Port, led_error.GPIO_Pin,
 8001b40:	4b0c      	ldr	r3, [pc, #48]	@ (8001b74 <LED_SetError+0x44>)
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <LED_SetError+0x44>)
 8001b46:	8899      	ldrh	r1, [r3, #4]
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	bf0c      	ite	eq
 8001b4e:	2301      	moveq	r3, #1
 8001b50:	2300      	movne	r3, #0
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	461a      	mov	r2, r3
 8001b56:	f004 f9c7 	bl	8005ee8 <HAL_GPIO_WritePin>
                      (mode == LED_MODE_SOLID) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    led_error.current_state = (mode == LED_MODE_SOLID) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	bf0c      	ite	eq
 8001b60:	2301      	moveq	r3, #1
 8001b62:	2300      	movne	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b02      	ldr	r3, [pc, #8]	@ (8001b74 <LED_SetError+0x44>)
 8001b6a:	731a      	strb	r2, [r3, #12]
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000058 	.word	0x20000058

08001b78 <LED_SetState>:

void LED_Update(void) {
    // No blinking, nothing to update
}

void LED_SetState(SystemState state) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	2b07      	cmp	r3, #7
 8001b86:	d84b      	bhi.n	8001c20 <LED_SetState+0xa8>
 8001b88:	a201      	add	r2, pc, #4	@ (adr r2, 8001b90 <LED_SetState+0x18>)
 8001b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8e:	bf00      	nop
 8001b90:	08001c05 	.word	0x08001c05
 8001b94:	08001bb1 	.word	0x08001bb1
 8001b98:	08001c13 	.word	0x08001c13
 8001b9c:	08001bbf 	.word	0x08001bbf
 8001ba0:	08001bcd 	.word	0x08001bcd
 8001ba4:	08001bdb 	.word	0x08001bdb
 8001ba8:	08001be9 	.word	0x08001be9
 8001bac:	08001bf7 	.word	0x08001bf7
        case STATUS_INITIALIZATION:
            LED_SetOK(LED_MODE_SOLID);
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f7ff ff99 	bl	8001ae8 <LED_SetOK>
            LED_SetError(LED_MODE_OFF);
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f7ff ffba 	bl	8001b30 <LED_SetError>
            break;
 8001bbc:	e037      	b.n	8001c2e <LED_SetState+0xb6>

        case STATUS_PREFLIGHT:
            LED_SetOK(LED_MODE_SOLID);
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	f7ff ff92 	bl	8001ae8 <LED_SetOK>
            LED_SetError(LED_MODE_OFF);
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f7ff ffb3 	bl	8001b30 <LED_SetError>
            break;
 8001bca:	e030      	b.n	8001c2e <LED_SetState+0xb6>

        case STATUS_FLIGHT:
            LED_SetOK(LED_MODE_OFF);
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f7ff ff8b 	bl	8001ae8 <LED_SetOK>
            LED_SetError(LED_MODE_OFF);
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f7ff ffac 	bl	8001b30 <LED_SetError>
            break;
 8001bd8:	e029      	b.n	8001c2e <LED_SetState+0xb6>

        case STATUS_POSTFLIGHT:
            LED_SetOK(LED_MODE_SOLID);
 8001bda:	2001      	movs	r0, #1
 8001bdc:	f7ff ff84 	bl	8001ae8 <LED_SetOK>
            LED_SetError(LED_MODE_OFF);
 8001be0:	2000      	movs	r0, #0
 8001be2:	f7ff ffa5 	bl	8001b30 <LED_SetError>
            break;
 8001be6:	e022      	b.n	8001c2e <LED_SetState+0xb6>

        case STATUS_SUCCESS:
            LED_SetOK(LED_MODE_SOLID);
 8001be8:	2001      	movs	r0, #1
 8001bea:	f7ff ff7d 	bl	8001ae8 <LED_SetOK>
            LED_SetError(LED_MODE_OFF);
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f7ff ff9e 	bl	8001b30 <LED_SetError>
            break;
 8001bf4:	e01b      	b.n	8001c2e <LED_SetState+0xb6>

        case STATUS_ERROR:
            LED_SetOK(LED_MODE_OFF);
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f7ff ff76 	bl	8001ae8 <LED_SetOK>
            LED_SetError(LED_MODE_SOLID);
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	f7ff ff97 	bl	8001b30 <LED_SetError>
            break;
 8001c02:	e014      	b.n	8001c2e <LED_SetState+0xb6>

        case STATUS_GRACEFUL_SHUTDOWN:
            LED_SetOK(LED_MODE_SOLID);
 8001c04:	2001      	movs	r0, #1
 8001c06:	f7ff ff6f 	bl	8001ae8 <LED_SetOK>
            LED_SetError(LED_MODE_OFF);
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f7ff ff90 	bl	8001b30 <LED_SetError>
            break;
 8001c10:	e00d      	b.n	8001c2e <LED_SetState+0xb6>

        case STATUS_WAIT:
            LED_SetOK(LED_MODE_SOLID);
 8001c12:	2001      	movs	r0, #1
 8001c14:	f7ff ff68 	bl	8001ae8 <LED_SetOK>
            LED_SetError(LED_MODE_SOLID);
 8001c18:	2001      	movs	r0, #1
 8001c1a:	f7ff ff89 	bl	8001b30 <LED_SetError>
            break;
 8001c1e:	e006      	b.n	8001c2e <LED_SetState+0xb6>

        default:
            LED_SetOK(LED_MODE_OFF);
 8001c20:	2000      	movs	r0, #0
 8001c22:	f7ff ff61 	bl	8001ae8 <LED_SetOK>
            LED_SetError(LED_MODE_OFF);
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7ff ff82 	bl	8001b30 <LED_SetError>
            break;
 8001c2c:	bf00      	nop
    }

    log_print("[LED] State updated to %d\n", state);
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	4619      	mov	r1, r3
 8001c32:	4803      	ldr	r0, [pc, #12]	@ (8001c40 <LED_SetState+0xc8>)
 8001c34:	f7ff ff30 	bl	8001a98 <log_print>
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	080132c0 	.word	0x080132c0

08001c44 <kalman_filter>:
static float kalman_x = 0;
static float kalman_p = 0;
static float kalman_x_last = 0;
static float kalman_p_last = 0;

float kalman_filter(float altitude_measurement) {
 8001c44:	b480      	push	{r7}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	ed87 0a01 	vstr	s0, [r7, #4]
    float x_temp = kalman_x_last;
 8001c4e:	4b25      	ldr	r3, [pc, #148]	@ (8001ce4 <kalman_filter+0xa0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	617b      	str	r3, [r7, #20]
    float p_temp = kalman_p_last + kalman_r;
 8001c54:	4b24      	ldr	r3, [pc, #144]	@ (8001ce8 <kalman_filter+0xa4>)
 8001c56:	ed93 7a00 	vldr	s14, [r3]
 8001c5a:	4b24      	ldr	r3, [pc, #144]	@ (8001cec <kalman_filter+0xa8>)
 8001c5c:	edd3 7a00 	vldr	s15, [r3]
 8001c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c64:	edc7 7a04 	vstr	s15, [r7, #16]
    float k = p_temp / (p_temp + kalman_q);
 8001c68:	4b21      	ldr	r3, [pc, #132]	@ (8001cf0 <kalman_filter+0xac>)
 8001c6a:	ed93 7a00 	vldr	s14, [r3]
 8001c6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c76:	edd7 6a04 	vldr	s13, [r7, #16]
 8001c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c7e:	edc7 7a03 	vstr	s15, [r7, #12]

    kalman_x = x_temp + k * (altitude_measurement - x_temp);
 8001c82:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c86:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c96:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9e:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <kalman_filter+0xb0>)
 8001ca0:	edc3 7a00 	vstr	s15, [r3]
    kalman_p = (1 - k) * p_temp;
 8001ca4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ca8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf8 <kalman_filter+0xb4>)
 8001cba:	edc3 7a00 	vstr	s15, [r3]

    kalman_x_last = kalman_x;
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf4 <kalman_filter+0xb0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a08      	ldr	r2, [pc, #32]	@ (8001ce4 <kalman_filter+0xa0>)
 8001cc4:	6013      	str	r3, [r2, #0]
    kalman_p_last = kalman_p;
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf8 <kalman_filter+0xb4>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a07      	ldr	r2, [pc, #28]	@ (8001ce8 <kalman_filter+0xa4>)
 8001ccc:	6013      	str	r3, [r2, #0]

    return kalman_x;
 8001cce:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <kalman_filter+0xb0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	ee07 3a90 	vmov	s15, r3
}
 8001cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cda:	371c      	adds	r7, #28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	20000950 	.word	0x20000950
 8001ce8:	20000954 	.word	0x20000954
 8001cec:	2000006c 	.word	0x2000006c
 8001cf0:	20000068 	.word	0x20000068
 8001cf4:	20000948 	.word	0x20000948
 8001cf8:	2000094c 	.word	0x2000094c
 8001cfc:	00000000 	.word	0x00000000

08001d00 <calculate_altitude>:

float calculate_altitude(double pressure) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	ed87 0b00 	vstr	d0, [r7]
    float altitude = 44330.0f * (1.0f - pow(pressure / initial_ms5607_pressure, 0.1903f));
 8001d0a:	4b25      	ldr	r3, [pc, #148]	@ (8001da0 <calculate_altitude+0xa0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fc1a 	bl	8000548 <__aeabi_f2d>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d1c:	f7fe fd96 	bl	800084c <__aeabi_ddiv>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	ec43 2b17 	vmov	d7, r2, r3
 8001d28:	ed9f 1b19 	vldr	d1, [pc, #100]	@ 8001d90 <calculate_altitude+0x90>
 8001d2c:	eeb0 0a47 	vmov.f32	s0, s14
 8001d30:	eef0 0a67 	vmov.f32	s1, s15
 8001d34:	f010 f93e 	bl	8011fb4 <pow>
 8001d38:	ec53 2b10 	vmov	r2, r3, d0
 8001d3c:	f04f 0000 	mov.w	r0, #0
 8001d40:	4918      	ldr	r1, [pc, #96]	@ (8001da4 <calculate_altitude+0xa4>)
 8001d42:	f7fe faa1 	bl	8000288 <__aeabi_dsub>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	a312      	add	r3, pc, #72	@ (adr r3, 8001d98 <calculate_altitude+0x98>)
 8001d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d54:	f7fe fc50 	bl	80005f8 <__aeabi_dmul>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f7fe ff22 	bl	8000ba8 <__aeabi_d2f>
 8001d64:	4603      	mov	r3, r0
 8001d66:	60fb      	str	r3, [r7, #12]
    return altitude < 0 ? 0 : altitude;
 8001d68:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d74:	d502      	bpl.n	8001d7c <calculate_altitude+0x7c>
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	e000      	b.n	8001d7e <calculate_altitude+0x7e>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	ee07 3a90 	vmov	s15, r3
}
 8001d82:	eeb0 0a67 	vmov.f32	s0, s15
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	f3af 8000 	nop.w
 8001d90:	20000000 	.word	0x20000000
 8001d94:	3fc85bc0 	.word	0x3fc85bc0
 8001d98:	00000000 	.word	0x00000000
 8001d9c:	40e5a540 	.word	0x40e5a540
 8001da0:	20000944 	.word	0x20000944
 8001da4:	3ff00000 	.word	0x3ff00000

08001da8 <MS5607PromRead>:

void MS5607PromRead(struct promData *prom) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
    uint8_t address;
    uint16_t *structPointer = (uint16_t *) prom;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	613b      	str	r3, [r7, #16]

    for (address = 0; address < 8; address++) {
 8001db4:	2300      	movs	r3, #0
 8001db6:	75fb      	strb	r3, [r7, #23]
 8001db8:	e01f      	b.n	8001dfa <MS5607PromRead+0x52>
        SPITransmitData = PROM_READ(address);
 8001dba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	b25b      	sxtb	r3, r3
 8001dc2:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8001dc6:	b25b      	sxtb	r3, r3
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4b1d      	ldr	r3, [pc, #116]	@ (8001e40 <MS5607PromRead+0x98>)
 8001dcc:	701a      	strb	r2, [r3, #0]
        enableCSB();
 8001dce:	f000 fbb5 	bl	800253c <enableCSB>
        HAL_SPI_Transmit(&hspi1, &SPITransmitData, 1, 10);
 8001dd2:	230a      	movs	r3, #10
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	491a      	ldr	r1, [pc, #104]	@ (8001e40 <MS5607PromRead+0x98>)
 8001dd8:	481a      	ldr	r0, [pc, #104]	@ (8001e44 <MS5607PromRead+0x9c>)
 8001dda:	f006 ff4c 	bl	8008c76 <HAL_SPI_Transmit>
        HAL_SPI_Receive(&hspi1, (uint8_t *)structPointer, 2, 10);
 8001dde:	230a      	movs	r3, #10
 8001de0:	2202      	movs	r2, #2
 8001de2:	6939      	ldr	r1, [r7, #16]
 8001de4:	4817      	ldr	r0, [pc, #92]	@ (8001e44 <MS5607PromRead+0x9c>)
 8001de6:	f007 f8bc 	bl	8008f62 <HAL_SPI_Receive>
        disableCSB();
 8001dea:	f000 fbb1 	bl	8002550 <disableCSB>
        structPointer++;
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	3302      	adds	r3, #2
 8001df2:	613b      	str	r3, [r7, #16]
    for (address = 0; address < 8; address++) {
 8001df4:	7dfb      	ldrb	r3, [r7, #23]
 8001df6:	3301      	adds	r3, #1
 8001df8:	75fb      	strb	r3, [r7, #23]
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	2b07      	cmp	r3, #7
 8001dfe:	d9dc      	bls.n	8001dba <MS5607PromRead+0x12>
    }

    structPointer = (uint16_t *) prom;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	613b      	str	r3, [r7, #16]
    for (address = 0; address < 8; address++) {
 8001e04:	2300      	movs	r3, #0
 8001e06:	75fb      	strb	r3, [r7, #23]
 8001e08:	e012      	b.n	8001e30 <MS5607PromRead+0x88>
        uint8_t *toSwap = (uint8_t *) structPointer;
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	60fb      	str	r3, [r7, #12]
        uint8_t secondByte = toSwap[0];
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	72fb      	strb	r3, [r7, #11]
        toSwap[0] = toSwap[1];
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	785a      	ldrb	r2, [r3, #1]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	701a      	strb	r2, [r3, #0]
        toSwap[1] = secondByte;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	7afa      	ldrb	r2, [r7, #11]
 8001e22:	701a      	strb	r2, [r3, #0]
        structPointer++;
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	3302      	adds	r3, #2
 8001e28:	613b      	str	r3, [r7, #16]
    for (address = 0; address < 8; address++) {
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	75fb      	strb	r3, [r7, #23]
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	2b07      	cmp	r3, #7
 8001e34:	d9e9      	bls.n	8001e0a <MS5607PromRead+0x62>
    }
}
 8001e36:	bf00      	nop
 8001e38:	bf00      	nop
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000920 	.word	0x20000920
 8001e44:	20000b00 	.word	0x20000b00

08001e48 <MS5607UncompensatedRead>:

void MS5607UncompensatedRead(struct MS5607UncompensatedValues *uncompValues) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
    uint8_t reply[3];

    enableCSB();
 8001e50:	f000 fb74 	bl	800253c <enableCSB>
    SPITransmitData = CONVERT_D1_COMMAND | Pressure_OSR;
 8001e54:	4b35      	ldr	r3, [pc, #212]	@ (8001f2c <MS5607UncompensatedRead+0xe4>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4b34      	ldr	r3, [pc, #208]	@ (8001f30 <MS5607UncompensatedRead+0xe8>)
 8001e60:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &SPITransmitData, 1, 10);
 8001e62:	230a      	movs	r3, #10
 8001e64:	2201      	movs	r2, #1
 8001e66:	4932      	ldr	r1, [pc, #200]	@ (8001f30 <MS5607UncompensatedRead+0xe8>)
 8001e68:	4832      	ldr	r0, [pc, #200]	@ (8001f34 <MS5607UncompensatedRead+0xec>)
 8001e6a:	f006 ff04 	bl	8008c76 <HAL_SPI_Transmit>
    while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001e6e:	bf00      	nop
 8001e70:	4b30      	ldr	r3, [pc, #192]	@ (8001f34 <MS5607UncompensatedRead+0xec>)
 8001e72:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d0f9      	beq.n	8001e70 <MS5607UncompensatedRead+0x28>
    HAL_Delay(10);
 8001e7c:	200a      	movs	r0, #10
 8001e7e:	f002 fbc9 	bl	8004614 <HAL_Delay>
    disableCSB();
 8001e82:	f000 fb65 	bl	8002550 <disableCSB>

    enableCSB();
 8001e86:	f000 fb59 	bl	800253c <enableCSB>
    SPITransmitData = READ_ADC_COMMAND;
 8001e8a:	4b29      	ldr	r3, [pc, #164]	@ (8001f30 <MS5607UncompensatedRead+0xe8>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &SPITransmitData, 1, 10);
 8001e90:	230a      	movs	r3, #10
 8001e92:	2201      	movs	r2, #1
 8001e94:	4926      	ldr	r1, [pc, #152]	@ (8001f30 <MS5607UncompensatedRead+0xe8>)
 8001e96:	4827      	ldr	r0, [pc, #156]	@ (8001f34 <MS5607UncompensatedRead+0xec>)
 8001e98:	f006 feed 	bl	8008c76 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, reply, 3, 10);
 8001e9c:	f107 010c 	add.w	r1, r7, #12
 8001ea0:	230a      	movs	r3, #10
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	4823      	ldr	r0, [pc, #140]	@ (8001f34 <MS5607UncompensatedRead+0xec>)
 8001ea6:	f007 f85c 	bl	8008f62 <HAL_SPI_Receive>
    disableCSB();
 8001eaa:	f000 fb51 	bl	8002550 <disableCSB>
    uncompValues->pressure = ((uint32_t)reply[0] << 16) | ((uint32_t)reply[1] << 8) | reply[2];
 8001eae:	7b3b      	ldrb	r3, [r7, #12]
 8001eb0:	041a      	lsls	r2, r3, #16
 8001eb2:	7b7b      	ldrb	r3, [r7, #13]
 8001eb4:	021b      	lsls	r3, r3, #8
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	7bba      	ldrb	r2, [r7, #14]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	601a      	str	r2, [r3, #0]

    enableCSB();
 8001ec0:	f000 fb3c 	bl	800253c <enableCSB>
    SPITransmitData = CONVERT_D2_COMMAND | Temperature_OSR;
 8001ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f38 <MS5607UncompensatedRead+0xf0>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4b18      	ldr	r3, [pc, #96]	@ (8001f30 <MS5607UncompensatedRead+0xe8>)
 8001ed0:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &SPITransmitData, 1, 10);
 8001ed2:	230a      	movs	r3, #10
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	4916      	ldr	r1, [pc, #88]	@ (8001f30 <MS5607UncompensatedRead+0xe8>)
 8001ed8:	4816      	ldr	r0, [pc, #88]	@ (8001f34 <MS5607UncompensatedRead+0xec>)
 8001eda:	f006 fecc 	bl	8008c76 <HAL_SPI_Transmit>
    HAL_Delay(10);
 8001ede:	200a      	movs	r0, #10
 8001ee0:	f002 fb98 	bl	8004614 <HAL_Delay>
    disableCSB();
 8001ee4:	f000 fb34 	bl	8002550 <disableCSB>

    enableCSB();
 8001ee8:	f000 fb28 	bl	800253c <enableCSB>
    SPITransmitData = READ_ADC_COMMAND;
 8001eec:	4b10      	ldr	r3, [pc, #64]	@ (8001f30 <MS5607UncompensatedRead+0xe8>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &SPITransmitData, 1, 10);
 8001ef2:	230a      	movs	r3, #10
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	490e      	ldr	r1, [pc, #56]	@ (8001f30 <MS5607UncompensatedRead+0xe8>)
 8001ef8:	480e      	ldr	r0, [pc, #56]	@ (8001f34 <MS5607UncompensatedRead+0xec>)
 8001efa:	f006 febc 	bl	8008c76 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, reply, 3, 10);
 8001efe:	f107 010c 	add.w	r1, r7, #12
 8001f02:	230a      	movs	r3, #10
 8001f04:	2203      	movs	r2, #3
 8001f06:	480b      	ldr	r0, [pc, #44]	@ (8001f34 <MS5607UncompensatedRead+0xec>)
 8001f08:	f007 f82b 	bl	8008f62 <HAL_SPI_Receive>
    disableCSB();
 8001f0c:	f000 fb20 	bl	8002550 <disableCSB>
    uncompValues->temperature = ((uint32_t)reply[0] << 16) | ((uint32_t)reply[1] << 8) | reply[2];
 8001f10:	7b3b      	ldrb	r3, [r7, #12]
 8001f12:	041a      	lsls	r2, r3, #16
 8001f14:	7b7b      	ldrb	r3, [r7, #13]
 8001f16:	021b      	lsls	r3, r3, #8
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	7bba      	ldrb	r2, [r7, #14]
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	605a      	str	r2, [r3, #4]
}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000921 	.word	0x20000921
 8001f30:	20000920 	.word	0x20000920
 8001f34:	20000b00 	.word	0x20000b00
 8001f38:	20000922 	.word	0x20000922

08001f3c <MS5607Convert>:

void MS5607Convert(struct MS5607UncompensatedValues *sample, struct MS5607Readings *value) {
 8001f3c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001f40:	b0dd      	sub	sp, #372	@ 0x174
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
 8001f48:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
    int32_t dT = sample->temperature - ((int32_t)(promData.tref << 8));
 8001f4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	4bdd      	ldr	r3, [pc, #884]	@ (80022c8 <MS5607Convert+0x38c>)
 8001f54:	895b      	ldrh	r3, [r3, #10]
 8001f56:	021b      	lsls	r3, r3, #8
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    int32_t TEMP = 2000 + (((int64_t)dT * promData.tempsens) >> 23);
 8001f5e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001f62:	17da      	asrs	r2, r3, #31
 8001f64:	469a      	mov	sl, r3
 8001f66:	4693      	mov	fp, r2
 8001f68:	4bd7      	ldr	r3, [pc, #860]	@ (80022c8 <MS5607Convert+0x38c>)
 8001f6a:	899b      	ldrh	r3, [r3, #12]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	2200      	movs	r2, #0
 8001f70:	4698      	mov	r8, r3
 8001f72:	4691      	mov	r9, r2
 8001f74:	fb08 f20b 	mul.w	r2, r8, fp
 8001f78:	fb0a f309 	mul.w	r3, sl, r9
 8001f7c:	4413      	add	r3, r2
 8001f7e:	fbaa 4508 	umull	r4, r5, sl, r8
 8001f82:	442b      	add	r3, r5
 8001f84:	461d      	mov	r5, r3
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	0de2      	lsrs	r2, r4, #23
 8001f90:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 8001f94:	15eb      	asrs	r3, r5, #23
 8001f96:	4613      	mov	r3, r2
 8001f98:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001f9c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    int64_t OFF = ((int64_t)promData.off << 17) + (((int64_t)promData.tco * dT) >> 6);
 8001fa0:	4bc9      	ldr	r3, [pc, #804]	@ (80022c8 <MS5607Convert+0x38c>)
 8001fa2:	889b      	ldrh	r3, [r3, #4]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001fac:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001fb0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	0bdb      	lsrs	r3, r3, #15
 8001fb8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	045b      	lsls	r3, r3, #17
 8001fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001fc4:	4bc0      	ldr	r3, [pc, #768]	@ (80022c8 <MS5607Convert+0x38c>)
 8001fc6:	891b      	ldrh	r3, [r3, #8]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001fd0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001fd4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001fd8:	17da      	asrs	r2, r3, #31
 8001fda:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001fde:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001fe2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001fe6:	462b      	mov	r3, r5
 8001fe8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001fec:	4642      	mov	r2, r8
 8001fee:	fb02 f203 	mul.w	r2, r2, r3
 8001ff2:	464b      	mov	r3, r9
 8001ff4:	4621      	mov	r1, r4
 8001ff6:	fb01 f303 	mul.w	r3, r1, r3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	4622      	mov	r2, r4
 8001ffe:	4641      	mov	r1, r8
 8002000:	fba2 1201 	umull	r1, r2, r2, r1
 8002004:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8002008:	460a      	mov	r2, r1
 800200a:	f8c7 2128 	str.w	r2, [r7, #296]	@ 0x128
 800200e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8002012:	4413      	add	r3, r2
 8002014:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	@ 0x128
 8002024:	4621      	mov	r1, r4
 8002026:	098a      	lsrs	r2, r1, #6
 8002028:	4629      	mov	r1, r5
 800202a:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 800202e:	4629      	mov	r1, r5
 8002030:	118b      	asrs	r3, r1, #6
 8002032:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8002036:	4621      	mov	r1, r4
 8002038:	1889      	adds	r1, r1, r2
 800203a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800203c:	4629      	mov	r1, r5
 800203e:	eb43 0101 	adc.w	r1, r3, r1
 8002042:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8002044:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8002048:	e9c7 3458 	strd	r3, r4, [r7, #352]	@ 0x160
    int64_t SENS = ((int64_t)promData.sens << 16) + (((int64_t)promData.tcs * dT) >> 7);
 800204c:	4b9e      	ldr	r3, [pc, #632]	@ (80022c8 <MS5607Convert+0x38c>)
 800204e:	885b      	ldrh	r3, [r3, #2]
 8002050:	b29b      	uxth	r3, r3
 8002052:	2200      	movs	r2, #0
 8002054:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002058:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800205c:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002060:	460b      	mov	r3, r1
 8002062:	0c1b      	lsrs	r3, r3, #16
 8002064:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002068:	460b      	mov	r3, r1
 800206a:	041b      	lsls	r3, r3, #16
 800206c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002070:	4b95      	ldr	r3, [pc, #596]	@ (80022c8 <MS5607Convert+0x38c>)
 8002072:	88db      	ldrh	r3, [r3, #6]
 8002074:	b29b      	uxth	r3, r3
 8002076:	2200      	movs	r2, #0
 8002078:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800207c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002080:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8002084:	17da      	asrs	r2, r3, #31
 8002086:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800208a:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800208e:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8002092:	462b      	mov	r3, r5
 8002094:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	@ 0xb0
 8002098:	4642      	mov	r2, r8
 800209a:	fb02 f203 	mul.w	r2, r2, r3
 800209e:	464b      	mov	r3, r9
 80020a0:	4621      	mov	r1, r4
 80020a2:	fb01 f303 	mul.w	r3, r1, r3
 80020a6:	4413      	add	r3, r2
 80020a8:	4622      	mov	r2, r4
 80020aa:	4641      	mov	r1, r8
 80020ac:	fba2 1201 	umull	r1, r2, r2, r1
 80020b0:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 80020b4:	460a      	mov	r2, r1
 80020b6:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 80020ba:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80020be:	4413      	add	r3, r2
 80020c0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 80020d0:	4621      	mov	r1, r4
 80020d2:	09ca      	lsrs	r2, r1, #7
 80020d4:	4629      	mov	r1, r5
 80020d6:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 80020da:	4629      	mov	r1, r5
 80020dc:	11cb      	asrs	r3, r1, #7
 80020de:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 80020e2:	4621      	mov	r1, r4
 80020e4:	1889      	adds	r1, r1, r2
 80020e6:	6339      	str	r1, [r7, #48]	@ 0x30
 80020e8:	4629      	mov	r1, r5
 80020ea:	eb43 0101 	adc.w	r1, r3, r1
 80020ee:	6379      	str	r1, [r7, #52]	@ 0x34
 80020f0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80020f4:	e9c7 3456 	strd	r3, r4, [r7, #344]	@ 0x158

    if (TEMP < 2000) {
 80020f8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80020fc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002100:	f280 8192 	bge.w	8002428 <MS5607Convert+0x4ec>
        int32_t T2 = ((int64_t)dT * dT) >> 31;
 8002104:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8002108:	17da      	asrs	r2, r3, #31
 800210a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800210e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002112:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8002116:	17da      	asrs	r2, r3, #31
 8002118:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800211c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002120:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8002124:	462b      	mov	r3, r5
 8002126:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800212a:	4642      	mov	r2, r8
 800212c:	fb02 f203 	mul.w	r2, r2, r3
 8002130:	464b      	mov	r3, r9
 8002132:	4621      	mov	r1, r4
 8002134:	fb01 f303 	mul.w	r3, r1, r3
 8002138:	4413      	add	r3, r2
 800213a:	4622      	mov	r2, r4
 800213c:	4641      	mov	r1, r8
 800213e:	fba2 1201 	umull	r1, r2, r2, r1
 8002142:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002146:	460a      	mov	r2, r1
 8002148:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800214c:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002150:	4413      	add	r3, r2
 8002152:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 8002162:	4621      	mov	r1, r4
 8002164:	0fca      	lsrs	r2, r1, #31
 8002166:	4629      	mov	r1, r5
 8002168:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800216c:	4629      	mov	r1, r5
 800216e:	17cb      	asrs	r3, r1, #31
 8002170:	4613      	mov	r3, r2
 8002172:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
        int32_t TEMPM = TEMP - 2000;
 8002176:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800217a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800217e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
        int64_t OFF2 = (61 * (int64_t)TEMPM * TEMPM) >> 4;
 8002182:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002186:	17da      	asrs	r2, r3, #31
 8002188:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800218c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002190:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002194:	17da      	asrs	r2, r3, #31
 8002196:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800219a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800219e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80021a2:	462b      	mov	r3, r5
 80021a4:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80021a8:	4642      	mov	r2, r8
 80021aa:	fb02 f203 	mul.w	r2, r2, r3
 80021ae:	464b      	mov	r3, r9
 80021b0:	4621      	mov	r1, r4
 80021b2:	fb01 f303 	mul.w	r3, r1, r3
 80021b6:	4413      	add	r3, r2
 80021b8:	4622      	mov	r2, r4
 80021ba:	4641      	mov	r1, r8
 80021bc:	fba2 1201 	umull	r1, r2, r2, r1
 80021c0:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 80021c4:	460a      	mov	r2, r1
 80021c6:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 80021ca:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80021ce:	4413      	add	r3, r2
 80021d0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80021d4:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 80021d8:	4622      	mov	r2, r4
 80021da:	462b      	mov	r3, r5
 80021dc:	f04f 0000 	mov.w	r0, #0
 80021e0:	f04f 0100 	mov.w	r1, #0
 80021e4:	0119      	lsls	r1, r3, #4
 80021e6:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80021ea:	0110      	lsls	r0, r2, #4
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4621      	mov	r1, r4
 80021f2:	1a51      	subs	r1, r2, r1
 80021f4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80021f6:	4629      	mov	r1, r5
 80021f8:	eb63 0301 	sbc.w	r3, r3, r1
 80021fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800220a:	4649      	mov	r1, r9
 800220c:	008b      	lsls	r3, r1, #2
 800220e:	4641      	mov	r1, r8
 8002210:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002214:	4641      	mov	r1, r8
 8002216:	008a      	lsls	r2, r1, #2
 8002218:	4610      	mov	r0, r2
 800221a:	4619      	mov	r1, r3
 800221c:	4603      	mov	r3, r0
 800221e:	4622      	mov	r2, r4
 8002220:	189b      	adds	r3, r3, r2
 8002222:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002226:	462b      	mov	r3, r5
 8002228:	460a      	mov	r2, r1
 800222a:	eb42 0303 	adc.w	r3, r2, r3
 800222e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800223e:	4621      	mov	r1, r4
 8002240:	090a      	lsrs	r2, r1, #4
 8002242:	4629      	mov	r1, r5
 8002244:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8002248:	4629      	mov	r1, r5
 800224a:	110b      	asrs	r3, r1, #4
 800224c:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
        int64_t SENS2 = 2 * (int64_t)TEMPM * TEMPM;
 8002250:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002254:	17da      	asrs	r2, r3, #31
 8002256:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800225a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800225e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002262:	17da      	asrs	r2, r3, #31
 8002264:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002266:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002268:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800226c:	462b      	mov	r3, r5
 800226e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002272:	4642      	mov	r2, r8
 8002274:	fb02 f203 	mul.w	r2, r2, r3
 8002278:	464b      	mov	r3, r9
 800227a:	4621      	mov	r1, r4
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	4413      	add	r3, r2
 8002282:	4622      	mov	r2, r4
 8002284:	4641      	mov	r1, r8
 8002286:	fba2 1201 	umull	r1, r2, r2, r1
 800228a:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 800228e:	460a      	mov	r2, r1
 8002290:	f8c7 2108 	str.w	r2, [r7, #264]	@ 0x108
 8002294:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8002298:	4413      	add	r3, r2
 800229a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800229e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80022a2:	460b      	mov	r3, r1
 80022a4:	18db      	adds	r3, r3, r3
 80022a6:	623b      	str	r3, [r7, #32]
 80022a8:	4613      	mov	r3, r2
 80022aa:	eb42 0303 	adc.w	r3, r2, r3
 80022ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80022b0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80022b4:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
        if (TEMP < -1500) {
 80022b8:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80022bc:	4b03      	ldr	r3, [pc, #12]	@ (80022cc <MS5607Convert+0x390>)
 80022be:	429a      	cmp	r2, r3
 80022c0:	f280 8091 	bge.w	80023e6 <MS5607Convert+0x4aa>
 80022c4:	e004      	b.n	80022d0 <MS5607Convert+0x394>
 80022c6:	bf00      	nop
 80022c8:	20000924 	.word	0x20000924
 80022cc:	fffffa24 	.word	0xfffffa24
            int32_t TEMPP = TEMP + 1500;
 80022d0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80022d4:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 80022d8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
            OFF2 += (int64_t)15 * TEMPP * TEMPP;
 80022dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80022e0:	17da      	asrs	r2, r3, #31
 80022e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80022e4:	677a      	str	r2, [r7, #116]	@ 0x74
 80022e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80022ea:	17da      	asrs	r2, r3, #31
 80022ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80022ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80022f0:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 80022f4:	462b      	mov	r3, r5
 80022f6:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80022fa:	4642      	mov	r2, r8
 80022fc:	fb02 f203 	mul.w	r2, r2, r3
 8002300:	464b      	mov	r3, r9
 8002302:	4621      	mov	r1, r4
 8002304:	fb01 f303 	mul.w	r3, r1, r3
 8002308:	4413      	add	r3, r2
 800230a:	4622      	mov	r2, r4
 800230c:	4641      	mov	r1, r8
 800230e:	fba2 1201 	umull	r1, r2, r2, r1
 8002312:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8002316:	460a      	mov	r2, r1
 8002318:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 800231c:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8002320:	4413      	add	r3, r2
 8002322:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002326:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800232a:	4622      	mov	r2, r4
 800232c:	462b      	mov	r3, r5
 800232e:	f04f 0000 	mov.w	r0, #0
 8002332:	f04f 0100 	mov.w	r1, #0
 8002336:	0119      	lsls	r1, r3, #4
 8002338:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800233c:	0110      	lsls	r0, r2, #4
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4621      	mov	r1, r4
 8002344:	1a51      	subs	r1, r2, r1
 8002346:	6639      	str	r1, [r7, #96]	@ 0x60
 8002348:	4629      	mov	r1, r5
 800234a:	eb63 0301 	sbc.w	r3, r3, r1
 800234e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002350:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8002354:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002358:	4621      	mov	r1, r4
 800235a:	1851      	adds	r1, r2, r1
 800235c:	61b9      	str	r1, [r7, #24]
 800235e:	4629      	mov	r1, r5
 8002360:	eb43 0101 	adc.w	r1, r3, r1
 8002364:	61f9      	str	r1, [r7, #28]
 8002366:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800236a:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
            SENS2 += (int64_t)8 * TEMPP * TEMPP;
 800236e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002372:	17da      	asrs	r2, r3, #31
 8002374:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002376:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002378:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800237c:	17da      	asrs	r2, r3, #31
 800237e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002380:	657a      	str	r2, [r7, #84]	@ 0x54
 8002382:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8002386:	462b      	mov	r3, r5
 8002388:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800238c:	4642      	mov	r2, r8
 800238e:	fb02 f203 	mul.w	r2, r2, r3
 8002392:	464b      	mov	r3, r9
 8002394:	4621      	mov	r1, r4
 8002396:	fb01 f303 	mul.w	r3, r1, r3
 800239a:	4413      	add	r3, r2
 800239c:	4622      	mov	r2, r4
 800239e:	4641      	mov	r1, r8
 80023a0:	fba2 1201 	umull	r1, r2, r2, r1
 80023a4:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80023a8:	460a      	mov	r2, r1
 80023aa:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 80023ae:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80023b2:	4413      	add	r3, r2
 80023b4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80023b8:	f04f 0000 	mov.w	r0, #0
 80023bc:	f04f 0100 	mov.w	r1, #0
 80023c0:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80023c4:	462b      	mov	r3, r5
 80023c6:	00d9      	lsls	r1, r3, #3
 80023c8:	4623      	mov	r3, r4
 80023ca:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80023ce:	4623      	mov	r3, r4
 80023d0:	00d8      	lsls	r0, r3, #3
 80023d2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80023d6:	1814      	adds	r4, r2, r0
 80023d8:	613c      	str	r4, [r7, #16]
 80023da:	414b      	adcs	r3, r1
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80023e2:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
        }
        TEMP -= T2;
 80023e6:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80023ea:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
        OFF -= OFF2;
 80023f4:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 80023f8:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80023fc:	1a84      	subs	r4, r0, r2
 80023fe:	60bc      	str	r4, [r7, #8]
 8002400:	eb61 0303 	sbc.w	r3, r1, r3
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800240a:	e9c7 3458 	strd	r3, r4, [r7, #352]	@ 0x160
        SENS -= SENS2;
 800240e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8002412:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8002416:	1a84      	subs	r4, r0, r2
 8002418:	603c      	str	r4, [r7, #0]
 800241a:	eb61 0303 	sbc.w	r3, r1, r3
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002424:	e9c7 3456 	strd	r3, r4, [r7, #344]	@ 0x158
    }

    value->pressure = ((((int64_t)sample->pressure * SENS) >> 21) - OFF) >> 15;
 8002428:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2200      	movs	r2, #0
 8002430:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002432:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002434:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002438:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800243c:	462a      	mov	r2, r5
 800243e:	fb02 f203 	mul.w	r2, r2, r3
 8002442:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002446:	4621      	mov	r1, r4
 8002448:	fb01 f303 	mul.w	r3, r1, r3
 800244c:	4413      	add	r3, r2
 800244e:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002452:	4621      	mov	r1, r4
 8002454:	fba2 1201 	umull	r1, r2, r2, r1
 8002458:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800245c:	460a      	mov	r2, r1
 800245e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8002462:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8002466:	4413      	add	r3, r2
 8002468:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8002478:	4621      	mov	r1, r4
 800247a:	0d4a      	lsrs	r2, r1, #21
 800247c:	4629      	mov	r1, r5
 800247e:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8002482:	4629      	mov	r1, r5
 8002484:	154b      	asrs	r3, r1, #21
 8002486:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 800248a:	1a14      	subs	r4, r2, r0
 800248c:	643c      	str	r4, [r7, #64]	@ 0x40
 800248e:	eb63 0301 	sbc.w	r3, r3, r1
 8002492:	647b      	str	r3, [r7, #68]	@ 0x44
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80024a0:	4621      	mov	r1, r4
 80024a2:	0bca      	lsrs	r2, r1, #15
 80024a4:	4629      	mov	r1, r5
 80024a6:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80024aa:	4629      	mov	r1, r5
 80024ac:	13cb      	asrs	r3, r1, #15
 80024ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80024b2:	601a      	str	r2, [r3, #0]
    value->temperature = TEMP;
 80024b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80024b8:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80024bc:	605a      	str	r2, [r3, #4]
}
 80024be:	bf00      	nop
 80024c0:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 80024c4:	46bd      	mov	sp, r7
 80024c6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80024ca:	4770      	bx	lr

080024cc <MS5607Update>:

void MS5607Update(void) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
    MS5607UncompensatedRead(&uncompValues);
 80024d0:	4804      	ldr	r0, [pc, #16]	@ (80024e4 <MS5607Update+0x18>)
 80024d2:	f7ff fcb9 	bl	8001e48 <MS5607UncompensatedRead>
    MS5607Convert(&uncompValues, &readings);
 80024d6:	4904      	ldr	r1, [pc, #16]	@ (80024e8 <MS5607Update+0x1c>)
 80024d8:	4802      	ldr	r0, [pc, #8]	@ (80024e4 <MS5607Update+0x18>)
 80024da:	f7ff fd2f 	bl	8001f3c <MS5607Convert>
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000934 	.word	0x20000934
 80024e8:	2000093c 	.word	0x2000093c

080024ec <MS5607GetTemperatureC>:

float MS5607GetTemperatureC(void) {
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
    return (float)readings.temperature / 100.0f;
 80024f0:	4b08      	ldr	r3, [pc, #32]	@ (8002514 <MS5607GetTemperatureC+0x28>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	ee07 3a90 	vmov	s15, r3
 80024f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024fc:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002518 <MS5607GetTemperatureC+0x2c>
 8002500:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002504:	eef0 7a66 	vmov.f32	s15, s13
}
 8002508:	eeb0 0a67 	vmov.f32	s0, s15
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	2000093c 	.word	0x2000093c
 8002518:	42c80000 	.word	0x42c80000

0800251c <MS5607GetPressurePa>:

float MS5607GetPressurePa(void) {
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
    return (float)readings.pressure;
 8002520:	4b05      	ldr	r3, [pc, #20]	@ (8002538 <MS5607GetPressurePa+0x1c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	ee07 3a90 	vmov	s15, r3
 8002528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800252c:	eeb0 0a67 	vmov.f32	s0, s15
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	2000093c 	.word	0x2000093c

0800253c <enableCSB>:

void enableCSB(void) {
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(BARO_CS_GPIO_Port, BARO_CS_Pin, GPIO_PIN_RESET);
 8002540:	2200      	movs	r2, #0
 8002542:	2110      	movs	r1, #16
 8002544:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002548:	f003 fcce 	bl	8005ee8 <HAL_GPIO_WritePin>
}
 800254c:	bf00      	nop
 800254e:	bd80      	pop	{r7, pc}

08002550 <disableCSB>:

void disableCSB(void) {
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(BARO_CS_GPIO_Port, BARO_CS_Pin, GPIO_PIN_SET);
 8002554:	2201      	movs	r2, #1
 8002556:	2110      	movs	r1, #16
 8002558:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800255c:	f003 fcc4 	bl	8005ee8 <HAL_GPIO_WritePin>
}
 8002560:	bf00      	nop
 8002562:	bd80      	pop	{r7, pc}

08002564 <MS5607SetTemperatureOSR>:

void MS5607SetTemperatureOSR(MS5607OSRFactors tOSR) {
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	71fb      	strb	r3, [r7, #7]
    Temperature_OSR = tOSR;
 800256e:	4a04      	ldr	r2, [pc, #16]	@ (8002580 <MS5607SetTemperatureOSR+0x1c>)
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	7013      	strb	r3, [r2, #0]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	20000922 	.word	0x20000922

08002584 <MS5607SetPressureOSR>:

void MS5607SetPressureOSR(MS5607OSRFactors pOSR) {
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	71fb      	strb	r3, [r7, #7]
    Pressure_OSR = pOSR;
 800258e:	4a04      	ldr	r2, [pc, #16]	@ (80025a0 <MS5607SetPressureOSR+0x1c>)
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	7013      	strb	r3, [r2, #0]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	20000921 	.word	0x20000921

080025a4 <MS5607_ReadData>:

Barometer_2_Axis MS5607_ReadData() {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08c      	sub	sp, #48	@ 0x30
 80025a8:	af00      	add	r7, sp, #0
    Barometer_2_Axis data = {0};
 80025aa:	f107 0314 	add.w	r3, r7, #20
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	605a      	str	r2, [r3, #4]
 80025b4:	609a      	str	r2, [r3, #8]

        MS5607Update();
 80025b6:	f7ff ff89 	bl	80024cc <MS5607Update>
        data.temperature = MS5607GetTemperatureC();
 80025ba:	f7ff ff97 	bl	80024ec <MS5607GetTemperatureC>
 80025be:	eef0 7a40 	vmov.f32	s15, s0
 80025c2:	edc7 7a06 	vstr	s15, [r7, #24]
        data.pressure = MS5607GetPressurePa();
 80025c6:	f7ff ffa9 	bl	800251c <MS5607GetPressurePa>
 80025ca:	eef0 7a40 	vmov.f32	s15, s0
 80025ce:	edc7 7a05 	vstr	s15, [r7, #20]
        float raw_altitude = calculate_altitude(data.pressure);
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fd ffb7 	bl	8000548 <__aeabi_f2d>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	ec43 2b10 	vmov	d0, r2, r3
 80025e2:	f7ff fb8d 	bl	8001d00 <calculate_altitude>
 80025e6:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        data.altitude = kalman_filter(raw_altitude);
 80025ea:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 80025ee:	f7ff fb29 	bl	8001c44 <kalman_filter>
 80025f2:	eef0 7a40 	vmov.f32	s15, s0
 80025f6:	edc7 7a07 	vstr	s15, [r7, #28]


    return data;
 80025fa:	f107 0320 	add.w	r3, r7, #32
 80025fe:	f107 0214 	add.w	r2, r7, #20
 8002602:	ca07      	ldmia	r2, {r0, r1, r2}
 8002604:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002608:	6a39      	ldr	r1, [r7, #32]
 800260a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800260c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800260e:	ee06 1a90 	vmov	s13, r1
 8002612:	ee07 2a10 	vmov	s14, r2
 8002616:	ee07 3a90 	vmov	s15, r3
}
 800261a:	eeb0 0a66 	vmov.f32	s0, s13
 800261e:	eef0 0a47 	vmov.f32	s1, s14
 8002622:	eeb0 1a67 	vmov.f32	s2, s15
 8002626:	3730      	adds	r7, #48	@ 0x30
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <get_average_pressure>:
        HAL_Delay(10);
    }
    return sum / NUM_SAMPLES;
}

float get_average_pressure() {
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
    float sum = 0;
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < NUM_SAMPLES; i++) {
 8002638:	2300      	movs	r3, #0
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	e011      	b.n	8002662 <get_average_pressure+0x36>
        MS5607Update();
 800263e:	f7ff ff45 	bl	80024cc <MS5607Update>
        sum += MS5607GetPressurePa();
 8002642:	f7ff ff6b 	bl	800251c <MS5607GetPressurePa>
 8002646:	eeb0 7a40 	vmov.f32	s14, s0
 800264a:	edd7 7a01 	vldr	s15, [r7, #4]
 800264e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002652:	edc7 7a01 	vstr	s15, [r7, #4]
        HAL_Delay(10);
 8002656:	200a      	movs	r0, #10
 8002658:	f001 ffdc 	bl	8004614 <HAL_Delay>
    for (int i = 0; i < NUM_SAMPLES; i++) {
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	3301      	adds	r3, #1
 8002660:	603b      	str	r3, [r7, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b63      	cmp	r3, #99	@ 0x63
 8002666:	ddea      	ble.n	800263e <get_average_pressure+0x12>
    }
    return sum / NUM_SAMPLES;
 8002668:	edd7 7a01 	vldr	s15, [r7, #4]
 800266c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002684 <get_average_pressure+0x58>
 8002670:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002674:	eef0 7a66 	vmov.f32	s15, s13
}
 8002678:	eeb0 0a67 	vmov.f32	s0, s15
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	42c80000 	.word	0x42c80000

08002688 <MS5607_Init>:
    printf("MS5607 Barometer:\n");
    printf("Pressure: %.3f Pa, Temperature: %.3f degC, Altitude: %.3f meters\n", data->pressure, data->temperature, data->altitude);
    printf("-----\n");
}

int8_t MS5607_Init() {
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
    enableCSB();
 800268c:	f7ff ff56 	bl	800253c <enableCSB>
    SPITransmitData = RESET_COMMAND;
 8002690:	4b18      	ldr	r3, [pc, #96]	@ (80026f4 <MS5607_Init+0x6c>)
 8002692:	221e      	movs	r2, #30
 8002694:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &SPITransmitData, 1, 10);
 8002696:	230a      	movs	r3, #10
 8002698:	2201      	movs	r2, #1
 800269a:	4916      	ldr	r1, [pc, #88]	@ (80026f4 <MS5607_Init+0x6c>)
 800269c:	4816      	ldr	r0, [pc, #88]	@ (80026f8 <MS5607_Init+0x70>)
 800269e:	f006 faea 	bl	8008c76 <HAL_SPI_Transmit>
    while (hspi1.State == HAL_SPI_STATE_BUSY);
 80026a2:	bf00      	nop
 80026a4:	4b14      	ldr	r3, [pc, #80]	@ (80026f8 <MS5607_Init+0x70>)
 80026a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d0f9      	beq.n	80026a4 <MS5607_Init+0x1c>
    HAL_Delay(3);
 80026b0:	2003      	movs	r0, #3
 80026b2:	f001 ffaf 	bl	8004614 <HAL_Delay>
    disableCSB();
 80026b6:	f7ff ff4b 	bl	8002550 <disableCSB>

    MS5607PromRead(&promData);
 80026ba:	4810      	ldr	r0, [pc, #64]	@ (80026fc <MS5607_Init+0x74>)
 80026bc:	f7ff fb74 	bl	8001da8 <MS5607PromRead>

    if (promData.reserved == 0x00 || promData.reserved == 0xff) {
 80026c0:	4b0e      	ldr	r3, [pc, #56]	@ (80026fc <MS5607_Init+0x74>)
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <MS5607_Init+0x48>
 80026c8:	4b0c      	ldr	r3, [pc, #48]	@ (80026fc <MS5607_Init+0x74>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	2bff      	cmp	r3, #255	@ 0xff
 80026ce:	d101      	bne.n	80026d4 <MS5607_Init+0x4c>
        return MS5607_STATE_FAILED;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e00d      	b.n	80026f0 <MS5607_Init+0x68>
    } else {
        MS5607SetPressureOSR(OSR_4096);
 80026d4:	2008      	movs	r0, #8
 80026d6:	f7ff ff55 	bl	8002584 <MS5607SetPressureOSR>
        MS5607SetTemperatureOSR(OSR_4096);
 80026da:	2008      	movs	r0, #8
 80026dc:	f7ff ff42 	bl	8002564 <MS5607SetTemperatureOSR>
        initial_ms5607_pressure = get_average_pressure();
 80026e0:	f7ff ffa4 	bl	800262c <get_average_pressure>
 80026e4:	eef0 7a40 	vmov.f32	s15, s0
 80026e8:	4b05      	ldr	r3, [pc, #20]	@ (8002700 <MS5607_Init+0x78>)
 80026ea:	edc3 7a00 	vstr	s15, [r3]
        return MS5607_STATE_READY;
 80026ee:	2300      	movs	r3, #0
    }
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20000920 	.word	0x20000920
 80026f8:	20000b00 	.word	0x20000b00
 80026fc:	20000924 	.word	0x20000924
 8002700:	20000944 	.word	0x20000944

08002704 <sdsInit>:
 *
 *   @param sds pointer to SDS_t handle structure
 *   @param huart_sds pointer to UART handle structure
*/
int8_t sdsInit(SDS* sds, const UART_HandleTypeDef* huart_sds)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;
sds->huart_sds=(UART_HandleTypeDef *)huart_sds;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	601a      	str	r2, [r3, #0]
ret = HAL_UART_Transmit(sds->huart_sds,(uint8_t*)Sds011_WorkingMode, 19,30);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	231e      	movs	r3, #30
 800271a:	2213      	movs	r2, #19
 800271c:	490e      	ldr	r1, [pc, #56]	@ (8002758 <sdsInit+0x54>)
 800271e:	f007 f981 	bl	8009a24 <HAL_UART_Transmit>
 8002722:	4603      	mov	r3, r0
 8002724:	73fb      	strb	r3, [r7, #15]
if (ret != HAL_OK){
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <sdsInit+0x2c>
	return 1;
 800272c:	2301      	movs	r3, #1
 800272e:	e00f      	b.n	8002750 <sdsInit+0x4c>
}

ret = HAL_UART_Receive_IT(sds->huart_sds, sds->data_receive, 10);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3308      	adds	r3, #8
 8002738:	220a      	movs	r2, #10
 800273a:	4619      	mov	r1, r3
 800273c:	f007 f9fc 	bl	8009b38 <HAL_UART_Receive_IT>
 8002740:	4603      	mov	r3, r0
 8002742:	73fb      	strb	r3, [r7, #15]

if (ret != HAL_OK){
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <sdsInit+0x4a>
	return 1;
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <sdsInit+0x4c>
}

return 0;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	08013738 	.word	0x08013738

0800275c <sdsGetPm2_5>:
 *
 *   @param sds pointer to SDS_t handle structure
 *   @return value of PM 2.5
*/
uint16_t sdsGetPm2_5(SDS* sds)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
	return  sds->pm_2_5;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	889b      	ldrh	r3, [r3, #4]
}
 8002768:	4618      	mov	r0, r3
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <sdsGetPm10>:
 *
 *   @param sds pointer to SDS_t handle structure
 *   @return value of PM 10
*/
uint16_t sdsGetPm10(SDS* sds)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
	return  sds->pm_10;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	88db      	ldrh	r3, [r3, #6]
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <sds_uart_RxCpltCallback>:
 *
 *   @param sds pointer to SDS_t handle structure
 *   @param huart pointer to UART handle structure
*/
void sds_uart_RxCpltCallback(SDS* sds, UART_HandleTypeDef *huart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
	if(huart == sds->huart_sds)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d129      	bne.n	80027f4 <sds_uart_RxCpltCallback+0x68>
		{
				if((sds->data_receive[1] == 0xC0))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	7a5b      	ldrb	r3, [r3, #9]
 80027a4:	2bc0      	cmp	r3, #192	@ 0xc0
 80027a6:	d11d      	bne.n	80027e4 <sds_uart_RxCpltCallback+0x58>
				{
					sds->pm_2_5 = ((sds->data_receive[3]<<8)| sds->data_receive[2])/10;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	7adb      	ldrb	r3, [r3, #11]
 80027ac:	021b      	lsls	r3, r3, #8
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	7a92      	ldrb	r2, [r2, #10]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	4a11      	ldr	r2, [pc, #68]	@ (80027fc <sds_uart_RxCpltCallback+0x70>)
 80027b6:	fb82 1203 	smull	r1, r2, r2, r3
 80027ba:	1092      	asrs	r2, r2, #2
 80027bc:	17db      	asrs	r3, r3, #31
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	809a      	strh	r2, [r3, #4]
					sds->pm_10 = ((sds->data_receive[5]<<8)| sds->data_receive[4])/10;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	7b5b      	ldrb	r3, [r3, #13]
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	7b12      	ldrb	r2, [r2, #12]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	4a0a      	ldr	r2, [pc, #40]	@ (80027fc <sds_uart_RxCpltCallback+0x70>)
 80027d4:	fb82 1203 	smull	r1, r2, r2, r3
 80027d8:	1092      	asrs	r2, r2, #2
 80027da:	17db      	asrs	r3, r3, #31
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	b29a      	uxth	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	80da      	strh	r2, [r3, #6]
			}
			HAL_UART_Receive_IT(sds->huart_sds, sds->data_receive, 10);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3308      	adds	r3, #8
 80027ec:	220a      	movs	r2, #10
 80027ee:	4619      	mov	r1, r3
 80027f0:	f007 f9a2 	bl	8009b38 <HAL_UART_Receive_IT>
		}
}
 80027f4:	bf00      	nop
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	66666667 	.word	0x66666667

08002800 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002808:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800280c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d013      	beq.n	8002840 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002818:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800281c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002820:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00b      	beq.n	8002840 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002828:	e000      	b.n	800282c <ITM_SendChar+0x2c>
    {
      __NOP();
 800282a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800282c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f9      	beq.n	800282a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002836:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002840:	687b      	ldr	r3, [r7, #4]
}
 8002842:	4618      	mov	r0, r3
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 800284e:	b580      	push	{r7, lr}
 8002850:	b086      	sub	sp, #24
 8002852:	af00      	add	r7, sp, #0
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	60b9      	str	r1, [r7, #8]
 8002858:	607a      	str	r2, [r7, #4]
	int i=0;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	e009      	b.n	8002878 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	60ba      	str	r2, [r7, #8]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff ffc7 	bl	8002800 <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	3301      	adds	r3, #1
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	429a      	cmp	r2, r3
 800287e:	dbf1      	blt.n	8002864 <_write+0x16>
	}
	return len;
 8002880:	687b      	ldr	r3, [r7, #4]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002892:	f001 fe4a 	bl	800452a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002896:	f000 f845 	bl	8002924 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800289a:	f000 f895 	bl	80029c8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800289e:	f000 fbef 	bl	8003080 <MX_GPIO_Init>
  MX_DMA_Init();
 80028a2:	f000 fbcf 	bl	8003044 <MX_DMA_Init>
  MX_ADC1_Init();
 80028a6:	f000 f8bd 	bl	8002a24 <MX_ADC1_Init>
  MX_I2C1_Init();
 80028aa:	f000 f933 	bl	8002b14 <MX_I2C1_Init>
  MX_I2C2_Init();
 80028ae:	f000 f971 	bl	8002b94 <MX_I2C2_Init>
  MX_I2C3_Init();
 80028b2:	f000 f9af 	bl	8002c14 <MX_I2C3_Init>
  MX_SPI1_Init();
 80028b6:	f000 f9ed 	bl	8002c94 <MX_SPI1_Init>
  MX_SPI2_Init();
 80028ba:	f000 fa29 	bl	8002d10 <MX_SPI2_Init>
  MX_SPI3_Init();
 80028be:	f000 fa65 	bl	8002d8c <MX_SPI3_Init>
  MX_UART4_Init();
 80028c2:	f000 faa1 	bl	8002e08 <MX_UART4_Init>
  MX_UART5_Init();
 80028c6:	f000 facf 	bl	8002e68 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80028ca:	f000 fafd 	bl	8002ec8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80028ce:	f000 fb2b 	bl	8002f28 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80028d2:	f000 fb59 	bl	8002f88 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80028d6:	f000 fb87 	bl	8002fe8 <MX_USB_OTG_FS_PCD_Init>
  MX_FATFS_Init();
 80028da:	f008 feeb 	bl	800b6b4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 80028de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80028e2:	f001 fe97 	bl	8004614 <HAL_Delay>
  SystemState ret = Manager_Main(); // Launching the Control Center Main Handling Function
 80028e6:	f001 fd75 	bl	80043d4 <Manager_Main>
 80028ea:	4603      	mov	r3, r0
 80028ec:	71fb      	strb	r3, [r7, #7]
  switch(ret){
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <main+0x6e>
 80028f4:	2b07      	cmp	r3, #7
 80028f6:	d004      	beq.n	8002902 <main+0x76>
 80028f8:	e007      	b.n	800290a <main+0x7e>
		case STATUS_GRACEFUL_SHUTDOWN:
			printf("Graceful shutdown. \n"); // Graceful shutdown of the module
 80028fa:	4807      	ldr	r0, [pc, #28]	@ (8002918 <main+0x8c>)
 80028fc:	f00d fa42 	bl	800fd84 <puts>
			break;
 8002900:	e007      	b.n	8002912 <main+0x86>
		case STATUS_ERROR:
			printf("You should not be here. Error Detected. \n"); // The code should jump to this statement only in USB Mode
 8002902:	4806      	ldr	r0, [pc, #24]	@ (800291c <main+0x90>)
 8002904:	f00d fa3e 	bl	800fd84 <puts>
			break;
 8002908:	e003      	b.n	8002912 <main+0x86>
		default:
			printf("You should not be here \n"); // Something went wrong :(
 800290a:	4805      	ldr	r0, [pc, #20]	@ (8002920 <main+0x94>)
 800290c:	f00d fa3a 	bl	800fd84 <puts>
			break;
 8002910:	bf00      	nop
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002912:	bf00      	nop
 8002914:	e7fd      	b.n	8002912 <main+0x86>
 8002916:	bf00      	nop
 8002918:	080132dc 	.word	0x080132dc
 800291c:	080132f0 	.word	0x080132f0
 8002920:	0801331c 	.word	0x0801331c

08002924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b096      	sub	sp, #88	@ 0x58
 8002928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800292a:	f107 0314 	add.w	r3, r7, #20
 800292e:	2244      	movs	r2, #68	@ 0x44
 8002930:	2100      	movs	r1, #0
 8002932:	4618      	mov	r0, r3
 8002934:	f00d fa2e 	bl	800fd94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002938:	463b      	mov	r3, r7
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	609a      	str	r2, [r3, #8]
 8002942:	60da      	str	r2, [r3, #12]
 8002944:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002946:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800294a:	f004 fdcf 	bl	80074ec <HAL_PWREx_ControlVoltageScaling>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002954:	f000 fc24 	bl	80031a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002958:	2310      	movs	r3, #16
 800295a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800295c:	2301      	movs	r3, #1
 800295e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002964:	2360      	movs	r3, #96	@ 0x60
 8002966:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002968:	2302      	movs	r3, #2
 800296a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800296c:	2301      	movs	r3, #1
 800296e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002970:	2301      	movs	r3, #1
 8002972:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002974:	2328      	movs	r3, #40	@ 0x28
 8002976:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002978:	2307      	movs	r3, #7
 800297a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800297c:	2302      	movs	r3, #2
 800297e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002980:	2302      	movs	r3, #2
 8002982:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002984:	f107 0314 	add.w	r3, r7, #20
 8002988:	4618      	mov	r0, r3
 800298a:	f004 fe15 	bl	80075b8 <HAL_RCC_OscConfig>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002994:	f000 fc04 	bl	80031a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002998:	230f      	movs	r3, #15
 800299a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800299c:	2303      	movs	r3, #3
 800299e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029a8:	2300      	movs	r3, #0
 80029aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80029ac:	463b      	mov	r3, r7
 80029ae:	2104      	movs	r1, #4
 80029b0:	4618      	mov	r0, r3
 80029b2:	f005 f9dd 	bl	8007d70 <HAL_RCC_ClockConfig>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80029bc:	f000 fbf0 	bl	80031a0 <Error_Handler>
  }
}
 80029c0:	bf00      	nop
 80029c2:	3758      	adds	r7, #88	@ 0x58
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b0a2      	sub	sp, #136	@ 0x88
 80029cc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029ce:	463b      	mov	r3, r7
 80029d0:	2288      	movs	r2, #136	@ 0x88
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f00d f9dd 	bl	800fd94 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80029da:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80029de:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80029e0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80029e4:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80029e6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80029ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80029ec:	2301      	movs	r3, #1
 80029ee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80029f0:	2301      	movs	r3, #1
 80029f2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80029f4:	2318      	movs	r3, #24
 80029f6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80029f8:	2307      	movs	r3, #7
 80029fa:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80029fc:	2302      	movs	r3, #2
 80029fe:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002a00:	2302      	movs	r3, #2
 8002a02:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8002a04:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 8002a08:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a0a:	463b      	mov	r3, r7
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f005 fbd3 	bl	80081b8 <HAL_RCCEx_PeriphCLKConfig>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8002a18:	f000 fbc2 	bl	80031a0 <Error_Handler>
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	3788      	adds	r7, #136	@ 0x88
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08a      	sub	sp, #40	@ 0x28
 8002a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002a2a:	f107 031c 	add.w	r3, r7, #28
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	605a      	str	r2, [r3, #4]
 8002a34:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002a36:	1d3b      	adds	r3, r7, #4
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	611a      	str	r2, [r3, #16]
 8002a44:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002a46:	4b30      	ldr	r3, [pc, #192]	@ (8002b08 <MX_ADC1_Init+0xe4>)
 8002a48:	4a30      	ldr	r2, [pc, #192]	@ (8002b0c <MX_ADC1_Init+0xe8>)
 8002a4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8002a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8002b08 <MX_ADC1_Init+0xe4>)
 8002a4e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002a52:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a54:	4b2c      	ldr	r3, [pc, #176]	@ (8002b08 <MX_ADC1_Init+0xe4>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8002b08 <MX_ADC1_Init+0xe4>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002a60:	4b29      	ldr	r3, [pc, #164]	@ (8002b08 <MX_ADC1_Init+0xe4>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a66:	4b28      	ldr	r3, [pc, #160]	@ (8002b08 <MX_ADC1_Init+0xe4>)
 8002a68:	2204      	movs	r2, #4
 8002a6a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002a6c:	4b26      	ldr	r3, [pc, #152]	@ (8002b08 <MX_ADC1_Init+0xe4>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002a72:	4b25      	ldr	r3, [pc, #148]	@ (8002b08 <MX_ADC1_Init+0xe4>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002a78:	4b23      	ldr	r3, [pc, #140]	@ (8002b08 <MX_ADC1_Init+0xe4>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a7e:	4b22      	ldr	r3, [pc, #136]	@ (8002b08 <MX_ADC1_Init+0xe4>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a86:	4b20      	ldr	r3, [pc, #128]	@ (8002b08 <MX_ADC1_Init+0xe4>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002b08 <MX_ADC1_Init+0xe4>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002a92:	4b1d      	ldr	r3, [pc, #116]	@ (8002b08 <MX_ADC1_Init+0xe4>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002b08 <MX_ADC1_Init+0xe4>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002aa0:	4b19      	ldr	r3, [pc, #100]	@ (8002b08 <MX_ADC1_Init+0xe4>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002aa8:	4817      	ldr	r0, [pc, #92]	@ (8002b08 <MX_ADC1_Init+0xe4>)
 8002aaa:	f001 ff63 	bl	8004974 <HAL_ADC_Init>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002ab4:	f000 fb74 	bl	80031a0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002abc:	f107 031c 	add.w	r3, r7, #28
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4811      	ldr	r0, [pc, #68]	@ (8002b08 <MX_ADC1_Init+0xe4>)
 8002ac4:	f002 fcbe 	bl	8005444 <HAL_ADCEx_MultiModeConfigChannel>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8002ace:	f000 fb67 	bl	80031a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8002b10 <MX_ADC1_Init+0xec>)
 8002ad4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ad6:	2306      	movs	r3, #6
 8002ad8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002ade:	237f      	movs	r3, #127	@ 0x7f
 8002ae0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002ae2:	2304      	movs	r3, #4
 8002ae4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	4619      	mov	r1, r3
 8002aee:	4806      	ldr	r0, [pc, #24]	@ (8002b08 <MX_ADC1_Init+0xe4>)
 8002af0:	f002 f890 	bl	8004c14 <HAL_ADC_ConfigChannel>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8002afa:	f000 fb51 	bl	80031a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002afe:	bf00      	nop
 8002b00:	3728      	adds	r7, #40	@ 0x28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000958 	.word	0x20000958
 8002b0c:	50040000 	.word	0x50040000
 8002b10:	0c900008 	.word	0x0c900008

08002b14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b18:	4b1b      	ldr	r3, [pc, #108]	@ (8002b88 <MX_I2C1_Init+0x74>)
 8002b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8002b8c <MX_I2C1_Init+0x78>)
 8002b1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8002b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b88 <MX_I2C1_Init+0x74>)
 8002b20:	4a1b      	ldr	r2, [pc, #108]	@ (8002b90 <MX_I2C1_Init+0x7c>)
 8002b22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002b24:	4b18      	ldr	r3, [pc, #96]	@ (8002b88 <MX_I2C1_Init+0x74>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b2a:	4b17      	ldr	r3, [pc, #92]	@ (8002b88 <MX_I2C1_Init+0x74>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b30:	4b15      	ldr	r3, [pc, #84]	@ (8002b88 <MX_I2C1_Init+0x74>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b36:	4b14      	ldr	r3, [pc, #80]	@ (8002b88 <MX_I2C1_Init+0x74>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b3c:	4b12      	ldr	r3, [pc, #72]	@ (8002b88 <MX_I2C1_Init+0x74>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b42:	4b11      	ldr	r3, [pc, #68]	@ (8002b88 <MX_I2C1_Init+0x74>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b48:	4b0f      	ldr	r3, [pc, #60]	@ (8002b88 <MX_I2C1_Init+0x74>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b4e:	480e      	ldr	r0, [pc, #56]	@ (8002b88 <MX_I2C1_Init+0x74>)
 8002b50:	f003 f9e2 	bl	8005f18 <HAL_I2C_Init>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002b5a:	f000 fb21 	bl	80031a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4809      	ldr	r0, [pc, #36]	@ (8002b88 <MX_I2C1_Init+0x74>)
 8002b62:	f004 faeb 	bl	800713c <HAL_I2CEx_ConfigAnalogFilter>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002b6c:	f000 fb18 	bl	80031a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b70:	2100      	movs	r1, #0
 8002b72:	4805      	ldr	r0, [pc, #20]	@ (8002b88 <MX_I2C1_Init+0x74>)
 8002b74:	f004 fb2d 	bl	80071d2 <HAL_I2CEx_ConfigDigitalFilter>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002b7e:	f000 fb0f 	bl	80031a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000a04 	.word	0x20000a04
 8002b8c:	40005400 	.word	0x40005400
 8002b90:	10d19ce4 	.word	0x10d19ce4

08002b94 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002b98:	4b1b      	ldr	r3, [pc, #108]	@ (8002c08 <MX_I2C2_Init+0x74>)
 8002b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8002c0c <MX_I2C2_Init+0x78>)
 8002b9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8002b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002c08 <MX_I2C2_Init+0x74>)
 8002ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c10 <MX_I2C2_Init+0x7c>)
 8002ba2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002ba4:	4b18      	ldr	r3, [pc, #96]	@ (8002c08 <MX_I2C2_Init+0x74>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002baa:	4b17      	ldr	r3, [pc, #92]	@ (8002c08 <MX_I2C2_Init+0x74>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bb0:	4b15      	ldr	r3, [pc, #84]	@ (8002c08 <MX_I2C2_Init+0x74>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002bb6:	4b14      	ldr	r3, [pc, #80]	@ (8002c08 <MX_I2C2_Init+0x74>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002bbc:	4b12      	ldr	r3, [pc, #72]	@ (8002c08 <MX_I2C2_Init+0x74>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bc2:	4b11      	ldr	r3, [pc, #68]	@ (8002c08 <MX_I2C2_Init+0x74>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002c08 <MX_I2C2_Init+0x74>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002bce:	480e      	ldr	r0, [pc, #56]	@ (8002c08 <MX_I2C2_Init+0x74>)
 8002bd0:	f003 f9a2 	bl	8005f18 <HAL_I2C_Init>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002bda:	f000 fae1 	bl	80031a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bde:	2100      	movs	r1, #0
 8002be0:	4809      	ldr	r0, [pc, #36]	@ (8002c08 <MX_I2C2_Init+0x74>)
 8002be2:	f004 faab 	bl	800713c <HAL_I2CEx_ConfigAnalogFilter>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002bec:	f000 fad8 	bl	80031a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4805      	ldr	r0, [pc, #20]	@ (8002c08 <MX_I2C2_Init+0x74>)
 8002bf4:	f004 faed 	bl	80071d2 <HAL_I2CEx_ConfigDigitalFilter>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002bfe:	f000 facf 	bl	80031a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20000a58 	.word	0x20000a58
 8002c0c:	40005800 	.word	0x40005800
 8002c10:	10d19ce4 	.word	0x10d19ce4

08002c14 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002c18:	4b1b      	ldr	r3, [pc, #108]	@ (8002c88 <MX_I2C3_Init+0x74>)
 8002c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8002c8c <MX_I2C3_Init+0x78>)
 8002c1c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 8002c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002c88 <MX_I2C3_Init+0x74>)
 8002c20:	4a1b      	ldr	r2, [pc, #108]	@ (8002c90 <MX_I2C3_Init+0x7c>)
 8002c22:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002c24:	4b18      	ldr	r3, [pc, #96]	@ (8002c88 <MX_I2C3_Init+0x74>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c2a:	4b17      	ldr	r3, [pc, #92]	@ (8002c88 <MX_I2C3_Init+0x74>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c30:	4b15      	ldr	r3, [pc, #84]	@ (8002c88 <MX_I2C3_Init+0x74>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002c36:	4b14      	ldr	r3, [pc, #80]	@ (8002c88 <MX_I2C3_Init+0x74>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c3c:	4b12      	ldr	r3, [pc, #72]	@ (8002c88 <MX_I2C3_Init+0x74>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c42:	4b11      	ldr	r3, [pc, #68]	@ (8002c88 <MX_I2C3_Init+0x74>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c48:	4b0f      	ldr	r3, [pc, #60]	@ (8002c88 <MX_I2C3_Init+0x74>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002c4e:	480e      	ldr	r0, [pc, #56]	@ (8002c88 <MX_I2C3_Init+0x74>)
 8002c50:	f003 f962 	bl	8005f18 <HAL_I2C_Init>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002c5a:	f000 faa1 	bl	80031a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c5e:	2100      	movs	r1, #0
 8002c60:	4809      	ldr	r0, [pc, #36]	@ (8002c88 <MX_I2C3_Init+0x74>)
 8002c62:	f004 fa6b 	bl	800713c <HAL_I2CEx_ConfigAnalogFilter>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002c6c:	f000 fa98 	bl	80031a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002c70:	2100      	movs	r1, #0
 8002c72:	4805      	ldr	r0, [pc, #20]	@ (8002c88 <MX_I2C3_Init+0x74>)
 8002c74:	f004 faad 	bl	80071d2 <HAL_I2CEx_ConfigDigitalFilter>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002c7e:	f000 fa8f 	bl	80031a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000aac 	.word	0x20000aac
 8002c8c:	40005c00 	.word	0x40005c00
 8002c90:	10d19ce4 	.word	0x10d19ce4

08002c94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c98:	4b1b      	ldr	r3, [pc, #108]	@ (8002d08 <MX_SPI1_Init+0x74>)
 8002c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8002d0c <MX_SPI1_Init+0x78>)
 8002c9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002d08 <MX_SPI1_Init+0x74>)
 8002ca0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002ca4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ca6:	4b18      	ldr	r3, [pc, #96]	@ (8002d08 <MX_SPI1_Init+0x74>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cac:	4b16      	ldr	r3, [pc, #88]	@ (8002d08 <MX_SPI1_Init+0x74>)
 8002cae:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002cb2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cb4:	4b14      	ldr	r3, [pc, #80]	@ (8002d08 <MX_SPI1_Init+0x74>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cba:	4b13      	ldr	r3, [pc, #76]	@ (8002d08 <MX_SPI1_Init+0x74>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cc0:	4b11      	ldr	r3, [pc, #68]	@ (8002d08 <MX_SPI1_Init+0x74>)
 8002cc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cc6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d08 <MX_SPI1_Init+0x74>)
 8002cca:	2210      	movs	r2, #16
 8002ccc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cce:	4b0e      	ldr	r3, [pc, #56]	@ (8002d08 <MX_SPI1_Init+0x74>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d08 <MX_SPI1_Init+0x74>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cda:	4b0b      	ldr	r3, [pc, #44]	@ (8002d08 <MX_SPI1_Init+0x74>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002ce0:	4b09      	ldr	r3, [pc, #36]	@ (8002d08 <MX_SPI1_Init+0x74>)
 8002ce2:	2207      	movs	r2, #7
 8002ce4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ce6:	4b08      	ldr	r3, [pc, #32]	@ (8002d08 <MX_SPI1_Init+0x74>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002cec:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <MX_SPI1_Init+0x74>)
 8002cee:	2208      	movs	r2, #8
 8002cf0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cf2:	4805      	ldr	r0, [pc, #20]	@ (8002d08 <MX_SPI1_Init+0x74>)
 8002cf4:	f005 ff1c 	bl	8008b30 <HAL_SPI_Init>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002cfe:	f000 fa4f 	bl	80031a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000b00 	.word	0x20000b00
 8002d0c:	40013000 	.word	0x40013000

08002d10 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002d14:	4b1b      	ldr	r3, [pc, #108]	@ (8002d84 <MX_SPI2_Init+0x74>)
 8002d16:	4a1c      	ldr	r2, [pc, #112]	@ (8002d88 <MX_SPI2_Init+0x78>)
 8002d18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002d84 <MX_SPI2_Init+0x74>)
 8002d1c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d22:	4b18      	ldr	r3, [pc, #96]	@ (8002d84 <MX_SPI2_Init+0x74>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d28:	4b16      	ldr	r3, [pc, #88]	@ (8002d84 <MX_SPI2_Init+0x74>)
 8002d2a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002d2e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d30:	4b14      	ldr	r3, [pc, #80]	@ (8002d84 <MX_SPI2_Init+0x74>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d36:	4b13      	ldr	r3, [pc, #76]	@ (8002d84 <MX_SPI2_Init+0x74>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d3c:	4b11      	ldr	r3, [pc, #68]	@ (8002d84 <MX_SPI2_Init+0x74>)
 8002d3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d42:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002d44:	4b0f      	ldr	r3, [pc, #60]	@ (8002d84 <MX_SPI2_Init+0x74>)
 8002d46:	2238      	movs	r2, #56	@ 0x38
 8002d48:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d84 <MX_SPI2_Init+0x74>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d50:	4b0c      	ldr	r3, [pc, #48]	@ (8002d84 <MX_SPI2_Init+0x74>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d56:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <MX_SPI2_Init+0x74>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002d5c:	4b09      	ldr	r3, [pc, #36]	@ (8002d84 <MX_SPI2_Init+0x74>)
 8002d5e:	2207      	movs	r2, #7
 8002d60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d62:	4b08      	ldr	r3, [pc, #32]	@ (8002d84 <MX_SPI2_Init+0x74>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d68:	4b06      	ldr	r3, [pc, #24]	@ (8002d84 <MX_SPI2_Init+0x74>)
 8002d6a:	2208      	movs	r2, #8
 8002d6c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d6e:	4805      	ldr	r0, [pc, #20]	@ (8002d84 <MX_SPI2_Init+0x74>)
 8002d70:	f005 fede 	bl	8008b30 <HAL_SPI_Init>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002d7a:	f000 fa11 	bl	80031a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20000b64 	.word	0x20000b64
 8002d88:	40003800 	.word	0x40003800

08002d8c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002d90:	4b1b      	ldr	r3, [pc, #108]	@ (8002e00 <MX_SPI3_Init+0x74>)
 8002d92:	4a1c      	ldr	r2, [pc, #112]	@ (8002e04 <MX_SPI3_Init+0x78>)
 8002d94:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002d96:	4b1a      	ldr	r3, [pc, #104]	@ (8002e00 <MX_SPI3_Init+0x74>)
 8002d98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d9c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002d9e:	4b18      	ldr	r3, [pc, #96]	@ (8002e00 <MX_SPI3_Init+0x74>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002da4:	4b16      	ldr	r3, [pc, #88]	@ (8002e00 <MX_SPI3_Init+0x74>)
 8002da6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002daa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dac:	4b14      	ldr	r3, [pc, #80]	@ (8002e00 <MX_SPI3_Init+0x74>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002db2:	4b13      	ldr	r3, [pc, #76]	@ (8002e00 <MX_SPI3_Init+0x74>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002db8:	4b11      	ldr	r3, [pc, #68]	@ (8002e00 <MX_SPI3_Init+0x74>)
 8002dba:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002dbe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002e00 <MX_SPI3_Init+0x74>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e00 <MX_SPI3_Init+0x74>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e00 <MX_SPI3_Init+0x74>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e00 <MX_SPI3_Init+0x74>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002dd8:	4b09      	ldr	r3, [pc, #36]	@ (8002e00 <MX_SPI3_Init+0x74>)
 8002dda:	2207      	movs	r2, #7
 8002ddc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002dde:	4b08      	ldr	r3, [pc, #32]	@ (8002e00 <MX_SPI3_Init+0x74>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002de4:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <MX_SPI3_Init+0x74>)
 8002de6:	2208      	movs	r2, #8
 8002de8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002dea:	4805      	ldr	r0, [pc, #20]	@ (8002e00 <MX_SPI3_Init+0x74>)
 8002dec:	f005 fea0 	bl	8008b30 <HAL_SPI_Init>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002df6:	f000 f9d3 	bl	80031a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000bc8 	.word	0x20000bc8
 8002e04:	40003c00 	.word	0x40003c00

08002e08 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002e0c:	4b14      	ldr	r3, [pc, #80]	@ (8002e60 <MX_UART4_Init+0x58>)
 8002e0e:	4a15      	ldr	r2, [pc, #84]	@ (8002e64 <MX_UART4_Init+0x5c>)
 8002e10:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002e12:	4b13      	ldr	r3, [pc, #76]	@ (8002e60 <MX_UART4_Init+0x58>)
 8002e14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e18:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002e1a:	4b11      	ldr	r3, [pc, #68]	@ (8002e60 <MX_UART4_Init+0x58>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002e20:	4b0f      	ldr	r3, [pc, #60]	@ (8002e60 <MX_UART4_Init+0x58>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002e26:	4b0e      	ldr	r3, [pc, #56]	@ (8002e60 <MX_UART4_Init+0x58>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e60 <MX_UART4_Init+0x58>)
 8002e2e:	220c      	movs	r2, #12
 8002e30:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e32:	4b0b      	ldr	r3, [pc, #44]	@ (8002e60 <MX_UART4_Init+0x58>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e38:	4b09      	ldr	r3, [pc, #36]	@ (8002e60 <MX_UART4_Init+0x58>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e3e:	4b08      	ldr	r3, [pc, #32]	@ (8002e60 <MX_UART4_Init+0x58>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e44:	4b06      	ldr	r3, [pc, #24]	@ (8002e60 <MX_UART4_Init+0x58>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002e4a:	4805      	ldr	r0, [pc, #20]	@ (8002e60 <MX_UART4_Init+0x58>)
 8002e4c:	f006 fd9c 	bl	8009988 <HAL_UART_Init>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002e56:	f000 f9a3 	bl	80031a0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000c2c 	.word	0x20000c2c
 8002e64:	40004c00 	.word	0x40004c00

08002e68 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002e6c:	4b14      	ldr	r3, [pc, #80]	@ (8002ec0 <MX_UART5_Init+0x58>)
 8002e6e:	4a15      	ldr	r2, [pc, #84]	@ (8002ec4 <MX_UART5_Init+0x5c>)
 8002e70:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002e72:	4b13      	ldr	r3, [pc, #76]	@ (8002ec0 <MX_UART5_Init+0x58>)
 8002e74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e78:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002e7a:	4b11      	ldr	r3, [pc, #68]	@ (8002ec0 <MX_UART5_Init+0x58>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002e80:	4b0f      	ldr	r3, [pc, #60]	@ (8002ec0 <MX_UART5_Init+0x58>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002e86:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec0 <MX_UART5_Init+0x58>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec0 <MX_UART5_Init+0x58>)
 8002e8e:	220c      	movs	r2, #12
 8002e90:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e92:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <MX_UART5_Init+0x58>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e98:	4b09      	ldr	r3, [pc, #36]	@ (8002ec0 <MX_UART5_Init+0x58>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e9e:	4b08      	ldr	r3, [pc, #32]	@ (8002ec0 <MX_UART5_Init+0x58>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ea4:	4b06      	ldr	r3, [pc, #24]	@ (8002ec0 <MX_UART5_Init+0x58>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002eaa:	4805      	ldr	r0, [pc, #20]	@ (8002ec0 <MX_UART5_Init+0x58>)
 8002eac:	f006 fd6c 	bl	8009988 <HAL_UART_Init>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002eb6:	f000 f973 	bl	80031a0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000cb4 	.word	0x20000cb4
 8002ec4:	40005000 	.word	0x40005000

08002ec8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ecc:	4b14      	ldr	r3, [pc, #80]	@ (8002f20 <MX_USART1_UART_Init+0x58>)
 8002ece:	4a15      	ldr	r2, [pc, #84]	@ (8002f24 <MX_USART1_UART_Init+0x5c>)
 8002ed0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ed2:	4b13      	ldr	r3, [pc, #76]	@ (8002f20 <MX_USART1_UART_Init+0x58>)
 8002ed4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ed8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002eda:	4b11      	ldr	r3, [pc, #68]	@ (8002f20 <MX_USART1_UART_Init+0x58>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8002f20 <MX_USART1_UART_Init+0x58>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8002f20 <MX_USART1_UART_Init+0x58>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002eec:	4b0c      	ldr	r3, [pc, #48]	@ (8002f20 <MX_USART1_UART_Init+0x58>)
 8002eee:	220c      	movs	r2, #12
 8002ef0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8002f20 <MX_USART1_UART_Init+0x58>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef8:	4b09      	ldr	r3, [pc, #36]	@ (8002f20 <MX_USART1_UART_Init+0x58>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002efe:	4b08      	ldr	r3, [pc, #32]	@ (8002f20 <MX_USART1_UART_Init+0x58>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f04:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <MX_USART1_UART_Init+0x58>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f0a:	4805      	ldr	r0, [pc, #20]	@ (8002f20 <MX_USART1_UART_Init+0x58>)
 8002f0c:	f006 fd3c 	bl	8009988 <HAL_UART_Init>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002f16:	f000 f943 	bl	80031a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000d3c 	.word	0x20000d3c
 8002f24:	40013800 	.word	0x40013800

08002f28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f2c:	4b14      	ldr	r3, [pc, #80]	@ (8002f80 <MX_USART2_UART_Init+0x58>)
 8002f2e:	4a15      	ldr	r2, [pc, #84]	@ (8002f84 <MX_USART2_UART_Init+0x5c>)
 8002f30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f32:	4b13      	ldr	r3, [pc, #76]	@ (8002f80 <MX_USART2_UART_Init+0x58>)
 8002f34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f3a:	4b11      	ldr	r3, [pc, #68]	@ (8002f80 <MX_USART2_UART_Init+0x58>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f40:	4b0f      	ldr	r3, [pc, #60]	@ (8002f80 <MX_USART2_UART_Init+0x58>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f46:	4b0e      	ldr	r3, [pc, #56]	@ (8002f80 <MX_USART2_UART_Init+0x58>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f80 <MX_USART2_UART_Init+0x58>)
 8002f4e:	220c      	movs	r2, #12
 8002f50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f52:	4b0b      	ldr	r3, [pc, #44]	@ (8002f80 <MX_USART2_UART_Init+0x58>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f58:	4b09      	ldr	r3, [pc, #36]	@ (8002f80 <MX_USART2_UART_Init+0x58>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f5e:	4b08      	ldr	r3, [pc, #32]	@ (8002f80 <MX_USART2_UART_Init+0x58>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f64:	4b06      	ldr	r3, [pc, #24]	@ (8002f80 <MX_USART2_UART_Init+0x58>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f6a:	4805      	ldr	r0, [pc, #20]	@ (8002f80 <MX_USART2_UART_Init+0x58>)
 8002f6c:	f006 fd0c 	bl	8009988 <HAL_UART_Init>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002f76:	f000 f913 	bl	80031a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000dc4 	.word	0x20000dc4
 8002f84:	40004400 	.word	0x40004400

08002f88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f8c:	4b14      	ldr	r3, [pc, #80]	@ (8002fe0 <MX_USART3_UART_Init+0x58>)
 8002f8e:	4a15      	ldr	r2, [pc, #84]	@ (8002fe4 <MX_USART3_UART_Init+0x5c>)
 8002f90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002f92:	4b13      	ldr	r3, [pc, #76]	@ (8002fe0 <MX_USART3_UART_Init+0x58>)
 8002f94:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002f98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f9a:	4b11      	ldr	r3, [pc, #68]	@ (8002fe0 <MX_USART3_UART_Init+0x58>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe0 <MX_USART3_UART_Init+0x58>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe0 <MX_USART3_UART_Init+0x58>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002fac:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe0 <MX_USART3_UART_Init+0x58>)
 8002fae:	220c      	movs	r2, #12
 8002fb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe0 <MX_USART3_UART_Init+0x58>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fb8:	4b09      	ldr	r3, [pc, #36]	@ (8002fe0 <MX_USART3_UART_Init+0x58>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fbe:	4b08      	ldr	r3, [pc, #32]	@ (8002fe0 <MX_USART3_UART_Init+0x58>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fc4:	4b06      	ldr	r3, [pc, #24]	@ (8002fe0 <MX_USART3_UART_Init+0x58>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002fca:	4805      	ldr	r0, [pc, #20]	@ (8002fe0 <MX_USART3_UART_Init+0x58>)
 8002fcc:	f006 fcdc 	bl	8009988 <HAL_UART_Init>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002fd6:	f000 f8e3 	bl	80031a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000e4c 	.word	0x20000e4c
 8002fe4:	40004800 	.word	0x40004800

08002fe8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002fec:	4b14      	ldr	r3, [pc, #80]	@ (8003040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002ff2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002ff4:	4b12      	ldr	r3, [pc, #72]	@ (8003040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ff6:	2206      	movs	r2, #6
 8002ff8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002ffa:	4b11      	ldr	r3, [pc, #68]	@ (8003040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003000:	4b0f      	ldr	r3, [pc, #60]	@ (8003040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003002:	2202      	movs	r2, #2
 8003004:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003006:	4b0e      	ldr	r3, [pc, #56]	@ (8003040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003008:	2200      	movs	r2, #0
 800300a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800300c:	4b0c      	ldr	r3, [pc, #48]	@ (8003040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800300e:	2200      	movs	r2, #0
 8003010:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003012:	4b0b      	ldr	r3, [pc, #44]	@ (8003040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003014:	2200      	movs	r2, #0
 8003016:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8003018:	4b09      	ldr	r3, [pc, #36]	@ (8003040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800301a:	2200      	movs	r2, #0
 800301c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800301e:	4b08      	ldr	r3, [pc, #32]	@ (8003040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003020:	2200      	movs	r2, #0
 8003022:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003024:	4b06      	ldr	r3, [pc, #24]	@ (8003040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003026:	2200      	movs	r2, #0
 8003028:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800302a:	4805      	ldr	r0, [pc, #20]	@ (8003040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800302c:	f004 f91d 	bl	800726a <HAL_PCD_Init>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003036:	f000 f8b3 	bl	80031a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000ed4 	.word	0x20000ed4

08003044 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800304a:	4b0c      	ldr	r3, [pc, #48]	@ (800307c <MX_DMA_Init+0x38>)
 800304c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800304e:	4a0b      	ldr	r2, [pc, #44]	@ (800307c <MX_DMA_Init+0x38>)
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	6493      	str	r3, [r2, #72]	@ 0x48
 8003056:	4b09      	ldr	r3, [pc, #36]	@ (800307c <MX_DMA_Init+0x38>)
 8003058:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	607b      	str	r3, [r7, #4]
 8003060:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003062:	2200      	movs	r2, #0
 8003064:	2100      	movs	r1, #0
 8003066:	200b      	movs	r0, #11
 8003068:	f002 fb77 	bl	800575a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800306c:	200b      	movs	r0, #11
 800306e:	f002 fb90 	bl	8005792 <HAL_NVIC_EnableIRQ>

}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000

08003080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08a      	sub	sp, #40	@ 0x28
 8003084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003086:	f107 0314 	add.w	r3, r7, #20
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	605a      	str	r2, [r3, #4]
 8003090:	609a      	str	r2, [r3, #8]
 8003092:	60da      	str	r2, [r3, #12]
 8003094:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003096:	4b3f      	ldr	r3, [pc, #252]	@ (8003194 <MX_GPIO_Init+0x114>)
 8003098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800309a:	4a3e      	ldr	r2, [pc, #248]	@ (8003194 <MX_GPIO_Init+0x114>)
 800309c:	f043 0304 	orr.w	r3, r3, #4
 80030a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030a2:	4b3c      	ldr	r3, [pc, #240]	@ (8003194 <MX_GPIO_Init+0x114>)
 80030a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ae:	4b39      	ldr	r3, [pc, #228]	@ (8003194 <MX_GPIO_Init+0x114>)
 80030b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030b2:	4a38      	ldr	r2, [pc, #224]	@ (8003194 <MX_GPIO_Init+0x114>)
 80030b4:	f043 0301 	orr.w	r3, r3, #1
 80030b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030ba:	4b36      	ldr	r3, [pc, #216]	@ (8003194 <MX_GPIO_Init+0x114>)
 80030bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030c6:	4b33      	ldr	r3, [pc, #204]	@ (8003194 <MX_GPIO_Init+0x114>)
 80030c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ca:	4a32      	ldr	r2, [pc, #200]	@ (8003194 <MX_GPIO_Init+0x114>)
 80030cc:	f043 0302 	orr.w	r3, r3, #2
 80030d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030d2:	4b30      	ldr	r3, [pc, #192]	@ (8003194 <MX_GPIO_Init+0x114>)
 80030d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030de:	4b2d      	ldr	r3, [pc, #180]	@ (8003194 <MX_GPIO_Init+0x114>)
 80030e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030e2:	4a2c      	ldr	r2, [pc, #176]	@ (8003194 <MX_GPIO_Init+0x114>)
 80030e4:	f043 0308 	orr.w	r3, r3, #8
 80030e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003194 <MX_GPIO_Init+0x114>)
 80030ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	607b      	str	r3, [r7, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80030f6:	2200      	movs	r2, #0
 80030f8:	2110      	movs	r1, #16
 80030fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030fe:	f002 fef3 	bl	8005ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8003102:	2201      	movs	r2, #1
 8003104:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003108:	4823      	ldr	r0, [pc, #140]	@ (8003198 <MX_GPIO_Init+0x118>)
 800310a:	f002 feed 	bl	8005ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_OK_Pin|LED_ERROR_Pin, GPIO_PIN_RESET);
 800310e:	2200      	movs	r2, #0
 8003110:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8003114:	4821      	ldr	r0, [pc, #132]	@ (800319c <MX_GPIO_Init+0x11c>)
 8003116:	f002 fee7 	bl	8005ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800311a:	2310      	movs	r3, #16
 800311c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800311e:	2301      	movs	r3, #1
 8003120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003122:	2300      	movs	r3, #0
 8003124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003126:	2300      	movs	r3, #0
 8003128:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800312a:	f107 0314 	add.w	r3, r7, #20
 800312e:	4619      	mov	r1, r3
 8003130:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003134:	f002 fd2e 	bl	8005b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8003138:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800313c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800313e:	2301      	movs	r3, #1
 8003140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003142:	2301      	movs	r3, #1
 8003144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003146:	2300      	movs	r3, #0
 8003148:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800314a:	f107 0314 	add.w	r3, r7, #20
 800314e:	4619      	mov	r1, r3
 8003150:	4811      	ldr	r0, [pc, #68]	@ (8003198 <MX_GPIO_Init+0x118>)
 8003152:	f002 fd1f 	bl	8005b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_CARD_DETECT_Pin;
 8003156:	2340      	movs	r3, #64	@ 0x40
 8003158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800315a:	2300      	movs	r3, #0
 800315c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8003162:	f107 0314 	add.w	r3, r7, #20
 8003166:	4619      	mov	r1, r3
 8003168:	480c      	ldr	r0, [pc, #48]	@ (800319c <MX_GPIO_Init+0x11c>)
 800316a:	f002 fd13 	bl	8005b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_OK_Pin LED_ERROR_Pin */
  GPIO_InitStruct.Pin = LED_OK_Pin|LED_ERROR_Pin;
 800316e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003174:	2301      	movs	r3, #1
 8003176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003178:	2300      	movs	r3, #0
 800317a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317c:	2300      	movs	r3, #0
 800317e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003180:	f107 0314 	add.w	r3, r7, #20
 8003184:	4619      	mov	r1, r3
 8003186:	4805      	ldr	r0, [pc, #20]	@ (800319c <MX_GPIO_Init+0x11c>)
 8003188:	f002 fd04 	bl	8005b94 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800318c:	bf00      	nop
 800318e:	3728      	adds	r7, #40	@ 0x28
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40021000 	.word	0x40021000
 8003198:	48000400 	.word	0x48000400
 800319c:	48000800 	.word	0x48000800

080031a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031a4:	b672      	cpsid	i
}
 80031a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031a8:	bf00      	nop
 80031aa:	e7fd      	b.n	80031a8 <Error_Handler+0x8>

080031ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b2:	4b0f      	ldr	r3, [pc, #60]	@ (80031f0 <HAL_MspInit+0x44>)
 80031b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b6:	4a0e      	ldr	r2, [pc, #56]	@ (80031f0 <HAL_MspInit+0x44>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80031be:	4b0c      	ldr	r3, [pc, #48]	@ (80031f0 <HAL_MspInit+0x44>)
 80031c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	607b      	str	r3, [r7, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ca:	4b09      	ldr	r3, [pc, #36]	@ (80031f0 <HAL_MspInit+0x44>)
 80031cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ce:	4a08      	ldr	r2, [pc, #32]	@ (80031f0 <HAL_MspInit+0x44>)
 80031d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80031d6:	4b06      	ldr	r3, [pc, #24]	@ (80031f0 <HAL_MspInit+0x44>)
 80031d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40021000 	.word	0x40021000

080031f4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08a      	sub	sp, #40	@ 0x28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031fc:	f107 0314 	add.w	r3, r7, #20
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	60da      	str	r2, [r3, #12]
 800320a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a2a      	ldr	r2, [pc, #168]	@ (80032bc <HAL_ADC_MspInit+0xc8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d14e      	bne.n	80032b4 <HAL_ADC_MspInit+0xc0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003216:	4b2a      	ldr	r3, [pc, #168]	@ (80032c0 <HAL_ADC_MspInit+0xcc>)
 8003218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800321a:	4a29      	ldr	r2, [pc, #164]	@ (80032c0 <HAL_ADC_MspInit+0xcc>)
 800321c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003220:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003222:	4b27      	ldr	r3, [pc, #156]	@ (80032c0 <HAL_ADC_MspInit+0xcc>)
 8003224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003226:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800322e:	4b24      	ldr	r3, [pc, #144]	@ (80032c0 <HAL_ADC_MspInit+0xcc>)
 8003230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003232:	4a23      	ldr	r2, [pc, #140]	@ (80032c0 <HAL_ADC_MspInit+0xcc>)
 8003234:	f043 0304 	orr.w	r3, r3, #4
 8003238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800323a:	4b21      	ldr	r3, [pc, #132]	@ (80032c0 <HAL_ADC_MspInit+0xcc>)
 800323c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003246:	2304      	movs	r3, #4
 8003248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800324a:	230b      	movs	r3, #11
 800324c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003252:	f107 0314 	add.w	r3, r7, #20
 8003256:	4619      	mov	r1, r3
 8003258:	481a      	ldr	r0, [pc, #104]	@ (80032c4 <HAL_ADC_MspInit+0xd0>)
 800325a:	f002 fc9b 	bl	8005b94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800325e:	4b1a      	ldr	r3, [pc, #104]	@ (80032c8 <HAL_ADC_MspInit+0xd4>)
 8003260:	4a1a      	ldr	r2, [pc, #104]	@ (80032cc <HAL_ADC_MspInit+0xd8>)
 8003262:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003264:	4b18      	ldr	r3, [pc, #96]	@ (80032c8 <HAL_ADC_MspInit+0xd4>)
 8003266:	2200      	movs	r2, #0
 8003268:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800326a:	4b17      	ldr	r3, [pc, #92]	@ (80032c8 <HAL_ADC_MspInit+0xd4>)
 800326c:	2200      	movs	r2, #0
 800326e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003270:	4b15      	ldr	r3, [pc, #84]	@ (80032c8 <HAL_ADC_MspInit+0xd4>)
 8003272:	2200      	movs	r2, #0
 8003274:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003276:	4b14      	ldr	r3, [pc, #80]	@ (80032c8 <HAL_ADC_MspInit+0xd4>)
 8003278:	2280      	movs	r2, #128	@ 0x80
 800327a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800327c:	4b12      	ldr	r3, [pc, #72]	@ (80032c8 <HAL_ADC_MspInit+0xd4>)
 800327e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003282:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003284:	4b10      	ldr	r3, [pc, #64]	@ (80032c8 <HAL_ADC_MspInit+0xd4>)
 8003286:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800328a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800328c:	4b0e      	ldr	r3, [pc, #56]	@ (80032c8 <HAL_ADC_MspInit+0xd4>)
 800328e:	2200      	movs	r2, #0
 8003290:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003292:	4b0d      	ldr	r3, [pc, #52]	@ (80032c8 <HAL_ADC_MspInit+0xd4>)
 8003294:	2200      	movs	r2, #0
 8003296:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003298:	480b      	ldr	r0, [pc, #44]	@ (80032c8 <HAL_ADC_MspInit+0xd4>)
 800329a:	f002 fa95 	bl	80057c8 <HAL_DMA_Init>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 80032a4:	f7ff ff7c 	bl	80031a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a07      	ldr	r2, [pc, #28]	@ (80032c8 <HAL_ADC_MspInit+0xd4>)
 80032ac:	64da      	str	r2, [r3, #76]	@ 0x4c
 80032ae:	4a06      	ldr	r2, [pc, #24]	@ (80032c8 <HAL_ADC_MspInit+0xd4>)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80032b4:	bf00      	nop
 80032b6:	3728      	adds	r7, #40	@ 0x28
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	50040000 	.word	0x50040000
 80032c0:	40021000 	.word	0x40021000
 80032c4:	48000800 	.word	0x48000800
 80032c8:	200009bc 	.word	0x200009bc
 80032cc:	40020008 	.word	0x40020008

080032d0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b0b0      	sub	sp, #192	@ 0xc0
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	60da      	str	r2, [r3, #12]
 80032e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032ec:	2288      	movs	r2, #136	@ 0x88
 80032ee:	2100      	movs	r1, #0
 80032f0:	4618      	mov	r0, r3
 80032f2:	f00c fd4f 	bl	800fd94 <memset>
  if(hi2c->Instance==I2C1)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a63      	ldr	r2, [pc, #396]	@ (8003488 <HAL_I2C_MspInit+0x1b8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d13b      	bne.n	8003378 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003300:	2340      	movs	r3, #64	@ 0x40
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003304:	2300      	movs	r3, #0
 8003306:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003308:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800330c:	4618      	mov	r0, r3
 800330e:	f004 ff53 	bl	80081b8 <HAL_RCCEx_PeriphCLKConfig>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003318:	f7ff ff42 	bl	80031a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800331c:	4b5b      	ldr	r3, [pc, #364]	@ (800348c <HAL_I2C_MspInit+0x1bc>)
 800331e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003320:	4a5a      	ldr	r2, [pc, #360]	@ (800348c <HAL_I2C_MspInit+0x1bc>)
 8003322:	f043 0302 	orr.w	r3, r3, #2
 8003326:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003328:	4b58      	ldr	r3, [pc, #352]	@ (800348c <HAL_I2C_MspInit+0x1bc>)
 800332a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	623b      	str	r3, [r7, #32]
 8003332:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003334:	23c0      	movs	r3, #192	@ 0xc0
 8003336:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800333a:	2312      	movs	r3, #18
 800333c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003340:	2300      	movs	r3, #0
 8003342:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003346:	2303      	movs	r3, #3
 8003348:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800334c:	2304      	movs	r3, #4
 800334e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003352:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003356:	4619      	mov	r1, r3
 8003358:	484d      	ldr	r0, [pc, #308]	@ (8003490 <HAL_I2C_MspInit+0x1c0>)
 800335a:	f002 fc1b 	bl	8005b94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800335e:	4b4b      	ldr	r3, [pc, #300]	@ (800348c <HAL_I2C_MspInit+0x1bc>)
 8003360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003362:	4a4a      	ldr	r2, [pc, #296]	@ (800348c <HAL_I2C_MspInit+0x1bc>)
 8003364:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003368:	6593      	str	r3, [r2, #88]	@ 0x58
 800336a:	4b48      	ldr	r3, [pc, #288]	@ (800348c <HAL_I2C_MspInit+0x1bc>)
 800336c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800336e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003372:	61fb      	str	r3, [r7, #28]
 8003374:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003376:	e082      	b.n	800347e <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C2)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a45      	ldr	r2, [pc, #276]	@ (8003494 <HAL_I2C_MspInit+0x1c4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d13c      	bne.n	80033fc <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003382:	2380      	movs	r3, #128	@ 0x80
 8003384:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003386:	2300      	movs	r3, #0
 8003388:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800338a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800338e:	4618      	mov	r0, r3
 8003390:	f004 ff12 	bl	80081b8 <HAL_RCCEx_PeriphCLKConfig>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_I2C_MspInit+0xce>
      Error_Handler();
 800339a:	f7ff ff01 	bl	80031a0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800339e:	4b3b      	ldr	r3, [pc, #236]	@ (800348c <HAL_I2C_MspInit+0x1bc>)
 80033a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033a2:	4a3a      	ldr	r2, [pc, #232]	@ (800348c <HAL_I2C_MspInit+0x1bc>)
 80033a4:	f043 0302 	orr.w	r3, r3, #2
 80033a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033aa:	4b38      	ldr	r3, [pc, #224]	@ (800348c <HAL_I2C_MspInit+0x1bc>)
 80033ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	61bb      	str	r3, [r7, #24]
 80033b4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80033b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80033ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033be:	2312      	movs	r3, #18
 80033c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ca:	2303      	movs	r3, #3
 80033cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80033d0:	2304      	movs	r3, #4
 80033d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80033da:	4619      	mov	r1, r3
 80033dc:	482c      	ldr	r0, [pc, #176]	@ (8003490 <HAL_I2C_MspInit+0x1c0>)
 80033de:	f002 fbd9 	bl	8005b94 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80033e2:	4b2a      	ldr	r3, [pc, #168]	@ (800348c <HAL_I2C_MspInit+0x1bc>)
 80033e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e6:	4a29      	ldr	r2, [pc, #164]	@ (800348c <HAL_I2C_MspInit+0x1bc>)
 80033e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80033ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80033ee:	4b27      	ldr	r3, [pc, #156]	@ (800348c <HAL_I2C_MspInit+0x1bc>)
 80033f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	697b      	ldr	r3, [r7, #20]
}
 80033fa:	e040      	b.n	800347e <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C3)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a25      	ldr	r2, [pc, #148]	@ (8003498 <HAL_I2C_MspInit+0x1c8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d13b      	bne.n	800347e <HAL_I2C_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003406:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800340a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800340c:	2300      	movs	r3, #0
 800340e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003410:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003414:	4618      	mov	r0, r3
 8003416:	f004 fecf 	bl	80081b8 <HAL_RCCEx_PeriphCLKConfig>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <HAL_I2C_MspInit+0x154>
      Error_Handler();
 8003420:	f7ff febe 	bl	80031a0 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003424:	4b19      	ldr	r3, [pc, #100]	@ (800348c <HAL_I2C_MspInit+0x1bc>)
 8003426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003428:	4a18      	ldr	r2, [pc, #96]	@ (800348c <HAL_I2C_MspInit+0x1bc>)
 800342a:	f043 0304 	orr.w	r3, r3, #4
 800342e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003430:	4b16      	ldr	r3, [pc, #88]	@ (800348c <HAL_I2C_MspInit+0x1bc>)
 8003432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800343c:	2303      	movs	r3, #3
 800343e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003442:	2312      	movs	r3, #18
 8003444:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003448:	2300      	movs	r3, #0
 800344a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800344e:	2303      	movs	r3, #3
 8003450:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003454:	2304      	movs	r3, #4
 8003456:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800345a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800345e:	4619      	mov	r1, r3
 8003460:	480e      	ldr	r0, [pc, #56]	@ (800349c <HAL_I2C_MspInit+0x1cc>)
 8003462:	f002 fb97 	bl	8005b94 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003466:	4b09      	ldr	r3, [pc, #36]	@ (800348c <HAL_I2C_MspInit+0x1bc>)
 8003468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346a:	4a08      	ldr	r2, [pc, #32]	@ (800348c <HAL_I2C_MspInit+0x1bc>)
 800346c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003470:	6593      	str	r3, [r2, #88]	@ 0x58
 8003472:	4b06      	ldr	r3, [pc, #24]	@ (800348c <HAL_I2C_MspInit+0x1bc>)
 8003474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003476:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
}
 800347e:	bf00      	nop
 8003480:	37c0      	adds	r7, #192	@ 0xc0
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40005400 	.word	0x40005400
 800348c:	40021000 	.word	0x40021000
 8003490:	48000400 	.word	0x48000400
 8003494:	40005800 	.word	0x40005800
 8003498:	40005c00 	.word	0x40005c00
 800349c:	48000800 	.word	0x48000800

080034a0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b090      	sub	sp, #64	@ 0x40
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	605a      	str	r2, [r3, #4]
 80034b2:	609a      	str	r2, [r3, #8]
 80034b4:	60da      	str	r2, [r3, #12]
 80034b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a63      	ldr	r2, [pc, #396]	@ (800364c <HAL_SPI_MspInit+0x1ac>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d129      	bne.n	8003516 <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034c2:	4b63      	ldr	r3, [pc, #396]	@ (8003650 <HAL_SPI_MspInit+0x1b0>)
 80034c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034c6:	4a62      	ldr	r2, [pc, #392]	@ (8003650 <HAL_SPI_MspInit+0x1b0>)
 80034c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80034cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80034ce:	4b60      	ldr	r3, [pc, #384]	@ (8003650 <HAL_SPI_MspInit+0x1b0>)
 80034d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034da:	4b5d      	ldr	r3, [pc, #372]	@ (8003650 <HAL_SPI_MspInit+0x1b0>)
 80034dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034de:	4a5c      	ldr	r2, [pc, #368]	@ (8003650 <HAL_SPI_MspInit+0x1b0>)
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034e6:	4b5a      	ldr	r3, [pc, #360]	@ (8003650 <HAL_SPI_MspInit+0x1b0>)
 80034e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80034f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80034f2:	23e0      	movs	r3, #224	@ 0xe0
 80034f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f6:	2302      	movs	r3, #2
 80034f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034fe:	2303      	movs	r3, #3
 8003500:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003502:	2305      	movs	r3, #5
 8003504:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003506:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800350a:	4619      	mov	r1, r3
 800350c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003510:	f002 fb40 	bl	8005b94 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003514:	e096      	b.n	8003644 <HAL_SPI_MspInit+0x1a4>
  else if(hspi->Instance==SPI2)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a4e      	ldr	r2, [pc, #312]	@ (8003654 <HAL_SPI_MspInit+0x1b4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d129      	bne.n	8003574 <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003520:	4b4b      	ldr	r3, [pc, #300]	@ (8003650 <HAL_SPI_MspInit+0x1b0>)
 8003522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003524:	4a4a      	ldr	r2, [pc, #296]	@ (8003650 <HAL_SPI_MspInit+0x1b0>)
 8003526:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800352a:	6593      	str	r3, [r2, #88]	@ 0x58
 800352c:	4b48      	ldr	r3, [pc, #288]	@ (8003650 <HAL_SPI_MspInit+0x1b0>)
 800352e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003530:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003534:	623b      	str	r3, [r7, #32]
 8003536:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003538:	4b45      	ldr	r3, [pc, #276]	@ (8003650 <HAL_SPI_MspInit+0x1b0>)
 800353a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800353c:	4a44      	ldr	r2, [pc, #272]	@ (8003650 <HAL_SPI_MspInit+0x1b0>)
 800353e:	f043 0302 	orr.w	r3, r3, #2
 8003542:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003544:	4b42      	ldr	r3, [pc, #264]	@ (8003650 <HAL_SPI_MspInit+0x1b0>)
 8003546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	61fb      	str	r3, [r7, #28]
 800354e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003550:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003554:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003556:	2302      	movs	r3, #2
 8003558:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800355a:	2301      	movs	r3, #1
 800355c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800355e:	2303      	movs	r3, #3
 8003560:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003562:	2305      	movs	r3, #5
 8003564:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003566:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800356a:	4619      	mov	r1, r3
 800356c:	483a      	ldr	r0, [pc, #232]	@ (8003658 <HAL_SPI_MspInit+0x1b8>)
 800356e:	f002 fb11 	bl	8005b94 <HAL_GPIO_Init>
}
 8003572:	e067      	b.n	8003644 <HAL_SPI_MspInit+0x1a4>
  else if(hspi->Instance==SPI3)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a38      	ldr	r2, [pc, #224]	@ (800365c <HAL_SPI_MspInit+0x1bc>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d162      	bne.n	8003644 <HAL_SPI_MspInit+0x1a4>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800357e:	4b34      	ldr	r3, [pc, #208]	@ (8003650 <HAL_SPI_MspInit+0x1b0>)
 8003580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003582:	4a33      	ldr	r2, [pc, #204]	@ (8003650 <HAL_SPI_MspInit+0x1b0>)
 8003584:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003588:	6593      	str	r3, [r2, #88]	@ 0x58
 800358a:	4b31      	ldr	r3, [pc, #196]	@ (8003650 <HAL_SPI_MspInit+0x1b0>)
 800358c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003592:	61bb      	str	r3, [r7, #24]
 8003594:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003596:	4b2e      	ldr	r3, [pc, #184]	@ (8003650 <HAL_SPI_MspInit+0x1b0>)
 8003598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800359a:	4a2d      	ldr	r2, [pc, #180]	@ (8003650 <HAL_SPI_MspInit+0x1b0>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003650 <HAL_SPI_MspInit+0x1b0>)
 80035a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035ae:	4b28      	ldr	r3, [pc, #160]	@ (8003650 <HAL_SPI_MspInit+0x1b0>)
 80035b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035b2:	4a27      	ldr	r2, [pc, #156]	@ (8003650 <HAL_SPI_MspInit+0x1b0>)
 80035b4:	f043 0304 	orr.w	r3, r3, #4
 80035b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035ba:	4b25      	ldr	r3, [pc, #148]	@ (8003650 <HAL_SPI_MspInit+0x1b0>)
 80035bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035c6:	4b22      	ldr	r3, [pc, #136]	@ (8003650 <HAL_SPI_MspInit+0x1b0>)
 80035c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ca:	4a21      	ldr	r2, [pc, #132]	@ (8003650 <HAL_SPI_MspInit+0x1b0>)
 80035cc:	f043 0302 	orr.w	r3, r3, #2
 80035d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003650 <HAL_SPI_MspInit+0x1b0>)
 80035d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80035de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e4:	2302      	movs	r3, #2
 80035e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ec:	2303      	movs	r3, #3
 80035ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80035f0:	2306      	movs	r3, #6
 80035f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035f8:	4619      	mov	r1, r3
 80035fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035fe:	f002 fac9 	bl	8005b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003602:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003606:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003608:	2302      	movs	r3, #2
 800360a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360c:	2300      	movs	r3, #0
 800360e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003610:	2303      	movs	r3, #3
 8003612:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003614:	2306      	movs	r3, #6
 8003616:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003618:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800361c:	4619      	mov	r1, r3
 800361e:	4810      	ldr	r0, [pc, #64]	@ (8003660 <HAL_SPI_MspInit+0x1c0>)
 8003620:	f002 fab8 	bl	8005b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003624:	2320      	movs	r3, #32
 8003626:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003628:	2302      	movs	r3, #2
 800362a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362c:	2300      	movs	r3, #0
 800362e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003630:	2303      	movs	r3, #3
 8003632:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003634:	2306      	movs	r3, #6
 8003636:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003638:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800363c:	4619      	mov	r1, r3
 800363e:	4806      	ldr	r0, [pc, #24]	@ (8003658 <HAL_SPI_MspInit+0x1b8>)
 8003640:	f002 faa8 	bl	8005b94 <HAL_GPIO_Init>
}
 8003644:	bf00      	nop
 8003646:	3740      	adds	r7, #64	@ 0x40
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40013000 	.word	0x40013000
 8003650:	40021000 	.word	0x40021000
 8003654:	40003800 	.word	0x40003800
 8003658:	48000400 	.word	0x48000400
 800365c:	40003c00 	.word	0x40003c00
 8003660:	48000800 	.word	0x48000800

08003664 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b0b4      	sub	sp, #208	@ 0xd0
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800366c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	60da      	str	r2, [r3, #12]
 800367a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800367c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003680:	2288      	movs	r2, #136	@ 0x88
 8003682:	2100      	movs	r1, #0
 8003684:	4618      	mov	r0, r3
 8003686:	f00c fb85 	bl	800fd94 <memset>
  if(huart->Instance==UART4)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a94      	ldr	r2, [pc, #592]	@ (80038e0 <HAL_UART_MspInit+0x27c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d13c      	bne.n	800370e <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003694:	2308      	movs	r3, #8
 8003696:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003698:	2300      	movs	r3, #0
 800369a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800369c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80036a0:	4618      	mov	r0, r3
 80036a2:	f004 fd89 	bl	80081b8 <HAL_RCCEx_PeriphCLKConfig>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80036ac:	f7ff fd78 	bl	80031a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80036b0:	4b8c      	ldr	r3, [pc, #560]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 80036b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b4:	4a8b      	ldr	r2, [pc, #556]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 80036b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80036ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80036bc:	4b89      	ldr	r3, [pc, #548]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 80036be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80036c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c8:	4b86      	ldr	r3, [pc, #536]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 80036ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036cc:	4a85      	ldr	r2, [pc, #532]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 80036ce:	f043 0301 	orr.w	r3, r3, #1
 80036d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036d4:	4b83      	ldr	r3, [pc, #524]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 80036d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80036e0:	2303      	movs	r3, #3
 80036e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e6:	2302      	movs	r3, #2
 80036e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036f2:	2303      	movs	r3, #3
 80036f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80036f8:	2308      	movs	r3, #8
 80036fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036fe:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003702:	4619      	mov	r1, r3
 8003704:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003708:	f002 fa44 	bl	8005b94 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800370c:	e13e      	b.n	800398c <HAL_UART_MspInit+0x328>
  else if(huart->Instance==UART5)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a75      	ldr	r2, [pc, #468]	@ (80038e8 <HAL_UART_MspInit+0x284>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d15d      	bne.n	80037d4 <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003718:	2310      	movs	r3, #16
 800371a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800371c:	2300      	movs	r3, #0
 800371e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003720:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003724:	4618      	mov	r0, r3
 8003726:	f004 fd47 	bl	80081b8 <HAL_RCCEx_PeriphCLKConfig>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8003730:	f7ff fd36 	bl	80031a0 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003734:	4b6b      	ldr	r3, [pc, #428]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 8003736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003738:	4a6a      	ldr	r2, [pc, #424]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 800373a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800373e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003740:	4b68      	ldr	r3, [pc, #416]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 8003742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003744:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003748:	62bb      	str	r3, [r7, #40]	@ 0x28
 800374a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800374c:	4b65      	ldr	r3, [pc, #404]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 800374e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003750:	4a64      	ldr	r2, [pc, #400]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 8003752:	f043 0304 	orr.w	r3, r3, #4
 8003756:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003758:	4b62      	ldr	r3, [pc, #392]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 800375a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	627b      	str	r3, [r7, #36]	@ 0x24
 8003762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003764:	4b5f      	ldr	r3, [pc, #380]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 8003766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003768:	4a5e      	ldr	r2, [pc, #376]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 800376a:	f043 0308 	orr.w	r3, r3, #8
 800376e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003770:	4b5c      	ldr	r3, [pc, #368]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 8003772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003774:	f003 0308 	and.w	r3, r3, #8
 8003778:	623b      	str	r3, [r7, #32]
 800377a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800377c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003780:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003784:	2302      	movs	r3, #2
 8003786:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378a:	2300      	movs	r3, #0
 800378c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003790:	2303      	movs	r3, #3
 8003792:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003796:	2308      	movs	r3, #8
 8003798:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800379c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80037a0:	4619      	mov	r1, r3
 80037a2:	4852      	ldr	r0, [pc, #328]	@ (80038ec <HAL_UART_MspInit+0x288>)
 80037a4:	f002 f9f6 	bl	8005b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80037a8:	2304      	movs	r3, #4
 80037aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ae:	2302      	movs	r3, #2
 80037b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ba:	2303      	movs	r3, #3
 80037bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80037c0:	2308      	movs	r3, #8
 80037c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037c6:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80037ca:	4619      	mov	r1, r3
 80037cc:	4848      	ldr	r0, [pc, #288]	@ (80038f0 <HAL_UART_MspInit+0x28c>)
 80037ce:	f002 f9e1 	bl	8005b94 <HAL_GPIO_Init>
}
 80037d2:	e0db      	b.n	800398c <HAL_UART_MspInit+0x328>
  else if(huart->Instance==USART1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a46      	ldr	r2, [pc, #280]	@ (80038f4 <HAL_UART_MspInit+0x290>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d13d      	bne.n	800385a <HAL_UART_MspInit+0x1f6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80037de:	2301      	movs	r3, #1
 80037e0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80037e2:	2300      	movs	r3, #0
 80037e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80037ea:	4618      	mov	r0, r3
 80037ec:	f004 fce4 	bl	80081b8 <HAL_RCCEx_PeriphCLKConfig>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_UART_MspInit+0x196>
      Error_Handler();
 80037f6:	f7ff fcd3 	bl	80031a0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80037fa:	4b3a      	ldr	r3, [pc, #232]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 80037fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037fe:	4a39      	ldr	r2, [pc, #228]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 8003800:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003804:	6613      	str	r3, [r2, #96]	@ 0x60
 8003806:	4b37      	ldr	r3, [pc, #220]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 8003808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800380a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800380e:	61fb      	str	r3, [r7, #28]
 8003810:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003812:	4b34      	ldr	r3, [pc, #208]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 8003814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003816:	4a33      	ldr	r2, [pc, #204]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 8003818:	f043 0301 	orr.w	r3, r3, #1
 800381c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800381e:	4b31      	ldr	r3, [pc, #196]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 8003820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800382a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800382e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003832:	2302      	movs	r3, #2
 8003834:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003838:	2300      	movs	r3, #0
 800383a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800383e:	2303      	movs	r3, #3
 8003840:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003844:	2307      	movs	r3, #7
 8003846:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800384a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800384e:	4619      	mov	r1, r3
 8003850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003854:	f002 f99e 	bl	8005b94 <HAL_GPIO_Init>
}
 8003858:	e098      	b.n	800398c <HAL_UART_MspInit+0x328>
  else if(huart->Instance==USART2)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a26      	ldr	r2, [pc, #152]	@ (80038f8 <HAL_UART_MspInit+0x294>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d14b      	bne.n	80038fc <HAL_UART_MspInit+0x298>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003864:	2302      	movs	r3, #2
 8003866:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003868:	2300      	movs	r3, #0
 800386a:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800386c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003870:	4618      	mov	r0, r3
 8003872:	f004 fca1 	bl	80081b8 <HAL_RCCEx_PeriphCLKConfig>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_UART_MspInit+0x21c>
      Error_Handler();
 800387c:	f7ff fc90 	bl	80031a0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003880:	4b18      	ldr	r3, [pc, #96]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 8003882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003884:	4a17      	ldr	r2, [pc, #92]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 8003886:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800388a:	6593      	str	r3, [r2, #88]	@ 0x58
 800388c:	4b15      	ldr	r3, [pc, #84]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 800388e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003894:	617b      	str	r3, [r7, #20]
 8003896:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003898:	4b12      	ldr	r3, [pc, #72]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 800389a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800389c:	4a11      	ldr	r2, [pc, #68]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038a4:	4b0f      	ldr	r3, [pc, #60]	@ (80038e4 <HAL_UART_MspInit+0x280>)
 80038a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80038b0:	230c      	movs	r3, #12
 80038b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b6:	2302      	movs	r3, #2
 80038b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038bc:	2300      	movs	r3, #0
 80038be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c2:	2303      	movs	r3, #3
 80038c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80038c8:	2307      	movs	r3, #7
 80038ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ce:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80038d2:	4619      	mov	r1, r3
 80038d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038d8:	f002 f95c 	bl	8005b94 <HAL_GPIO_Init>
}
 80038dc:	e056      	b.n	800398c <HAL_UART_MspInit+0x328>
 80038de:	bf00      	nop
 80038e0:	40004c00 	.word	0x40004c00
 80038e4:	40021000 	.word	0x40021000
 80038e8:	40005000 	.word	0x40005000
 80038ec:	48000800 	.word	0x48000800
 80038f0:	48000c00 	.word	0x48000c00
 80038f4:	40013800 	.word	0x40013800
 80038f8:	40004400 	.word	0x40004400
  else if(huart->Instance==USART3)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a24      	ldr	r2, [pc, #144]	@ (8003994 <HAL_UART_MspInit+0x330>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d142      	bne.n	800398c <HAL_UART_MspInit+0x328>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003906:	2304      	movs	r3, #4
 8003908:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800390a:	2300      	movs	r3, #0
 800390c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800390e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003912:	4618      	mov	r0, r3
 8003914:	f004 fc50 	bl	80081b8 <HAL_RCCEx_PeriphCLKConfig>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_UART_MspInit+0x2be>
      Error_Handler();
 800391e:	f7ff fc3f 	bl	80031a0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003922:	4b1d      	ldr	r3, [pc, #116]	@ (8003998 <HAL_UART_MspInit+0x334>)
 8003924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003926:	4a1c      	ldr	r2, [pc, #112]	@ (8003998 <HAL_UART_MspInit+0x334>)
 8003928:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800392c:	6593      	str	r3, [r2, #88]	@ 0x58
 800392e:	4b1a      	ldr	r3, [pc, #104]	@ (8003998 <HAL_UART_MspInit+0x334>)
 8003930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003932:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800393a:	4b17      	ldr	r3, [pc, #92]	@ (8003998 <HAL_UART_MspInit+0x334>)
 800393c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800393e:	4a16      	ldr	r2, [pc, #88]	@ (8003998 <HAL_UART_MspInit+0x334>)
 8003940:	f043 0304 	orr.w	r3, r3, #4
 8003944:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003946:	4b14      	ldr	r3, [pc, #80]	@ (8003998 <HAL_UART_MspInit+0x334>)
 8003948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	60bb      	str	r3, [r7, #8]
 8003950:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003952:	2330      	movs	r3, #48	@ 0x30
 8003954:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003958:	2302      	movs	r3, #2
 800395a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395e:	2300      	movs	r3, #0
 8003960:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003964:	2303      	movs	r3, #3
 8003966:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800396a:	2307      	movs	r3, #7
 800396c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003970:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003974:	4619      	mov	r1, r3
 8003976:	4809      	ldr	r0, [pc, #36]	@ (800399c <HAL_UART_MspInit+0x338>)
 8003978:	f002 f90c 	bl	8005b94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 800397c:	2200      	movs	r2, #0
 800397e:	2102      	movs	r1, #2
 8003980:	2027      	movs	r0, #39	@ 0x27
 8003982:	f001 feea 	bl	800575a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003986:	2027      	movs	r0, #39	@ 0x27
 8003988:	f001 ff03 	bl	8005792 <HAL_NVIC_EnableIRQ>
}
 800398c:	bf00      	nop
 800398e:	37d0      	adds	r7, #208	@ 0xd0
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40004800 	.word	0x40004800
 8003998:	40021000 	.word	0x40021000
 800399c:	48000800 	.word	0x48000800

080039a0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b08a      	sub	sp, #40	@ 0x28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a8:	f107 0314 	add.w	r3, r7, #20
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	605a      	str	r2, [r3, #4]
 80039b2:	609a      	str	r2, [r3, #8]
 80039b4:	60da      	str	r2, [r3, #12]
 80039b6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039c0:	d146      	bne.n	8003a50 <HAL_PCD_MspInit+0xb0>
  {
    /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

    /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c2:	4b25      	ldr	r3, [pc, #148]	@ (8003a58 <HAL_PCD_MspInit+0xb8>)
 80039c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039c6:	4a24      	ldr	r2, [pc, #144]	@ (8003a58 <HAL_PCD_MspInit+0xb8>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039ce:	4b22      	ldr	r3, [pc, #136]	@ (8003a58 <HAL_PCD_MspInit+0xb8>)
 80039d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80039da:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80039de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e0:	2302      	movs	r3, #2
 80039e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e4:	2300      	movs	r3, #0
 80039e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e8:	2303      	movs	r3, #3
 80039ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80039ec:	230a      	movs	r3, #10
 80039ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f0:	f107 0314 	add.w	r3, r7, #20
 80039f4:	4619      	mov	r1, r3
 80039f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039fa:	f002 f8cb 	bl	8005b94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80039fe:	4b16      	ldr	r3, [pc, #88]	@ (8003a58 <HAL_PCD_MspInit+0xb8>)
 8003a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a02:	4a15      	ldr	r2, [pc, #84]	@ (8003a58 <HAL_PCD_MspInit+0xb8>)
 8003a04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a0a:	4b13      	ldr	r3, [pc, #76]	@ (8003a58 <HAL_PCD_MspInit+0xb8>)
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a16:	4b10      	ldr	r3, [pc, #64]	@ (8003a58 <HAL_PCD_MspInit+0xb8>)
 8003a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d114      	bne.n	8003a4c <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a22:	4b0d      	ldr	r3, [pc, #52]	@ (8003a58 <HAL_PCD_MspInit+0xb8>)
 8003a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a26:	4a0c      	ldr	r2, [pc, #48]	@ (8003a58 <HAL_PCD_MspInit+0xb8>)
 8003a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a58 <HAL_PCD_MspInit+0xb8>)
 8003a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8003a3a:	f003 fdad 	bl	8007598 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a3e:	4b06      	ldr	r3, [pc, #24]	@ (8003a58 <HAL_PCD_MspInit+0xb8>)
 8003a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a42:	4a05      	ldr	r2, [pc, #20]	@ (8003a58 <HAL_PCD_MspInit+0xb8>)
 8003a44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a48:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8003a4a:	e001      	b.n	8003a50 <HAL_PCD_MspInit+0xb0>
      HAL_PWREx_EnableVddUSB();
 8003a4c:	f003 fda4 	bl	8007598 <HAL_PWREx_EnableVddUSB>
}
 8003a50:	bf00      	nop
 8003a52:	3728      	adds	r7, #40	@ 0x28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40021000 	.word	0x40021000

08003a5c <SDTimer_Handler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SDTimer_Handler(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8003a60:	4b0e      	ldr	r3, [pc, #56]	@ (8003a9c <SDTimer_Handler+0x40>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d006      	beq.n	8003a78 <SDTimer_Handler+0x1c>
    Timer1--;
 8003a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8003a9c <SDTimer_Handler+0x40>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	4b09      	ldr	r3, [pc, #36]	@ (8003a9c <SDTimer_Handler+0x40>)
 8003a76:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8003a78:	4b09      	ldr	r3, [pc, #36]	@ (8003aa0 <SDTimer_Handler+0x44>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d006      	beq.n	8003a90 <SDTimer_Handler+0x34>
    Timer2--;
 8003a82:	4b07      	ldr	r3, [pc, #28]	@ (8003aa0 <SDTimer_Handler+0x44>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	4b04      	ldr	r3, [pc, #16]	@ (8003aa0 <SDTimer_Handler+0x44>)
 8003a8e:	701a      	strb	r2, [r3, #0]
}
 8003a90:	bf00      	nop
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	200013b9 	.word	0x200013b9
 8003aa0:	200013ba 	.word	0x200013ba

08003aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003aa8:	bf00      	nop
 8003aaa:	e7fd      	b.n	8003aa8 <NMI_Handler+0x4>

08003aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ab0:	bf00      	nop
 8003ab2:	e7fd      	b.n	8003ab0 <HardFault_Handler+0x4>

08003ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ab8:	bf00      	nop
 8003aba:	e7fd      	b.n	8003ab8 <MemManage_Handler+0x4>

08003abc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ac0:	bf00      	nop
 8003ac2:	e7fd      	b.n	8003ac0 <BusFault_Handler+0x4>

08003ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ac8:	bf00      	nop
 8003aca:	e7fd      	b.n	8003ac8 <UsageFault_Handler+0x4>

08003acc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ad0:	bf00      	nop
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ada:	b480      	push	{r7}
 8003adc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003aec:	bf00      	nop
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8003afc:	4b0a      	ldr	r3, [pc, #40]	@ (8003b28 <SysTick_Handler+0x30>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	3301      	adds	r3, #1
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	4b08      	ldr	r3, [pc, #32]	@ (8003b28 <SysTick_Handler+0x30>)
 8003b08:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8003b0a:	4b07      	ldr	r3, [pc, #28]	@ (8003b28 <SysTick_Handler+0x30>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b09      	cmp	r3, #9
 8003b12:	d904      	bls.n	8003b1e <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8003b14:	4b04      	ldr	r3, [pc, #16]	@ (8003b28 <SysTick_Handler+0x30>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8003b1a:	f7ff ff9f 	bl	8003a5c <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b1e:	f000 fd59 	bl	80045d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b22:	bf00      	nop
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	200013b8 	.word	0x200013b8

08003b2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b30:	4802      	ldr	r0, [pc, #8]	@ (8003b3c <DMA1_Channel1_IRQHandler+0x10>)
 8003b32:	f001 ff80 	bl	8005a36 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	200009bc 	.word	0x200009bc

08003b40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003b44:	4802      	ldr	r0, [pc, #8]	@ (8003b50 <USART3_IRQHandler+0x10>)
 8003b46:	f006 f843 	bl	8009bd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000e4c 	.word	0x20000e4c

08003b54 <_getpid>:
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	2301      	movs	r3, #1
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <_kill>:
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
 8003b6e:	f00c f919 	bl	800fda4 <__errno>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2216      	movs	r2, #22
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <_exit>:
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff ffe7 	bl	8003b64 <_kill>
 8003b96:	bf00      	nop
 8003b98:	e7fd      	b.n	8003b96 <_exit+0x12>

08003b9a <_read>:
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b086      	sub	sp, #24
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	607a      	str	r2, [r7, #4]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	e00a      	b.n	8003bc2 <_read+0x28>
 8003bac:	f3af 8000 	nop.w
 8003bb0:	4601      	mov	r1, r0
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	60ba      	str	r2, [r7, #8]
 8003bb8:	b2ca      	uxtb	r2, r1
 8003bba:	701a      	strb	r2, [r3, #0]
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	dbf0      	blt.n	8003bac <_read+0x12>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <_close>:
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <_fstat>:
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	4618      	mov	r0, r3
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <_isatty>:
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	2301      	movs	r3, #1
 8003c16:	4618      	mov	r0, r3
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <_lseek>:
 8003c22:	b480      	push	{r7}
 8003c24:	b085      	sub	sp, #20
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	60f8      	str	r0, [r7, #12]
 8003c2a:	60b9      	str	r1, [r7, #8]
 8003c2c:	607a      	str	r2, [r7, #4]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	4618      	mov	r0, r3
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <_sbrk>:
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	4a14      	ldr	r2, [pc, #80]	@ (8003c98 <_sbrk+0x5c>)
 8003c46:	4b15      	ldr	r3, [pc, #84]	@ (8003c9c <_sbrk+0x60>)
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	4b13      	ldr	r3, [pc, #76]	@ (8003ca0 <_sbrk+0x64>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d102      	bne.n	8003c5e <_sbrk+0x22>
 8003c58:	4b11      	ldr	r3, [pc, #68]	@ (8003ca0 <_sbrk+0x64>)
 8003c5a:	4a12      	ldr	r2, [pc, #72]	@ (8003ca4 <_sbrk+0x68>)
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	4b10      	ldr	r3, [pc, #64]	@ (8003ca0 <_sbrk+0x64>)
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4413      	add	r3, r2
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d207      	bcs.n	8003c7c <_sbrk+0x40>
 8003c6c:	f00c f89a 	bl	800fda4 <__errno>
 8003c70:	4603      	mov	r3, r0
 8003c72:	220c      	movs	r2, #12
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c7a:	e009      	b.n	8003c90 <_sbrk+0x54>
 8003c7c:	4b08      	ldr	r3, [pc, #32]	@ (8003ca0 <_sbrk+0x64>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	4b07      	ldr	r3, [pc, #28]	@ (8003ca0 <_sbrk+0x64>)
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4413      	add	r3, r2
 8003c8a:	4a05      	ldr	r2, [pc, #20]	@ (8003ca0 <_sbrk+0x64>)
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	20018000 	.word	0x20018000
 8003c9c:	00000400 	.word	0x00000400
 8003ca0:	200013bc 	.word	0x200013bc
 8003ca4:	200017c8 	.word	0x200017c8

08003ca8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003cac:	4b06      	ldr	r3, [pc, #24]	@ (8003cc8 <SystemInit+0x20>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb2:	4a05      	ldr	r2, [pc, #20]	@ (8003cc8 <SystemInit+0x20>)
 8003cb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003cb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003cbc:	bf00      	nop
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	e000ed00 	.word	0xe000ed00

08003ccc <log_print>:
static inline void log_print(const char *format, ...) {
 8003ccc:	b40f      	push	{r0, r1, r2, r3}
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b0c2      	sub	sp, #264	@ 0x108
 8003cd2:	af00      	add	r7, sp, #0
    va_start(args, format);
 8003cd4:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8003cd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003ce0:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, LOG_BUFFER_SIZE, format, args);
 8003ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ce6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003cea:	f107 0008 	add.w	r0, r7, #8
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8003cf4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003cf8:	f00b ffb0 	bl	800fc5c <vsniprintf>
    printf("%s", buffer); // SWV output
 8003cfc:	f107 0308 	add.w	r3, r7, #8
 8003d00:	4619      	mov	r1, r3
 8003d02:	4805      	ldr	r0, [pc, #20]	@ (8003d18 <log_print+0x4c>)
 8003d04:	f00b ffd6 	bl	800fcb4 <iprintf>
}
 8003d08:	bf00      	nop
 8003d0a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d14:	b004      	add	sp, #16
 8003d16:	4770      	bx	lr
 8003d18:	08013334 	.word	0x08013334

08003d1c <HAL_UART_RxCpltCallback>:
{
	while(1) {}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
    sds_uart_RxCpltCallback(&sds011_device, &huart3);
 8003d24:	4903      	ldr	r1, [pc, #12]	@ (8003d34 <HAL_UART_RxCpltCallback+0x18>)
 8003d26:	4804      	ldr	r0, [pc, #16]	@ (8003d38 <HAL_UART_RxCpltCallback+0x1c>)
 8003d28:	f7fe fd30 	bl	800278c <sds_uart_RxCpltCallback>
}
 8003d2c:	bf00      	nop
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20000e4c 	.word	0x20000e4c
 8003d38:	200013c0 	.word	0x200013c0

08003d3c <init_phase>:


// --- PHASE: INIT ---
PhaseResult init_phase(){
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af02      	add	r7, sp, #8
    LED_SetState(STATUS_INITIALIZATION);
 8003d42:	2001      	movs	r0, #1
 8003d44:	f7fd ff18 	bl	8001b78 <LED_SetState>

    // SD card & CSV creation
    if(mount_sd_card() != 0){
 8003d48:	f7fd fa46 	bl	80011d8 <mount_sd_card>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00e      	beq.n	8003d70 <init_phase+0x34>
        LED_SetState(STATUS_ERROR);
 8003d52:	2007      	movs	r0, #7
 8003d54:	f7fd ff10 	bl	8001b78 <LED_SetState>
        log_event(0,0,0,0,"ERROR","SD card mount failed");
 8003d58:	4b4b      	ldr	r3, [pc, #300]	@ (8003e88 <init_phase+0x14c>)
 8003d5a:	9301      	str	r3, [sp, #4]
 8003d5c:	4b4b      	ldr	r3, [pc, #300]	@ (8003e8c <init_phase+0x150>)
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	2300      	movs	r3, #0
 8003d62:	2200      	movs	r2, #0
 8003d64:	2100      	movs	r1, #0
 8003d66:	2000      	movs	r0, #0
 8003d68:	f7fd fb60 	bl	800142c <log_event>
        return PHASE_FAIL;
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e088      	b.n	8003e82 <init_phase+0x146>
    }
    black_box_init();
 8003d70:	f7fd fb08 	bl	8001384 <black_box_init>
    check_free_space();
 8003d74:	f7fd fa6e 	bl	8001254 <check_free_space>
    log_event(0,0,0,0,"INFO","SD card mounted and log/telemetry ready");
 8003d78:	4b45      	ldr	r3, [pc, #276]	@ (8003e90 <init_phase+0x154>)
 8003d7a:	9301      	str	r3, [sp, #4]
 8003d7c:	4b45      	ldr	r3, [pc, #276]	@ (8003e94 <init_phase+0x158>)
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	2300      	movs	r3, #0
 8003d82:	2200      	movs	r2, #0
 8003d84:	2100      	movs	r1, #0
 8003d86:	2000      	movs	r0, #0
 8003d88:	f7fd fb50 	bl	800142c <log_event>

    // Sensors init
    if(MS5607_Init() != 0){
 8003d8c:	f7fe fc7c 	bl	8002688 <MS5607_Init>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00e      	beq.n	8003db4 <init_phase+0x78>
        LED_SetState(STATUS_ERROR);
 8003d96:	2007      	movs	r0, #7
 8003d98:	f7fd feee 	bl	8001b78 <LED_SetState>
        log_event(0,0,0,0,"ERROR","MS5607 initialization failed");
 8003d9c:	4b3e      	ldr	r3, [pc, #248]	@ (8003e98 <init_phase+0x15c>)
 8003d9e:	9301      	str	r3, [sp, #4]
 8003da0:	4b3a      	ldr	r3, [pc, #232]	@ (8003e8c <init_phase+0x150>)
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	2300      	movs	r3, #0
 8003da6:	2200      	movs	r2, #0
 8003da8:	2100      	movs	r1, #0
 8003daa:	2000      	movs	r0, #0
 8003dac:	f7fd fb3e 	bl	800142c <log_event>
        return PHASE_FAIL;
 8003db0:	2302      	movs	r3, #2
 8003db2:	e066      	b.n	8003e82 <init_phase+0x146>
    }
    log_event(0,0,0,0,"INFO","MS5607 initialized");
 8003db4:	4b39      	ldr	r3, [pc, #228]	@ (8003e9c <init_phase+0x160>)
 8003db6:	9301      	str	r3, [sp, #4]
 8003db8:	4b36      	ldr	r3, [pc, #216]	@ (8003e94 <init_phase+0x158>)
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	2000      	movs	r0, #0
 8003dc4:	f7fd fb32 	bl	800142c <log_event>

    if(sdsInit(&sds011_device, &huart3) != 0){
 8003dc8:	4935      	ldr	r1, [pc, #212]	@ (8003ea0 <init_phase+0x164>)
 8003dca:	4836      	ldr	r0, [pc, #216]	@ (8003ea4 <init_phase+0x168>)
 8003dcc:	f7fe fc9a 	bl	8002704 <sdsInit>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00e      	beq.n	8003df4 <init_phase+0xb8>
        LED_SetState(STATUS_ERROR);
 8003dd6:	2007      	movs	r0, #7
 8003dd8:	f7fd fece 	bl	8001b78 <LED_SetState>
        log_event(0,0,0,0,"ERROR","SDS011 initialization failed");
 8003ddc:	4b32      	ldr	r3, [pc, #200]	@ (8003ea8 <init_phase+0x16c>)
 8003dde:	9301      	str	r3, [sp, #4]
 8003de0:	4b2a      	ldr	r3, [pc, #168]	@ (8003e8c <init_phase+0x150>)
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	2300      	movs	r3, #0
 8003de6:	2200      	movs	r2, #0
 8003de8:	2100      	movs	r1, #0
 8003dea:	2000      	movs	r0, #0
 8003dec:	f7fd fb1e 	bl	800142c <log_event>
        return PHASE_FAIL;
 8003df0:	2302      	movs	r3, #2
 8003df2:	e046      	b.n	8003e82 <init_phase+0x146>
    }
    log_event(0,0,0,0,"INFO","SDS011 initialized");
 8003df4:	4b2d      	ldr	r3, [pc, #180]	@ (8003eac <init_phase+0x170>)
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	4b26      	ldr	r3, [pc, #152]	@ (8003e94 <init_phase+0x158>)
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2100      	movs	r1, #0
 8003e02:	2000      	movs	r0, #0
 8003e04:	f7fd fb12 	bl	800142c <log_event>

    ENS160_Init(&ens160_device); // No return value, assumed always successful for now
 8003e08:	4829      	ldr	r0, [pc, #164]	@ (8003eb0 <init_phase+0x174>)
 8003e0a:	f7fd fd93 	bl	8001934 <ENS160_Init>
    ENS160_SetMode(&ens160_device, ENS160_OPMODE_STD);
 8003e0e:	2102      	movs	r1, #2
 8003e10:	4827      	ldr	r0, [pc, #156]	@ (8003eb0 <init_phase+0x174>)
 8003e12:	f7fd fdcb 	bl	80019ac <ENS160_SetMode>
    log_event(0,0,0,0,"INFO","ENS160 initialized");
 8003e16:	4b27      	ldr	r3, [pc, #156]	@ (8003eb4 <init_phase+0x178>)
 8003e18:	9301      	str	r3, [sp, #4]
 8003e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003e94 <init_phase+0x158>)
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2200      	movs	r2, #0
 8003e22:	2100      	movs	r1, #0
 8003e24:	2000      	movs	r0, #0
 8003e26:	f7fd fb01 	bl	800142c <log_event>

    if(AHT21_init() != 0){
 8003e2a:	f7fd f8a3 	bl	8000f74 <AHT21_init>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00e      	beq.n	8003e52 <init_phase+0x116>
        LED_SetState(STATUS_ERROR);
 8003e34:	2007      	movs	r0, #7
 8003e36:	f7fd fe9f 	bl	8001b78 <LED_SetState>
        log_event(0,0,0,0,"ERROR","AHT21 initialization failed");
 8003e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8003eb8 <init_phase+0x17c>)
 8003e3c:	9301      	str	r3, [sp, #4]
 8003e3e:	4b13      	ldr	r3, [pc, #76]	@ (8003e8c <init_phase+0x150>)
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	2300      	movs	r3, #0
 8003e44:	2200      	movs	r2, #0
 8003e46:	2100      	movs	r1, #0
 8003e48:	2000      	movs	r0, #0
 8003e4a:	f7fd faef 	bl	800142c <log_event>
        return PHASE_FAIL;
 8003e4e:	2302      	movs	r3, #2
 8003e50:	e017      	b.n	8003e82 <init_phase+0x146>
    }
    log_event(0,0,0,0,"INFO","AHT21 initialized");
 8003e52:	4b1a      	ldr	r3, [pc, #104]	@ (8003ebc <init_phase+0x180>)
 8003e54:	9301      	str	r3, [sp, #4]
 8003e56:	4b0f      	ldr	r3, [pc, #60]	@ (8003e94 <init_phase+0x158>)
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	2100      	movs	r1, #0
 8003e60:	2000      	movs	r0, #0
 8003e62:	f7fd fae3 	bl	800142c <log_event>

    system_state = STATUS_PREFLIGHT;
 8003e66:	4b16      	ldr	r3, [pc, #88]	@ (8003ec0 <init_phase+0x184>)
 8003e68:	2203      	movs	r2, #3
 8003e6a:	701a      	strb	r2, [r3, #0]
    log_event(0,0,0,0,"INFO","System init complete. Ready for pre-flight.");
 8003e6c:	4b15      	ldr	r3, [pc, #84]	@ (8003ec4 <init_phase+0x188>)
 8003e6e:	9301      	str	r3, [sp, #4]
 8003e70:	4b08      	ldr	r3, [pc, #32]	@ (8003e94 <init_phase+0x158>)
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	2300      	movs	r3, #0
 8003e76:	2200      	movs	r2, #0
 8003e78:	2100      	movs	r1, #0
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	f7fd fad6 	bl	800142c <log_event>
    return PHASE_SUCCESS;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	08013338 	.word	0x08013338
 8003e8c:	08013350 	.word	0x08013350
 8003e90:	08013358 	.word	0x08013358
 8003e94:	08013380 	.word	0x08013380
 8003e98:	08013388 	.word	0x08013388
 8003e9c:	080133a8 	.word	0x080133a8
 8003ea0:	20000e4c 	.word	0x20000e4c
 8003ea4:	200013c0 	.word	0x200013c0
 8003ea8:	080133bc 	.word	0x080133bc
 8003eac:	080133dc 	.word	0x080133dc
 8003eb0:	200013dc 	.word	0x200013dc
 8003eb4:	080133f0 	.word	0x080133f0
 8003eb8:	08013404 	.word	0x08013404
 8003ebc:	08013420 	.word	0x08013420
 8003ec0:	20000074 	.word	0x20000074
 8003ec4:	08013434 	.word	0x08013434

08003ec8 <pre_flight_phase>:

// --- PHASE: PRE-FLIGHT ---
PhaseResult pre_flight_phase() {
 8003ec8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ecc:	b0a8      	sub	sp, #160	@ 0xa0
 8003ece:	af06      	add	r7, sp, #24
    LED_SetState(STATUS_PREFLIGHT);
 8003ed0:	2003      	movs	r0, #3
 8003ed2:	f7fd fe51 	bl	8001b78 <LED_SetState>
    log_print("[STATE] Waiting for Takeoff Detection...\n");
 8003ed6:	4872      	ldr	r0, [pc, #456]	@ (80040a0 <pre_flight_phase+0x1d8>)
 8003ed8:	f7ff fef8 	bl	8003ccc <log_print>
    log_event(0, 0, 0, 0, "STATE", "Waiting for Takeoff Detection...");
 8003edc:	4b71      	ldr	r3, [pc, #452]	@ (80040a4 <pre_flight_phase+0x1dc>)
 8003ede:	9301      	str	r3, [sp, #4]
 8003ee0:	4b71      	ldr	r3, [pc, #452]	@ (80040a8 <pre_flight_phase+0x1e0>)
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	2100      	movs	r1, #0
 8003eea:	2000      	movs	r0, #0
 8003eec:	f7fd fa9e 	bl	800142c <log_event>

    while (system_state == STATUS_PREFLIGHT) {
 8003ef0:	e0be      	b.n	8004070 <pre_flight_phase+0x1a8>
        barometer_data = MS5607_ReadData();
 8003ef2:	f7fe fb57 	bl	80025a4 <MS5607_ReadData>
 8003ef6:	eef0 6a40 	vmov.f32	s13, s0
 8003efa:	eeb0 7a60 	vmov.f32	s14, s1
 8003efe:	eef0 7a41 	vmov.f32	s15, s2
 8003f02:	4b6a      	ldr	r3, [pc, #424]	@ (80040ac <pre_flight_phase+0x1e4>)
 8003f04:	edc3 6a00 	vstr	s13, [r3]
 8003f08:	ed83 7a01 	vstr	s14, [r3, #4]
 8003f0c:	edc3 7a02 	vstr	s15, [r3, #8]

        log_print("[BAROMETER] Pressure: %.3f Pa, Temp: %.3f degC, Altitude: %.3f meters\n",
                  barometer_data.pressure, barometer_data.temperature, barometer_data.altitude);
 8003f10:	4b66      	ldr	r3, [pc, #408]	@ (80040ac <pre_flight_phase+0x1e4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
        log_print("[BAROMETER] Pressure: %.3f Pa, Temp: %.3f degC, Altitude: %.3f meters\n",
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fc fb17 	bl	8000548 <__aeabi_f2d>
 8003f1a:	4680      	mov	r8, r0
 8003f1c:	4689      	mov	r9, r1
                  barometer_data.pressure, barometer_data.temperature, barometer_data.altitude);
 8003f1e:	4b63      	ldr	r3, [pc, #396]	@ (80040ac <pre_flight_phase+0x1e4>)
 8003f20:	685b      	ldr	r3, [r3, #4]
        log_print("[BAROMETER] Pressure: %.3f Pa, Temp: %.3f degC, Altitude: %.3f meters\n",
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fc fb10 	bl	8000548 <__aeabi_f2d>
 8003f28:	4604      	mov	r4, r0
 8003f2a:	460d      	mov	r5, r1
                  barometer_data.pressure, barometer_data.temperature, barometer_data.altitude);
 8003f2c:	4b5f      	ldr	r3, [pc, #380]	@ (80040ac <pre_flight_phase+0x1e4>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
        log_print("[BAROMETER] Pressure: %.3f Pa, Temp: %.3f degC, Altitude: %.3f meters\n",
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fc fb09 	bl	8000548 <__aeabi_f2d>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f3e:	e9cd 4500 	strd	r4, r5, [sp]
 8003f42:	4642      	mov	r2, r8
 8003f44:	464b      	mov	r3, r9
 8003f46:	485a      	ldr	r0, [pc, #360]	@ (80040b0 <pre_flight_phase+0x1e8>)
 8003f48:	f7ff fec0 	bl	8003ccc <log_print>

        // Event log to SD as well
        uint8_t hour, min, sec; uint16_t ms;
        get_timestamp(&hour, &min, &sec, &ms);
 8003f4c:	f107 0382 	add.w	r3, r7, #130	@ 0x82
 8003f50:	f107 0285 	add.w	r2, r7, #133	@ 0x85
 8003f54:	f107 0186 	add.w	r1, r7, #134	@ 0x86
 8003f58:	f107 0087 	add.w	r0, r7, #135	@ 0x87
 8003f5c:	f000 fa74 	bl	8004448 <get_timestamp>
        char msg[128];
        snprintf(msg, sizeof(msg), "[BAROMETER] Pressure: %.3f Pa, Temp: %.3f degC, Altitude: %.3f meters",
                 barometer_data.pressure, barometer_data.temperature, barometer_data.altitude);
 8003f60:	4b52      	ldr	r3, [pc, #328]	@ (80040ac <pre_flight_phase+0x1e4>)
 8003f62:	681b      	ldr	r3, [r3, #0]
        snprintf(msg, sizeof(msg), "[BAROMETER] Pressure: %.3f Pa, Temp: %.3f degC, Altitude: %.3f meters",
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fc faef 	bl	8000548 <__aeabi_f2d>
 8003f6a:	4604      	mov	r4, r0
 8003f6c:	460d      	mov	r5, r1
                 barometer_data.pressure, barometer_data.temperature, barometer_data.altitude);
 8003f6e:	4b4f      	ldr	r3, [pc, #316]	@ (80040ac <pre_flight_phase+0x1e4>)
 8003f70:	685b      	ldr	r3, [r3, #4]
        snprintf(msg, sizeof(msg), "[BAROMETER] Pressure: %.3f Pa, Temp: %.3f degC, Altitude: %.3f meters",
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fc fae8 	bl	8000548 <__aeabi_f2d>
 8003f78:	4680      	mov	r8, r0
 8003f7a:	4689      	mov	r9, r1
                 barometer_data.pressure, barometer_data.temperature, barometer_data.altitude);
 8003f7c:	4b4b      	ldr	r3, [pc, #300]	@ (80040ac <pre_flight_phase+0x1e4>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
        snprintf(msg, sizeof(msg), "[BAROMETER] Pressure: %.3f Pa, Temp: %.3f degC, Altitude: %.3f meters",
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fc fae1 	bl	8000548 <__aeabi_f2d>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4638      	mov	r0, r7
 8003f8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003f90:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003f94:	e9cd 4500 	strd	r4, r5, [sp]
 8003f98:	4a46      	ldr	r2, [pc, #280]	@ (80040b4 <pre_flight_phase+0x1ec>)
 8003f9a:	2180      	movs	r1, #128	@ 0x80
 8003f9c:	f00b fd56 	bl	800fa4c <sniprintf>
        log_event(hour, min, sec, ms, "BAROMETER", msg);
 8003fa0:	f897 0087 	ldrb.w	r0, [r7, #135]	@ 0x87
 8003fa4:	f897 1086 	ldrb.w	r1, [r7, #134]	@ 0x86
 8003fa8:	f897 2085 	ldrb.w	r2, [r7, #133]	@ 0x85
 8003fac:	f8b7 4082 	ldrh.w	r4, [r7, #130]	@ 0x82
 8003fb0:	463b      	mov	r3, r7
 8003fb2:	9301      	str	r3, [sp, #4]
 8003fb4:	4b40      	ldr	r3, [pc, #256]	@ (80040b8 <pre_flight_phase+0x1f0>)
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	4623      	mov	r3, r4
 8003fba:	f7fd fa37 	bl	800142c <log_event>

        if (barometer_data.altitude > ALTITUDE_MAX_GLOBAL) {
 8003fbe:	4b3b      	ldr	r3, [pc, #236]	@ (80040ac <pre_flight_phase+0x1e4>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fc fac0 	bl	8000548 <__aeabi_f2d>
 8003fc8:	4b3c      	ldr	r3, [pc, #240]	@ (80040bc <pre_flight_phase+0x1f4>)
 8003fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fce:	f7fc fda3 	bl	8000b18 <__aeabi_dcmpgt>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d009      	beq.n	8003fec <pre_flight_phase+0x124>
            ALTITUDE_MAX_GLOBAL = barometer_data.altitude;
 8003fd8:	4b34      	ldr	r3, [pc, #208]	@ (80040ac <pre_flight_phase+0x1e4>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fc fab3 	bl	8000548 <__aeabi_f2d>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4935      	ldr	r1, [pc, #212]	@ (80040bc <pre_flight_phase+0x1f4>)
 8003fe8:	e9c1 2300 	strd	r2, r3, [r1]
        }

        if (!TAKEOFF_ALREADY_DETECTED && barometer_data.altitude > TAKEOFF_ALTITUDE_THRESHOLD) {
 8003fec:	4b34      	ldr	r3, [pc, #208]	@ (80040c0 <pre_flight_phase+0x1f8>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	f083 0301 	eor.w	r3, r3, #1
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d020      	beq.n	800403c <pre_flight_phase+0x174>
 8003ffa:	4b2c      	ldr	r3, [pc, #176]	@ (80040ac <pre_flight_phase+0x1e4>)
 8003ffc:	edd3 7a02 	vldr	s15, [r3, #8]
 8004000:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8004004:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400c:	dd16      	ble.n	800403c <pre_flight_phase+0x174>
            TAKEOFF_DETECTED = true;
 800400e:	4b2d      	ldr	r3, [pc, #180]	@ (80040c4 <pre_flight_phase+0x1fc>)
 8004010:	2201      	movs	r2, #1
 8004012:	701a      	strb	r2, [r3, #0]
            TAKEOFF_ALREADY_DETECTED = true;
 8004014:	4b2a      	ldr	r3, [pc, #168]	@ (80040c0 <pre_flight_phase+0x1f8>)
 8004016:	2201      	movs	r2, #1
 8004018:	701a      	strb	r2, [r3, #0]
            log_print("[STATE] TAKEOFF DETECTED!\n");
 800401a:	482b      	ldr	r0, [pc, #172]	@ (80040c8 <pre_flight_phase+0x200>)
 800401c:	f7ff fe56 	bl	8003ccc <log_print>
            log_event(hour, min, sec, ms, "STATE", "TAKEOFF DETECTED!");
 8004020:	f897 0087 	ldrb.w	r0, [r7, #135]	@ 0x87
 8004024:	f897 1086 	ldrb.w	r1, [r7, #134]	@ 0x86
 8004028:	f897 2085 	ldrb.w	r2, [r7, #133]	@ 0x85
 800402c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8004030:	4c26      	ldr	r4, [pc, #152]	@ (80040cc <pre_flight_phase+0x204>)
 8004032:	9401      	str	r4, [sp, #4]
 8004034:	4c1c      	ldr	r4, [pc, #112]	@ (80040a8 <pre_flight_phase+0x1e0>)
 8004036:	9400      	str	r4, [sp, #0]
 8004038:	f7fd f9f8 	bl	800142c <log_event>
        }

        if (TAKEOFF_DETECTED) {
 800403c:	4b21      	ldr	r3, [pc, #132]	@ (80040c4 <pre_flight_phase+0x1fc>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d015      	beq.n	8004070 <pre_flight_phase+0x1a8>
            log_print("[STATE] Transition to Flight Mode\n");
 8004044:	4822      	ldr	r0, [pc, #136]	@ (80040d0 <pre_flight_phase+0x208>)
 8004046:	f7ff fe41 	bl	8003ccc <log_print>
            log_event(hour, min, sec, ms, "STATE", "Transition to Flight Mode");
 800404a:	f897 0087 	ldrb.w	r0, [r7, #135]	@ 0x87
 800404e:	f897 1086 	ldrb.w	r1, [r7, #134]	@ 0x86
 8004052:	f897 2085 	ldrb.w	r2, [r7, #133]	@ 0x85
 8004056:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800405a:	4c1e      	ldr	r4, [pc, #120]	@ (80040d4 <pre_flight_phase+0x20c>)
 800405c:	9401      	str	r4, [sp, #4]
 800405e:	4c12      	ldr	r4, [pc, #72]	@ (80040a8 <pre_flight_phase+0x1e0>)
 8004060:	9400      	str	r4, [sp, #0]
 8004062:	f7fd f9e3 	bl	800142c <log_event>
            system_state = STATUS_FLIGHT;
 8004066:	4b1c      	ldr	r3, [pc, #112]	@ (80040d8 <pre_flight_phase+0x210>)
 8004068:	2204      	movs	r2, #4
 800406a:	701a      	strb	r2, [r3, #0]
            return PHASE_SUCCESS;
 800406c:	2300      	movs	r3, #0
 800406e:	e012      	b.n	8004096 <pre_flight_phase+0x1ce>
    while (system_state == STATUS_PREFLIGHT) {
 8004070:	4b19      	ldr	r3, [pc, #100]	@ (80040d8 <pre_flight_phase+0x210>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b03      	cmp	r3, #3
 8004076:	f43f af3c 	beq.w	8003ef2 <pre_flight_phase+0x2a>
        }
    }
    log_print("[STATE] Interrupted - Exiting Pre-Flight\n");
 800407a:	4818      	ldr	r0, [pc, #96]	@ (80040dc <pre_flight_phase+0x214>)
 800407c:	f7ff fe26 	bl	8003ccc <log_print>
    log_event(0, 0, 0, 0, "STATE", "Interrupted - Exiting Pre-Flight");
 8004080:	4b17      	ldr	r3, [pc, #92]	@ (80040e0 <pre_flight_phase+0x218>)
 8004082:	9301      	str	r3, [sp, #4]
 8004084:	4b08      	ldr	r3, [pc, #32]	@ (80040a8 <pre_flight_phase+0x1e0>)
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	2300      	movs	r3, #0
 800408a:	2200      	movs	r2, #0
 800408c:	2100      	movs	r1, #0
 800408e:	2000      	movs	r0, #0
 8004090:	f7fd f9cc 	bl	800142c <log_event>
    return PHASE_INTERRUPTED;
 8004094:	2301      	movs	r3, #1
}
 8004096:	4618      	mov	r0, r3
 8004098:	3788      	adds	r7, #136	@ 0x88
 800409a:	46bd      	mov	sp, r7
 800409c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80040a0:	08013460 	.word	0x08013460
 80040a4:	0801348c 	.word	0x0801348c
 80040a8:	080134b0 	.word	0x080134b0
 80040ac:	200013ec 	.word	0x200013ec
 80040b0:	080134b8 	.word	0x080134b8
 80040b4:	08013500 	.word	0x08013500
 80040b8:	08013548 	.word	0x08013548
 80040bc:	200013fc 	.word	0x200013fc
 80040c0:	200013f9 	.word	0x200013f9
 80040c4:	200013f8 	.word	0x200013f8
 80040c8:	08013554 	.word	0x08013554
 80040cc:	08013570 	.word	0x08013570
 80040d0:	08013584 	.word	0x08013584
 80040d4:	080135a8 	.word	0x080135a8
 80040d8:	20000074 	.word	0x20000074
 80040dc:	080135c4 	.word	0x080135c4
 80040e0:	080135f0 	.word	0x080135f0

080040e4 <flight_phase>:

// --- PHASE: FLIGHT ---
PhaseResult flight_phase() {
 80040e4:	b590      	push	{r4, r7, lr}
 80040e6:	b0a1      	sub	sp, #132	@ 0x84
 80040e8:	af02      	add	r7, sp, #8
    log_event(0,0,0,0,"STATE","Entered FLIGHT PHASE");
 80040ea:	4b95      	ldr	r3, [pc, #596]	@ (8004340 <flight_phase+0x25c>)
 80040ec:	9301      	str	r3, [sp, #4]
 80040ee:	4b95      	ldr	r3, [pc, #596]	@ (8004344 <flight_phase+0x260>)
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	2300      	movs	r3, #0
 80040f4:	2200      	movs	r2, #0
 80040f6:	2100      	movs	r1, #0
 80040f8:	2000      	movs	r0, #0
 80040fa:	f7fd f997 	bl	800142c <log_event>
    LED_SetState(STATUS_FLIGHT);
 80040fe:	2004      	movs	r0, #4
 8004100:	f7fd fd3a 	bl	8001b78 <LED_SetState>

    const int APOGEE_DEBOUNCE = 5;
 8004104:	2305      	movs	r3, #5
 8004106:	66bb      	str	r3, [r7, #104]	@ 0x68
    int apogee_measures = APOGEE_DEBOUNCE;
 8004108:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800410a:	677b      	str	r3, [r7, #116]	@ 0x74
    float last_altitude = 0.0f;
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	673b      	str	r3, [r7, #112]	@ 0x70
    bool apogee_detected = false;
 8004112:	2300      	movs	r3, #0
 8004114:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    bool touchdown_detected = false;
 8004118:	2300      	movs	r3, #0
 800411a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

    // (Optional) Prepare any deploy logic/flags

    while (system_state == STATUS_FLIGHT) {
 800411e:	e104      	b.n	800432a <flight_phase+0x246>
        // --- Timestamp
        uint8_t hour, min, sec;
        uint16_t ms;
        get_timestamp(&hour, &min, &sec, &ms);
 8004120:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8004124:	f107 0245 	add.w	r2, r7, #69	@ 0x45
 8004128:	f107 0146 	add.w	r1, r7, #70	@ 0x46
 800412c:	f107 0047 	add.w	r0, r7, #71	@ 0x47
 8004130:	f000 f98a 	bl	8004448 <get_timestamp>

        // --- 1. Barometer
        barometer_data = MS5607_ReadData();
 8004134:	f7fe fa36 	bl	80025a4 <MS5607_ReadData>
 8004138:	eef0 6a40 	vmov.f32	s13, s0
 800413c:	eeb0 7a60 	vmov.f32	s14, s1
 8004140:	eef0 7a41 	vmov.f32	s15, s2
 8004144:	4b80      	ldr	r3, [pc, #512]	@ (8004348 <flight_phase+0x264>)
 8004146:	edc3 6a00 	vstr	s13, [r3]
 800414a:	ed83 7a01 	vstr	s14, [r3, #4]
 800414e:	edc3 7a02 	vstr	s15, [r3, #8]
        float current_altitude = barometer_data.altitude;
 8004152:	4b7d      	ldr	r3, [pc, #500]	@ (8004348 <flight_phase+0x264>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	663b      	str	r3, [r7, #96]	@ 0x60

        // --- 2. SDS011 readings
        float pm2_5 = (float)sdsGetPm2_5(&sds011_device);
 8004158:	487c      	ldr	r0, [pc, #496]	@ (800434c <flight_phase+0x268>)
 800415a:	f7fe faff 	bl	800275c <sdsGetPm2_5>
 800415e:	4603      	mov	r3, r0
 8004160:	ee07 3a90 	vmov	s15, r3
 8004164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004168:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
        float pm10  = (float)sdsGetPm10(&sds011_device);
 800416c:	4877      	ldr	r0, [pc, #476]	@ (800434c <flight_phase+0x268>)
 800416e:	f7fe fb01 	bl	8002774 <sdsGetPm10>
 8004172:	4603      	mov	r3, r0
 8004174:	ee07 3a90 	vmov	s15, r3
 8004178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800417c:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58

        // --- 3. ENS160 readings
        ENS160_ReadData(&ens160_device);
 8004180:	4873      	ldr	r0, [pc, #460]	@ (8004350 <flight_phase+0x26c>)
 8004182:	f7fd fc2c 	bl	80019de <ENS160_ReadData>
        uint8_t AQI         = ens160_device.aqi;
 8004186:	4b72      	ldr	r3, [pc, #456]	@ (8004350 <flight_phase+0x26c>)
 8004188:	799b      	ldrb	r3, [r3, #6]
 800418a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        uint16_t TVOC       = ens160_device.tvoc;
 800418e:	4b70      	ldr	r3, [pc, #448]	@ (8004350 <flight_phase+0x26c>)
 8004190:	891b      	ldrh	r3, [r3, #8]
 8004192:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        uint16_t eCO2       = ens160_device.eco2;
 8004196:	4b6e      	ldr	r3, [pc, #440]	@ (8004350 <flight_phase+0x26c>)
 8004198:	895b      	ldrh	r3, [r3, #10]
 800419a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

        // --- 4. AHT21 readings
        float aht21_temperature = (float)AHT21_Read_Temperature();
 800419e:	f7fc ff79 	bl	8001094 <AHT21_Read_Temperature>
 80041a2:	ee07 0a90 	vmov	s15, r0
 80041a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041aa:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
        float aht21_humidity    = (float)AHT21_Read_Humidity();
 80041ae:	f7fc ff2b 	bl	8001008 <AHT21_Read_Humidity>
 80041b2:	ee07 0a90 	vmov	s15, r0
 80041b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ba:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

        // --- 5. Telemetry log
        log_telemetry(hour, min, sec, ms,
 80041be:	f897 0047 	ldrb.w	r0, [r7, #71]	@ 0x47
 80041c2:	f897 1046 	ldrb.w	r1, [r7, #70]	@ 0x46
 80041c6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80041ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80041ce:	4c5e      	ldr	r4, [pc, #376]	@ (8004348 <flight_phase+0x264>)
 80041d0:	edd4 7a01 	vldr	s15, [r4, #4]
 80041d4:	4c5c      	ldr	r4, [pc, #368]	@ (8004348 <flight_phase+0x264>)
 80041d6:	ed94 7a00 	vldr	s14, [r4]
 80041da:	4c5b      	ldr	r4, [pc, #364]	@ (8004348 <flight_phase+0x264>)
 80041dc:	edd4 6a02 	vldr	s13, [r4, #8]
 80041e0:	f897 4057 	ldrb.w	r4, [r7, #87]	@ 0x57
 80041e4:	ee06 4a10 	vmov	s12, r4
 80041e8:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 80041ec:	f8b7 4054 	ldrh.w	r4, [r7, #84]	@ 0x54
 80041f0:	ee05 4a90 	vmov	s11, r4
 80041f4:	eef8 5a65 	vcvt.f32.u32	s11, s11
 80041f8:	f8b7 4052 	ldrh.w	r4, [r7, #82]	@ 0x52
 80041fc:	ee05 4a10 	vmov	s10, r4
 8004200:	eeb8 5a45 	vcvt.f32.u32	s10, s10
 8004204:	edd7 4a12 	vldr	s9, [r7, #72]	@ 0x48
 8004208:	ed97 4a13 	vldr	s8, [r7, #76]	@ 0x4c
 800420c:	eef0 3a45 	vmov.f32	s7, s10
 8004210:	eeb0 3a65 	vmov.f32	s6, s11
 8004214:	eef0 2a46 	vmov.f32	s5, s12
 8004218:	ed97 2a16 	vldr	s4, [r7, #88]	@ 0x58
 800421c:	edd7 1a17 	vldr	s3, [r7, #92]	@ 0x5c
 8004220:	eeb0 1a66 	vmov.f32	s2, s13
 8004224:	eef0 0a47 	vmov.f32	s1, s14
 8004228:	eeb0 0a67 	vmov.f32	s0, s15
 800422c:	f7fd f9c0 	bl	80015b0 <log_telemetry>
                      eCO2,
                      aht21_temperature,
                      aht21_humidity);

        // --- 6. Apogee detection (debounce style)
        if (current_altitude > ALTITUDE_MAX_GLOBAL) {
 8004230:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8004232:	f7fc f989 	bl	8000548 <__aeabi_f2d>
 8004236:	4b47      	ldr	r3, [pc, #284]	@ (8004354 <flight_phase+0x270>)
 8004238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423c:	f7fc fc6c 	bl	8000b18 <__aeabi_dcmpgt>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d007      	beq.n	8004256 <flight_phase+0x172>
            ALTITUDE_MAX_GLOBAL = current_altitude;
 8004246:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8004248:	f7fc f97e 	bl	8000548 <__aeabi_f2d>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4940      	ldr	r1, [pc, #256]	@ (8004354 <flight_phase+0x270>)
 8004252:	e9c1 2300 	strd	r2, r3, [r1]
        }

        if (!apogee_detected) {
 8004256:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800425a:	f083 0301 	eor.w	r3, r3, #1
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d030      	beq.n	80042c6 <flight_phase+0x1e2>
            if (current_altitude < last_altitude) {
 8004264:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8004268:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800426c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004274:	d522      	bpl.n	80042bc <flight_phase+0x1d8>
                apogee_measures--;
 8004276:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004278:	3b01      	subs	r3, #1
 800427a:	677b      	str	r3, [r7, #116]	@ 0x74
                if (apogee_measures <= 0) {
 800427c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800427e:	2b00      	cmp	r3, #0
 8004280:	dc1e      	bgt.n	80042c0 <flight_phase+0x1dc>
                    apogee_detected = true;
 8004282:	2301      	movs	r3, #1
 8004284:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                    char msg[64];
                    snprintf(msg, sizeof(msg), "APOGEE detected at %.2f meters!", ALTITUDE_MAX_GLOBAL);
 8004288:	4b32      	ldr	r3, [pc, #200]	@ (8004354 <flight_phase+0x270>)
 800428a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428e:	4638      	mov	r0, r7
 8004290:	e9cd 2300 	strd	r2, r3, [sp]
 8004294:	4a30      	ldr	r2, [pc, #192]	@ (8004358 <flight_phase+0x274>)
 8004296:	2140      	movs	r1, #64	@ 0x40
 8004298:	f00b fbd8 	bl	800fa4c <sniprintf>
                    log_event(hour, min, sec, ms, "EVENT", msg);
 800429c:	f897 0047 	ldrb.w	r0, [r7, #71]	@ 0x47
 80042a0:	f897 1046 	ldrb.w	r1, [r7, #70]	@ 0x46
 80042a4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80042a8:	f8b7 4042 	ldrh.w	r4, [r7, #66]	@ 0x42
 80042ac:	463b      	mov	r3, r7
 80042ae:	9301      	str	r3, [sp, #4]
 80042b0:	4b2a      	ldr	r3, [pc, #168]	@ (800435c <flight_phase+0x278>)
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	4623      	mov	r3, r4
 80042b6:	f7fd f8b9 	bl	800142c <log_event>
 80042ba:	e001      	b.n	80042c0 <flight_phase+0x1dc>
                }
            } else {
                apogee_measures = APOGEE_DEBOUNCE;
 80042bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042be:	677b      	str	r3, [r7, #116]	@ 0x74
            }
            last_altitude = current_altitude;
 80042c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80042c4:	e031      	b.n	800432a <flight_phase+0x246>
        } else {
            // --- 7. Touchdown detection (after apogee)
            if (!touchdown_detected && (current_altitude < (TOUCHDOWN_ALTITUDE_THRESHOLD + 0.5))) {
 80042c6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80042ca:	f083 0301 	eor.w	r3, r3, #1
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d02a      	beq.n	800432a <flight_phase+0x246>
 80042d4:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80042d8:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 80042dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e4:	d521      	bpl.n	800432a <flight_phase+0x246>
                touchdown_detected = true;
 80042e6:	2301      	movs	r3, #1
 80042e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                char msg[64];
                snprintf(msg, sizeof(msg), "TOUCHDOWN detected at %.2f m", current_altitude);
 80042ec:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80042ee:	f7fc f92b 	bl	8000548 <__aeabi_f2d>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4638      	mov	r0, r7
 80042f8:	e9cd 2300 	strd	r2, r3, [sp]
 80042fc:	4a18      	ldr	r2, [pc, #96]	@ (8004360 <flight_phase+0x27c>)
 80042fe:	2140      	movs	r1, #64	@ 0x40
 8004300:	f00b fba4 	bl	800fa4c <sniprintf>
                log_event(hour, min, sec, ms, "EVENT", msg);
 8004304:	f897 0047 	ldrb.w	r0, [r7, #71]	@ 0x47
 8004308:	f897 1046 	ldrb.w	r1, [r7, #70]	@ 0x46
 800430c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004310:	f8b7 4042 	ldrh.w	r4, [r7, #66]	@ 0x42
 8004314:	463b      	mov	r3, r7
 8004316:	9301      	str	r3, [sp, #4]
 8004318:	4b10      	ldr	r3, [pc, #64]	@ (800435c <flight_phase+0x278>)
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	4623      	mov	r3, r4
 800431e:	f7fd f885 	bl	800142c <log_event>
                system_state = STATUS_POSTFLIGHT;
 8004322:	4b10      	ldr	r3, [pc, #64]	@ (8004364 <flight_phase+0x280>)
 8004324:	2205      	movs	r2, #5
 8004326:	701a      	strb	r2, [r3, #0]
                break;
 8004328:	e004      	b.n	8004334 <flight_phase+0x250>
    while (system_state == STATUS_FLIGHT) {
 800432a:	4b0e      	ldr	r3, [pc, #56]	@ (8004364 <flight_phase+0x280>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b04      	cmp	r3, #4
 8004330:	f43f aef6 	beq.w	8004120 <flight_phase+0x3c>
        }

        //HAL_Delay(FLIGHT_LOG_DELAY_MS);
    }

    return PHASE_SUCCESS;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	377c      	adds	r7, #124	@ 0x7c
 800433a:	46bd      	mov	sp, r7
 800433c:	bd90      	pop	{r4, r7, pc}
 800433e:	bf00      	nop
 8004340:	08013614 	.word	0x08013614
 8004344:	080134b0 	.word	0x080134b0
 8004348:	200013ec 	.word	0x200013ec
 800434c:	200013c0 	.word	0x200013c0
 8004350:	200013dc 	.word	0x200013dc
 8004354:	200013fc 	.word	0x200013fc
 8004358:	0801362c 	.word	0x0801362c
 800435c:	0801364c 	.word	0x0801364c
 8004360:	08013654 	.word	0x08013654
 8004364:	20000074 	.word	0x20000074

08004368 <post_flight_phase>:

// --- PHASE: POST-FLIGHT ---
PhaseResult post_flight_phase() {
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af02      	add	r7, sp, #8
    log_event(0,0,0,0,"STATE","Entered POST-FLIGHT PHASE");
 800436e:	4b14      	ldr	r3, [pc, #80]	@ (80043c0 <post_flight_phase+0x58>)
 8004370:	9301      	str	r3, [sp, #4]
 8004372:	4b14      	ldr	r3, [pc, #80]	@ (80043c4 <post_flight_phase+0x5c>)
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	2300      	movs	r3, #0
 8004378:	2200      	movs	r2, #0
 800437a:	2100      	movs	r1, #0
 800437c:	2000      	movs	r0, #0
 800437e:	f7fd f855 	bl	800142c <log_event>
    LED_SetState(STATUS_GRACEFUL_SHUTDOWN);
 8004382:	2000      	movs	r0, #0
 8004384:	f7fd fbf8 	bl	8001b78 <LED_SetState>

    // Flush files & unmount
    black_box_flush_all();
 8004388:	f7fd f82a 	bl	80013e0 <black_box_flush_all>
    log_event(0,0,0,0,"INFO","SD files flushed and closed.");
 800438c:	4b0e      	ldr	r3, [pc, #56]	@ (80043c8 <post_flight_phase+0x60>)
 800438e:	9301      	str	r3, [sp, #4]
 8004390:	4b0e      	ldr	r3, [pc, #56]	@ (80043cc <post_flight_phase+0x64>)
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	2300      	movs	r3, #0
 8004396:	2200      	movs	r2, #0
 8004398:	2100      	movs	r1, #0
 800439a:	2000      	movs	r0, #0
 800439c:	f7fd f846 	bl	800142c <log_event>
    unmount_sd_card();
 80043a0:	f7fc ff3e 	bl	8001220 <unmount_sd_card>
    log_event(0,0,0,0,"INFO","SD card unmounted.");
 80043a4:	4b0a      	ldr	r3, [pc, #40]	@ (80043d0 <post_flight_phase+0x68>)
 80043a6:	9301      	str	r3, [sp, #4]
 80043a8:	4b08      	ldr	r3, [pc, #32]	@ (80043cc <post_flight_phase+0x64>)
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	2300      	movs	r3, #0
 80043ae:	2200      	movs	r2, #0
 80043b0:	2100      	movs	r1, #0
 80043b2:	2000      	movs	r0, #0
 80043b4:	f7fd f83a 	bl	800142c <log_event>

    return PHASE_SUCCESS;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	08013674 	.word	0x08013674
 80043c4:	080134b0 	.word	0x080134b0
 80043c8:	08013690 	.word	0x08013690
 80043cc:	08013380 	.word	0x08013380
 80043d0:	080136b0 	.word	0x080136b0

080043d4 <Manager_Main>:

// --- MAIN MANAGER LOGIC ---
SystemState Manager_Main() {
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af02      	add	r7, sp, #8
    log_event(0,0,0,0,"INFO","Sat Atmo - Diamant A Experience - Welcome!");
 80043da:	4b19      	ldr	r3, [pc, #100]	@ (8004440 <Manager_Main+0x6c>)
 80043dc:	9301      	str	r3, [sp, #4]
 80043de:	4b19      	ldr	r3, [pc, #100]	@ (8004444 <Manager_Main+0x70>)
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	2300      	movs	r3, #0
 80043e4:	2200      	movs	r2, #0
 80043e6:	2100      	movs	r1, #0
 80043e8:	2000      	movs	r0, #0
 80043ea:	f7fd f81f 	bl	800142c <log_event>

    PhaseResult ret = init_phase();
 80043ee:	f7ff fca5 	bl	8003d3c <init_phase>
 80043f2:	4603      	mov	r3, r0
 80043f4:	71fb      	strb	r3, [r7, #7]
    if(ret != PHASE_SUCCESS) return STATUS_ERROR;
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <Manager_Main+0x2c>
 80043fc:	2307      	movs	r3, #7
 80043fe:	e01b      	b.n	8004438 <Manager_Main+0x64>

    ret = pre_flight_phase();
 8004400:	f7ff fd62 	bl	8003ec8 <pre_flight_phase>
 8004404:	4603      	mov	r3, r0
 8004406:	71fb      	strb	r3, [r7, #7]
    if(ret != PHASE_SUCCESS) return STATUS_ERROR;
 8004408:	79fb      	ldrb	r3, [r7, #7]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <Manager_Main+0x3e>
 800440e:	2307      	movs	r3, #7
 8004410:	e012      	b.n	8004438 <Manager_Main+0x64>

    ret = flight_phase();
 8004412:	f7ff fe67 	bl	80040e4 <flight_phase>
 8004416:	4603      	mov	r3, r0
 8004418:	71fb      	strb	r3, [r7, #7]
    if(ret != PHASE_SUCCESS) return STATUS_ERROR;
 800441a:	79fb      	ldrb	r3, [r7, #7]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <Manager_Main+0x50>
 8004420:	2307      	movs	r3, #7
 8004422:	e009      	b.n	8004438 <Manager_Main+0x64>

    ret = post_flight_phase();
 8004424:	f7ff ffa0 	bl	8004368 <post_flight_phase>
 8004428:	4603      	mov	r3, r0
 800442a:	71fb      	strb	r3, [r7, #7]
    if(ret != PHASE_SUCCESS) return STATUS_ERROR;
 800442c:	79fb      	ldrb	r3, [r7, #7]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <Manager_Main+0x62>
 8004432:	2307      	movs	r3, #7
 8004434:	e000      	b.n	8004438 <Manager_Main+0x64>

    return STATUS_GRACEFUL_SHUTDOWN;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	080136c4 	.word	0x080136c4
 8004444:	08013380 	.word	0x08013380

08004448 <get_timestamp>:

// --- Timestamp function (stub) ---
void get_timestamp(uint8_t *hour, uint8_t *min, uint8_t *sec, uint16_t *ms) {
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	603b      	str	r3, [r7, #0]
    // TODO: Replace with your actual RTC/timebase
    static uint32_t counter = 0;
    *hour = 0;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	701a      	strb	r2, [r3, #0]
    *min = 0;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2200      	movs	r2, #0
 8004460:	701a      	strb	r2, [r3, #0]
    *sec = (counter / 20) % 60;
 8004462:	4b1a      	ldr	r3, [pc, #104]	@ (80044cc <get_timestamp+0x84>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a1a      	ldr	r2, [pc, #104]	@ (80044d0 <get_timestamp+0x88>)
 8004468:	fba2 2303 	umull	r2, r3, r2, r3
 800446c:	0919      	lsrs	r1, r3, #4
 800446e:	4b19      	ldr	r3, [pc, #100]	@ (80044d4 <get_timestamp+0x8c>)
 8004470:	fba3 2301 	umull	r2, r3, r3, r1
 8004474:	095a      	lsrs	r2, r3, #5
 8004476:	4613      	mov	r3, r2
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	1aca      	subs	r2, r1, r3
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	701a      	strb	r2, [r3, #0]
    *ms = (counter % 20) * 50;
 8004486:	4b11      	ldr	r3, [pc, #68]	@ (80044cc <get_timestamp+0x84>)
 8004488:	6819      	ldr	r1, [r3, #0]
 800448a:	4b11      	ldr	r3, [pc, #68]	@ (80044d0 <get_timestamp+0x88>)
 800448c:	fba3 2301 	umull	r2, r3, r3, r1
 8004490:	091a      	lsrs	r2, r3, #4
 8004492:	4613      	mov	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	1aca      	subs	r2, r1, r3
 800449c:	b293      	uxth	r3, r2
 800449e:	461a      	mov	r2, r3
 80044a0:	0092      	lsls	r2, r2, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	461a      	mov	r2, r3
 80044a6:	0091      	lsls	r1, r2, #2
 80044a8:	461a      	mov	r2, r3
 80044aa:	460b      	mov	r3, r1
 80044ac:	4413      	add	r3, r2
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	801a      	strh	r2, [r3, #0]
    counter++;
 80044b6:	4b05      	ldr	r3, [pc, #20]	@ (80044cc <get_timestamp+0x84>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3301      	adds	r3, #1
 80044bc:	4a03      	ldr	r2, [pc, #12]	@ (80044cc <get_timestamp+0x84>)
 80044be:	6013      	str	r3, [r2, #0]
}
 80044c0:	bf00      	nop
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	200013e8 	.word	0x200013e8
 80044d0:	cccccccd 	.word	0xcccccccd
 80044d4:	88888889 	.word	0x88888889

080044d8 <Reset_Handler>:
 80044d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004510 <LoopForever+0x2>
 80044dc:	f7ff fbe4 	bl	8003ca8 <SystemInit>
 80044e0:	480c      	ldr	r0, [pc, #48]	@ (8004514 <LoopForever+0x6>)
 80044e2:	490d      	ldr	r1, [pc, #52]	@ (8004518 <LoopForever+0xa>)
 80044e4:	4a0d      	ldr	r2, [pc, #52]	@ (800451c <LoopForever+0xe>)
 80044e6:	2300      	movs	r3, #0
 80044e8:	e002      	b.n	80044f0 <LoopCopyDataInit>

080044ea <CopyDataInit>:
 80044ea:	58d4      	ldr	r4, [r2, r3]
 80044ec:	50c4      	str	r4, [r0, r3]
 80044ee:	3304      	adds	r3, #4

080044f0 <LoopCopyDataInit>:
 80044f0:	18c4      	adds	r4, r0, r3
 80044f2:	428c      	cmp	r4, r1
 80044f4:	d3f9      	bcc.n	80044ea <CopyDataInit>
 80044f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004520 <LoopForever+0x12>)
 80044f8:	4c0a      	ldr	r4, [pc, #40]	@ (8004524 <LoopForever+0x16>)
 80044fa:	2300      	movs	r3, #0
 80044fc:	e001      	b.n	8004502 <LoopFillZerobss>

080044fe <FillZerobss>:
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	3204      	adds	r2, #4

08004502 <LoopFillZerobss>:
 8004502:	42a2      	cmp	r2, r4
 8004504:	d3fb      	bcc.n	80044fe <FillZerobss>
 8004506:	f00b fc53 	bl	800fdb0 <__libc_init_array>
 800450a:	f7fe f9bf 	bl	800288c <main>

0800450e <LoopForever>:
 800450e:	e7fe      	b.n	800450e <LoopForever>
 8004510:	20018000 	.word	0x20018000
 8004514:	20000000 	.word	0x20000000
 8004518:	20000260 	.word	0x20000260
 800451c:	08013fa0 	.word	0x08013fa0
 8004520:	20000260 	.word	0x20000260
 8004524:	200017c8 	.word	0x200017c8

08004528 <ADC1_2_IRQHandler>:
 8004528:	e7fe      	b.n	8004528 <ADC1_2_IRQHandler>

0800452a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004534:	2003      	movs	r0, #3
 8004536:	f001 f905 	bl	8005744 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800453a:	200f      	movs	r0, #15
 800453c:	f000 f80e 	bl	800455c <HAL_InitTick>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	71fb      	strb	r3, [r7, #7]
 800454a:	e001      	b.n	8004550 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800454c:	f7fe fe2e 	bl	80031ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004550:	79fb      	ldrb	r3, [r7, #7]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004564:	2300      	movs	r3, #0
 8004566:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004568:	4b17      	ldr	r3, [pc, #92]	@ (80045c8 <HAL_InitTick+0x6c>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d023      	beq.n	80045b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004570:	4b16      	ldr	r3, [pc, #88]	@ (80045cc <HAL_InitTick+0x70>)
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	4b14      	ldr	r3, [pc, #80]	@ (80045c8 <HAL_InitTick+0x6c>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	4619      	mov	r1, r3
 800457a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800457e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004582:	fbb2 f3f3 	udiv	r3, r2, r3
 8004586:	4618      	mov	r0, r3
 8004588:	f001 f911 	bl	80057ae <HAL_SYSTICK_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10f      	bne.n	80045b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b0f      	cmp	r3, #15
 8004596:	d809      	bhi.n	80045ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004598:	2200      	movs	r2, #0
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045a0:	f001 f8db 	bl	800575a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80045a4:	4a0a      	ldr	r2, [pc, #40]	@ (80045d0 <HAL_InitTick+0x74>)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	e007      	b.n	80045bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	73fb      	strb	r3, [r7, #15]
 80045b0:	e004      	b.n	80045bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	73fb      	strb	r3, [r7, #15]
 80045b6:	e001      	b.n	80045bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	2000007c 	.word	0x2000007c
 80045cc:	20000070 	.word	0x20000070
 80045d0:	20000078 	.word	0x20000078

080045d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80045d8:	4b06      	ldr	r3, [pc, #24]	@ (80045f4 <HAL_IncTick+0x20>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	461a      	mov	r2, r3
 80045de:	4b06      	ldr	r3, [pc, #24]	@ (80045f8 <HAL_IncTick+0x24>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4413      	add	r3, r2
 80045e4:	4a04      	ldr	r2, [pc, #16]	@ (80045f8 <HAL_IncTick+0x24>)
 80045e6:	6013      	str	r3, [r2, #0]
}
 80045e8:	bf00      	nop
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	2000007c 	.word	0x2000007c
 80045f8:	20001400 	.word	0x20001400

080045fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004600:	4b03      	ldr	r3, [pc, #12]	@ (8004610 <HAL_GetTick+0x14>)
 8004602:	681b      	ldr	r3, [r3, #0]
}
 8004604:	4618      	mov	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	20001400 	.word	0x20001400

08004614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800461c:	f7ff ffee 	bl	80045fc <HAL_GetTick>
 8004620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800462c:	d005      	beq.n	800463a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800462e:	4b0a      	ldr	r3, [pc, #40]	@ (8004658 <HAL_Delay+0x44>)
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4413      	add	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800463a:	bf00      	nop
 800463c:	f7ff ffde 	bl	80045fc <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	429a      	cmp	r2, r3
 800464a:	d8f7      	bhi.n	800463c <HAL_Delay+0x28>
  {
  }
}
 800464c:	bf00      	nop
 800464e:	bf00      	nop
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	2000007c 	.word	0x2000007c

0800465c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	609a      	str	r2, [r3, #8]
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	609a      	str	r2, [r3, #8]
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	3360      	adds	r3, #96	@ 0x60
 80046d6:	461a      	mov	r2, r3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	4b08      	ldr	r3, [pc, #32]	@ (8004708 <LL_ADC_SetOffset+0x44>)
 80046e6:	4013      	ands	r3, r2
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80046fc:	bf00      	nop
 80046fe:	371c      	adds	r7, #28
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	03fff000 	.word	0x03fff000

0800470c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3360      	adds	r3, #96	@ 0x60
 800471a:	461a      	mov	r2, r3
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800472c:	4618      	mov	r0, r3
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	3360      	adds	r3, #96	@ 0x60
 8004748:	461a      	mov	r2, r3
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	431a      	orrs	r2, r3
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004762:	bf00      	nop
 8004764:	371c      	adds	r7, #28
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800476e:	b480      	push	{r7}
 8004770:	b087      	sub	sp, #28
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	3330      	adds	r3, #48	@ 0x30
 800477e:	461a      	mov	r2, r3
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	0a1b      	lsrs	r3, r3, #8
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	f003 030c 	and.w	r3, r3, #12
 800478a:	4413      	add	r3, r2
 800478c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	211f      	movs	r1, #31
 800479a:	fa01 f303 	lsl.w	r3, r1, r3
 800479e:	43db      	mvns	r3, r3
 80047a0:	401a      	ands	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	0e9b      	lsrs	r3, r3, #26
 80047a6:	f003 011f 	and.w	r1, r3, #31
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f003 031f 	and.w	r3, r3, #31
 80047b0:	fa01 f303 	lsl.w	r3, r1, r3
 80047b4:	431a      	orrs	r2, r3
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b087      	sub	sp, #28
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3314      	adds	r3, #20
 80047d6:	461a      	mov	r2, r3
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	0e5b      	lsrs	r3, r3, #25
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	4413      	add	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	0d1b      	lsrs	r3, r3, #20
 80047ee:	f003 031f 	and.w	r3, r3, #31
 80047f2:	2107      	movs	r1, #7
 80047f4:	fa01 f303 	lsl.w	r3, r1, r3
 80047f8:	43db      	mvns	r3, r3
 80047fa:	401a      	ands	r2, r3
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	0d1b      	lsrs	r3, r3, #20
 8004800:	f003 031f 	and.w	r3, r3, #31
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	fa01 f303 	lsl.w	r3, r1, r3
 800480a:	431a      	orrs	r2, r3
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004810:	bf00      	nop
 8004812:	371c      	adds	r7, #28
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004834:	43db      	mvns	r3, r3
 8004836:	401a      	ands	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f003 0318 	and.w	r3, r3, #24
 800483e:	4908      	ldr	r1, [pc, #32]	@ (8004860 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004840:	40d9      	lsrs	r1, r3
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	400b      	ands	r3, r1
 8004846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800484a:	431a      	orrs	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004852:	bf00      	nop
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	0007ffff 	.word	0x0007ffff

08004864 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004874:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6093      	str	r3, [r2, #8]
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004898:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800489c:	d101      	bne.n	80048a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80048c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80048c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048ec:	d101      	bne.n	80048f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80048ee:	2301      	movs	r3, #1
 80048f0:	e000      	b.n	80048f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <LL_ADC_IsEnabled+0x18>
 8004914:	2301      	movs	r3, #1
 8004916:	e000      	b.n	800491a <LL_ADC_IsEnabled+0x1a>
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b04      	cmp	r3, #4
 8004938:	d101      	bne.n	800493e <LL_ADC_REG_IsConversionOngoing+0x18>
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 0308 	and.w	r3, r3, #8
 800495c:	2b08      	cmp	r3, #8
 800495e:	d101      	bne.n	8004964 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004960:	2301      	movs	r3, #1
 8004962:	e000      	b.n	8004966 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
	...

08004974 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004974:	b590      	push	{r4, r7, lr}
 8004976:	b089      	sub	sp, #36	@ 0x24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800497c:	2300      	movs	r3, #0
 800497e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004980:	2300      	movs	r3, #0
 8004982:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e130      	b.n	8004bf0 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004998:	2b00      	cmp	r3, #0
 800499a:	d109      	bne.n	80049b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7fe fc29 	bl	80031f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff ff67 	bl	8004888 <LL_ADC_IsDeepPowerDownEnabled>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d004      	beq.n	80049ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff ff4d 	bl	8004864 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff ff82 	bl	80048d8 <LL_ADC_IsInternalRegulatorEnabled>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d115      	bne.n	8004a06 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff ff66 	bl	80048b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049e4:	4b84      	ldr	r3, [pc, #528]	@ (8004bf8 <HAL_ADC_Init+0x284>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	099b      	lsrs	r3, r3, #6
 80049ea:	4a84      	ldr	r2, [pc, #528]	@ (8004bfc <HAL_ADC_Init+0x288>)
 80049ec:	fba2 2303 	umull	r2, r3, r2, r3
 80049f0:	099b      	lsrs	r3, r3, #6
 80049f2:	3301      	adds	r3, #1
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80049f8:	e002      	b.n	8004a00 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	3b01      	subs	r3, #1
 80049fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f9      	bne.n	80049fa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7ff ff64 	bl	80048d8 <LL_ADC_IsInternalRegulatorEnabled>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10d      	bne.n	8004a32 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1a:	f043 0210 	orr.w	r2, r3, #16
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a26:	f043 0201 	orr.w	r2, r3, #1
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff ff75 	bl	8004926 <LL_ADC_REG_IsConversionOngoing>
 8004a3c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f040 80c9 	bne.w	8004bde <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f040 80c5 	bne.w	8004bde <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a58:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004a5c:	f043 0202 	orr.w	r2, r3, #2
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7ff ff49 	bl	8004900 <LL_ADC_IsEnabled>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d115      	bne.n	8004aa0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a74:	4862      	ldr	r0, [pc, #392]	@ (8004c00 <HAL_ADC_Init+0x28c>)
 8004a76:	f7ff ff43 	bl	8004900 <LL_ADC_IsEnabled>
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	4861      	ldr	r0, [pc, #388]	@ (8004c04 <HAL_ADC_Init+0x290>)
 8004a7e:	f7ff ff3f 	bl	8004900 <LL_ADC_IsEnabled>
 8004a82:	4603      	mov	r3, r0
 8004a84:	431c      	orrs	r4, r3
 8004a86:	4860      	ldr	r0, [pc, #384]	@ (8004c08 <HAL_ADC_Init+0x294>)
 8004a88:	f7ff ff3a 	bl	8004900 <LL_ADC_IsEnabled>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	4323      	orrs	r3, r4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d105      	bne.n	8004aa0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	4619      	mov	r1, r3
 8004a9a:	485c      	ldr	r0, [pc, #368]	@ (8004c0c <HAL_ADC_Init+0x298>)
 8004a9c:	f7ff fdde 	bl	800465c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	7e5b      	ldrb	r3, [r3, #25]
 8004aa4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004aaa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004ab0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004ab6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004abe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d106      	bne.n	8004adc <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	045b      	lsls	r3, r3, #17
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d009      	beq.n	8004af8 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	4b44      	ldr	r3, [pc, #272]	@ (8004c10 <HAL_ADC_Init+0x29c>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	6812      	ldr	r2, [r2, #0]
 8004b06:	69b9      	ldr	r1, [r7, #24]
 8004b08:	430b      	orrs	r3, r1
 8004b0a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7ff ff1b 	bl	800494c <LL_ADC_INJ_IsConversionOngoing>
 8004b16:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d13d      	bne.n	8004b9a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d13a      	bne.n	8004b9a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004b28:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b30:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004b32:	4313      	orrs	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b40:	f023 0302 	bic.w	r3, r3, #2
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	69b9      	ldr	r1, [r7, #24]
 8004b4a:	430b      	orrs	r3, r1
 8004b4c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d118      	bne.n	8004b8a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004b62:	f023 0304 	bic.w	r3, r3, #4
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004b6e:	4311      	orrs	r1, r2
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004b74:	4311      	orrs	r1, r2
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0201 	orr.w	r2, r2, #1
 8004b86:	611a      	str	r2, [r3, #16]
 8004b88:	e007      	b.n	8004b9a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0201 	bic.w	r2, r2, #1
 8004b98:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d10c      	bne.n	8004bbc <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba8:	f023 010f 	bic.w	r1, r3, #15
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	1e5a      	subs	r2, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	631a      	str	r2, [r3, #48]	@ 0x30
 8004bba:	e007      	b.n	8004bcc <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 020f 	bic.w	r2, r2, #15
 8004bca:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd0:	f023 0303 	bic.w	r3, r3, #3
 8004bd4:	f043 0201 	orr.w	r2, r3, #1
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	655a      	str	r2, [r3, #84]	@ 0x54
 8004bdc:	e007      	b.n	8004bee <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be2:	f043 0210 	orr.w	r2, r3, #16
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004bee:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3724      	adds	r7, #36	@ 0x24
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd90      	pop	{r4, r7, pc}
 8004bf8:	20000070 	.word	0x20000070
 8004bfc:	053e2d63 	.word	0x053e2d63
 8004c00:	50040000 	.word	0x50040000
 8004c04:	50040100 	.word	0x50040100
 8004c08:	50040200 	.word	0x50040200
 8004c0c:	50040300 	.word	0x50040300
 8004c10:	fff0c007 	.word	0xfff0c007

08004c14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b0b6      	sub	sp, #216	@ 0xd8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004c24:	2300      	movs	r3, #0
 8004c26:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d101      	bne.n	8004c36 <HAL_ADC_ConfigChannel+0x22>
 8004c32:	2302      	movs	r3, #2
 8004c34:	e3c9      	b.n	80053ca <HAL_ADC_ConfigChannel+0x7b6>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff fe6f 	bl	8004926 <LL_ADC_REG_IsConversionOngoing>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f040 83aa 	bne.w	80053a4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2b05      	cmp	r3, #5
 8004c5e:	d824      	bhi.n	8004caa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	3b02      	subs	r3, #2
 8004c66:	2b03      	cmp	r3, #3
 8004c68:	d81b      	bhi.n	8004ca2 <HAL_ADC_ConfigChannel+0x8e>
 8004c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c70 <HAL_ADC_ConfigChannel+0x5c>)
 8004c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c70:	08004c81 	.word	0x08004c81
 8004c74:	08004c89 	.word	0x08004c89
 8004c78:	08004c91 	.word	0x08004c91
 8004c7c:	08004c99 	.word	0x08004c99
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004c80:	230c      	movs	r3, #12
 8004c82:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004c86:	e010      	b.n	8004caa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004c88:	2312      	movs	r3, #18
 8004c8a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004c8e:	e00c      	b.n	8004caa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004c90:	2318      	movs	r3, #24
 8004c92:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004c96:	e008      	b.n	8004caa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004c98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004ca0:	e003      	b.n	8004caa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004ca2:	2306      	movs	r3, #6
 8004ca4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004ca8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6818      	ldr	r0, [r3, #0]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004cb8:	f7ff fd59 	bl	800476e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff fe30 	bl	8004926 <LL_ADC_REG_IsConversionOngoing>
 8004cc6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7ff fe3c 	bl	800494c <LL_ADC_INJ_IsConversionOngoing>
 8004cd4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004cd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f040 81a4 	bne.w	800502a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ce2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f040 819f 	bne.w	800502a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6818      	ldr	r0, [r3, #0]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	6819      	ldr	r1, [r3, #0]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	f7ff fd64 	bl	80047c6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	695a      	ldr	r2, [r3, #20]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	08db      	lsrs	r3, r3, #3
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d00a      	beq.n	8004d36 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6818      	ldr	r0, [r3, #0]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	6919      	ldr	r1, [r3, #16]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d30:	f7ff fcc8 	bl	80046c4 <LL_ADC_SetOffset>
 8004d34:	e179      	b.n	800502a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff fce5 	bl	800470c <LL_ADC_GetOffsetChannel>
 8004d42:	4603      	mov	r3, r0
 8004d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10a      	bne.n	8004d62 <HAL_ADC_ConfigChannel+0x14e>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2100      	movs	r1, #0
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7ff fcda 	bl	800470c <LL_ADC_GetOffsetChannel>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	0e9b      	lsrs	r3, r3, #26
 8004d5c:	f003 021f 	and.w	r2, r3, #31
 8004d60:	e01e      	b.n	8004da0 <HAL_ADC_ConfigChannel+0x18c>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2100      	movs	r1, #0
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff fccf 	bl	800470c <LL_ADC_GetOffsetChannel>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004d78:	fa93 f3a3 	rbit	r3, r3
 8004d7c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004d80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004d84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004d88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8004d90:	2320      	movs	r3, #32
 8004d92:	e004      	b.n	8004d9e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8004d94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d98:	fab3 f383 	clz	r3, r3
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d105      	bne.n	8004db8 <HAL_ADC_ConfigChannel+0x1a4>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	0e9b      	lsrs	r3, r3, #26
 8004db2:	f003 031f 	and.w	r3, r3, #31
 8004db6:	e018      	b.n	8004dea <HAL_ADC_ConfigChannel+0x1d6>
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004dc4:	fa93 f3a3 	rbit	r3, r3
 8004dc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004dcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004dd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004dd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8004ddc:	2320      	movs	r3, #32
 8004dde:	e004      	b.n	8004dea <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8004de0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004de4:	fab3 f383 	clz	r3, r3
 8004de8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d106      	bne.n	8004dfc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2200      	movs	r2, #0
 8004df4:	2100      	movs	r1, #0
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff fc9e 	bl	8004738 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2101      	movs	r1, #1
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff fc82 	bl	800470c <LL_ADC_GetOffsetChannel>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10a      	bne.n	8004e28 <HAL_ADC_ConfigChannel+0x214>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2101      	movs	r1, #1
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff fc77 	bl	800470c <LL_ADC_GetOffsetChannel>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	0e9b      	lsrs	r3, r3, #26
 8004e22:	f003 021f 	and.w	r2, r3, #31
 8004e26:	e01e      	b.n	8004e66 <HAL_ADC_ConfigChannel+0x252>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7ff fc6c 	bl	800470c <LL_ADC_GetOffsetChannel>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e3e:	fa93 f3a3 	rbit	r3, r3
 8004e42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004e46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004e4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8004e56:	2320      	movs	r3, #32
 8004e58:	e004      	b.n	8004e64 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8004e5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e5e:	fab3 f383 	clz	r3, r3
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d105      	bne.n	8004e7e <HAL_ADC_ConfigChannel+0x26a>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	0e9b      	lsrs	r3, r3, #26
 8004e78:	f003 031f 	and.w	r3, r3, #31
 8004e7c:	e018      	b.n	8004eb0 <HAL_ADC_ConfigChannel+0x29c>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e86:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e8a:	fa93 f3a3 	rbit	r3, r3
 8004e8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004e92:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004e96:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004e9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8004ea2:	2320      	movs	r3, #32
 8004ea4:	e004      	b.n	8004eb0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8004ea6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004eaa:	fab3 f383 	clz	r3, r3
 8004eae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d106      	bne.n	8004ec2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2101      	movs	r1, #1
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7ff fc3b 	bl	8004738 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2102      	movs	r1, #2
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff fc1f 	bl	800470c <LL_ADC_GetOffsetChannel>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10a      	bne.n	8004eee <HAL_ADC_ConfigChannel+0x2da>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2102      	movs	r1, #2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff fc14 	bl	800470c <LL_ADC_GetOffsetChannel>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	0e9b      	lsrs	r3, r3, #26
 8004ee8:	f003 021f 	and.w	r2, r3, #31
 8004eec:	e01e      	b.n	8004f2c <HAL_ADC_ConfigChannel+0x318>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2102      	movs	r1, #2
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7ff fc09 	bl	800470c <LL_ADC_GetOffsetChannel>
 8004efa:	4603      	mov	r3, r0
 8004efc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f04:	fa93 f3a3 	rbit	r3, r3
 8004f08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004f0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004f14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8004f1c:	2320      	movs	r3, #32
 8004f1e:	e004      	b.n	8004f2a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8004f20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f24:	fab3 f383 	clz	r3, r3
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d105      	bne.n	8004f44 <HAL_ADC_ConfigChannel+0x330>
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	0e9b      	lsrs	r3, r3, #26
 8004f3e:	f003 031f 	and.w	r3, r3, #31
 8004f42:	e014      	b.n	8004f6e <HAL_ADC_ConfigChannel+0x35a>
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f4c:	fa93 f3a3 	rbit	r3, r3
 8004f50:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004f52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004f58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004f60:	2320      	movs	r3, #32
 8004f62:	e004      	b.n	8004f6e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004f64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f68:	fab3 f383 	clz	r3, r3
 8004f6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d106      	bne.n	8004f80 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2200      	movs	r2, #0
 8004f78:	2102      	movs	r1, #2
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff fbdc 	bl	8004738 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2103      	movs	r1, #3
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff fbc0 	bl	800470c <LL_ADC_GetOffsetChannel>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10a      	bne.n	8004fac <HAL_ADC_ConfigChannel+0x398>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2103      	movs	r1, #3
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff fbb5 	bl	800470c <LL_ADC_GetOffsetChannel>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	0e9b      	lsrs	r3, r3, #26
 8004fa6:	f003 021f 	and.w	r2, r3, #31
 8004faa:	e017      	b.n	8004fdc <HAL_ADC_ConfigChannel+0x3c8>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2103      	movs	r1, #3
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff fbaa 	bl	800470c <LL_ADC_GetOffsetChannel>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004fbe:	fa93 f3a3 	rbit	r3, r3
 8004fc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004fc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fc6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004fc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8004fce:	2320      	movs	r3, #32
 8004fd0:	e003      	b.n	8004fda <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8004fd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fd4:	fab3 f383 	clz	r3, r3
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d105      	bne.n	8004ff4 <HAL_ADC_ConfigChannel+0x3e0>
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	0e9b      	lsrs	r3, r3, #26
 8004fee:	f003 031f 	and.w	r3, r3, #31
 8004ff2:	e011      	b.n	8005018 <HAL_ADC_ConfigChannel+0x404>
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ffa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ffc:	fa93 f3a3 	rbit	r3, r3
 8005000:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8005002:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005004:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8005006:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800500c:	2320      	movs	r3, #32
 800500e:	e003      	b.n	8005018 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005010:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005012:	fab3 f383 	clz	r3, r3
 8005016:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005018:	429a      	cmp	r2, r3
 800501a:	d106      	bne.n	800502a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2200      	movs	r2, #0
 8005022:	2103      	movs	r1, #3
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff fb87 	bl	8004738 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff fc66 	bl	8004900 <LL_ADC_IsEnabled>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	f040 8140 	bne.w	80052bc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6818      	ldr	r0, [r3, #0]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	6819      	ldr	r1, [r3, #0]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	461a      	mov	r2, r3
 800504a:	f7ff fbe7 	bl	800481c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	4a8f      	ldr	r2, [pc, #572]	@ (8005290 <HAL_ADC_ConfigChannel+0x67c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	f040 8131 	bne.w	80052bc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10b      	bne.n	8005082 <HAL_ADC_ConfigChannel+0x46e>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	0e9b      	lsrs	r3, r3, #26
 8005070:	3301      	adds	r3, #1
 8005072:	f003 031f 	and.w	r3, r3, #31
 8005076:	2b09      	cmp	r3, #9
 8005078:	bf94      	ite	ls
 800507a:	2301      	movls	r3, #1
 800507c:	2300      	movhi	r3, #0
 800507e:	b2db      	uxtb	r3, r3
 8005080:	e019      	b.n	80050b6 <HAL_ADC_ConfigChannel+0x4a2>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005088:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800508a:	fa93 f3a3 	rbit	r3, r3
 800508e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8005090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005092:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8005094:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800509a:	2320      	movs	r3, #32
 800509c:	e003      	b.n	80050a6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800509e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050a0:	fab3 f383 	clz	r3, r3
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	3301      	adds	r3, #1
 80050a8:	f003 031f 	and.w	r3, r3, #31
 80050ac:	2b09      	cmp	r3, #9
 80050ae:	bf94      	ite	ls
 80050b0:	2301      	movls	r3, #1
 80050b2:	2300      	movhi	r3, #0
 80050b4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d079      	beq.n	80051ae <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d107      	bne.n	80050d6 <HAL_ADC_ConfigChannel+0x4c2>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	0e9b      	lsrs	r3, r3, #26
 80050cc:	3301      	adds	r3, #1
 80050ce:	069b      	lsls	r3, r3, #26
 80050d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050d4:	e015      	b.n	8005102 <HAL_ADC_ConfigChannel+0x4ee>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050de:	fa93 f3a3 	rbit	r3, r3
 80050e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80050e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050e6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80050e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80050ee:	2320      	movs	r3, #32
 80050f0:	e003      	b.n	80050fa <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80050f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050f4:	fab3 f383 	clz	r3, r3
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	3301      	adds	r3, #1
 80050fc:	069b      	lsls	r3, r3, #26
 80050fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800510a:	2b00      	cmp	r3, #0
 800510c:	d109      	bne.n	8005122 <HAL_ADC_ConfigChannel+0x50e>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	0e9b      	lsrs	r3, r3, #26
 8005114:	3301      	adds	r3, #1
 8005116:	f003 031f 	and.w	r3, r3, #31
 800511a:	2101      	movs	r1, #1
 800511c:	fa01 f303 	lsl.w	r3, r1, r3
 8005120:	e017      	b.n	8005152 <HAL_ADC_ConfigChannel+0x53e>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005128:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800512a:	fa93 f3a3 	rbit	r3, r3
 800512e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8005130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005132:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800513a:	2320      	movs	r3, #32
 800513c:	e003      	b.n	8005146 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800513e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005140:	fab3 f383 	clz	r3, r3
 8005144:	b2db      	uxtb	r3, r3
 8005146:	3301      	adds	r3, #1
 8005148:	f003 031f 	and.w	r3, r3, #31
 800514c:	2101      	movs	r1, #1
 800514e:	fa01 f303 	lsl.w	r3, r1, r3
 8005152:	ea42 0103 	orr.w	r1, r2, r3
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10a      	bne.n	8005178 <HAL_ADC_ConfigChannel+0x564>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	0e9b      	lsrs	r3, r3, #26
 8005168:	3301      	adds	r3, #1
 800516a:	f003 021f 	and.w	r2, r3, #31
 800516e:	4613      	mov	r3, r2
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	4413      	add	r3, r2
 8005174:	051b      	lsls	r3, r3, #20
 8005176:	e018      	b.n	80051aa <HAL_ADC_ConfigChannel+0x596>
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005180:	fa93 f3a3 	rbit	r3, r3
 8005184:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005188:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800518a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8005190:	2320      	movs	r3, #32
 8005192:	e003      	b.n	800519c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8005194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005196:	fab3 f383 	clz	r3, r3
 800519a:	b2db      	uxtb	r3, r3
 800519c:	3301      	adds	r3, #1
 800519e:	f003 021f 	and.w	r2, r3, #31
 80051a2:	4613      	mov	r3, r2
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	4413      	add	r3, r2
 80051a8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051aa:	430b      	orrs	r3, r1
 80051ac:	e081      	b.n	80052b2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d107      	bne.n	80051ca <HAL_ADC_ConfigChannel+0x5b6>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	0e9b      	lsrs	r3, r3, #26
 80051c0:	3301      	adds	r3, #1
 80051c2:	069b      	lsls	r3, r3, #26
 80051c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051c8:	e015      	b.n	80051f6 <HAL_ADC_ConfigChannel+0x5e2>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d2:	fa93 f3a3 	rbit	r3, r3
 80051d6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80051d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80051dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80051e2:	2320      	movs	r3, #32
 80051e4:	e003      	b.n	80051ee <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80051e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e8:	fab3 f383 	clz	r3, r3
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	3301      	adds	r3, #1
 80051f0:	069b      	lsls	r3, r3, #26
 80051f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d109      	bne.n	8005216 <HAL_ADC_ConfigChannel+0x602>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	0e9b      	lsrs	r3, r3, #26
 8005208:	3301      	adds	r3, #1
 800520a:	f003 031f 	and.w	r3, r3, #31
 800520e:	2101      	movs	r1, #1
 8005210:	fa01 f303 	lsl.w	r3, r1, r3
 8005214:	e017      	b.n	8005246 <HAL_ADC_ConfigChannel+0x632>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	fa93 f3a3 	rbit	r3, r3
 8005222:	61bb      	str	r3, [r7, #24]
  return result;
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800522e:	2320      	movs	r3, #32
 8005230:	e003      	b.n	800523a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	fab3 f383 	clz	r3, r3
 8005238:	b2db      	uxtb	r3, r3
 800523a:	3301      	adds	r3, #1
 800523c:	f003 031f 	and.w	r3, r3, #31
 8005240:	2101      	movs	r1, #1
 8005242:	fa01 f303 	lsl.w	r3, r1, r3
 8005246:	ea42 0103 	orr.w	r1, r2, r3
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10d      	bne.n	8005272 <HAL_ADC_ConfigChannel+0x65e>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	0e9b      	lsrs	r3, r3, #26
 800525c:	3301      	adds	r3, #1
 800525e:	f003 021f 	and.w	r2, r3, #31
 8005262:	4613      	mov	r3, r2
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	4413      	add	r3, r2
 8005268:	3b1e      	subs	r3, #30
 800526a:	051b      	lsls	r3, r3, #20
 800526c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005270:	e01e      	b.n	80052b0 <HAL_ADC_ConfigChannel+0x69c>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	fa93 f3a3 	rbit	r3, r3
 800527e:	60fb      	str	r3, [r7, #12]
  return result;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d104      	bne.n	8005294 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800528a:	2320      	movs	r3, #32
 800528c:	e006      	b.n	800529c <HAL_ADC_ConfigChannel+0x688>
 800528e:	bf00      	nop
 8005290:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	fab3 f383 	clz	r3, r3
 800529a:	b2db      	uxtb	r3, r3
 800529c:	3301      	adds	r3, #1
 800529e:	f003 021f 	and.w	r2, r3, #31
 80052a2:	4613      	mov	r3, r2
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	4413      	add	r3, r2
 80052a8:	3b1e      	subs	r3, #30
 80052aa:	051b      	lsls	r3, r3, #20
 80052ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052b0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052b6:	4619      	mov	r1, r3
 80052b8:	f7ff fa85 	bl	80047c6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	4b44      	ldr	r3, [pc, #272]	@ (80053d4 <HAL_ADC_ConfigChannel+0x7c0>)
 80052c2:	4013      	ands	r3, r2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d07a      	beq.n	80053be <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80052c8:	4843      	ldr	r0, [pc, #268]	@ (80053d8 <HAL_ADC_ConfigChannel+0x7c4>)
 80052ca:	f7ff f9ed 	bl	80046a8 <LL_ADC_GetCommonPathInternalCh>
 80052ce:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a41      	ldr	r2, [pc, #260]	@ (80053dc <HAL_ADC_ConfigChannel+0x7c8>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d12c      	bne.n	8005336 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80052dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80052e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d126      	bne.n	8005336 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a3c      	ldr	r2, [pc, #240]	@ (80053e0 <HAL_ADC_ConfigChannel+0x7cc>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d004      	beq.n	80052fc <HAL_ADC_ConfigChannel+0x6e8>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a3b      	ldr	r2, [pc, #236]	@ (80053e4 <HAL_ADC_ConfigChannel+0x7d0>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d15d      	bne.n	80053b8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005300:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005304:	4619      	mov	r1, r3
 8005306:	4834      	ldr	r0, [pc, #208]	@ (80053d8 <HAL_ADC_ConfigChannel+0x7c4>)
 8005308:	f7ff f9bb 	bl	8004682 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800530c:	4b36      	ldr	r3, [pc, #216]	@ (80053e8 <HAL_ADC_ConfigChannel+0x7d4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	099b      	lsrs	r3, r3, #6
 8005312:	4a36      	ldr	r2, [pc, #216]	@ (80053ec <HAL_ADC_ConfigChannel+0x7d8>)
 8005314:	fba2 2303 	umull	r2, r3, r2, r3
 8005318:	099b      	lsrs	r3, r3, #6
 800531a:	1c5a      	adds	r2, r3, #1
 800531c:	4613      	mov	r3, r2
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005326:	e002      	b.n	800532e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	3b01      	subs	r3, #1
 800532c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1f9      	bne.n	8005328 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005334:	e040      	b.n	80053b8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a2d      	ldr	r2, [pc, #180]	@ (80053f0 <HAL_ADC_ConfigChannel+0x7dc>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d118      	bne.n	8005372 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005340:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005344:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d112      	bne.n	8005372 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a23      	ldr	r2, [pc, #140]	@ (80053e0 <HAL_ADC_ConfigChannel+0x7cc>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d004      	beq.n	8005360 <HAL_ADC_ConfigChannel+0x74c>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a22      	ldr	r2, [pc, #136]	@ (80053e4 <HAL_ADC_ConfigChannel+0x7d0>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d12d      	bne.n	80053bc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005360:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005364:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005368:	4619      	mov	r1, r3
 800536a:	481b      	ldr	r0, [pc, #108]	@ (80053d8 <HAL_ADC_ConfigChannel+0x7c4>)
 800536c:	f7ff f989 	bl	8004682 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005370:	e024      	b.n	80053bc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a1f      	ldr	r2, [pc, #124]	@ (80053f4 <HAL_ADC_ConfigChannel+0x7e0>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d120      	bne.n	80053be <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800537c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005380:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d11a      	bne.n	80053be <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a14      	ldr	r2, [pc, #80]	@ (80053e0 <HAL_ADC_ConfigChannel+0x7cc>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d115      	bne.n	80053be <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005392:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005396:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800539a:	4619      	mov	r1, r3
 800539c:	480e      	ldr	r0, [pc, #56]	@ (80053d8 <HAL_ADC_ConfigChannel+0x7c4>)
 800539e:	f7ff f970 	bl	8004682 <LL_ADC_SetCommonPathInternalCh>
 80053a2:	e00c      	b.n	80053be <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a8:	f043 0220 	orr.w	r2, r3, #32
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80053b6:	e002      	b.n	80053be <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80053b8:	bf00      	nop
 80053ba:	e000      	b.n	80053be <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80053bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80053c6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	37d8      	adds	r7, #216	@ 0xd8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	80080000 	.word	0x80080000
 80053d8:	50040300 	.word	0x50040300
 80053dc:	c7520000 	.word	0xc7520000
 80053e0:	50040000 	.word	0x50040000
 80053e4:	50040200 	.word	0x50040200
 80053e8:	20000070 	.word	0x20000070
 80053ec:	053e2d63 	.word	0x053e2d63
 80053f0:	cb840000 	.word	0xcb840000
 80053f4:	80000001 	.word	0x80000001

080053f8 <LL_ADC_IsEnabled>:
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b01      	cmp	r3, #1
 800540a:	d101      	bne.n	8005410 <LL_ADC_IsEnabled+0x18>
 800540c:	2301      	movs	r3, #1
 800540e:	e000      	b.n	8005412 <LL_ADC_IsEnabled+0x1a>
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <LL_ADC_REG_IsConversionOngoing>:
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 0304 	and.w	r3, r3, #4
 800542e:	2b04      	cmp	r3, #4
 8005430:	d101      	bne.n	8005436 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005432:	2301      	movs	r3, #1
 8005434:	e000      	b.n	8005438 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005444:	b590      	push	{r4, r7, lr}
 8005446:	b09f      	sub	sp, #124	@ 0x7c
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800544e:	2300      	movs	r3, #0
 8005450:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800545a:	2b01      	cmp	r3, #1
 800545c:	d101      	bne.n	8005462 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800545e:	2302      	movs	r3, #2
 8005460:	e093      	b.n	800558a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800546a:	2300      	movs	r3, #0
 800546c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800546e:	2300      	movs	r3, #0
 8005470:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a47      	ldr	r2, [pc, #284]	@ (8005594 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d102      	bne.n	8005482 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800547c:	4b46      	ldr	r3, [pc, #280]	@ (8005598 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800547e:	60bb      	str	r3, [r7, #8]
 8005480:	e001      	b.n	8005486 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005482:	2300      	movs	r3, #0
 8005484:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10b      	bne.n	80054a4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005490:	f043 0220 	orr.w	r2, r3, #32
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e072      	b.n	800558a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff ffb9 	bl	800541e <LL_ADC_REG_IsConversionOngoing>
 80054ac:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff ffb3 	bl	800541e <LL_ADC_REG_IsConversionOngoing>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d154      	bne.n	8005568 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80054be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d151      	bne.n	8005568 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80054c4:	4b35      	ldr	r3, [pc, #212]	@ (800559c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80054c6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d02c      	beq.n	800552a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80054d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	6859      	ldr	r1, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80054e2:	035b      	lsls	r3, r3, #13
 80054e4:	430b      	orrs	r3, r1
 80054e6:	431a      	orrs	r2, r3
 80054e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054ea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054ec:	4829      	ldr	r0, [pc, #164]	@ (8005594 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80054ee:	f7ff ff83 	bl	80053f8 <LL_ADC_IsEnabled>
 80054f2:	4604      	mov	r4, r0
 80054f4:	4828      	ldr	r0, [pc, #160]	@ (8005598 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80054f6:	f7ff ff7f 	bl	80053f8 <LL_ADC_IsEnabled>
 80054fa:	4603      	mov	r3, r0
 80054fc:	431c      	orrs	r4, r3
 80054fe:	4828      	ldr	r0, [pc, #160]	@ (80055a0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005500:	f7ff ff7a 	bl	80053f8 <LL_ADC_IsEnabled>
 8005504:	4603      	mov	r3, r0
 8005506:	4323      	orrs	r3, r4
 8005508:	2b00      	cmp	r3, #0
 800550a:	d137      	bne.n	800557c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800550c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005514:	f023 030f 	bic.w	r3, r3, #15
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	6811      	ldr	r1, [r2, #0]
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	6892      	ldr	r2, [r2, #8]
 8005520:	430a      	orrs	r2, r1
 8005522:	431a      	orrs	r2, r3
 8005524:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005526:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005528:	e028      	b.n	800557c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800552a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005532:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005534:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005536:	4817      	ldr	r0, [pc, #92]	@ (8005594 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005538:	f7ff ff5e 	bl	80053f8 <LL_ADC_IsEnabled>
 800553c:	4604      	mov	r4, r0
 800553e:	4816      	ldr	r0, [pc, #88]	@ (8005598 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005540:	f7ff ff5a 	bl	80053f8 <LL_ADC_IsEnabled>
 8005544:	4603      	mov	r3, r0
 8005546:	431c      	orrs	r4, r3
 8005548:	4815      	ldr	r0, [pc, #84]	@ (80055a0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800554a:	f7ff ff55 	bl	80053f8 <LL_ADC_IsEnabled>
 800554e:	4603      	mov	r3, r0
 8005550:	4323      	orrs	r3, r4
 8005552:	2b00      	cmp	r3, #0
 8005554:	d112      	bne.n	800557c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005556:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800555e:	f023 030f 	bic.w	r3, r3, #15
 8005562:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005564:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005566:	e009      	b.n	800557c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800556c:	f043 0220 	orr.w	r2, r3, #32
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800557a:	e000      	b.n	800557e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800557c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8005586:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800558a:	4618      	mov	r0, r3
 800558c:	377c      	adds	r7, #124	@ 0x7c
 800558e:	46bd      	mov	sp, r7
 8005590:	bd90      	pop	{r4, r7, pc}
 8005592:	bf00      	nop
 8005594:	50040000 	.word	0x50040000
 8005598:	50040100 	.word	0x50040100
 800559c:	50040300 	.word	0x50040300
 80055a0:	50040200 	.word	0x50040200

080055a4 <__NVIC_SetPriorityGrouping>:
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055b4:	4b0c      	ldr	r3, [pc, #48]	@ (80055e8 <__NVIC_SetPriorityGrouping+0x44>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80055c0:	4013      	ands	r3, r2
 80055c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80055d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055d6:	4a04      	ldr	r2, [pc, #16]	@ (80055e8 <__NVIC_SetPriorityGrouping+0x44>)
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	60d3      	str	r3, [r2, #12]
}
 80055dc:	bf00      	nop
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	e000ed00 	.word	0xe000ed00

080055ec <__NVIC_GetPriorityGrouping>:
{
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055f0:	4b04      	ldr	r3, [pc, #16]	@ (8005604 <__NVIC_GetPriorityGrouping+0x18>)
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	0a1b      	lsrs	r3, r3, #8
 80055f6:	f003 0307 	and.w	r3, r3, #7
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	e000ed00 	.word	0xe000ed00

08005608 <__NVIC_EnableIRQ>:
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	4603      	mov	r3, r0
 8005610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005616:	2b00      	cmp	r3, #0
 8005618:	db0b      	blt.n	8005632 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800561a:	79fb      	ldrb	r3, [r7, #7]
 800561c:	f003 021f 	and.w	r2, r3, #31
 8005620:	4907      	ldr	r1, [pc, #28]	@ (8005640 <__NVIC_EnableIRQ+0x38>)
 8005622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005626:	095b      	lsrs	r3, r3, #5
 8005628:	2001      	movs	r0, #1
 800562a:	fa00 f202 	lsl.w	r2, r0, r2
 800562e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	e000e100 	.word	0xe000e100

08005644 <__NVIC_SetPriority>:
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	4603      	mov	r3, r0
 800564c:	6039      	str	r1, [r7, #0]
 800564e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005654:	2b00      	cmp	r3, #0
 8005656:	db0a      	blt.n	800566e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	b2da      	uxtb	r2, r3
 800565c:	490c      	ldr	r1, [pc, #48]	@ (8005690 <__NVIC_SetPriority+0x4c>)
 800565e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005662:	0112      	lsls	r2, r2, #4
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	440b      	add	r3, r1
 8005668:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800566c:	e00a      	b.n	8005684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	b2da      	uxtb	r2, r3
 8005672:	4908      	ldr	r1, [pc, #32]	@ (8005694 <__NVIC_SetPriority+0x50>)
 8005674:	79fb      	ldrb	r3, [r7, #7]
 8005676:	f003 030f 	and.w	r3, r3, #15
 800567a:	3b04      	subs	r3, #4
 800567c:	0112      	lsls	r2, r2, #4
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	440b      	add	r3, r1
 8005682:	761a      	strb	r2, [r3, #24]
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	e000e100 	.word	0xe000e100
 8005694:	e000ed00 	.word	0xe000ed00

08005698 <NVIC_EncodePriority>:
{
 8005698:	b480      	push	{r7}
 800569a:	b089      	sub	sp, #36	@ 0x24
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f003 0307 	and.w	r3, r3, #7
 80056aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	f1c3 0307 	rsb	r3, r3, #7
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	bf28      	it	cs
 80056b6:	2304      	movcs	r3, #4
 80056b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	3304      	adds	r3, #4
 80056be:	2b06      	cmp	r3, #6
 80056c0:	d902      	bls.n	80056c8 <NVIC_EncodePriority+0x30>
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	3b03      	subs	r3, #3
 80056c6:	e000      	b.n	80056ca <NVIC_EncodePriority+0x32>
 80056c8:	2300      	movs	r3, #0
 80056ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	fa02 f303 	lsl.w	r3, r2, r3
 80056d6:	43da      	mvns	r2, r3
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	401a      	ands	r2, r3
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	fa01 f303 	lsl.w	r3, r1, r3
 80056ea:	43d9      	mvns	r1, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056f0:	4313      	orrs	r3, r2
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3724      	adds	r7, #36	@ 0x24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
	...

08005700 <SysTick_Config>:
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3b01      	subs	r3, #1
 800570c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005710:	d301      	bcc.n	8005716 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8005712:	2301      	movs	r3, #1
 8005714:	e00f      	b.n	8005736 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005716:	4a0a      	ldr	r2, [pc, #40]	@ (8005740 <SysTick_Config+0x40>)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3b01      	subs	r3, #1
 800571c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800571e:	210f      	movs	r1, #15
 8005720:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005724:	f7ff ff8e 	bl	8005644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005728:	4b05      	ldr	r3, [pc, #20]	@ (8005740 <SysTick_Config+0x40>)
 800572a:	2200      	movs	r2, #0
 800572c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800572e:	4b04      	ldr	r3, [pc, #16]	@ (8005740 <SysTick_Config+0x40>)
 8005730:	2207      	movs	r2, #7
 8005732:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	e000e010 	.word	0xe000e010

08005744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7ff ff29 	bl	80055a4 <__NVIC_SetPriorityGrouping>
}
 8005752:	bf00      	nop
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b086      	sub	sp, #24
 800575e:	af00      	add	r7, sp, #0
 8005760:	4603      	mov	r3, r0
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	607a      	str	r2, [r7, #4]
 8005766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005768:	2300      	movs	r3, #0
 800576a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800576c:	f7ff ff3e 	bl	80055ec <__NVIC_GetPriorityGrouping>
 8005770:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	68b9      	ldr	r1, [r7, #8]
 8005776:	6978      	ldr	r0, [r7, #20]
 8005778:	f7ff ff8e 	bl	8005698 <NVIC_EncodePriority>
 800577c:	4602      	mov	r2, r0
 800577e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005782:	4611      	mov	r1, r2
 8005784:	4618      	mov	r0, r3
 8005786:	f7ff ff5d 	bl	8005644 <__NVIC_SetPriority>
}
 800578a:	bf00      	nop
 800578c:	3718      	adds	r7, #24
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b082      	sub	sp, #8
 8005796:	af00      	add	r7, sp, #0
 8005798:	4603      	mov	r3, r0
 800579a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800579c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7ff ff31 	bl	8005608 <__NVIC_EnableIRQ>
}
 80057a6:	bf00      	nop
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b082      	sub	sp, #8
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff ffa2 	bl	8005700 <SysTick_Config>
 80057bc:	4603      	mov	r3, r0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
	...

080057c8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e098      	b.n	800590c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	4b4d      	ldr	r3, [pc, #308]	@ (8005918 <HAL_DMA_Init+0x150>)
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d80f      	bhi.n	8005806 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	4b4b      	ldr	r3, [pc, #300]	@ (800591c <HAL_DMA_Init+0x154>)
 80057ee:	4413      	add	r3, r2
 80057f0:	4a4b      	ldr	r2, [pc, #300]	@ (8005920 <HAL_DMA_Init+0x158>)
 80057f2:	fba2 2303 	umull	r2, r3, r2, r3
 80057f6:	091b      	lsrs	r3, r3, #4
 80057f8:	009a      	lsls	r2, r3, #2
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a48      	ldr	r2, [pc, #288]	@ (8005924 <HAL_DMA_Init+0x15c>)
 8005802:	641a      	str	r2, [r3, #64]	@ 0x40
 8005804:	e00e      	b.n	8005824 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	4b46      	ldr	r3, [pc, #280]	@ (8005928 <HAL_DMA_Init+0x160>)
 800580e:	4413      	add	r3, r2
 8005810:	4a43      	ldr	r2, [pc, #268]	@ (8005920 <HAL_DMA_Init+0x158>)
 8005812:	fba2 2303 	umull	r2, r3, r2, r3
 8005816:	091b      	lsrs	r3, r3, #4
 8005818:	009a      	lsls	r2, r3, #2
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a42      	ldr	r2, [pc, #264]	@ (800592c <HAL_DMA_Init+0x164>)
 8005822:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800583a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800583e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005848:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005854:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005860:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	4313      	orrs	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800587e:	d039      	beq.n	80058f4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005884:	4a27      	ldr	r2, [pc, #156]	@ (8005924 <HAL_DMA_Init+0x15c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d11a      	bne.n	80058c0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800588a:	4b29      	ldr	r3, [pc, #164]	@ (8005930 <HAL_DMA_Init+0x168>)
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005892:	f003 031c 	and.w	r3, r3, #28
 8005896:	210f      	movs	r1, #15
 8005898:	fa01 f303 	lsl.w	r3, r1, r3
 800589c:	43db      	mvns	r3, r3
 800589e:	4924      	ldr	r1, [pc, #144]	@ (8005930 <HAL_DMA_Init+0x168>)
 80058a0:	4013      	ands	r3, r2
 80058a2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80058a4:	4b22      	ldr	r3, [pc, #136]	@ (8005930 <HAL_DMA_Init+0x168>)
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6859      	ldr	r1, [r3, #4]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b0:	f003 031c 	and.w	r3, r3, #28
 80058b4:	fa01 f303 	lsl.w	r3, r1, r3
 80058b8:	491d      	ldr	r1, [pc, #116]	@ (8005930 <HAL_DMA_Init+0x168>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	600b      	str	r3, [r1, #0]
 80058be:	e019      	b.n	80058f4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80058c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005934 <HAL_DMA_Init+0x16c>)
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058c8:	f003 031c 	and.w	r3, r3, #28
 80058cc:	210f      	movs	r1, #15
 80058ce:	fa01 f303 	lsl.w	r3, r1, r3
 80058d2:	43db      	mvns	r3, r3
 80058d4:	4917      	ldr	r1, [pc, #92]	@ (8005934 <HAL_DMA_Init+0x16c>)
 80058d6:	4013      	ands	r3, r2
 80058d8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80058da:	4b16      	ldr	r3, [pc, #88]	@ (8005934 <HAL_DMA_Init+0x16c>)
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6859      	ldr	r1, [r3, #4]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e6:	f003 031c 	and.w	r3, r3, #28
 80058ea:	fa01 f303 	lsl.w	r3, r1, r3
 80058ee:	4911      	ldr	r1, [pc, #68]	@ (8005934 <HAL_DMA_Init+0x16c>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	40020407 	.word	0x40020407
 800591c:	bffdfff8 	.word	0xbffdfff8
 8005920:	cccccccd 	.word	0xcccccccd
 8005924:	40020000 	.word	0x40020000
 8005928:	bffdfbf8 	.word	0xbffdfbf8
 800592c:	40020400 	.word	0x40020400
 8005930:	400200a8 	.word	0x400200a8
 8005934:	400204a8 	.word	0x400204a8

08005938 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005940:	2300      	movs	r3, #0
 8005942:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b02      	cmp	r3, #2
 800594e:	d008      	beq.n	8005962 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2204      	movs	r2, #4
 8005954:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e022      	b.n	80059a8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 020e 	bic.w	r2, r2, #14
 8005970:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0201 	bic.w	r2, r2, #1
 8005980:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005986:	f003 021c 	and.w	r2, r3, #28
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598e:	2101      	movs	r1, #1
 8005990:	fa01 f202 	lsl.w	r2, r1, r2
 8005994:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059bc:	2300      	movs	r3, #0
 80059be:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d005      	beq.n	80059d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2204      	movs	r2, #4
 80059d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	73fb      	strb	r3, [r7, #15]
 80059d6:	e029      	b.n	8005a2c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 020e 	bic.w	r2, r2, #14
 80059e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 0201 	bic.w	r2, r2, #1
 80059f6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059fc:	f003 021c 	and.w	r2, r3, #28
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a04:	2101      	movs	r1, #1
 8005a06:	fa01 f202 	lsl.w	r2, r1, r2
 8005a0a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d003      	beq.n	8005a2c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	4798      	blx	r3
    }
  }
  return status;
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b084      	sub	sp, #16
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a52:	f003 031c 	and.w	r3, r3, #28
 8005a56:	2204      	movs	r2, #4
 8005a58:	409a      	lsls	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d026      	beq.n	8005ab0 <HAL_DMA_IRQHandler+0x7a>
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d021      	beq.n	8005ab0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d107      	bne.n	8005a8a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 0204 	bic.w	r2, r2, #4
 8005a88:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a8e:	f003 021c 	and.w	r2, r3, #28
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a96:	2104      	movs	r1, #4
 8005a98:	fa01 f202 	lsl.w	r2, r1, r2
 8005a9c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d071      	beq.n	8005b8a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005aae:	e06c      	b.n	8005b8a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab4:	f003 031c 	and.w	r3, r3, #28
 8005ab8:	2202      	movs	r2, #2
 8005aba:	409a      	lsls	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d02e      	beq.n	8005b22 <HAL_DMA_IRQHandler+0xec>
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d029      	beq.n	8005b22 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10b      	bne.n	8005af4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 020a 	bic.w	r2, r2, #10
 8005aea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005af8:	f003 021c 	and.w	r2, r3, #28
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b00:	2102      	movs	r1, #2
 8005b02:	fa01 f202 	lsl.w	r2, r1, r2
 8005b06:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d038      	beq.n	8005b8a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005b20:	e033      	b.n	8005b8a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b26:	f003 031c 	and.w	r3, r3, #28
 8005b2a:	2208      	movs	r2, #8
 8005b2c:	409a      	lsls	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4013      	ands	r3, r2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d02a      	beq.n	8005b8c <HAL_DMA_IRQHandler+0x156>
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f003 0308 	and.w	r3, r3, #8
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d025      	beq.n	8005b8c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 020e 	bic.w	r2, r2, #14
 8005b4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b54:	f003 021c 	and.w	r2, r3, #28
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8005b62:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d004      	beq.n	8005b8c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005b8a:	bf00      	nop
 8005b8c:	bf00      	nop
}
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ba2:	e17f      	b.n	8005ea4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	2101      	movs	r1, #1
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 8171 	beq.w	8005e9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f003 0303 	and.w	r3, r3, #3
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d005      	beq.n	8005bd4 <HAL_GPIO_Init+0x40>
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f003 0303 	and.w	r3, r3, #3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d130      	bne.n	8005c36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	2203      	movs	r2, #3
 8005be0:	fa02 f303 	lsl.w	r3, r2, r3
 8005be4:	43db      	mvns	r3, r3
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	4013      	ands	r3, r2
 8005bea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	68da      	ldr	r2, [r3, #12]
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c12:	43db      	mvns	r3, r3
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	4013      	ands	r3, r2
 8005c18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	091b      	lsrs	r3, r3, #4
 8005c20:	f003 0201 	and.w	r2, r3, #1
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d118      	bne.n	8005c74 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005c48:	2201      	movs	r2, #1
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c50:	43db      	mvns	r3, r3
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	4013      	ands	r3, r2
 8005c56:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	08db      	lsrs	r3, r3, #3
 8005c5e:	f003 0201 	and.w	r2, r3, #1
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	fa02 f303 	lsl.w	r3, r2, r3
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f003 0303 	and.w	r3, r3, #3
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d017      	beq.n	8005cb0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	2203      	movs	r2, #3
 8005c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c90:	43db      	mvns	r3, r3
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	4013      	ands	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f003 0303 	and.w	r3, r3, #3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d123      	bne.n	8005d04 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	08da      	lsrs	r2, r3, #3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3208      	adds	r2, #8
 8005cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	220f      	movs	r2, #15
 8005cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd8:	43db      	mvns	r3, r3
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	691a      	ldr	r2, [r3, #16]
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	08da      	lsrs	r2, r3, #3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3208      	adds	r2, #8
 8005cfe:	6939      	ldr	r1, [r7, #16]
 8005d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	2203      	movs	r2, #3
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	43db      	mvns	r3, r3
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f003 0203 	and.w	r2, r3, #3
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 80ac 	beq.w	8005e9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d46:	4b5f      	ldr	r3, [pc, #380]	@ (8005ec4 <HAL_GPIO_Init+0x330>)
 8005d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d4a:	4a5e      	ldr	r2, [pc, #376]	@ (8005ec4 <HAL_GPIO_Init+0x330>)
 8005d4c:	f043 0301 	orr.w	r3, r3, #1
 8005d50:	6613      	str	r3, [r2, #96]	@ 0x60
 8005d52:	4b5c      	ldr	r3, [pc, #368]	@ (8005ec4 <HAL_GPIO_Init+0x330>)
 8005d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	60bb      	str	r3, [r7, #8]
 8005d5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005d5e:	4a5a      	ldr	r2, [pc, #360]	@ (8005ec8 <HAL_GPIO_Init+0x334>)
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	089b      	lsrs	r3, r3, #2
 8005d64:	3302      	adds	r3, #2
 8005d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f003 0303 	and.w	r3, r3, #3
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	220f      	movs	r2, #15
 8005d76:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7a:	43db      	mvns	r3, r3
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005d88:	d025      	beq.n	8005dd6 <HAL_GPIO_Init+0x242>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a4f      	ldr	r2, [pc, #316]	@ (8005ecc <HAL_GPIO_Init+0x338>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d01f      	beq.n	8005dd2 <HAL_GPIO_Init+0x23e>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a4e      	ldr	r2, [pc, #312]	@ (8005ed0 <HAL_GPIO_Init+0x33c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d019      	beq.n	8005dce <HAL_GPIO_Init+0x23a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a4d      	ldr	r2, [pc, #308]	@ (8005ed4 <HAL_GPIO_Init+0x340>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d013      	beq.n	8005dca <HAL_GPIO_Init+0x236>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a4c      	ldr	r2, [pc, #304]	@ (8005ed8 <HAL_GPIO_Init+0x344>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d00d      	beq.n	8005dc6 <HAL_GPIO_Init+0x232>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a4b      	ldr	r2, [pc, #300]	@ (8005edc <HAL_GPIO_Init+0x348>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d007      	beq.n	8005dc2 <HAL_GPIO_Init+0x22e>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a4a      	ldr	r2, [pc, #296]	@ (8005ee0 <HAL_GPIO_Init+0x34c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d101      	bne.n	8005dbe <HAL_GPIO_Init+0x22a>
 8005dba:	2306      	movs	r3, #6
 8005dbc:	e00c      	b.n	8005dd8 <HAL_GPIO_Init+0x244>
 8005dbe:	2307      	movs	r3, #7
 8005dc0:	e00a      	b.n	8005dd8 <HAL_GPIO_Init+0x244>
 8005dc2:	2305      	movs	r3, #5
 8005dc4:	e008      	b.n	8005dd8 <HAL_GPIO_Init+0x244>
 8005dc6:	2304      	movs	r3, #4
 8005dc8:	e006      	b.n	8005dd8 <HAL_GPIO_Init+0x244>
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e004      	b.n	8005dd8 <HAL_GPIO_Init+0x244>
 8005dce:	2302      	movs	r3, #2
 8005dd0:	e002      	b.n	8005dd8 <HAL_GPIO_Init+0x244>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e000      	b.n	8005dd8 <HAL_GPIO_Init+0x244>
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	f002 0203 	and.w	r2, r2, #3
 8005dde:	0092      	lsls	r2, r2, #2
 8005de0:	4093      	lsls	r3, r2
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005de8:	4937      	ldr	r1, [pc, #220]	@ (8005ec8 <HAL_GPIO_Init+0x334>)
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	089b      	lsrs	r3, r3, #2
 8005dee:	3302      	adds	r3, #2
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005df6:	4b3b      	ldr	r3, [pc, #236]	@ (8005ee4 <HAL_GPIO_Init+0x350>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	43db      	mvns	r3, r3
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	4013      	ands	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005e1a:	4a32      	ldr	r2, [pc, #200]	@ (8005ee4 <HAL_GPIO_Init+0x350>)
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005e20:	4b30      	ldr	r3, [pc, #192]	@ (8005ee4 <HAL_GPIO_Init+0x350>)
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	43db      	mvns	r3, r3
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005e44:	4a27      	ldr	r2, [pc, #156]	@ (8005ee4 <HAL_GPIO_Init+0x350>)
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005e4a:	4b26      	ldr	r3, [pc, #152]	@ (8005ee4 <HAL_GPIO_Init+0x350>)
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	43db      	mvns	r3, r3
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	4013      	ands	r3, r2
 8005e58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005e6e:	4a1d      	ldr	r2, [pc, #116]	@ (8005ee4 <HAL_GPIO_Init+0x350>)
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005e74:	4b1b      	ldr	r3, [pc, #108]	@ (8005ee4 <HAL_GPIO_Init+0x350>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	4013      	ands	r3, r2
 8005e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005e98:	4a12      	ldr	r2, [pc, #72]	@ (8005ee4 <HAL_GPIO_Init+0x350>)
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f47f ae78 	bne.w	8005ba4 <HAL_GPIO_Init+0x10>
  }
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	40021000 	.word	0x40021000
 8005ec8:	40010000 	.word	0x40010000
 8005ecc:	48000400 	.word	0x48000400
 8005ed0:	48000800 	.word	0x48000800
 8005ed4:	48000c00 	.word	0x48000c00
 8005ed8:	48001000 	.word	0x48001000
 8005edc:	48001400 	.word	0x48001400
 8005ee0:	48001800 	.word	0x48001800
 8005ee4:	40010400 	.word	0x40010400

08005ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	807b      	strh	r3, [r7, #2]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ef8:	787b      	ldrb	r3, [r7, #1]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005efe:	887a      	ldrh	r2, [r7, #2]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f04:	e002      	b.n	8005f0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f06:	887a      	ldrh	r2, [r7, #2]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e08d      	b.n	8006046 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d106      	bne.n	8005f44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7fd f9c6 	bl	80032d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2224      	movs	r2, #36	@ 0x24
 8005f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 0201 	bic.w	r2, r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005f68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689a      	ldr	r2, [r3, #8]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d107      	bne.n	8005f92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	689a      	ldr	r2, [r3, #8]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f8e:	609a      	str	r2, [r3, #8]
 8005f90:	e006      	b.n	8005fa0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689a      	ldr	r2, [r3, #8]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005f9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d108      	bne.n	8005fba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fb6:	605a      	str	r2, [r3, #4]
 8005fb8:	e007      	b.n	8005fca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005fc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6812      	ldr	r2, [r2, #0]
 8005fd4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005fd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fdc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68da      	ldr	r2, [r3, #12]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005fec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691a      	ldr	r2, [r3, #16]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	430a      	orrs	r2, r1
 8006006:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	69d9      	ldr	r1, [r3, #28]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a1a      	ldr	r2, [r3, #32]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	430a      	orrs	r2, r1
 8006016:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0201 	orr.w	r2, r2, #1
 8006026:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2220      	movs	r2, #32
 8006032:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
	...

08006050 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b088      	sub	sp, #32
 8006054:	af02      	add	r7, sp, #8
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	607a      	str	r2, [r7, #4]
 800605a:	461a      	mov	r2, r3
 800605c:	460b      	mov	r3, r1
 800605e:	817b      	strh	r3, [r7, #10]
 8006060:	4613      	mov	r3, r2
 8006062:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b20      	cmp	r3, #32
 800606e:	f040 80fd 	bne.w	800626c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_I2C_Master_Transmit+0x30>
 800607c:	2302      	movs	r3, #2
 800607e:	e0f6      	b.n	800626e <HAL_I2C_Master_Transmit+0x21e>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006088:	f7fe fab8 	bl	80045fc <HAL_GetTick>
 800608c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	2319      	movs	r3, #25
 8006094:	2201      	movs	r2, #1
 8006096:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 fdcc 	bl	8006c38 <I2C_WaitOnFlagUntilTimeout>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e0e1      	b.n	800626e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2221      	movs	r2, #33	@ 0x21
 80060ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2210      	movs	r2, #16
 80060b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	893a      	ldrh	r2, [r7, #8]
 80060ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	2bff      	cmp	r3, #255	@ 0xff
 80060da:	d906      	bls.n	80060ea <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	22ff      	movs	r2, #255	@ 0xff
 80060e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80060e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80060e6:	617b      	str	r3, [r7, #20]
 80060e8:	e007      	b.n	80060fa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80060f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80060f8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d024      	beq.n	800614c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006106:	781a      	ldrb	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800611c:	b29b      	uxth	r3, r3
 800611e:	3b01      	subs	r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800612a:	3b01      	subs	r3, #1
 800612c:	b29a      	uxth	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006136:	b2db      	uxtb	r3, r3
 8006138:	3301      	adds	r3, #1
 800613a:	b2da      	uxtb	r2, r3
 800613c:	8979      	ldrh	r1, [r7, #10]
 800613e:	4b4e      	ldr	r3, [pc, #312]	@ (8006278 <HAL_I2C_Master_Transmit+0x228>)
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 ffc7 	bl	80070d8 <I2C_TransferConfig>
 800614a:	e066      	b.n	800621a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006150:	b2da      	uxtb	r2, r3
 8006152:	8979      	ldrh	r1, [r7, #10]
 8006154:	4b48      	ldr	r3, [pc, #288]	@ (8006278 <HAL_I2C_Master_Transmit+0x228>)
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f000 ffbc 	bl	80070d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006160:	e05b      	b.n	800621a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	6a39      	ldr	r1, [r7, #32]
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 fdbf 	bl	8006cea <I2C_WaitOnTXISFlagUntilTimeout>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e07b      	b.n	800626e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617a:	781a      	ldrb	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006190:	b29b      	uxth	r3, r3
 8006192:	3b01      	subs	r3, #1
 8006194:	b29a      	uxth	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800619e:	3b01      	subs	r3, #1
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d034      	beq.n	800621a <HAL_I2C_Master_Transmit+0x1ca>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d130      	bne.n	800621a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	2200      	movs	r2, #0
 80061c0:	2180      	movs	r1, #128	@ 0x80
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 fd38 	bl	8006c38 <I2C_WaitOnFlagUntilTimeout>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e04d      	b.n	800626e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	2bff      	cmp	r3, #255	@ 0xff
 80061da:	d90e      	bls.n	80061fa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	22ff      	movs	r2, #255	@ 0xff
 80061e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	8979      	ldrh	r1, [r7, #10]
 80061ea:	2300      	movs	r3, #0
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 ff70 	bl	80070d8 <I2C_TransferConfig>
 80061f8:	e00f      	b.n	800621a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061fe:	b29a      	uxth	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006208:	b2da      	uxtb	r2, r3
 800620a:	8979      	ldrh	r1, [r7, #10]
 800620c:	2300      	movs	r3, #0
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 ff5f 	bl	80070d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800621e:	b29b      	uxth	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	d19e      	bne.n	8006162 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	6a39      	ldr	r1, [r7, #32]
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f000 fda5 	bl	8006d78 <I2C_WaitOnSTOPFlagUntilTimeout>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d001      	beq.n	8006238 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e01a      	b.n	800626e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2220      	movs	r2, #32
 800623e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6859      	ldr	r1, [r3, #4]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	4b0c      	ldr	r3, [pc, #48]	@ (800627c <HAL_I2C_Master_Transmit+0x22c>)
 800624c:	400b      	ands	r3, r1
 800624e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2220      	movs	r2, #32
 8006254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006268:	2300      	movs	r3, #0
 800626a:	e000      	b.n	800626e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800626c:	2302      	movs	r3, #2
  }
}
 800626e:	4618      	mov	r0, r3
 8006270:	3718      	adds	r7, #24
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	80002000 	.word	0x80002000
 800627c:	fe00e800 	.word	0xfe00e800

08006280 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b088      	sub	sp, #32
 8006284:	af02      	add	r7, sp, #8
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	607a      	str	r2, [r7, #4]
 800628a:	461a      	mov	r2, r3
 800628c:	460b      	mov	r3, r1
 800628e:	817b      	strh	r3, [r7, #10]
 8006290:	4613      	mov	r3, r2
 8006292:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b20      	cmp	r3, #32
 800629e:	f040 80db 	bne.w	8006458 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d101      	bne.n	80062b0 <HAL_I2C_Master_Receive+0x30>
 80062ac:	2302      	movs	r3, #2
 80062ae:	e0d4      	b.n	800645a <HAL_I2C_Master_Receive+0x1da>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80062b8:	f7fe f9a0 	bl	80045fc <HAL_GetTick>
 80062bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	2319      	movs	r3, #25
 80062c4:	2201      	movs	r2, #1
 80062c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 fcb4 	bl	8006c38 <I2C_WaitOnFlagUntilTimeout>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e0bf      	b.n	800645a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2222      	movs	r2, #34	@ 0x22
 80062de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2210      	movs	r2, #16
 80062e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	893a      	ldrh	r2, [r7, #8]
 80062fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006306:	b29b      	uxth	r3, r3
 8006308:	2bff      	cmp	r3, #255	@ 0xff
 800630a:	d90e      	bls.n	800632a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2201      	movs	r2, #1
 8006310:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006316:	b2da      	uxtb	r2, r3
 8006318:	8979      	ldrh	r1, [r7, #10]
 800631a:	4b52      	ldr	r3, [pc, #328]	@ (8006464 <HAL_I2C_Master_Receive+0x1e4>)
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f000 fed8 	bl	80070d8 <I2C_TransferConfig>
 8006328:	e06d      	b.n	8006406 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800632e:	b29a      	uxth	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006338:	b2da      	uxtb	r2, r3
 800633a:	8979      	ldrh	r1, [r7, #10]
 800633c:	4b49      	ldr	r3, [pc, #292]	@ (8006464 <HAL_I2C_Master_Receive+0x1e4>)
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 fec7 	bl	80070d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800634a:	e05c      	b.n	8006406 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	6a39      	ldr	r1, [r7, #32]
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 fd55 	bl	8006e00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e07c      	b.n	800645a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636a:	b2d2      	uxtb	r2, r2
 800636c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800637c:	3b01      	subs	r3, #1
 800637e:	b29a      	uxth	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006388:	b29b      	uxth	r3, r3
 800638a:	3b01      	subs	r3, #1
 800638c:	b29a      	uxth	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006396:	b29b      	uxth	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d034      	beq.n	8006406 <HAL_I2C_Master_Receive+0x186>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d130      	bne.n	8006406 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	2200      	movs	r2, #0
 80063ac:	2180      	movs	r1, #128	@ 0x80
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f000 fc42 	bl	8006c38 <I2C_WaitOnFlagUntilTimeout>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e04d      	b.n	800645a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	2bff      	cmp	r3, #255	@ 0xff
 80063c6:	d90e      	bls.n	80063e6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	22ff      	movs	r2, #255	@ 0xff
 80063cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	8979      	ldrh	r1, [r7, #10]
 80063d6:	2300      	movs	r3, #0
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 fe7a 	bl	80070d8 <I2C_TransferConfig>
 80063e4:	e00f      	b.n	8006406 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	8979      	ldrh	r1, [r7, #10]
 80063f8:	2300      	movs	r3, #0
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f000 fe69 	bl	80070d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800640a:	b29b      	uxth	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d19d      	bne.n	800634c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	6a39      	ldr	r1, [r7, #32]
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 fcaf 	bl	8006d78 <I2C_WaitOnSTOPFlagUntilTimeout>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e01a      	b.n	800645a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2220      	movs	r2, #32
 800642a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6859      	ldr	r1, [r3, #4]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	4b0c      	ldr	r3, [pc, #48]	@ (8006468 <HAL_I2C_Master_Receive+0x1e8>)
 8006438:	400b      	ands	r3, r1
 800643a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2220      	movs	r2, #32
 8006440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006454:	2300      	movs	r3, #0
 8006456:	e000      	b.n	800645a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006458:	2302      	movs	r3, #2
  }
}
 800645a:	4618      	mov	r0, r3
 800645c:	3718      	adds	r7, #24
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	80002400 	.word	0x80002400
 8006468:	fe00e800 	.word	0xfe00e800

0800646c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af02      	add	r7, sp, #8
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	4608      	mov	r0, r1
 8006476:	4611      	mov	r1, r2
 8006478:	461a      	mov	r2, r3
 800647a:	4603      	mov	r3, r0
 800647c:	817b      	strh	r3, [r7, #10]
 800647e:	460b      	mov	r3, r1
 8006480:	813b      	strh	r3, [r7, #8]
 8006482:	4613      	mov	r3, r2
 8006484:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b20      	cmp	r3, #32
 8006490:	f040 80f9 	bne.w	8006686 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <HAL_I2C_Mem_Write+0x34>
 800649a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800649c:	2b00      	cmp	r3, #0
 800649e:	d105      	bne.n	80064ac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e0ed      	b.n	8006688 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d101      	bne.n	80064ba <HAL_I2C_Mem_Write+0x4e>
 80064b6:	2302      	movs	r3, #2
 80064b8:	e0e6      	b.n	8006688 <HAL_I2C_Mem_Write+0x21c>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064c2:	f7fe f89b 	bl	80045fc <HAL_GetTick>
 80064c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	2319      	movs	r3, #25
 80064ce:	2201      	movs	r2, #1
 80064d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 fbaf 	bl	8006c38 <I2C_WaitOnFlagUntilTimeout>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e0d1      	b.n	8006688 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2221      	movs	r2, #33	@ 0x21
 80064e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2240      	movs	r2, #64	@ 0x40
 80064f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6a3a      	ldr	r2, [r7, #32]
 80064fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006504:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800650c:	88f8      	ldrh	r0, [r7, #6]
 800650e:	893a      	ldrh	r2, [r7, #8]
 8006510:	8979      	ldrh	r1, [r7, #10]
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	9301      	str	r3, [sp, #4]
 8006516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	4603      	mov	r3, r0
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 fabf 	bl	8006aa0 <I2C_RequestMemoryWrite>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d005      	beq.n	8006534 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e0a9      	b.n	8006688 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006538:	b29b      	uxth	r3, r3
 800653a:	2bff      	cmp	r3, #255	@ 0xff
 800653c:	d90e      	bls.n	800655c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	22ff      	movs	r2, #255	@ 0xff
 8006542:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006548:	b2da      	uxtb	r2, r3
 800654a:	8979      	ldrh	r1, [r7, #10]
 800654c:	2300      	movs	r3, #0
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 fdbf 	bl	80070d8 <I2C_TransferConfig>
 800655a:	e00f      	b.n	800657c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006560:	b29a      	uxth	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800656a:	b2da      	uxtb	r2, r3
 800656c:	8979      	ldrh	r1, [r7, #10]
 800656e:	2300      	movs	r3, #0
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 fdae 	bl	80070d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 fbb2 	bl	8006cea <I2C_WaitOnTXISFlagUntilTimeout>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e07b      	b.n	8006688 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006594:	781a      	ldrb	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a0:	1c5a      	adds	r2, r3, #1
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	3b01      	subs	r3, #1
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065b8:	3b01      	subs	r3, #1
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d034      	beq.n	8006634 <HAL_I2C_Mem_Write+0x1c8>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d130      	bne.n	8006634 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d8:	2200      	movs	r2, #0
 80065da:	2180      	movs	r1, #128	@ 0x80
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 fb2b 	bl	8006c38 <I2C_WaitOnFlagUntilTimeout>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d001      	beq.n	80065ec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e04d      	b.n	8006688 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	2bff      	cmp	r3, #255	@ 0xff
 80065f4:	d90e      	bls.n	8006614 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	22ff      	movs	r2, #255	@ 0xff
 80065fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006600:	b2da      	uxtb	r2, r3
 8006602:	8979      	ldrh	r1, [r7, #10]
 8006604:	2300      	movs	r3, #0
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 fd63 	bl	80070d8 <I2C_TransferConfig>
 8006612:	e00f      	b.n	8006634 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006618:	b29a      	uxth	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006622:	b2da      	uxtb	r2, r3
 8006624:	8979      	ldrh	r1, [r7, #10]
 8006626:	2300      	movs	r3, #0
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f000 fd52 	bl	80070d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006638:	b29b      	uxth	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d19e      	bne.n	800657c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 fb98 	bl	8006d78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e01a      	b.n	8006688 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2220      	movs	r2, #32
 8006658:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6859      	ldr	r1, [r3, #4]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	4b0a      	ldr	r3, [pc, #40]	@ (8006690 <HAL_I2C_Mem_Write+0x224>)
 8006666:	400b      	ands	r3, r1
 8006668:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2220      	movs	r2, #32
 800666e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	e000      	b.n	8006688 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006686:	2302      	movs	r3, #2
  }
}
 8006688:	4618      	mov	r0, r3
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	fe00e800 	.word	0xfe00e800

08006694 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b088      	sub	sp, #32
 8006698:	af02      	add	r7, sp, #8
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	4608      	mov	r0, r1
 800669e:	4611      	mov	r1, r2
 80066a0:	461a      	mov	r2, r3
 80066a2:	4603      	mov	r3, r0
 80066a4:	817b      	strh	r3, [r7, #10]
 80066a6:	460b      	mov	r3, r1
 80066a8:	813b      	strh	r3, [r7, #8]
 80066aa:	4613      	mov	r3, r2
 80066ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b20      	cmp	r3, #32
 80066b8:	f040 80fd 	bne.w	80068b6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <HAL_I2C_Mem_Read+0x34>
 80066c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d105      	bne.n	80066d4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066ce:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e0f1      	b.n	80068b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d101      	bne.n	80066e2 <HAL_I2C_Mem_Read+0x4e>
 80066de:	2302      	movs	r3, #2
 80066e0:	e0ea      	b.n	80068b8 <HAL_I2C_Mem_Read+0x224>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80066ea:	f7fd ff87 	bl	80045fc <HAL_GetTick>
 80066ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	2319      	movs	r3, #25
 80066f6:	2201      	movs	r2, #1
 80066f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 fa9b 	bl	8006c38 <I2C_WaitOnFlagUntilTimeout>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d001      	beq.n	800670c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e0d5      	b.n	80068b8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2222      	movs	r2, #34	@ 0x22
 8006710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2240      	movs	r2, #64	@ 0x40
 8006718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6a3a      	ldr	r2, [r7, #32]
 8006726:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800672c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006734:	88f8      	ldrh	r0, [r7, #6]
 8006736:	893a      	ldrh	r2, [r7, #8]
 8006738:	8979      	ldrh	r1, [r7, #10]
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	9301      	str	r3, [sp, #4]
 800673e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	4603      	mov	r3, r0
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 f9ff 	bl	8006b48 <I2C_RequestMemoryRead>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d005      	beq.n	800675c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e0ad      	b.n	80068b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006760:	b29b      	uxth	r3, r3
 8006762:	2bff      	cmp	r3, #255	@ 0xff
 8006764:	d90e      	bls.n	8006784 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2201      	movs	r2, #1
 800676a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006770:	b2da      	uxtb	r2, r3
 8006772:	8979      	ldrh	r1, [r7, #10]
 8006774:	4b52      	ldr	r3, [pc, #328]	@ (80068c0 <HAL_I2C_Mem_Read+0x22c>)
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 fcab 	bl	80070d8 <I2C_TransferConfig>
 8006782:	e00f      	b.n	80067a4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006788:	b29a      	uxth	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006792:	b2da      	uxtb	r2, r3
 8006794:	8979      	ldrh	r1, [r7, #10]
 8006796:	4b4a      	ldr	r3, [pc, #296]	@ (80068c0 <HAL_I2C_Mem_Read+0x22c>)
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 fc9a 	bl	80070d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067aa:	2200      	movs	r2, #0
 80067ac:	2104      	movs	r1, #4
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 fa42 	bl	8006c38 <I2C_WaitOnFlagUntilTimeout>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e07c      	b.n	80068b8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067da:	3b01      	subs	r3, #1
 80067dc:	b29a      	uxth	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d034      	beq.n	8006864 <HAL_I2C_Mem_Read+0x1d0>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d130      	bne.n	8006864 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006808:	2200      	movs	r2, #0
 800680a:	2180      	movs	r1, #128	@ 0x80
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f000 fa13 	bl	8006c38 <I2C_WaitOnFlagUntilTimeout>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e04d      	b.n	80068b8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006820:	b29b      	uxth	r3, r3
 8006822:	2bff      	cmp	r3, #255	@ 0xff
 8006824:	d90e      	bls.n	8006844 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2201      	movs	r2, #1
 800682a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006830:	b2da      	uxtb	r2, r3
 8006832:	8979      	ldrh	r1, [r7, #10]
 8006834:	2300      	movs	r3, #0
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 fc4b 	bl	80070d8 <I2C_TransferConfig>
 8006842:	e00f      	b.n	8006864 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006848:	b29a      	uxth	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006852:	b2da      	uxtb	r2, r3
 8006854:	8979      	ldrh	r1, [r7, #10]
 8006856:	2300      	movs	r3, #0
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f000 fc3a 	bl	80070d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006868:	b29b      	uxth	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d19a      	bne.n	80067a4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 fa80 	bl	8006d78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e01a      	b.n	80068b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2220      	movs	r2, #32
 8006888:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6859      	ldr	r1, [r3, #4]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	4b0b      	ldr	r3, [pc, #44]	@ (80068c4 <HAL_I2C_Mem_Read+0x230>)
 8006896:	400b      	ands	r3, r1
 8006898:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2220      	movs	r2, #32
 800689e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	e000      	b.n	80068b8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80068b6:	2302      	movs	r3, #2
  }
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	80002400 	.word	0x80002400
 80068c4:	fe00e800 	.word	0xfe00e800

080068c8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08a      	sub	sp, #40	@ 0x28
 80068cc:	af02      	add	r7, sp, #8
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	607a      	str	r2, [r7, #4]
 80068d2:	603b      	str	r3, [r7, #0]
 80068d4:	460b      	mov	r3, r1
 80068d6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80068d8:	2300      	movs	r3, #0
 80068da:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b20      	cmp	r3, #32
 80068e6:	f040 80d6 	bne.w	8006a96 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068f8:	d101      	bne.n	80068fe <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80068fa:	2302      	movs	r3, #2
 80068fc:	e0cc      	b.n	8006a98 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006904:	2b01      	cmp	r3, #1
 8006906:	d101      	bne.n	800690c <HAL_I2C_IsDeviceReady+0x44>
 8006908:	2302      	movs	r3, #2
 800690a:	e0c5      	b.n	8006a98 <HAL_I2C_IsDeviceReady+0x1d0>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2224      	movs	r2, #36	@ 0x24
 8006918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d107      	bne.n	800693a <HAL_I2C_IsDeviceReady+0x72>
 800692a:	897b      	ldrh	r3, [r7, #10]
 800692c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006930:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006934:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006938:	e006      	b.n	8006948 <HAL_I2C_IsDeviceReady+0x80>
 800693a:	897b      	ldrh	r3, [r7, #10]
 800693c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006940:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006944:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	6812      	ldr	r2, [r2, #0]
 800694c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800694e:	f7fd fe55 	bl	80045fc <HAL_GetTick>
 8006952:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	f003 0320 	and.w	r3, r3, #32
 800695e:	2b20      	cmp	r3, #32
 8006960:	bf0c      	ite	eq
 8006962:	2301      	moveq	r3, #1
 8006964:	2300      	movne	r3, #0
 8006966:	b2db      	uxtb	r3, r3
 8006968:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	f003 0310 	and.w	r3, r3, #16
 8006974:	2b10      	cmp	r3, #16
 8006976:	bf0c      	ite	eq
 8006978:	2301      	moveq	r3, #1
 800697a:	2300      	movne	r3, #0
 800697c:	b2db      	uxtb	r3, r3
 800697e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006980:	e034      	b.n	80069ec <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006988:	d01a      	beq.n	80069c0 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800698a:	f7fd fe37 	bl	80045fc <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d302      	bcc.n	80069a0 <HAL_I2C_IsDeviceReady+0xd8>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10f      	bne.n	80069c0 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2220      	movs	r2, #32
 80069a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ac:	f043 0220 	orr.w	r2, r3, #32
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e06b      	b.n	8006a98 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	bf0c      	ite	eq
 80069ce:	2301      	moveq	r3, #1
 80069d0:	2300      	movne	r3, #0
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	f003 0310 	and.w	r3, r3, #16
 80069e0:	2b10      	cmp	r3, #16
 80069e2:	bf0c      	ite	eq
 80069e4:	2301      	moveq	r3, #1
 80069e6:	2300      	movne	r3, #0
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80069ec:	7ffb      	ldrb	r3, [r7, #31]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d102      	bne.n	80069f8 <HAL_I2C_IsDeviceReady+0x130>
 80069f2:	7fbb      	ldrb	r3, [r7, #30]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d0c4      	beq.n	8006982 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	f003 0310 	and.w	r3, r3, #16
 8006a02:	2b10      	cmp	r3, #16
 8006a04:	d01a      	beq.n	8006a3c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	2120      	movs	r1, #32
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 f911 	bl	8006c38 <I2C_WaitOnFlagUntilTimeout>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e03b      	b.n	8006a98 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2220      	movs	r2, #32
 8006a26:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	e02d      	b.n	8006a98 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	2200      	movs	r2, #0
 8006a44:	2120      	movs	r1, #32
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f000 f8f6 	bl	8006c38 <I2C_WaitOnFlagUntilTimeout>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e020      	b.n	8006a98 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2210      	movs	r2, #16
 8006a5c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2220      	movs	r2, #32
 8006a64:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	f63f af56 	bhi.w	8006922 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a82:	f043 0220 	orr.w	r2, r3, #32
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e000      	b.n	8006a98 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8006a96:	2302      	movs	r3, #2
  }
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3720      	adds	r7, #32
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af02      	add	r7, sp, #8
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	4608      	mov	r0, r1
 8006aaa:	4611      	mov	r1, r2
 8006aac:	461a      	mov	r2, r3
 8006aae:	4603      	mov	r3, r0
 8006ab0:	817b      	strh	r3, [r7, #10]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	813b      	strh	r3, [r7, #8]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006aba:	88fb      	ldrh	r3, [r7, #6]
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	8979      	ldrh	r1, [r7, #10]
 8006ac0:	4b20      	ldr	r3, [pc, #128]	@ (8006b44 <I2C_RequestMemoryWrite+0xa4>)
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 fb05 	bl	80070d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ace:	69fa      	ldr	r2, [r7, #28]
 8006ad0:	69b9      	ldr	r1, [r7, #24]
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 f909 	bl	8006cea <I2C_WaitOnTXISFlagUntilTimeout>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e02c      	b.n	8006b3c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ae2:	88fb      	ldrh	r3, [r7, #6]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d105      	bne.n	8006af4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ae8:	893b      	ldrh	r3, [r7, #8]
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	629a      	str	r2, [r3, #40]	@ 0x28
 8006af2:	e015      	b.n	8006b20 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006af4:	893b      	ldrh	r3, [r7, #8]
 8006af6:	0a1b      	lsrs	r3, r3, #8
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	b2da      	uxtb	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b02:	69fa      	ldr	r2, [r7, #28]
 8006b04:	69b9      	ldr	r1, [r7, #24]
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f000 f8ef 	bl	8006cea <I2C_WaitOnTXISFlagUntilTimeout>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d001      	beq.n	8006b16 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e012      	b.n	8006b3c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b16:	893b      	ldrh	r3, [r7, #8]
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	2200      	movs	r2, #0
 8006b28:	2180      	movs	r1, #128	@ 0x80
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f000 f884 	bl	8006c38 <I2C_WaitOnFlagUntilTimeout>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e000      	b.n	8006b3c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	80002000 	.word	0x80002000

08006b48 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af02      	add	r7, sp, #8
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	4608      	mov	r0, r1
 8006b52:	4611      	mov	r1, r2
 8006b54:	461a      	mov	r2, r3
 8006b56:	4603      	mov	r3, r0
 8006b58:	817b      	strh	r3, [r7, #10]
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	813b      	strh	r3, [r7, #8]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006b62:	88fb      	ldrh	r3, [r7, #6]
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	8979      	ldrh	r1, [r7, #10]
 8006b68:	4b20      	ldr	r3, [pc, #128]	@ (8006bec <I2C_RequestMemoryRead+0xa4>)
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f000 fab2 	bl	80070d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b74:	69fa      	ldr	r2, [r7, #28]
 8006b76:	69b9      	ldr	r1, [r7, #24]
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 f8b6 	bl	8006cea <I2C_WaitOnTXISFlagUntilTimeout>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e02c      	b.n	8006be2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b88:	88fb      	ldrh	r3, [r7, #6]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d105      	bne.n	8006b9a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b8e:	893b      	ldrh	r3, [r7, #8]
 8006b90:	b2da      	uxtb	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b98:	e015      	b.n	8006bc6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b9a:	893b      	ldrh	r3, [r7, #8]
 8006b9c:	0a1b      	lsrs	r3, r3, #8
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ba8:	69fa      	ldr	r2, [r7, #28]
 8006baa:	69b9      	ldr	r1, [r7, #24]
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f000 f89c 	bl	8006cea <I2C_WaitOnTXISFlagUntilTimeout>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e012      	b.n	8006be2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006bbc:	893b      	ldrh	r3, [r7, #8]
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	2140      	movs	r1, #64	@ 0x40
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 f831 	bl	8006c38 <I2C_WaitOnFlagUntilTimeout>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d001      	beq.n	8006be0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e000      	b.n	8006be2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	80002000 	.word	0x80002000

08006bf0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d103      	bne.n	8006c0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d007      	beq.n	8006c2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	699a      	ldr	r2, [r3, #24]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 0201 	orr.w	r2, r2, #1
 8006c2a:	619a      	str	r2, [r3, #24]
  }
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	603b      	str	r3, [r7, #0]
 8006c44:	4613      	mov	r3, r2
 8006c46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c48:	e03b      	b.n	8006cc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c4a:	69ba      	ldr	r2, [r7, #24]
 8006c4c:	6839      	ldr	r1, [r7, #0]
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f000 f962 	bl	8006f18 <I2C_IsErrorOccurred>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e041      	b.n	8006ce2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c64:	d02d      	beq.n	8006cc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c66:	f7fd fcc9 	bl	80045fc <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d302      	bcc.n	8006c7c <I2C_WaitOnFlagUntilTimeout+0x44>
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d122      	bne.n	8006cc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	699a      	ldr	r2, [r3, #24]
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	4013      	ands	r3, r2
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	bf0c      	ite	eq
 8006c8c:	2301      	moveq	r3, #1
 8006c8e:	2300      	movne	r3, #0
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	461a      	mov	r2, r3
 8006c94:	79fb      	ldrb	r3, [r7, #7]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d113      	bne.n	8006cc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c9e:	f043 0220 	orr.w	r2, r3, #32
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e00f      	b.n	8006ce2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	699a      	ldr	r2, [r3, #24]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	4013      	ands	r3, r2
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	bf0c      	ite	eq
 8006cd2:	2301      	moveq	r3, #1
 8006cd4:	2300      	movne	r3, #0
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	461a      	mov	r2, r3
 8006cda:	79fb      	ldrb	r3, [r7, #7]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d0b4      	beq.n	8006c4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b084      	sub	sp, #16
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	60f8      	str	r0, [r7, #12]
 8006cf2:	60b9      	str	r1, [r7, #8]
 8006cf4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006cf6:	e033      	b.n	8006d60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	68b9      	ldr	r1, [r7, #8]
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f000 f90b 	bl	8006f18 <I2C_IsErrorOccurred>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d001      	beq.n	8006d0c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e031      	b.n	8006d70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d12:	d025      	beq.n	8006d60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d14:	f7fd fc72 	bl	80045fc <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d302      	bcc.n	8006d2a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d11a      	bne.n	8006d60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	f003 0302 	and.w	r3, r3, #2
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d013      	beq.n	8006d60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d3c:	f043 0220 	orr.w	r2, r3, #32
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2220      	movs	r2, #32
 8006d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e007      	b.n	8006d70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	f003 0302 	and.w	r3, r3, #2
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d1c4      	bne.n	8006cf8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d84:	e02f      	b.n	8006de6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	68b9      	ldr	r1, [r7, #8]
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 f8c4 	bl	8006f18 <I2C_IsErrorOccurred>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e02d      	b.n	8006df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d9a:	f7fd fc2f 	bl	80045fc <HAL_GetTick>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d302      	bcc.n	8006db0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d11a      	bne.n	8006de6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	f003 0320 	and.w	r3, r3, #32
 8006dba:	2b20      	cmp	r3, #32
 8006dbc:	d013      	beq.n	8006de6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dc2:	f043 0220 	orr.w	r2, r3, #32
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e007      	b.n	8006df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	f003 0320 	and.w	r3, r3, #32
 8006df0:	2b20      	cmp	r3, #32
 8006df2:	d1c8      	bne.n	8006d86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
	...

08006e00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006e10:	e071      	b.n	8006ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	68b9      	ldr	r1, [r7, #8]
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 f87e 	bl	8006f18 <I2C_IsErrorOccurred>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	f003 0320 	and.w	r3, r3, #32
 8006e30:	2b20      	cmp	r3, #32
 8006e32:	d13b      	bne.n	8006eac <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8006e34:	7dfb      	ldrb	r3, [r7, #23]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d138      	bne.n	8006eac <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	f003 0304 	and.w	r3, r3, #4
 8006e44:	2b04      	cmp	r3, #4
 8006e46:	d105      	bne.n	8006e54 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	f003 0310 	and.w	r3, r3, #16
 8006e5e:	2b10      	cmp	r3, #16
 8006e60:	d121      	bne.n	8006ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2210      	movs	r2, #16
 8006e68:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2204      	movs	r2, #4
 8006e6e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2220      	movs	r2, #32
 8006e76:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6859      	ldr	r1, [r3, #4]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	4b24      	ldr	r3, [pc, #144]	@ (8006f14 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8006e84:	400b      	ands	r3, r1
 8006e86:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	75fb      	strb	r3, [r7, #23]
 8006ea4:	e002      	b.n	8006eac <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8006eac:	f7fd fba6 	bl	80045fc <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d302      	bcc.n	8006ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d119      	bne.n	8006ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8006ec2:	7dfb      	ldrb	r3, [r7, #23]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d116      	bne.n	8006ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	f003 0304 	and.w	r3, r3, #4
 8006ed2:	2b04      	cmp	r3, #4
 8006ed4:	d00f      	beq.n	8006ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eda:	f043 0220 	orr.w	r2, r3, #32
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2220      	movs	r2, #32
 8006ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	f003 0304 	and.w	r3, r3, #4
 8006f00:	2b04      	cmp	r3, #4
 8006f02:	d002      	beq.n	8006f0a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8006f04:	7dfb      	ldrb	r3, [r7, #23]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d083      	beq.n	8006e12 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8006f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3718      	adds	r7, #24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	fe00e800 	.word	0xfe00e800

08006f18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08a      	sub	sp, #40	@ 0x28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f24:	2300      	movs	r3, #0
 8006f26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006f32:	2300      	movs	r3, #0
 8006f34:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	f003 0310 	and.w	r3, r3, #16
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d068      	beq.n	8007016 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2210      	movs	r2, #16
 8006f4a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006f4c:	e049      	b.n	8006fe2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f54:	d045      	beq.n	8006fe2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006f56:	f7fd fb51 	bl	80045fc <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d302      	bcc.n	8006f6c <I2C_IsErrorOccurred+0x54>
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d13a      	bne.n	8006fe2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f76:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f7e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f8e:	d121      	bne.n	8006fd4 <I2C_IsErrorOccurred+0xbc>
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f96:	d01d      	beq.n	8006fd4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006f98:	7cfb      	ldrb	r3, [r7, #19]
 8006f9a:	2b20      	cmp	r3, #32
 8006f9c:	d01a      	beq.n	8006fd4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006fac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006fae:	f7fd fb25 	bl	80045fc <HAL_GetTick>
 8006fb2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006fb4:	e00e      	b.n	8006fd4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006fb6:	f7fd fb21 	bl	80045fc <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b19      	cmp	r3, #25
 8006fc2:	d907      	bls.n	8006fd4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006fc4:	6a3b      	ldr	r3, [r7, #32]
 8006fc6:	f043 0320 	orr.w	r3, r3, #32
 8006fca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006fd2:	e006      	b.n	8006fe2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	f003 0320 	and.w	r3, r3, #32
 8006fde:	2b20      	cmp	r3, #32
 8006fe0:	d1e9      	bne.n	8006fb6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	f003 0320 	and.w	r3, r3, #32
 8006fec:	2b20      	cmp	r3, #32
 8006fee:	d003      	beq.n	8006ff8 <I2C_IsErrorOccurred+0xe0>
 8006ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d0aa      	beq.n	8006f4e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d103      	bne.n	8007008 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2220      	movs	r2, #32
 8007006:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007008:	6a3b      	ldr	r3, [r7, #32]
 800700a:	f043 0304 	orr.w	r3, r3, #4
 800700e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00b      	beq.n	8007040 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	f043 0301 	orr.w	r3, r3, #1
 800702e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007038:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00b      	beq.n	8007062 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	f043 0308 	orr.w	r3, r3, #8
 8007050:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800705a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00b      	beq.n	8007084 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800706c:	6a3b      	ldr	r3, [r7, #32]
 800706e:	f043 0302 	orr.w	r3, r3, #2
 8007072:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800707c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007084:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007088:	2b00      	cmp	r3, #0
 800708a:	d01c      	beq.n	80070c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f7ff fdaf 	bl	8006bf0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6859      	ldr	r1, [r3, #4]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	4b0d      	ldr	r3, [pc, #52]	@ (80070d4 <I2C_IsErrorOccurred+0x1bc>)
 800709e:	400b      	ands	r3, r1
 80070a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070a6:	6a3b      	ldr	r3, [r7, #32]
 80070a8:	431a      	orrs	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2220      	movs	r2, #32
 80070b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80070c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3728      	adds	r7, #40	@ 0x28
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	fe00e800 	.word	0xfe00e800

080070d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	607b      	str	r3, [r7, #4]
 80070e2:	460b      	mov	r3, r1
 80070e4:	817b      	strh	r3, [r7, #10]
 80070e6:	4613      	mov	r3, r2
 80070e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070ea:	897b      	ldrh	r3, [r7, #10]
 80070ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80070f0:	7a7b      	ldrb	r3, [r7, #9]
 80070f2:	041b      	lsls	r3, r3, #16
 80070f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	4313      	orrs	r3, r2
 8007102:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007106:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	6a3b      	ldr	r3, [r7, #32]
 8007110:	0d5b      	lsrs	r3, r3, #21
 8007112:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007116:	4b08      	ldr	r3, [pc, #32]	@ (8007138 <I2C_TransferConfig+0x60>)
 8007118:	430b      	orrs	r3, r1
 800711a:	43db      	mvns	r3, r3
 800711c:	ea02 0103 	and.w	r1, r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	430a      	orrs	r2, r1
 8007128:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800712a:	bf00      	nop
 800712c:	371c      	adds	r7, #28
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	03ff63ff 	.word	0x03ff63ff

0800713c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b20      	cmp	r3, #32
 8007150:	d138      	bne.n	80071c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007158:	2b01      	cmp	r3, #1
 800715a:	d101      	bne.n	8007160 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800715c:	2302      	movs	r3, #2
 800715e:	e032      	b.n	80071c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2224      	movs	r2, #36	@ 0x24
 800716c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f022 0201 	bic.w	r2, r2, #1
 800717e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800718e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6819      	ldr	r1, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	430a      	orrs	r2, r1
 800719e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f042 0201 	orr.w	r2, r2, #1
 80071ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2220      	movs	r2, #32
 80071b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	e000      	b.n	80071c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80071c4:	2302      	movs	r3, #2
  }
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b085      	sub	sp, #20
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b20      	cmp	r3, #32
 80071e6:	d139      	bne.n	800725c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d101      	bne.n	80071f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80071f2:	2302      	movs	r3, #2
 80071f4:	e033      	b.n	800725e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2224      	movs	r2, #36	@ 0x24
 8007202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 0201 	bic.w	r2, r2, #1
 8007214:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007224:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	021b      	lsls	r3, r3, #8
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	4313      	orrs	r3, r2
 800722e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0201 	orr.w	r2, r2, #1
 8007246:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2220      	movs	r2, #32
 800724c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007258:	2300      	movs	r3, #0
 800725a:	e000      	b.n	800725e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800725c:	2302      	movs	r3, #2
  }
}
 800725e:	4618      	mov	r0, r3
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b086      	sub	sp, #24
 800726e:	af02      	add	r7, sp, #8
 8007270:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d101      	bne.n	800727c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e101      	b.n	8007480 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b00      	cmp	r3, #0
 8007286:	d106      	bne.n	8007296 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7fc fb85 	bl	80039a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2203      	movs	r2, #3
 800729a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4618      	mov	r0, r3
 80072aa:	f003 ff84 	bl	800b1b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6818      	ldr	r0, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	7c1a      	ldrb	r2, [r3, #16]
 80072b6:	f88d 2000 	strb.w	r2, [sp]
 80072ba:	3304      	adds	r3, #4
 80072bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072be:	f003 ff4d 	bl	800b15c <USB_CoreInit>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d005      	beq.n	80072d4 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2202      	movs	r2, #2
 80072cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e0d5      	b.n	8007480 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2100      	movs	r1, #0
 80072da:	4618      	mov	r0, r3
 80072dc:	f003 ff7c 	bl	800b1d8 <USB_SetCurrentMode>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d005      	beq.n	80072f2 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2202      	movs	r2, #2
 80072ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e0c6      	b.n	8007480 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072f2:	2300      	movs	r3, #0
 80072f4:	73fb      	strb	r3, [r7, #15]
 80072f6:	e04a      	b.n	800738e <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80072f8:	7bfa      	ldrb	r2, [r7, #15]
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	4613      	mov	r3, r2
 80072fe:	00db      	lsls	r3, r3, #3
 8007300:	4413      	add	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	440b      	add	r3, r1
 8007306:	3315      	adds	r3, #21
 8007308:	2201      	movs	r2, #1
 800730a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800730c:	7bfa      	ldrb	r2, [r7, #15]
 800730e:	6879      	ldr	r1, [r7, #4]
 8007310:	4613      	mov	r3, r2
 8007312:	00db      	lsls	r3, r3, #3
 8007314:	4413      	add	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	440b      	add	r3, r1
 800731a:	3314      	adds	r3, #20
 800731c:	7bfa      	ldrb	r2, [r7, #15]
 800731e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007320:	7bfa      	ldrb	r2, [r7, #15]
 8007322:	7bfb      	ldrb	r3, [r7, #15]
 8007324:	b298      	uxth	r0, r3
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	4613      	mov	r3, r2
 800732a:	00db      	lsls	r3, r3, #3
 800732c:	4413      	add	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	440b      	add	r3, r1
 8007332:	332e      	adds	r3, #46	@ 0x2e
 8007334:	4602      	mov	r2, r0
 8007336:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007338:	7bfa      	ldrb	r2, [r7, #15]
 800733a:	6879      	ldr	r1, [r7, #4]
 800733c:	4613      	mov	r3, r2
 800733e:	00db      	lsls	r3, r3, #3
 8007340:	4413      	add	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	440b      	add	r3, r1
 8007346:	3318      	adds	r3, #24
 8007348:	2200      	movs	r2, #0
 800734a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800734c:	7bfa      	ldrb	r2, [r7, #15]
 800734e:	6879      	ldr	r1, [r7, #4]
 8007350:	4613      	mov	r3, r2
 8007352:	00db      	lsls	r3, r3, #3
 8007354:	4413      	add	r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	440b      	add	r3, r1
 800735a:	331c      	adds	r3, #28
 800735c:	2200      	movs	r2, #0
 800735e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007360:	7bfa      	ldrb	r2, [r7, #15]
 8007362:	6879      	ldr	r1, [r7, #4]
 8007364:	4613      	mov	r3, r2
 8007366:	00db      	lsls	r3, r3, #3
 8007368:	4413      	add	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	440b      	add	r3, r1
 800736e:	3320      	adds	r3, #32
 8007370:	2200      	movs	r2, #0
 8007372:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007374:	7bfa      	ldrb	r2, [r7, #15]
 8007376:	6879      	ldr	r1, [r7, #4]
 8007378:	4613      	mov	r3, r2
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	4413      	add	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	440b      	add	r3, r1
 8007382:	3324      	adds	r3, #36	@ 0x24
 8007384:	2200      	movs	r2, #0
 8007386:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	3301      	adds	r3, #1
 800738c:	73fb      	strb	r3, [r7, #15]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	791b      	ldrb	r3, [r3, #4]
 8007392:	7bfa      	ldrb	r2, [r7, #15]
 8007394:	429a      	cmp	r2, r3
 8007396:	d3af      	bcc.n	80072f8 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007398:	2300      	movs	r3, #0
 800739a:	73fb      	strb	r3, [r7, #15]
 800739c:	e044      	b.n	8007428 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800739e:	7bfa      	ldrb	r2, [r7, #15]
 80073a0:	6879      	ldr	r1, [r7, #4]
 80073a2:	4613      	mov	r3, r2
 80073a4:	00db      	lsls	r3, r3, #3
 80073a6:	4413      	add	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	440b      	add	r3, r1
 80073ac:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80073b0:	2200      	movs	r2, #0
 80073b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80073b4:	7bfa      	ldrb	r2, [r7, #15]
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	4613      	mov	r3, r2
 80073ba:	00db      	lsls	r3, r3, #3
 80073bc:	4413      	add	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	440b      	add	r3, r1
 80073c2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80073c6:	7bfa      	ldrb	r2, [r7, #15]
 80073c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80073ca:	7bfa      	ldrb	r2, [r7, #15]
 80073cc:	6879      	ldr	r1, [r7, #4]
 80073ce:	4613      	mov	r3, r2
 80073d0:	00db      	lsls	r3, r3, #3
 80073d2:	4413      	add	r3, r2
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	440b      	add	r3, r1
 80073d8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80073dc:	2200      	movs	r2, #0
 80073de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80073e0:	7bfa      	ldrb	r2, [r7, #15]
 80073e2:	6879      	ldr	r1, [r7, #4]
 80073e4:	4613      	mov	r3, r2
 80073e6:	00db      	lsls	r3, r3, #3
 80073e8:	4413      	add	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	440b      	add	r3, r1
 80073ee:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80073f2:	2200      	movs	r2, #0
 80073f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80073f6:	7bfa      	ldrb	r2, [r7, #15]
 80073f8:	6879      	ldr	r1, [r7, #4]
 80073fa:	4613      	mov	r3, r2
 80073fc:	00db      	lsls	r3, r3, #3
 80073fe:	4413      	add	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	440b      	add	r3, r1
 8007404:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007408:	2200      	movs	r2, #0
 800740a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800740c:	7bfa      	ldrb	r2, [r7, #15]
 800740e:	6879      	ldr	r1, [r7, #4]
 8007410:	4613      	mov	r3, r2
 8007412:	00db      	lsls	r3, r3, #3
 8007414:	4413      	add	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	440b      	add	r3, r1
 800741a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800741e:	2200      	movs	r2, #0
 8007420:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007422:	7bfb      	ldrb	r3, [r7, #15]
 8007424:	3301      	adds	r3, #1
 8007426:	73fb      	strb	r3, [r7, #15]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	791b      	ldrb	r3, [r3, #4]
 800742c:	7bfa      	ldrb	r2, [r7, #15]
 800742e:	429a      	cmp	r2, r3
 8007430:	d3b5      	bcc.n	800739e <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6818      	ldr	r0, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	7c1a      	ldrb	r2, [r3, #16]
 800743a:	f88d 2000 	strb.w	r2, [sp]
 800743e:	3304      	adds	r3, #4
 8007440:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007442:	f003 ff15 	bl	800b270 <USB_DevInit>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d005      	beq.n	8007458 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e013      	b.n	8007480 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	7b1b      	ldrb	r3, [r3, #12]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d102      	bne.n	8007474 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f80a 	bl	8007488 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4618      	mov	r0, r3
 800747a:	f004 f8ba 	bl	800b5f2 <USB_DevDisconnect>

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074ba:	f043 0303 	orr.w	r3, r3, #3
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80074d0:	b480      	push	{r7}
 80074d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80074d4:	4b04      	ldr	r3, [pc, #16]	@ (80074e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80074dc:	4618      	mov	r0, r3
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	40007000 	.word	0x40007000

080074ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074fa:	d130      	bne.n	800755e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80074fc:	4b23      	ldr	r3, [pc, #140]	@ (800758c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007508:	d038      	beq.n	800757c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800750a:	4b20      	ldr	r3, [pc, #128]	@ (800758c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007512:	4a1e      	ldr	r2, [pc, #120]	@ (800758c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007514:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007518:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800751a:	4b1d      	ldr	r3, [pc, #116]	@ (8007590 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2232      	movs	r2, #50	@ 0x32
 8007520:	fb02 f303 	mul.w	r3, r2, r3
 8007524:	4a1b      	ldr	r2, [pc, #108]	@ (8007594 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007526:	fba2 2303 	umull	r2, r3, r2, r3
 800752a:	0c9b      	lsrs	r3, r3, #18
 800752c:	3301      	adds	r3, #1
 800752e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007530:	e002      	b.n	8007538 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	3b01      	subs	r3, #1
 8007536:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007538:	4b14      	ldr	r3, [pc, #80]	@ (800758c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007540:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007544:	d102      	bne.n	800754c <HAL_PWREx_ControlVoltageScaling+0x60>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1f2      	bne.n	8007532 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800754c:	4b0f      	ldr	r3, [pc, #60]	@ (800758c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800754e:	695b      	ldr	r3, [r3, #20]
 8007550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007554:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007558:	d110      	bne.n	800757c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e00f      	b.n	800757e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800755e:	4b0b      	ldr	r3, [pc, #44]	@ (800758c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007566:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800756a:	d007      	beq.n	800757c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800756c:	4b07      	ldr	r3, [pc, #28]	@ (800758c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007574:	4a05      	ldr	r2, [pc, #20]	@ (800758c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007576:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800757a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	40007000 	.word	0x40007000
 8007590:	20000070 	.word	0x20000070
 8007594:	431bde83 	.word	0x431bde83

08007598 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007598:	b480      	push	{r7}
 800759a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800759c:	4b05      	ldr	r3, [pc, #20]	@ (80075b4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	4a04      	ldr	r2, [pc, #16]	@ (80075b4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80075a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80075a6:	6053      	str	r3, [r2, #4]
}
 80075a8:	bf00      	nop
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	40007000 	.word	0x40007000

080075b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b088      	sub	sp, #32
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e3ca      	b.n	8007d60 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075ca:	4b97      	ldr	r3, [pc, #604]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f003 030c 	and.w	r3, r3, #12
 80075d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80075d4:	4b94      	ldr	r3, [pc, #592]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	f003 0303 	and.w	r3, r3, #3
 80075dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0310 	and.w	r3, r3, #16
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f000 80e4 	beq.w	80077b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d007      	beq.n	8007602 <HAL_RCC_OscConfig+0x4a>
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	2b0c      	cmp	r3, #12
 80075f6:	f040 808b 	bne.w	8007710 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	f040 8087 	bne.w	8007710 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007602:	4b89      	ldr	r3, [pc, #548]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 0302 	and.w	r3, r3, #2
 800760a:	2b00      	cmp	r3, #0
 800760c:	d005      	beq.n	800761a <HAL_RCC_OscConfig+0x62>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e3a2      	b.n	8007d60 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a1a      	ldr	r2, [r3, #32]
 800761e:	4b82      	ldr	r3, [pc, #520]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0308 	and.w	r3, r3, #8
 8007626:	2b00      	cmp	r3, #0
 8007628:	d004      	beq.n	8007634 <HAL_RCC_OscConfig+0x7c>
 800762a:	4b7f      	ldr	r3, [pc, #508]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007632:	e005      	b.n	8007640 <HAL_RCC_OscConfig+0x88>
 8007634:	4b7c      	ldr	r3, [pc, #496]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 8007636:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800763a:	091b      	lsrs	r3, r3, #4
 800763c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007640:	4293      	cmp	r3, r2
 8007642:	d223      	bcs.n	800768c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a1b      	ldr	r3, [r3, #32]
 8007648:	4618      	mov	r0, r3
 800764a:	f000 fd55 	bl	80080f8 <RCC_SetFlashLatencyFromMSIRange>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	e383      	b.n	8007d60 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007658:	4b73      	ldr	r3, [pc, #460]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a72      	ldr	r2, [pc, #456]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 800765e:	f043 0308 	orr.w	r3, r3, #8
 8007662:	6013      	str	r3, [r2, #0]
 8007664:	4b70      	ldr	r3, [pc, #448]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a1b      	ldr	r3, [r3, #32]
 8007670:	496d      	ldr	r1, [pc, #436]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 8007672:	4313      	orrs	r3, r2
 8007674:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007676:	4b6c      	ldr	r3, [pc, #432]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	69db      	ldr	r3, [r3, #28]
 8007682:	021b      	lsls	r3, r3, #8
 8007684:	4968      	ldr	r1, [pc, #416]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 8007686:	4313      	orrs	r3, r2
 8007688:	604b      	str	r3, [r1, #4]
 800768a:	e025      	b.n	80076d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800768c:	4b66      	ldr	r3, [pc, #408]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a65      	ldr	r2, [pc, #404]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 8007692:	f043 0308 	orr.w	r3, r3, #8
 8007696:	6013      	str	r3, [r2, #0]
 8007698:	4b63      	ldr	r3, [pc, #396]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a1b      	ldr	r3, [r3, #32]
 80076a4:	4960      	ldr	r1, [pc, #384]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80076aa:	4b5f      	ldr	r3, [pc, #380]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	69db      	ldr	r3, [r3, #28]
 80076b6:	021b      	lsls	r3, r3, #8
 80076b8:	495b      	ldr	r1, [pc, #364]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d109      	bne.n	80076d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a1b      	ldr	r3, [r3, #32]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 fd15 	bl	80080f8 <RCC_SetFlashLatencyFromMSIRange>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d001      	beq.n	80076d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e343      	b.n	8007d60 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80076d8:	f000 fc4a 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 80076dc:	4602      	mov	r2, r0
 80076de:	4b52      	ldr	r3, [pc, #328]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	091b      	lsrs	r3, r3, #4
 80076e4:	f003 030f 	and.w	r3, r3, #15
 80076e8:	4950      	ldr	r1, [pc, #320]	@ (800782c <HAL_RCC_OscConfig+0x274>)
 80076ea:	5ccb      	ldrb	r3, [r1, r3]
 80076ec:	f003 031f 	and.w	r3, r3, #31
 80076f0:	fa22 f303 	lsr.w	r3, r2, r3
 80076f4:	4a4e      	ldr	r2, [pc, #312]	@ (8007830 <HAL_RCC_OscConfig+0x278>)
 80076f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80076f8:	4b4e      	ldr	r3, [pc, #312]	@ (8007834 <HAL_RCC_OscConfig+0x27c>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7fc ff2d 	bl	800455c <HAL_InitTick>
 8007702:	4603      	mov	r3, r0
 8007704:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d052      	beq.n	80077b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800770c:	7bfb      	ldrb	r3, [r7, #15]
 800770e:	e327      	b.n	8007d60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d032      	beq.n	800777e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007718:	4b43      	ldr	r3, [pc, #268]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a42      	ldr	r2, [pc, #264]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 800771e:	f043 0301 	orr.w	r3, r3, #1
 8007722:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007724:	f7fc ff6a 	bl	80045fc <HAL_GetTick>
 8007728:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800772a:	e008      	b.n	800773e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800772c:	f7fc ff66 	bl	80045fc <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	2b02      	cmp	r3, #2
 8007738:	d901      	bls.n	800773e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e310      	b.n	8007d60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800773e:	4b3a      	ldr	r3, [pc, #232]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d0f0      	beq.n	800772c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800774a:	4b37      	ldr	r3, [pc, #220]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a36      	ldr	r2, [pc, #216]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 8007750:	f043 0308 	orr.w	r3, r3, #8
 8007754:	6013      	str	r3, [r2, #0]
 8007756:	4b34      	ldr	r3, [pc, #208]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	4931      	ldr	r1, [pc, #196]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 8007764:	4313      	orrs	r3, r2
 8007766:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007768:	4b2f      	ldr	r3, [pc, #188]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	69db      	ldr	r3, [r3, #28]
 8007774:	021b      	lsls	r3, r3, #8
 8007776:	492c      	ldr	r1, [pc, #176]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 8007778:	4313      	orrs	r3, r2
 800777a:	604b      	str	r3, [r1, #4]
 800777c:	e01a      	b.n	80077b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800777e:	4b2a      	ldr	r3, [pc, #168]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a29      	ldr	r2, [pc, #164]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 8007784:	f023 0301 	bic.w	r3, r3, #1
 8007788:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800778a:	f7fc ff37 	bl	80045fc <HAL_GetTick>
 800778e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007790:	e008      	b.n	80077a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007792:	f7fc ff33 	bl	80045fc <HAL_GetTick>
 8007796:	4602      	mov	r2, r0
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	2b02      	cmp	r3, #2
 800779e:	d901      	bls.n	80077a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e2dd      	b.n	8007d60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80077a4:	4b20      	ldr	r3, [pc, #128]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0302 	and.w	r3, r3, #2
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1f0      	bne.n	8007792 <HAL_RCC_OscConfig+0x1da>
 80077b0:	e000      	b.n	80077b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80077b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d074      	beq.n	80078aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	2b08      	cmp	r3, #8
 80077c4:	d005      	beq.n	80077d2 <HAL_RCC_OscConfig+0x21a>
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	2b0c      	cmp	r3, #12
 80077ca:	d10e      	bne.n	80077ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	2b03      	cmp	r3, #3
 80077d0:	d10b      	bne.n	80077ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077d2:	4b15      	ldr	r3, [pc, #84]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d064      	beq.n	80078a8 <HAL_RCC_OscConfig+0x2f0>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d160      	bne.n	80078a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e2ba      	b.n	8007d60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077f2:	d106      	bne.n	8007802 <HAL_RCC_OscConfig+0x24a>
 80077f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a0b      	ldr	r2, [pc, #44]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 80077fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077fe:	6013      	str	r3, [r2, #0]
 8007800:	e026      	b.n	8007850 <HAL_RCC_OscConfig+0x298>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800780a:	d115      	bne.n	8007838 <HAL_RCC_OscConfig+0x280>
 800780c:	4b06      	ldr	r3, [pc, #24]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a05      	ldr	r2, [pc, #20]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 8007812:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007816:	6013      	str	r3, [r2, #0]
 8007818:	4b03      	ldr	r3, [pc, #12]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a02      	ldr	r2, [pc, #8]	@ (8007828 <HAL_RCC_OscConfig+0x270>)
 800781e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007822:	6013      	str	r3, [r2, #0]
 8007824:	e014      	b.n	8007850 <HAL_RCC_OscConfig+0x298>
 8007826:	bf00      	nop
 8007828:	40021000 	.word	0x40021000
 800782c:	0801374c 	.word	0x0801374c
 8007830:	20000070 	.word	0x20000070
 8007834:	20000078 	.word	0x20000078
 8007838:	4ba0      	ldr	r3, [pc, #640]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a9f      	ldr	r2, [pc, #636]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 800783e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007842:	6013      	str	r3, [r2, #0]
 8007844:	4b9d      	ldr	r3, [pc, #628]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a9c      	ldr	r2, [pc, #624]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 800784a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800784e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d013      	beq.n	8007880 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007858:	f7fc fed0 	bl	80045fc <HAL_GetTick>
 800785c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800785e:	e008      	b.n	8007872 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007860:	f7fc fecc 	bl	80045fc <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	2b64      	cmp	r3, #100	@ 0x64
 800786c:	d901      	bls.n	8007872 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e276      	b.n	8007d60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007872:	4b92      	ldr	r3, [pc, #584]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d0f0      	beq.n	8007860 <HAL_RCC_OscConfig+0x2a8>
 800787e:	e014      	b.n	80078aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007880:	f7fc febc 	bl	80045fc <HAL_GetTick>
 8007884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007886:	e008      	b.n	800789a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007888:	f7fc feb8 	bl	80045fc <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	2b64      	cmp	r3, #100	@ 0x64
 8007894:	d901      	bls.n	800789a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e262      	b.n	8007d60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800789a:	4b88      	ldr	r3, [pc, #544]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1f0      	bne.n	8007888 <HAL_RCC_OscConfig+0x2d0>
 80078a6:	e000      	b.n	80078aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0302 	and.w	r3, r3, #2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d060      	beq.n	8007978 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	2b04      	cmp	r3, #4
 80078ba:	d005      	beq.n	80078c8 <HAL_RCC_OscConfig+0x310>
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	2b0c      	cmp	r3, #12
 80078c0:	d119      	bne.n	80078f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d116      	bne.n	80078f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078c8:	4b7c      	ldr	r3, [pc, #496]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d005      	beq.n	80078e0 <HAL_RCC_OscConfig+0x328>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d101      	bne.n	80078e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e23f      	b.n	8007d60 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078e0:	4b76      	ldr	r3, [pc, #472]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	061b      	lsls	r3, r3, #24
 80078ee:	4973      	ldr	r1, [pc, #460]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 80078f0:	4313      	orrs	r3, r2
 80078f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078f4:	e040      	b.n	8007978 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d023      	beq.n	8007946 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078fe:	4b6f      	ldr	r3, [pc, #444]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a6e      	ldr	r2, [pc, #440]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 8007904:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800790a:	f7fc fe77 	bl	80045fc <HAL_GetTick>
 800790e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007910:	e008      	b.n	8007924 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007912:	f7fc fe73 	bl	80045fc <HAL_GetTick>
 8007916:	4602      	mov	r2, r0
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	2b02      	cmp	r3, #2
 800791e:	d901      	bls.n	8007924 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e21d      	b.n	8007d60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007924:	4b65      	ldr	r3, [pc, #404]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800792c:	2b00      	cmp	r3, #0
 800792e:	d0f0      	beq.n	8007912 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007930:	4b62      	ldr	r3, [pc, #392]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	061b      	lsls	r3, r3, #24
 800793e:	495f      	ldr	r1, [pc, #380]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 8007940:	4313      	orrs	r3, r2
 8007942:	604b      	str	r3, [r1, #4]
 8007944:	e018      	b.n	8007978 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007946:	4b5d      	ldr	r3, [pc, #372]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a5c      	ldr	r2, [pc, #368]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 800794c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007952:	f7fc fe53 	bl	80045fc <HAL_GetTick>
 8007956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007958:	e008      	b.n	800796c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800795a:	f7fc fe4f 	bl	80045fc <HAL_GetTick>
 800795e:	4602      	mov	r2, r0
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	2b02      	cmp	r3, #2
 8007966:	d901      	bls.n	800796c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e1f9      	b.n	8007d60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800796c:	4b53      	ldr	r3, [pc, #332]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1f0      	bne.n	800795a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 0308 	and.w	r3, r3, #8
 8007980:	2b00      	cmp	r3, #0
 8007982:	d03c      	beq.n	80079fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	695b      	ldr	r3, [r3, #20]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d01c      	beq.n	80079c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800798c:	4b4b      	ldr	r3, [pc, #300]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 800798e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007992:	4a4a      	ldr	r2, [pc, #296]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 8007994:	f043 0301 	orr.w	r3, r3, #1
 8007998:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800799c:	f7fc fe2e 	bl	80045fc <HAL_GetTick>
 80079a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80079a2:	e008      	b.n	80079b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079a4:	f7fc fe2a 	bl	80045fc <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d901      	bls.n	80079b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e1d4      	b.n	8007d60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80079b6:	4b41      	ldr	r3, [pc, #260]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 80079b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079bc:	f003 0302 	and.w	r3, r3, #2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d0ef      	beq.n	80079a4 <HAL_RCC_OscConfig+0x3ec>
 80079c4:	e01b      	b.n	80079fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079c6:	4b3d      	ldr	r3, [pc, #244]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 80079c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079cc:	4a3b      	ldr	r2, [pc, #236]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 80079ce:	f023 0301 	bic.w	r3, r3, #1
 80079d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079d6:	f7fc fe11 	bl	80045fc <HAL_GetTick>
 80079da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80079dc:	e008      	b.n	80079f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079de:	f7fc fe0d 	bl	80045fc <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d901      	bls.n	80079f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e1b7      	b.n	8007d60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80079f0:	4b32      	ldr	r3, [pc, #200]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 80079f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079f6:	f003 0302 	and.w	r3, r3, #2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1ef      	bne.n	80079de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0304 	and.w	r3, r3, #4
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 80a6 	beq.w	8007b58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007a10:	4b2a      	ldr	r3, [pc, #168]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 8007a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10d      	bne.n	8007a38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a1c:	4b27      	ldr	r3, [pc, #156]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 8007a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a20:	4a26      	ldr	r2, [pc, #152]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 8007a22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a26:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a28:	4b24      	ldr	r3, [pc, #144]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 8007a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a30:	60bb      	str	r3, [r7, #8]
 8007a32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a34:	2301      	movs	r3, #1
 8007a36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a38:	4b21      	ldr	r3, [pc, #132]	@ (8007ac0 <HAL_RCC_OscConfig+0x508>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d118      	bne.n	8007a76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a44:	4b1e      	ldr	r3, [pc, #120]	@ (8007ac0 <HAL_RCC_OscConfig+0x508>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a1d      	ldr	r2, [pc, #116]	@ (8007ac0 <HAL_RCC_OscConfig+0x508>)
 8007a4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a50:	f7fc fdd4 	bl	80045fc <HAL_GetTick>
 8007a54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a56:	e008      	b.n	8007a6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a58:	f7fc fdd0 	bl	80045fc <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d901      	bls.n	8007a6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e17a      	b.n	8007d60 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a6a:	4b15      	ldr	r3, [pc, #84]	@ (8007ac0 <HAL_RCC_OscConfig+0x508>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d0f0      	beq.n	8007a58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d108      	bne.n	8007a90 <HAL_RCC_OscConfig+0x4d8>
 8007a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 8007a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a84:	4a0d      	ldr	r2, [pc, #52]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 8007a86:	f043 0301 	orr.w	r3, r3, #1
 8007a8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007a8e:	e029      	b.n	8007ae4 <HAL_RCC_OscConfig+0x52c>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	2b05      	cmp	r3, #5
 8007a96:	d115      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x50c>
 8007a98:	4b08      	ldr	r3, [pc, #32]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 8007a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a9e:	4a07      	ldr	r2, [pc, #28]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 8007aa0:	f043 0304 	orr.w	r3, r3, #4
 8007aa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007aa8:	4b04      	ldr	r3, [pc, #16]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 8007aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aae:	4a03      	ldr	r2, [pc, #12]	@ (8007abc <HAL_RCC_OscConfig+0x504>)
 8007ab0:	f043 0301 	orr.w	r3, r3, #1
 8007ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007ab8:	e014      	b.n	8007ae4 <HAL_RCC_OscConfig+0x52c>
 8007aba:	bf00      	nop
 8007abc:	40021000 	.word	0x40021000
 8007ac0:	40007000 	.word	0x40007000
 8007ac4:	4b9c      	ldr	r3, [pc, #624]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aca:	4a9b      	ldr	r2, [pc, #620]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007acc:	f023 0301 	bic.w	r3, r3, #1
 8007ad0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007ad4:	4b98      	ldr	r3, [pc, #608]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ada:	4a97      	ldr	r2, [pc, #604]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007adc:	f023 0304 	bic.w	r3, r3, #4
 8007ae0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d016      	beq.n	8007b1a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aec:	f7fc fd86 	bl	80045fc <HAL_GetTick>
 8007af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007af2:	e00a      	b.n	8007b0a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007af4:	f7fc fd82 	bl	80045fc <HAL_GetTick>
 8007af8:	4602      	mov	r2, r0
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d901      	bls.n	8007b0a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e12a      	b.n	8007d60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b0a:	4b8b      	ldr	r3, [pc, #556]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b10:	f003 0302 	and.w	r3, r3, #2
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d0ed      	beq.n	8007af4 <HAL_RCC_OscConfig+0x53c>
 8007b18:	e015      	b.n	8007b46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b1a:	f7fc fd6f 	bl	80045fc <HAL_GetTick>
 8007b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007b20:	e00a      	b.n	8007b38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b22:	f7fc fd6b 	bl	80045fc <HAL_GetTick>
 8007b26:	4602      	mov	r2, r0
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d901      	bls.n	8007b38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e113      	b.n	8007d60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007b38:	4b7f      	ldr	r3, [pc, #508]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b3e:	f003 0302 	and.w	r3, r3, #2
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1ed      	bne.n	8007b22 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b46:	7ffb      	ldrb	r3, [r7, #31]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d105      	bne.n	8007b58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b4c:	4b7a      	ldr	r3, [pc, #488]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b50:	4a79      	ldr	r2, [pc, #484]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007b52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b56:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 80fe 	beq.w	8007d5e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	f040 80d0 	bne.w	8007d0c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007b6c:	4b72      	ldr	r3, [pc, #456]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	f003 0203 	and.w	r2, r3, #3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d130      	bne.n	8007be2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d127      	bne.n	8007be2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d11f      	bne.n	8007be2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007bac:	2a07      	cmp	r2, #7
 8007bae:	bf14      	ite	ne
 8007bb0:	2201      	movne	r2, #1
 8007bb2:	2200      	moveq	r2, #0
 8007bb4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d113      	bne.n	8007be2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bc4:	085b      	lsrs	r3, r3, #1
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d109      	bne.n	8007be2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bd8:	085b      	lsrs	r3, r3, #1
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d06e      	beq.n	8007cc0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	2b0c      	cmp	r3, #12
 8007be6:	d069      	beq.n	8007cbc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007be8:	4b53      	ldr	r3, [pc, #332]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d105      	bne.n	8007c00 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007bf4:	4b50      	ldr	r3, [pc, #320]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e0ad      	b.n	8007d60 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007c04:	4b4c      	ldr	r3, [pc, #304]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a4b      	ldr	r2, [pc, #300]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007c0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c0e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007c10:	f7fc fcf4 	bl	80045fc <HAL_GetTick>
 8007c14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c16:	e008      	b.n	8007c2a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c18:	f7fc fcf0 	bl	80045fc <HAL_GetTick>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d901      	bls.n	8007c2a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e09a      	b.n	8007d60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c2a:	4b43      	ldr	r3, [pc, #268]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1f0      	bne.n	8007c18 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c36:	4b40      	ldr	r3, [pc, #256]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007c38:	68da      	ldr	r2, [r3, #12]
 8007c3a:	4b40      	ldr	r3, [pc, #256]	@ (8007d3c <HAL_RCC_OscConfig+0x784>)
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007c46:	3a01      	subs	r2, #1
 8007c48:	0112      	lsls	r2, r2, #4
 8007c4a:	4311      	orrs	r1, r2
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007c50:	0212      	lsls	r2, r2, #8
 8007c52:	4311      	orrs	r1, r2
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007c58:	0852      	lsrs	r2, r2, #1
 8007c5a:	3a01      	subs	r2, #1
 8007c5c:	0552      	lsls	r2, r2, #21
 8007c5e:	4311      	orrs	r1, r2
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007c64:	0852      	lsrs	r2, r2, #1
 8007c66:	3a01      	subs	r2, #1
 8007c68:	0652      	lsls	r2, r2, #25
 8007c6a:	4311      	orrs	r1, r2
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007c70:	0912      	lsrs	r2, r2, #4
 8007c72:	0452      	lsls	r2, r2, #17
 8007c74:	430a      	orrs	r2, r1
 8007c76:	4930      	ldr	r1, [pc, #192]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a2d      	ldr	r2, [pc, #180]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007c82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007c88:	4b2b      	ldr	r3, [pc, #172]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	4a2a      	ldr	r2, [pc, #168]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007c8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007c94:	f7fc fcb2 	bl	80045fc <HAL_GetTick>
 8007c98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c9a:	e008      	b.n	8007cae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c9c:	f7fc fcae 	bl	80045fc <HAL_GetTick>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d901      	bls.n	8007cae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e058      	b.n	8007d60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cae:	4b22      	ldr	r3, [pc, #136]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d0f0      	beq.n	8007c9c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007cba:	e050      	b.n	8007d5e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e04f      	b.n	8007d60 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d148      	bne.n	8007d5e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a19      	ldr	r2, [pc, #100]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007cd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007cd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007cd8:	4b17      	ldr	r3, [pc, #92]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	4a16      	ldr	r2, [pc, #88]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007cde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ce2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007ce4:	f7fc fc8a 	bl	80045fc <HAL_GetTick>
 8007ce8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cea:	e008      	b.n	8007cfe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cec:	f7fc fc86 	bl	80045fc <HAL_GetTick>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d901      	bls.n	8007cfe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e030      	b.n	8007d60 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d0f0      	beq.n	8007cec <HAL_RCC_OscConfig+0x734>
 8007d0a:	e028      	b.n	8007d5e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	2b0c      	cmp	r3, #12
 8007d10:	d023      	beq.n	8007d5a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d12:	4b09      	ldr	r3, [pc, #36]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a08      	ldr	r2, [pc, #32]	@ (8007d38 <HAL_RCC_OscConfig+0x780>)
 8007d18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d1e:	f7fc fc6d 	bl	80045fc <HAL_GetTick>
 8007d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d24:	e00c      	b.n	8007d40 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d26:	f7fc fc69 	bl	80045fc <HAL_GetTick>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d905      	bls.n	8007d40 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e013      	b.n	8007d60 <HAL_RCC_OscConfig+0x7a8>
 8007d38:	40021000 	.word	0x40021000
 8007d3c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d40:	4b09      	ldr	r3, [pc, #36]	@ (8007d68 <HAL_RCC_OscConfig+0x7b0>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1ec      	bne.n	8007d26 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007d4c:	4b06      	ldr	r3, [pc, #24]	@ (8007d68 <HAL_RCC_OscConfig+0x7b0>)
 8007d4e:	68da      	ldr	r2, [r3, #12]
 8007d50:	4905      	ldr	r1, [pc, #20]	@ (8007d68 <HAL_RCC_OscConfig+0x7b0>)
 8007d52:	4b06      	ldr	r3, [pc, #24]	@ (8007d6c <HAL_RCC_OscConfig+0x7b4>)
 8007d54:	4013      	ands	r3, r2
 8007d56:	60cb      	str	r3, [r1, #12]
 8007d58:	e001      	b.n	8007d5e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e000      	b.n	8007d60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3720      	adds	r7, #32
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	40021000 	.word	0x40021000
 8007d6c:	feeefffc 	.word	0xfeeefffc

08007d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e0e7      	b.n	8007f54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d84:	4b75      	ldr	r3, [pc, #468]	@ (8007f5c <HAL_RCC_ClockConfig+0x1ec>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 0307 	and.w	r3, r3, #7
 8007d8c:	683a      	ldr	r2, [r7, #0]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d910      	bls.n	8007db4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d92:	4b72      	ldr	r3, [pc, #456]	@ (8007f5c <HAL_RCC_ClockConfig+0x1ec>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f023 0207 	bic.w	r2, r3, #7
 8007d9a:	4970      	ldr	r1, [pc, #448]	@ (8007f5c <HAL_RCC_ClockConfig+0x1ec>)
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007da2:	4b6e      	ldr	r3, [pc, #440]	@ (8007f5c <HAL_RCC_ClockConfig+0x1ec>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0307 	and.w	r3, r3, #7
 8007daa:	683a      	ldr	r2, [r7, #0]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d001      	beq.n	8007db4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e0cf      	b.n	8007f54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0302 	and.w	r3, r3, #2
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d010      	beq.n	8007de2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689a      	ldr	r2, [r3, #8]
 8007dc4:	4b66      	ldr	r3, [pc, #408]	@ (8007f60 <HAL_RCC_ClockConfig+0x1f0>)
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d908      	bls.n	8007de2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007dd0:	4b63      	ldr	r3, [pc, #396]	@ (8007f60 <HAL_RCC_ClockConfig+0x1f0>)
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	4960      	ldr	r1, [pc, #384]	@ (8007f60 <HAL_RCC_ClockConfig+0x1f0>)
 8007dde:	4313      	orrs	r3, r2
 8007de0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f003 0301 	and.w	r3, r3, #1
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d04c      	beq.n	8007e88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	2b03      	cmp	r3, #3
 8007df4:	d107      	bne.n	8007e06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007df6:	4b5a      	ldr	r3, [pc, #360]	@ (8007f60 <HAL_RCC_ClockConfig+0x1f0>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d121      	bne.n	8007e46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e0a6      	b.n	8007f54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d107      	bne.n	8007e1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e0e:	4b54      	ldr	r3, [pc, #336]	@ (8007f60 <HAL_RCC_ClockConfig+0x1f0>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d115      	bne.n	8007e46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e09a      	b.n	8007f54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d107      	bne.n	8007e36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007e26:	4b4e      	ldr	r3, [pc, #312]	@ (8007f60 <HAL_RCC_ClockConfig+0x1f0>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0302 	and.w	r3, r3, #2
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d109      	bne.n	8007e46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e08e      	b.n	8007f54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e36:	4b4a      	ldr	r3, [pc, #296]	@ (8007f60 <HAL_RCC_ClockConfig+0x1f0>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d101      	bne.n	8007e46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e086      	b.n	8007f54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007e46:	4b46      	ldr	r3, [pc, #280]	@ (8007f60 <HAL_RCC_ClockConfig+0x1f0>)
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	f023 0203 	bic.w	r2, r3, #3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	4943      	ldr	r1, [pc, #268]	@ (8007f60 <HAL_RCC_ClockConfig+0x1f0>)
 8007e54:	4313      	orrs	r3, r2
 8007e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e58:	f7fc fbd0 	bl	80045fc <HAL_GetTick>
 8007e5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e5e:	e00a      	b.n	8007e76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e60:	f7fc fbcc 	bl	80045fc <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d901      	bls.n	8007e76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e06e      	b.n	8007f54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e76:	4b3a      	ldr	r3, [pc, #232]	@ (8007f60 <HAL_RCC_ClockConfig+0x1f0>)
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f003 020c 	and.w	r2, r3, #12
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d1eb      	bne.n	8007e60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0302 	and.w	r3, r3, #2
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d010      	beq.n	8007eb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	689a      	ldr	r2, [r3, #8]
 8007e98:	4b31      	ldr	r3, [pc, #196]	@ (8007f60 <HAL_RCC_ClockConfig+0x1f0>)
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d208      	bcs.n	8007eb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ea4:	4b2e      	ldr	r3, [pc, #184]	@ (8007f60 <HAL_RCC_ClockConfig+0x1f0>)
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	492b      	ldr	r1, [pc, #172]	@ (8007f60 <HAL_RCC_ClockConfig+0x1f0>)
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007eb6:	4b29      	ldr	r3, [pc, #164]	@ (8007f5c <HAL_RCC_ClockConfig+0x1ec>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 0307 	and.w	r3, r3, #7
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d210      	bcs.n	8007ee6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ec4:	4b25      	ldr	r3, [pc, #148]	@ (8007f5c <HAL_RCC_ClockConfig+0x1ec>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f023 0207 	bic.w	r2, r3, #7
 8007ecc:	4923      	ldr	r1, [pc, #140]	@ (8007f5c <HAL_RCC_ClockConfig+0x1ec>)
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ed4:	4b21      	ldr	r3, [pc, #132]	@ (8007f5c <HAL_RCC_ClockConfig+0x1ec>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0307 	and.w	r3, r3, #7
 8007edc:	683a      	ldr	r2, [r7, #0]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d001      	beq.n	8007ee6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e036      	b.n	8007f54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 0304 	and.w	r3, r3, #4
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d008      	beq.n	8007f04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8007f60 <HAL_RCC_ClockConfig+0x1f0>)
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	4918      	ldr	r1, [pc, #96]	@ (8007f60 <HAL_RCC_ClockConfig+0x1f0>)
 8007f00:	4313      	orrs	r3, r2
 8007f02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0308 	and.w	r3, r3, #8
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d009      	beq.n	8007f24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f10:	4b13      	ldr	r3, [pc, #76]	@ (8007f60 <HAL_RCC_ClockConfig+0x1f0>)
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	00db      	lsls	r3, r3, #3
 8007f1e:	4910      	ldr	r1, [pc, #64]	@ (8007f60 <HAL_RCC_ClockConfig+0x1f0>)
 8007f20:	4313      	orrs	r3, r2
 8007f22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007f24:	f000 f824 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f60 <HAL_RCC_ClockConfig+0x1f0>)
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	091b      	lsrs	r3, r3, #4
 8007f30:	f003 030f 	and.w	r3, r3, #15
 8007f34:	490b      	ldr	r1, [pc, #44]	@ (8007f64 <HAL_RCC_ClockConfig+0x1f4>)
 8007f36:	5ccb      	ldrb	r3, [r1, r3]
 8007f38:	f003 031f 	and.w	r3, r3, #31
 8007f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f40:	4a09      	ldr	r2, [pc, #36]	@ (8007f68 <HAL_RCC_ClockConfig+0x1f8>)
 8007f42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007f44:	4b09      	ldr	r3, [pc, #36]	@ (8007f6c <HAL_RCC_ClockConfig+0x1fc>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fc fb07 	bl	800455c <HAL_InitTick>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	72fb      	strb	r3, [r7, #11]

  return status;
 8007f52:	7afb      	ldrb	r3, [r7, #11]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	40022000 	.word	0x40022000
 8007f60:	40021000 	.word	0x40021000
 8007f64:	0801374c 	.word	0x0801374c
 8007f68:	20000070 	.word	0x20000070
 8007f6c:	20000078 	.word	0x20000078

08007f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b089      	sub	sp, #36	@ 0x24
 8007f74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007f76:	2300      	movs	r3, #0
 8007f78:	61fb      	str	r3, [r7, #28]
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f7e:	4b3e      	ldr	r3, [pc, #248]	@ (8008078 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f003 030c 	and.w	r3, r3, #12
 8007f86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f88:	4b3b      	ldr	r3, [pc, #236]	@ (8008078 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	f003 0303 	and.w	r3, r3, #3
 8007f90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d005      	beq.n	8007fa4 <HAL_RCC_GetSysClockFreq+0x34>
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	2b0c      	cmp	r3, #12
 8007f9c:	d121      	bne.n	8007fe2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d11e      	bne.n	8007fe2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007fa4:	4b34      	ldr	r3, [pc, #208]	@ (8008078 <HAL_RCC_GetSysClockFreq+0x108>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 0308 	and.w	r3, r3, #8
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d107      	bne.n	8007fc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007fb0:	4b31      	ldr	r3, [pc, #196]	@ (8008078 <HAL_RCC_GetSysClockFreq+0x108>)
 8007fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fb6:	0a1b      	lsrs	r3, r3, #8
 8007fb8:	f003 030f 	and.w	r3, r3, #15
 8007fbc:	61fb      	str	r3, [r7, #28]
 8007fbe:	e005      	b.n	8007fcc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8008078 <HAL_RCC_GetSysClockFreq+0x108>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	091b      	lsrs	r3, r3, #4
 8007fc6:	f003 030f 	and.w	r3, r3, #15
 8007fca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007fcc:	4a2b      	ldr	r2, [pc, #172]	@ (800807c <HAL_RCC_GetSysClockFreq+0x10c>)
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10d      	bne.n	8007ff8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007fe0:	e00a      	b.n	8007ff8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	2b04      	cmp	r3, #4
 8007fe6:	d102      	bne.n	8007fee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007fe8:	4b25      	ldr	r3, [pc, #148]	@ (8008080 <HAL_RCC_GetSysClockFreq+0x110>)
 8007fea:	61bb      	str	r3, [r7, #24]
 8007fec:	e004      	b.n	8007ff8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	2b08      	cmp	r3, #8
 8007ff2:	d101      	bne.n	8007ff8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007ff4:	4b23      	ldr	r3, [pc, #140]	@ (8008084 <HAL_RCC_GetSysClockFreq+0x114>)
 8007ff6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	2b0c      	cmp	r3, #12
 8007ffc:	d134      	bne.n	8008068 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8008078 <HAL_RCC_GetSysClockFreq+0x108>)
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	f003 0303 	and.w	r3, r3, #3
 8008006:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	2b02      	cmp	r3, #2
 800800c:	d003      	beq.n	8008016 <HAL_RCC_GetSysClockFreq+0xa6>
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	2b03      	cmp	r3, #3
 8008012:	d003      	beq.n	800801c <HAL_RCC_GetSysClockFreq+0xac>
 8008014:	e005      	b.n	8008022 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008016:	4b1a      	ldr	r3, [pc, #104]	@ (8008080 <HAL_RCC_GetSysClockFreq+0x110>)
 8008018:	617b      	str	r3, [r7, #20]
      break;
 800801a:	e005      	b.n	8008028 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800801c:	4b19      	ldr	r3, [pc, #100]	@ (8008084 <HAL_RCC_GetSysClockFreq+0x114>)
 800801e:	617b      	str	r3, [r7, #20]
      break;
 8008020:	e002      	b.n	8008028 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	617b      	str	r3, [r7, #20]
      break;
 8008026:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008028:	4b13      	ldr	r3, [pc, #76]	@ (8008078 <HAL_RCC_GetSysClockFreq+0x108>)
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	091b      	lsrs	r3, r3, #4
 800802e:	f003 0307 	and.w	r3, r3, #7
 8008032:	3301      	adds	r3, #1
 8008034:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008036:	4b10      	ldr	r3, [pc, #64]	@ (8008078 <HAL_RCC_GetSysClockFreq+0x108>)
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	0a1b      	lsrs	r3, r3, #8
 800803c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008040:	697a      	ldr	r2, [r7, #20]
 8008042:	fb03 f202 	mul.w	r2, r3, r2
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	fbb2 f3f3 	udiv	r3, r2, r3
 800804c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800804e:	4b0a      	ldr	r3, [pc, #40]	@ (8008078 <HAL_RCC_GetSysClockFreq+0x108>)
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	0e5b      	lsrs	r3, r3, #25
 8008054:	f003 0303 	and.w	r3, r3, #3
 8008058:	3301      	adds	r3, #1
 800805a:	005b      	lsls	r3, r3, #1
 800805c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	fbb2 f3f3 	udiv	r3, r2, r3
 8008066:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008068:	69bb      	ldr	r3, [r7, #24]
}
 800806a:	4618      	mov	r0, r3
 800806c:	3724      	adds	r7, #36	@ 0x24
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	40021000 	.word	0x40021000
 800807c:	08013764 	.word	0x08013764
 8008080:	00f42400 	.word	0x00f42400
 8008084:	007a1200 	.word	0x007a1200

08008088 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008088:	b480      	push	{r7}
 800808a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800808c:	4b03      	ldr	r3, [pc, #12]	@ (800809c <HAL_RCC_GetHCLKFreq+0x14>)
 800808e:	681b      	ldr	r3, [r3, #0]
}
 8008090:	4618      	mov	r0, r3
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	20000070 	.word	0x20000070

080080a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80080a4:	f7ff fff0 	bl	8008088 <HAL_RCC_GetHCLKFreq>
 80080a8:	4602      	mov	r2, r0
 80080aa:	4b06      	ldr	r3, [pc, #24]	@ (80080c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	0a1b      	lsrs	r3, r3, #8
 80080b0:	f003 0307 	and.w	r3, r3, #7
 80080b4:	4904      	ldr	r1, [pc, #16]	@ (80080c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80080b6:	5ccb      	ldrb	r3, [r1, r3]
 80080b8:	f003 031f 	and.w	r3, r3, #31
 80080bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	40021000 	.word	0x40021000
 80080c8:	0801375c 	.word	0x0801375c

080080cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80080d0:	f7ff ffda 	bl	8008088 <HAL_RCC_GetHCLKFreq>
 80080d4:	4602      	mov	r2, r0
 80080d6:	4b06      	ldr	r3, [pc, #24]	@ (80080f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	0adb      	lsrs	r3, r3, #11
 80080dc:	f003 0307 	and.w	r3, r3, #7
 80080e0:	4904      	ldr	r1, [pc, #16]	@ (80080f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80080e2:	5ccb      	ldrb	r3, [r1, r3]
 80080e4:	f003 031f 	and.w	r3, r3, #31
 80080e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	40021000 	.word	0x40021000
 80080f4:	0801375c 	.word	0x0801375c

080080f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008100:	2300      	movs	r3, #0
 8008102:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008104:	4b2a      	ldr	r3, [pc, #168]	@ (80081b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d003      	beq.n	8008118 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008110:	f7ff f9de 	bl	80074d0 <HAL_PWREx_GetVoltageRange>
 8008114:	6178      	str	r0, [r7, #20]
 8008116:	e014      	b.n	8008142 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008118:	4b25      	ldr	r3, [pc, #148]	@ (80081b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800811a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800811c:	4a24      	ldr	r2, [pc, #144]	@ (80081b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800811e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008122:	6593      	str	r3, [r2, #88]	@ 0x58
 8008124:	4b22      	ldr	r3, [pc, #136]	@ (80081b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008128:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800812c:	60fb      	str	r3, [r7, #12]
 800812e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008130:	f7ff f9ce 	bl	80074d0 <HAL_PWREx_GetVoltageRange>
 8008134:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008136:	4b1e      	ldr	r3, [pc, #120]	@ (80081b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800813a:	4a1d      	ldr	r2, [pc, #116]	@ (80081b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800813c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008140:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008148:	d10b      	bne.n	8008162 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2b80      	cmp	r3, #128	@ 0x80
 800814e:	d919      	bls.n	8008184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2ba0      	cmp	r3, #160	@ 0xa0
 8008154:	d902      	bls.n	800815c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008156:	2302      	movs	r3, #2
 8008158:	613b      	str	r3, [r7, #16]
 800815a:	e013      	b.n	8008184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800815c:	2301      	movs	r3, #1
 800815e:	613b      	str	r3, [r7, #16]
 8008160:	e010      	b.n	8008184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2b80      	cmp	r3, #128	@ 0x80
 8008166:	d902      	bls.n	800816e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008168:	2303      	movs	r3, #3
 800816a:	613b      	str	r3, [r7, #16]
 800816c:	e00a      	b.n	8008184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2b80      	cmp	r3, #128	@ 0x80
 8008172:	d102      	bne.n	800817a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008174:	2302      	movs	r3, #2
 8008176:	613b      	str	r3, [r7, #16]
 8008178:	e004      	b.n	8008184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b70      	cmp	r3, #112	@ 0x70
 800817e:	d101      	bne.n	8008184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008180:	2301      	movs	r3, #1
 8008182:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008184:	4b0b      	ldr	r3, [pc, #44]	@ (80081b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f023 0207 	bic.w	r2, r3, #7
 800818c:	4909      	ldr	r1, [pc, #36]	@ (80081b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	4313      	orrs	r3, r2
 8008192:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008194:	4b07      	ldr	r3, [pc, #28]	@ (80081b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0307 	and.w	r3, r3, #7
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d001      	beq.n	80081a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e000      	b.n	80081a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3718      	adds	r7, #24
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	40021000 	.word	0x40021000
 80081b4:	40022000 	.word	0x40022000

080081b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80081c0:	2300      	movs	r3, #0
 80081c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80081c4:	2300      	movs	r3, #0
 80081c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d041      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80081dc:	d02a      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80081de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80081e2:	d824      	bhi.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80081e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80081e8:	d008      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80081ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80081ee:	d81e      	bhi.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00a      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80081f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80081f8:	d010      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80081fa:	e018      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80081fc:	4b86      	ldr	r3, [pc, #536]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	4a85      	ldr	r2, [pc, #532]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008202:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008206:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008208:	e015      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	3304      	adds	r3, #4
 800820e:	2100      	movs	r1, #0
 8008210:	4618      	mov	r0, r3
 8008212:	f000 fabb 	bl	800878c <RCCEx_PLLSAI1_Config>
 8008216:	4603      	mov	r3, r0
 8008218:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800821a:	e00c      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	3320      	adds	r3, #32
 8008220:	2100      	movs	r1, #0
 8008222:	4618      	mov	r0, r3
 8008224:	f000 fba6 	bl	8008974 <RCCEx_PLLSAI2_Config>
 8008228:	4603      	mov	r3, r0
 800822a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800822c:	e003      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	74fb      	strb	r3, [r7, #19]
      break;
 8008232:	e000      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008236:	7cfb      	ldrb	r3, [r7, #19]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10b      	bne.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800823c:	4b76      	ldr	r3, [pc, #472]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800823e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008242:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800824a:	4973      	ldr	r1, [pc, #460]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800824c:	4313      	orrs	r3, r2
 800824e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8008252:	e001      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008254:	7cfb      	ldrb	r3, [r7, #19]
 8008256:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d041      	beq.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008268:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800826c:	d02a      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800826e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008272:	d824      	bhi.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008274:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008278:	d008      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800827a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800827e:	d81e      	bhi.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00a      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008284:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008288:	d010      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800828a:	e018      	b.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800828c:	4b62      	ldr	r3, [pc, #392]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	4a61      	ldr	r2, [pc, #388]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008296:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008298:	e015      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	3304      	adds	r3, #4
 800829e:	2100      	movs	r1, #0
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 fa73 	bl	800878c <RCCEx_PLLSAI1_Config>
 80082a6:	4603      	mov	r3, r0
 80082a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80082aa:	e00c      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	3320      	adds	r3, #32
 80082b0:	2100      	movs	r1, #0
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 fb5e 	bl	8008974 <RCCEx_PLLSAI2_Config>
 80082b8:	4603      	mov	r3, r0
 80082ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80082bc:	e003      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	74fb      	strb	r3, [r7, #19]
      break;
 80082c2:	e000      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80082c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082c6:	7cfb      	ldrb	r3, [r7, #19]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10b      	bne.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80082cc:	4b52      	ldr	r3, [pc, #328]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082d2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082da:	494f      	ldr	r1, [pc, #316]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082dc:	4313      	orrs	r3, r2
 80082de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80082e2:	e001      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082e4:	7cfb      	ldrb	r3, [r7, #19]
 80082e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f000 80a0 	beq.w	8008436 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082f6:	2300      	movs	r3, #0
 80082f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80082fa:	4b47      	ldr	r3, [pc, #284]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008302:	2b00      	cmp	r3, #0
 8008304:	d101      	bne.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8008306:	2301      	movs	r3, #1
 8008308:	e000      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800830a:	2300      	movs	r3, #0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00d      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008310:	4b41      	ldr	r3, [pc, #260]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008314:	4a40      	ldr	r2, [pc, #256]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008316:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800831a:	6593      	str	r3, [r2, #88]	@ 0x58
 800831c:	4b3e      	ldr	r3, [pc, #248]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800831e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008320:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008324:	60bb      	str	r3, [r7, #8]
 8008326:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008328:	2301      	movs	r3, #1
 800832a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800832c:	4b3b      	ldr	r3, [pc, #236]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a3a      	ldr	r2, [pc, #232]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008332:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008336:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008338:	f7fc f960 	bl	80045fc <HAL_GetTick>
 800833c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800833e:	e009      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008340:	f7fc f95c 	bl	80045fc <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	2b02      	cmp	r3, #2
 800834c:	d902      	bls.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	74fb      	strb	r3, [r7, #19]
        break;
 8008352:	e005      	b.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008354:	4b31      	ldr	r3, [pc, #196]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800835c:	2b00      	cmp	r3, #0
 800835e:	d0ef      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008360:	7cfb      	ldrb	r3, [r7, #19]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d15c      	bne.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008366:	4b2c      	ldr	r3, [pc, #176]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800836c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008370:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d01f      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800837e:	697a      	ldr	r2, [r7, #20]
 8008380:	429a      	cmp	r2, r3
 8008382:	d019      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008384:	4b24      	ldr	r3, [pc, #144]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800838a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800838e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008390:	4b21      	ldr	r3, [pc, #132]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008396:	4a20      	ldr	r2, [pc, #128]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800839c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80083a0:	4b1d      	ldr	r3, [pc, #116]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083a6:	4a1c      	ldr	r2, [pc, #112]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80083b0:	4a19      	ldr	r2, [pc, #100]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	f003 0301 	and.w	r3, r3, #1
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d016      	beq.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c2:	f7fc f91b 	bl	80045fc <HAL_GetTick>
 80083c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083c8:	e00b      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083ca:	f7fc f917 	bl	80045fc <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083d8:	4293      	cmp	r3, r2
 80083da:	d902      	bls.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	74fb      	strb	r3, [r7, #19]
            break;
 80083e0:	e006      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083e8:	f003 0302 	and.w	r3, r3, #2
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d0ec      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80083f0:	7cfb      	ldrb	r3, [r7, #19]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10c      	bne.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083f6:	4b08      	ldr	r3, [pc, #32]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008406:	4904      	ldr	r1, [pc, #16]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008408:	4313      	orrs	r3, r2
 800840a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800840e:	e009      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008410:	7cfb      	ldrb	r3, [r7, #19]
 8008412:	74bb      	strb	r3, [r7, #18]
 8008414:	e006      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008416:	bf00      	nop
 8008418:	40021000 	.word	0x40021000
 800841c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008420:	7cfb      	ldrb	r3, [r7, #19]
 8008422:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008424:	7c7b      	ldrb	r3, [r7, #17]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d105      	bne.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800842a:	4b9e      	ldr	r3, [pc, #632]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800842c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800842e:	4a9d      	ldr	r2, [pc, #628]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008430:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008434:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00a      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008442:	4b98      	ldr	r3, [pc, #608]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008448:	f023 0203 	bic.w	r2, r3, #3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008450:	4994      	ldr	r1, [pc, #592]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008452:	4313      	orrs	r3, r2
 8008454:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 0302 	and.w	r3, r3, #2
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00a      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008464:	4b8f      	ldr	r3, [pc, #572]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800846a:	f023 020c 	bic.w	r2, r3, #12
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008472:	498c      	ldr	r1, [pc, #560]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008474:	4313      	orrs	r3, r2
 8008476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 0304 	and.w	r3, r3, #4
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00a      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008486:	4b87      	ldr	r3, [pc, #540]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800848c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008494:	4983      	ldr	r1, [pc, #524]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008496:	4313      	orrs	r3, r2
 8008498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 0308 	and.w	r3, r3, #8
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00a      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80084a8:	4b7e      	ldr	r3, [pc, #504]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084b6:	497b      	ldr	r1, [pc, #492]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084b8:	4313      	orrs	r3, r2
 80084ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0310 	and.w	r3, r3, #16
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00a      	beq.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80084ca:	4b76      	ldr	r3, [pc, #472]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084d8:	4972      	ldr	r1, [pc, #456]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 0320 	and.w	r3, r3, #32
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00a      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80084ec:	4b6d      	ldr	r3, [pc, #436]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084fa:	496a      	ldr	r1, [pc, #424]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084fc:	4313      	orrs	r3, r2
 80084fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00a      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800850e:	4b65      	ldr	r3, [pc, #404]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008514:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800851c:	4961      	ldr	r1, [pc, #388]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800851e:	4313      	orrs	r3, r2
 8008520:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00a      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008530:	4b5c      	ldr	r3, [pc, #368]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008536:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800853e:	4959      	ldr	r1, [pc, #356]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008540:	4313      	orrs	r3, r2
 8008542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00a      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008552:	4b54      	ldr	r3, [pc, #336]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008558:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008560:	4950      	ldr	r1, [pc, #320]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008562:	4313      	orrs	r3, r2
 8008564:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00a      	beq.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008574:	4b4b      	ldr	r3, [pc, #300]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800857a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008582:	4948      	ldr	r1, [pc, #288]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008584:	4313      	orrs	r3, r2
 8008586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00a      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008596:	4b43      	ldr	r3, [pc, #268]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800859c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085a4:	493f      	ldr	r1, [pc, #252]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d028      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80085b8:	4b3a      	ldr	r3, [pc, #232]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085c6:	4937      	ldr	r1, [pc, #220]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085c8:	4313      	orrs	r3, r2
 80085ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085d6:	d106      	bne.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085d8:	4b32      	ldr	r3, [pc, #200]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	4a31      	ldr	r2, [pc, #196]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80085e2:	60d3      	str	r3, [r2, #12]
 80085e4:	e011      	b.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80085ee:	d10c      	bne.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	3304      	adds	r3, #4
 80085f4:	2101      	movs	r1, #1
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 f8c8 	bl	800878c <RCCEx_PLLSAI1_Config>
 80085fc:	4603      	mov	r3, r0
 80085fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008600:	7cfb      	ldrb	r3, [r7, #19]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8008606:	7cfb      	ldrb	r3, [r7, #19]
 8008608:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d028      	beq.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008616:	4b23      	ldr	r3, [pc, #140]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800861c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008624:	491f      	ldr	r1, [pc, #124]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008626:	4313      	orrs	r3, r2
 8008628:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008630:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008634:	d106      	bne.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008636:	4b1b      	ldr	r3, [pc, #108]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	4a1a      	ldr	r2, [pc, #104]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800863c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008640:	60d3      	str	r3, [r2, #12]
 8008642:	e011      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008648:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800864c:	d10c      	bne.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	3304      	adds	r3, #4
 8008652:	2101      	movs	r1, #1
 8008654:	4618      	mov	r0, r3
 8008656:	f000 f899 	bl	800878c <RCCEx_PLLSAI1_Config>
 800865a:	4603      	mov	r3, r0
 800865c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800865e:	7cfb      	ldrb	r3, [r7, #19]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d001      	beq.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8008664:	7cfb      	ldrb	r3, [r7, #19]
 8008666:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008670:	2b00      	cmp	r3, #0
 8008672:	d02b      	beq.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008674:	4b0b      	ldr	r3, [pc, #44]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800867a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008682:	4908      	ldr	r1, [pc, #32]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008684:	4313      	orrs	r3, r2
 8008686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800868e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008692:	d109      	bne.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008694:	4b03      	ldr	r3, [pc, #12]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	4a02      	ldr	r2, [pc, #8]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800869a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800869e:	60d3      	str	r3, [r2, #12]
 80086a0:	e014      	b.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80086a2:	bf00      	nop
 80086a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80086b0:	d10c      	bne.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	3304      	adds	r3, #4
 80086b6:	2101      	movs	r1, #1
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 f867 	bl	800878c <RCCEx_PLLSAI1_Config>
 80086be:	4603      	mov	r3, r0
 80086c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80086c2:	7cfb      	ldrb	r3, [r7, #19]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80086c8:	7cfb      	ldrb	r3, [r7, #19]
 80086ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d02f      	beq.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80086d8:	4b2b      	ldr	r3, [pc, #172]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80086da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086e6:	4928      	ldr	r1, [pc, #160]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80086e8:	4313      	orrs	r3, r2
 80086ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086f6:	d10d      	bne.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	3304      	adds	r3, #4
 80086fc:	2102      	movs	r1, #2
 80086fe:	4618      	mov	r0, r3
 8008700:	f000 f844 	bl	800878c <RCCEx_PLLSAI1_Config>
 8008704:	4603      	mov	r3, r0
 8008706:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008708:	7cfb      	ldrb	r3, [r7, #19]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d014      	beq.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800870e:	7cfb      	ldrb	r3, [r7, #19]
 8008710:	74bb      	strb	r3, [r7, #18]
 8008712:	e011      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008718:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800871c:	d10c      	bne.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	3320      	adds	r3, #32
 8008722:	2102      	movs	r1, #2
 8008724:	4618      	mov	r0, r3
 8008726:	f000 f925 	bl	8008974 <RCCEx_PLLSAI2_Config>
 800872a:	4603      	mov	r3, r0
 800872c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800872e:	7cfb      	ldrb	r3, [r7, #19]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d001      	beq.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008734:	7cfb      	ldrb	r3, [r7, #19]
 8008736:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00a      	beq.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008744:	4b10      	ldr	r3, [pc, #64]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800874a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008752:	490d      	ldr	r1, [pc, #52]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008754:	4313      	orrs	r3, r2
 8008756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00b      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008766:	4b08      	ldr	r3, [pc, #32]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800876c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008776:	4904      	ldr	r1, [pc, #16]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008778:	4313      	orrs	r3, r2
 800877a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800877e:	7cbb      	ldrb	r3, [r7, #18]
}
 8008780:	4618      	mov	r0, r3
 8008782:	3718      	adds	r7, #24
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	40021000 	.word	0x40021000

0800878c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008796:	2300      	movs	r3, #0
 8008798:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800879a:	4b75      	ldr	r3, [pc, #468]	@ (8008970 <RCCEx_PLLSAI1_Config+0x1e4>)
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	f003 0303 	and.w	r3, r3, #3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d018      	beq.n	80087d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80087a6:	4b72      	ldr	r3, [pc, #456]	@ (8008970 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	f003 0203 	and.w	r2, r3, #3
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d10d      	bne.n	80087d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
       ||
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d009      	beq.n	80087d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80087be:	4b6c      	ldr	r3, [pc, #432]	@ (8008970 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	091b      	lsrs	r3, r3, #4
 80087c4:	f003 0307 	and.w	r3, r3, #7
 80087c8:	1c5a      	adds	r2, r3, #1
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	685b      	ldr	r3, [r3, #4]
       ||
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d047      	beq.n	8008862 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	73fb      	strb	r3, [r7, #15]
 80087d6:	e044      	b.n	8008862 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2b03      	cmp	r3, #3
 80087de:	d018      	beq.n	8008812 <RCCEx_PLLSAI1_Config+0x86>
 80087e0:	2b03      	cmp	r3, #3
 80087e2:	d825      	bhi.n	8008830 <RCCEx_PLLSAI1_Config+0xa4>
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d002      	beq.n	80087ee <RCCEx_PLLSAI1_Config+0x62>
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d009      	beq.n	8008800 <RCCEx_PLLSAI1_Config+0x74>
 80087ec:	e020      	b.n	8008830 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80087ee:	4b60      	ldr	r3, [pc, #384]	@ (8008970 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0302 	and.w	r3, r3, #2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d11d      	bne.n	8008836 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087fe:	e01a      	b.n	8008836 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008800:	4b5b      	ldr	r3, [pc, #364]	@ (8008970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008808:	2b00      	cmp	r3, #0
 800880a:	d116      	bne.n	800883a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008810:	e013      	b.n	800883a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008812:	4b57      	ldr	r3, [pc, #348]	@ (8008970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10f      	bne.n	800883e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800881e:	4b54      	ldr	r3, [pc, #336]	@ (8008970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d109      	bne.n	800883e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800882e:	e006      	b.n	800883e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	73fb      	strb	r3, [r7, #15]
      break;
 8008834:	e004      	b.n	8008840 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008836:	bf00      	nop
 8008838:	e002      	b.n	8008840 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800883a:	bf00      	nop
 800883c:	e000      	b.n	8008840 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800883e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10d      	bne.n	8008862 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008846:	4b4a      	ldr	r3, [pc, #296]	@ (8008970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6819      	ldr	r1, [r3, #0]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	3b01      	subs	r3, #1
 8008858:	011b      	lsls	r3, r3, #4
 800885a:	430b      	orrs	r3, r1
 800885c:	4944      	ldr	r1, [pc, #272]	@ (8008970 <RCCEx_PLLSAI1_Config+0x1e4>)
 800885e:	4313      	orrs	r3, r2
 8008860:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008862:	7bfb      	ldrb	r3, [r7, #15]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d17d      	bne.n	8008964 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008868:	4b41      	ldr	r3, [pc, #260]	@ (8008970 <RCCEx_PLLSAI1_Config+0x1e4>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a40      	ldr	r2, [pc, #256]	@ (8008970 <RCCEx_PLLSAI1_Config+0x1e4>)
 800886e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008872:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008874:	f7fb fec2 	bl	80045fc <HAL_GetTick>
 8008878:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800887a:	e009      	b.n	8008890 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800887c:	f7fb febe 	bl	80045fc <HAL_GetTick>
 8008880:	4602      	mov	r2, r0
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	2b02      	cmp	r3, #2
 8008888:	d902      	bls.n	8008890 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	73fb      	strb	r3, [r7, #15]
        break;
 800888e:	e005      	b.n	800889c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008890:	4b37      	ldr	r3, [pc, #220]	@ (8008970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1ef      	bne.n	800887c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800889c:	7bfb      	ldrb	r3, [r7, #15]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d160      	bne.n	8008964 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d111      	bne.n	80088cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80088a8:	4b31      	ldr	r3, [pc, #196]	@ (8008970 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80088b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	6892      	ldr	r2, [r2, #8]
 80088b8:	0211      	lsls	r1, r2, #8
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	68d2      	ldr	r2, [r2, #12]
 80088be:	0912      	lsrs	r2, r2, #4
 80088c0:	0452      	lsls	r2, r2, #17
 80088c2:	430a      	orrs	r2, r1
 80088c4:	492a      	ldr	r1, [pc, #168]	@ (8008970 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088c6:	4313      	orrs	r3, r2
 80088c8:	610b      	str	r3, [r1, #16]
 80088ca:	e027      	b.n	800891c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d112      	bne.n	80088f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80088d2:	4b27      	ldr	r3, [pc, #156]	@ (8008970 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80088da:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	6892      	ldr	r2, [r2, #8]
 80088e2:	0211      	lsls	r1, r2, #8
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	6912      	ldr	r2, [r2, #16]
 80088e8:	0852      	lsrs	r2, r2, #1
 80088ea:	3a01      	subs	r2, #1
 80088ec:	0552      	lsls	r2, r2, #21
 80088ee:	430a      	orrs	r2, r1
 80088f0:	491f      	ldr	r1, [pc, #124]	@ (8008970 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088f2:	4313      	orrs	r3, r2
 80088f4:	610b      	str	r3, [r1, #16]
 80088f6:	e011      	b.n	800891c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80088f8:	4b1d      	ldr	r3, [pc, #116]	@ (8008970 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008900:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	6892      	ldr	r2, [r2, #8]
 8008908:	0211      	lsls	r1, r2, #8
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	6952      	ldr	r2, [r2, #20]
 800890e:	0852      	lsrs	r2, r2, #1
 8008910:	3a01      	subs	r2, #1
 8008912:	0652      	lsls	r2, r2, #25
 8008914:	430a      	orrs	r2, r1
 8008916:	4916      	ldr	r1, [pc, #88]	@ (8008970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008918:	4313      	orrs	r3, r2
 800891a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800891c:	4b14      	ldr	r3, [pc, #80]	@ (8008970 <RCCEx_PLLSAI1_Config+0x1e4>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a13      	ldr	r2, [pc, #76]	@ (8008970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008922:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008926:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008928:	f7fb fe68 	bl	80045fc <HAL_GetTick>
 800892c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800892e:	e009      	b.n	8008944 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008930:	f7fb fe64 	bl	80045fc <HAL_GetTick>
 8008934:	4602      	mov	r2, r0
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	2b02      	cmp	r3, #2
 800893c:	d902      	bls.n	8008944 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	73fb      	strb	r3, [r7, #15]
          break;
 8008942:	e005      	b.n	8008950 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008944:	4b0a      	ldr	r3, [pc, #40]	@ (8008970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800894c:	2b00      	cmp	r3, #0
 800894e:	d0ef      	beq.n	8008930 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8008950:	7bfb      	ldrb	r3, [r7, #15]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d106      	bne.n	8008964 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008956:	4b06      	ldr	r3, [pc, #24]	@ (8008970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008958:	691a      	ldr	r2, [r3, #16]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	4904      	ldr	r1, [pc, #16]	@ (8008970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008960:	4313      	orrs	r3, r2
 8008962:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008964:	7bfb      	ldrb	r3, [r7, #15]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	40021000 	.word	0x40021000

08008974 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800897e:	2300      	movs	r3, #0
 8008980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008982:	4b6a      	ldr	r3, [pc, #424]	@ (8008b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	f003 0303 	and.w	r3, r3, #3
 800898a:	2b00      	cmp	r3, #0
 800898c:	d018      	beq.n	80089c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800898e:	4b67      	ldr	r3, [pc, #412]	@ (8008b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	f003 0203 	and.w	r2, r3, #3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	429a      	cmp	r2, r3
 800899c:	d10d      	bne.n	80089ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
       ||
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d009      	beq.n	80089ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80089a6:	4b61      	ldr	r3, [pc, #388]	@ (8008b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	091b      	lsrs	r3, r3, #4
 80089ac:	f003 0307 	and.w	r3, r3, #7
 80089b0:	1c5a      	adds	r2, r3, #1
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	685b      	ldr	r3, [r3, #4]
       ||
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d047      	beq.n	8008a4a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	73fb      	strb	r3, [r7, #15]
 80089be:	e044      	b.n	8008a4a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2b03      	cmp	r3, #3
 80089c6:	d018      	beq.n	80089fa <RCCEx_PLLSAI2_Config+0x86>
 80089c8:	2b03      	cmp	r3, #3
 80089ca:	d825      	bhi.n	8008a18 <RCCEx_PLLSAI2_Config+0xa4>
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d002      	beq.n	80089d6 <RCCEx_PLLSAI2_Config+0x62>
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d009      	beq.n	80089e8 <RCCEx_PLLSAI2_Config+0x74>
 80089d4:	e020      	b.n	8008a18 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80089d6:	4b55      	ldr	r3, [pc, #340]	@ (8008b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 0302 	and.w	r3, r3, #2
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d11d      	bne.n	8008a1e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089e6:	e01a      	b.n	8008a1e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80089e8:	4b50      	ldr	r3, [pc, #320]	@ (8008b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d116      	bne.n	8008a22 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089f8:	e013      	b.n	8008a22 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80089fa:	4b4c      	ldr	r3, [pc, #304]	@ (8008b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10f      	bne.n	8008a26 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008a06:	4b49      	ldr	r3, [pc, #292]	@ (8008b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d109      	bne.n	8008a26 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008a16:	e006      	b.n	8008a26 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a1c:	e004      	b.n	8008a28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008a1e:	bf00      	nop
 8008a20:	e002      	b.n	8008a28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008a22:	bf00      	nop
 8008a24:	e000      	b.n	8008a28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008a26:	bf00      	nop
    }

    if(status == HAL_OK)
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10d      	bne.n	8008a4a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008a2e:	4b3f      	ldr	r3, [pc, #252]	@ (8008b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6819      	ldr	r1, [r3, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	011b      	lsls	r3, r3, #4
 8008a42:	430b      	orrs	r3, r1
 8008a44:	4939      	ldr	r1, [pc, #228]	@ (8008b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a46:	4313      	orrs	r3, r2
 8008a48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d167      	bne.n	8008b20 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008a50:	4b36      	ldr	r3, [pc, #216]	@ (8008b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a35      	ldr	r2, [pc, #212]	@ (8008b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a5c:	f7fb fdce 	bl	80045fc <HAL_GetTick>
 8008a60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008a62:	e009      	b.n	8008a78 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008a64:	f7fb fdca 	bl	80045fc <HAL_GetTick>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d902      	bls.n	8008a78 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	73fb      	strb	r3, [r7, #15]
        break;
 8008a76:	e005      	b.n	8008a84 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008a78:	4b2c      	ldr	r3, [pc, #176]	@ (8008b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d1ef      	bne.n	8008a64 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008a84:	7bfb      	ldrb	r3, [r7, #15]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d14a      	bne.n	8008b20 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d111      	bne.n	8008ab4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008a90:	4b26      	ldr	r3, [pc, #152]	@ (8008b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a92:	695b      	ldr	r3, [r3, #20]
 8008a94:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8008a98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	6892      	ldr	r2, [r2, #8]
 8008aa0:	0211      	lsls	r1, r2, #8
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	68d2      	ldr	r2, [r2, #12]
 8008aa6:	0912      	lsrs	r2, r2, #4
 8008aa8:	0452      	lsls	r2, r2, #17
 8008aaa:	430a      	orrs	r2, r1
 8008aac:	491f      	ldr	r1, [pc, #124]	@ (8008b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	614b      	str	r3, [r1, #20]
 8008ab2:	e011      	b.n	8008ad8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8008b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ab6:	695b      	ldr	r3, [r3, #20]
 8008ab8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008abc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	6892      	ldr	r2, [r2, #8]
 8008ac4:	0211      	lsls	r1, r2, #8
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	6912      	ldr	r2, [r2, #16]
 8008aca:	0852      	lsrs	r2, r2, #1
 8008acc:	3a01      	subs	r2, #1
 8008ace:	0652      	lsls	r2, r2, #25
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	4916      	ldr	r1, [pc, #88]	@ (8008b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008ad8:	4b14      	ldr	r3, [pc, #80]	@ (8008b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a13      	ldr	r2, [pc, #76]	@ (8008b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ade:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ae2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ae4:	f7fb fd8a 	bl	80045fc <HAL_GetTick>
 8008ae8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008aea:	e009      	b.n	8008b00 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008aec:	f7fb fd86 	bl	80045fc <HAL_GetTick>
 8008af0:	4602      	mov	r2, r0
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d902      	bls.n	8008b00 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8008afa:	2303      	movs	r3, #3
 8008afc:	73fb      	strb	r3, [r7, #15]
          break;
 8008afe:	e005      	b.n	8008b0c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008b00:	4b0a      	ldr	r3, [pc, #40]	@ (8008b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d0ef      	beq.n	8008aec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d106      	bne.n	8008b20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008b12:	4b06      	ldr	r3, [pc, #24]	@ (8008b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b14:	695a      	ldr	r2, [r3, #20]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	695b      	ldr	r3, [r3, #20]
 8008b1a:	4904      	ldr	r1, [pc, #16]	@ (8008b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	40021000 	.word	0x40021000

08008b30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e095      	b.n	8008c6e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d108      	bne.n	8008b5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b52:	d009      	beq.n	8008b68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	61da      	str	r2, [r3, #28]
 8008b5a:	e005      	b.n	8008b68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d106      	bne.n	8008b88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f7fa fc8c 	bl	80034a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2202      	movs	r2, #2
 8008b8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008ba8:	d902      	bls.n	8008bb0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008baa:	2300      	movs	r3, #0
 8008bac:	60fb      	str	r3, [r7, #12]
 8008bae:	e002      	b.n	8008bb6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008bb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008bb4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008bbe:	d007      	beq.n	8008bd0 <HAL_SPI_Init+0xa0>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008bc8:	d002      	beq.n	8008bd0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008be0:	431a      	orrs	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	f003 0302 	and.w	r3, r3, #2
 8008bea:	431a      	orrs	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	695b      	ldr	r3, [r3, #20]
 8008bf0:	f003 0301 	and.w	r3, r3, #1
 8008bf4:	431a      	orrs	r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bfe:	431a      	orrs	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	69db      	ldr	r3, [r3, #28]
 8008c04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c08:	431a      	orrs	r2, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a1b      	ldr	r3, [r3, #32]
 8008c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c12:	ea42 0103 	orr.w	r1, r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c1a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	0c1b      	lsrs	r3, r3, #16
 8008c2c:	f003 0204 	and.w	r2, r3, #4
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c34:	f003 0310 	and.w	r3, r3, #16
 8008c38:	431a      	orrs	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c3e:	f003 0308 	and.w	r3, r3, #8
 8008c42:	431a      	orrs	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008c4c:	ea42 0103 	orr.w	r1, r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	430a      	orrs	r2, r1
 8008c5c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b088      	sub	sp, #32
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	60f8      	str	r0, [r7, #12]
 8008c7e:	60b9      	str	r1, [r7, #8]
 8008c80:	603b      	str	r3, [r7, #0]
 8008c82:	4613      	mov	r3, r2
 8008c84:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c86:	f7fb fcb9 	bl	80045fc <HAL_GetTick>
 8008c8a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008c8c:	88fb      	ldrh	r3, [r7, #6]
 8008c8e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d001      	beq.n	8008ca0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	e15c      	b.n	8008f5a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d002      	beq.n	8008cac <HAL_SPI_Transmit+0x36>
 8008ca6:	88fb      	ldrh	r3, [r7, #6]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d101      	bne.n	8008cb0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e154      	b.n	8008f5a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d101      	bne.n	8008cbe <HAL_SPI_Transmit+0x48>
 8008cba:	2302      	movs	r3, #2
 8008cbc:	e14d      	b.n	8008f5a <HAL_SPI_Transmit+0x2e4>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2203      	movs	r2, #3
 8008cca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	88fa      	ldrh	r2, [r7, #6]
 8008cde:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	88fa      	ldrh	r2, [r7, #6]
 8008ce4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2200      	movs	r2, #0
 8008d06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d10:	d10f      	bne.n	8008d32 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008d20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008d30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d3c:	2b40      	cmp	r3, #64	@ 0x40
 8008d3e:	d007      	beq.n	8008d50 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008d58:	d952      	bls.n	8008e00 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d002      	beq.n	8008d68 <HAL_SPI_Transmit+0xf2>
 8008d62:	8b7b      	ldrh	r3, [r7, #26]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d145      	bne.n	8008df4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d6c:	881a      	ldrh	r2, [r3, #0]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d78:	1c9a      	adds	r2, r3, #2
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	3b01      	subs	r3, #1
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008d8c:	e032      	b.n	8008df4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	f003 0302 	and.w	r3, r3, #2
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d112      	bne.n	8008dc2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008da0:	881a      	ldrh	r2, [r3, #0]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dac:	1c9a      	adds	r2, r3, #2
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	3b01      	subs	r3, #1
 8008dba:	b29a      	uxth	r2, r3
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008dc0:	e018      	b.n	8008df4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008dc2:	f7fb fc1b 	bl	80045fc <HAL_GetTick>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	1ad3      	subs	r3, r2, r3
 8008dcc:	683a      	ldr	r2, [r7, #0]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d803      	bhi.n	8008dda <HAL_SPI_Transmit+0x164>
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008dd8:	d102      	bne.n	8008de0 <HAL_SPI_Transmit+0x16a>
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d109      	bne.n	8008df4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e0b2      	b.n	8008f5a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d1c7      	bne.n	8008d8e <HAL_SPI_Transmit+0x118>
 8008dfe:	e083      	b.n	8008f08 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d002      	beq.n	8008e0e <HAL_SPI_Transmit+0x198>
 8008e08:	8b7b      	ldrh	r3, [r7, #26]
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d177      	bne.n	8008efe <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d912      	bls.n	8008e3e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e1c:	881a      	ldrh	r2, [r3, #0]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e28:	1c9a      	adds	r2, r3, #2
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	3b02      	subs	r3, #2
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008e3c:	e05f      	b.n	8008efe <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	330c      	adds	r3, #12
 8008e48:	7812      	ldrb	r2, [r2, #0]
 8008e4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e50:	1c5a      	adds	r2, r3, #1
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008e64:	e04b      	b.n	8008efe <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	f003 0302 	and.w	r3, r3, #2
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d12b      	bne.n	8008ecc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d912      	bls.n	8008ea4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e82:	881a      	ldrh	r2, [r3, #0]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e8e:	1c9a      	adds	r2, r3, #2
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	3b02      	subs	r3, #2
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008ea2:	e02c      	b.n	8008efe <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	330c      	adds	r3, #12
 8008eae:	7812      	ldrb	r2, [r2, #0]
 8008eb0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eb6:	1c5a      	adds	r2, r3, #1
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008eca:	e018      	b.n	8008efe <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ecc:	f7fb fb96 	bl	80045fc <HAL_GetTick>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d803      	bhi.n	8008ee4 <HAL_SPI_Transmit+0x26e>
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ee2:	d102      	bne.n	8008eea <HAL_SPI_Transmit+0x274>
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d109      	bne.n	8008efe <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2201      	movs	r2, #1
 8008eee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	e02d      	b.n	8008f5a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d1ae      	bne.n	8008e66 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f08:	69fa      	ldr	r2, [r7, #28]
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f000 fcf5 	bl	80098fc <SPI_EndRxTxTransaction>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d002      	beq.n	8008f1e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2220      	movs	r2, #32
 8008f1c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d10a      	bne.n	8008f3c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f26:	2300      	movs	r3, #0
 8008f28:	617b      	str	r3, [r7, #20]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	617b      	str	r3, [r7, #20]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	617b      	str	r3, [r7, #20]
 8008f3a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d001      	beq.n	8008f58 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	e000      	b.n	8008f5a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8008f58:	2300      	movs	r3, #0
  }
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3720      	adds	r7, #32
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b088      	sub	sp, #32
 8008f66:	af02      	add	r7, sp, #8
 8008f68:	60f8      	str	r0, [r7, #12]
 8008f6a:	60b9      	str	r1, [r7, #8]
 8008f6c:	603b      	str	r3, [r7, #0]
 8008f6e:	4613      	mov	r3, r2
 8008f70:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d001      	beq.n	8008f82 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8008f7e:	2302      	movs	r3, #2
 8008f80:	e123      	b.n	80091ca <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008f8a:	d112      	bne.n	8008fb2 <HAL_SPI_Receive+0x50>
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d10e      	bne.n	8008fb2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2204      	movs	r2, #4
 8008f98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008f9c:	88fa      	ldrh	r2, [r7, #6]
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	68b9      	ldr	r1, [r7, #8]
 8008fa8:	68f8      	ldr	r0, [r7, #12]
 8008faa:	f000 f912 	bl	80091d2 <HAL_SPI_TransmitReceive>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	e10b      	b.n	80091ca <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fb2:	f7fb fb23 	bl	80045fc <HAL_GetTick>
 8008fb6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d002      	beq.n	8008fc4 <HAL_SPI_Receive+0x62>
 8008fbe:	88fb      	ldrh	r3, [r7, #6]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d101      	bne.n	8008fc8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e100      	b.n	80091ca <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d101      	bne.n	8008fd6 <HAL_SPI_Receive+0x74>
 8008fd2:	2302      	movs	r3, #2
 8008fd4:	e0f9      	b.n	80091ca <HAL_SPI_Receive+0x268>
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2204      	movs	r2, #4
 8008fe2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	88fa      	ldrh	r2, [r7, #6]
 8008ff6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	88fa      	ldrh	r2, [r7, #6]
 8008ffe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2200      	movs	r2, #0
 8009018:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009028:	d908      	bls.n	800903c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009038:	605a      	str	r2, [r3, #4]
 800903a:	e007      	b.n	800904c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	685a      	ldr	r2, [r3, #4]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800904a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009054:	d10f      	bne.n	8009076 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009064:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009074:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009080:	2b40      	cmp	r3, #64	@ 0x40
 8009082:	d007      	beq.n	8009094 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009092:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800909c:	d875      	bhi.n	800918a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800909e:	e037      	b.n	8009110 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	f003 0301 	and.w	r3, r3, #1
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d117      	bne.n	80090de <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f103 020c 	add.w	r2, r3, #12
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ba:	7812      	ldrb	r2, [r2, #0]
 80090bc:	b2d2      	uxtb	r2, r2
 80090be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090c4:	1c5a      	adds	r2, r3, #1
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	3b01      	subs	r3, #1
 80090d4:	b29a      	uxth	r2, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80090dc:	e018      	b.n	8009110 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090de:	f7fb fa8d 	bl	80045fc <HAL_GetTick>
 80090e2:	4602      	mov	r2, r0
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	683a      	ldr	r2, [r7, #0]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d803      	bhi.n	80090f6 <HAL_SPI_Receive+0x194>
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80090f4:	d102      	bne.n	80090fc <HAL_SPI_Receive+0x19a>
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d109      	bne.n	8009110 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800910c:	2303      	movs	r3, #3
 800910e:	e05c      	b.n	80091ca <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009116:	b29b      	uxth	r3, r3
 8009118:	2b00      	cmp	r3, #0
 800911a:	d1c1      	bne.n	80090a0 <HAL_SPI_Receive+0x13e>
 800911c:	e03b      	b.n	8009196 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	f003 0301 	and.w	r3, r3, #1
 8009128:	2b01      	cmp	r3, #1
 800912a:	d115      	bne.n	8009158 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68da      	ldr	r2, [r3, #12]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009136:	b292      	uxth	r2, r2
 8009138:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800913e:	1c9a      	adds	r2, r3, #2
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800914a:	b29b      	uxth	r3, r3
 800914c:	3b01      	subs	r3, #1
 800914e:	b29a      	uxth	r2, r3
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009156:	e018      	b.n	800918a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009158:	f7fb fa50 	bl	80045fc <HAL_GetTick>
 800915c:	4602      	mov	r2, r0
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	429a      	cmp	r2, r3
 8009166:	d803      	bhi.n	8009170 <HAL_SPI_Receive+0x20e>
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800916e:	d102      	bne.n	8009176 <HAL_SPI_Receive+0x214>
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d109      	bne.n	800918a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2201      	movs	r2, #1
 800917a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2200      	movs	r2, #0
 8009182:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009186:	2303      	movs	r3, #3
 8009188:	e01f      	b.n	80091ca <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009190:	b29b      	uxth	r3, r3
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1c3      	bne.n	800911e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f000 fb56 	bl	800984c <SPI_EndRxTransaction>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d002      	beq.n	80091ac <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2220      	movs	r2, #32
 80091aa:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d001      	beq.n	80091c8 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	e000      	b.n	80091ca <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80091c8:	2300      	movs	r3, #0
  }
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3718      	adds	r7, #24
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b08a      	sub	sp, #40	@ 0x28
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	60f8      	str	r0, [r7, #12]
 80091da:	60b9      	str	r1, [r7, #8]
 80091dc:	607a      	str	r2, [r7, #4]
 80091de:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80091e0:	2301      	movs	r3, #1
 80091e2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091e4:	f7fb fa0a 	bl	80045fc <HAL_GetTick>
 80091e8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80091f0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80091f8:	887b      	ldrh	r3, [r7, #2]
 80091fa:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80091fc:	887b      	ldrh	r3, [r7, #2]
 80091fe:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009200:	7ffb      	ldrb	r3, [r7, #31]
 8009202:	2b01      	cmp	r3, #1
 8009204:	d00c      	beq.n	8009220 <HAL_SPI_TransmitReceive+0x4e>
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800920c:	d106      	bne.n	800921c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d102      	bne.n	800921c <HAL_SPI_TransmitReceive+0x4a>
 8009216:	7ffb      	ldrb	r3, [r7, #31]
 8009218:	2b04      	cmp	r3, #4
 800921a:	d001      	beq.n	8009220 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800921c:	2302      	movs	r3, #2
 800921e:	e1f3      	b.n	8009608 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d005      	beq.n	8009232 <HAL_SPI_TransmitReceive+0x60>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d002      	beq.n	8009232 <HAL_SPI_TransmitReceive+0x60>
 800922c:	887b      	ldrh	r3, [r7, #2]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d101      	bne.n	8009236 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e1e8      	b.n	8009608 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800923c:	2b01      	cmp	r3, #1
 800923e:	d101      	bne.n	8009244 <HAL_SPI_TransmitReceive+0x72>
 8009240:	2302      	movs	r3, #2
 8009242:	e1e1      	b.n	8009608 <HAL_SPI_TransmitReceive+0x436>
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b04      	cmp	r3, #4
 8009256:	d003      	beq.n	8009260 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2205      	movs	r2, #5
 800925c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2200      	movs	r2, #0
 8009264:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	887a      	ldrh	r2, [r7, #2]
 8009270:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	887a      	ldrh	r2, [r7, #2]
 8009278:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	887a      	ldrh	r2, [r7, #2]
 8009286:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	887a      	ldrh	r2, [r7, #2]
 800928c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2200      	movs	r2, #0
 8009292:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2200      	movs	r2, #0
 8009298:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80092a2:	d802      	bhi.n	80092aa <HAL_SPI_TransmitReceive+0xd8>
 80092a4:	8abb      	ldrh	r3, [r7, #20]
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d908      	bls.n	80092bc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	685a      	ldr	r2, [r3, #4]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80092b8:	605a      	str	r2, [r3, #4]
 80092ba:	e007      	b.n	80092cc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80092ca:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092d6:	2b40      	cmp	r3, #64	@ 0x40
 80092d8:	d007      	beq.n	80092ea <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80092e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80092f2:	f240 8083 	bls.w	80093fc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d002      	beq.n	8009304 <HAL_SPI_TransmitReceive+0x132>
 80092fe:	8afb      	ldrh	r3, [r7, #22]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d16f      	bne.n	80093e4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009308:	881a      	ldrh	r2, [r3, #0]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009314:	1c9a      	adds	r2, r3, #2
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800931e:	b29b      	uxth	r3, r3
 8009320:	3b01      	subs	r3, #1
 8009322:	b29a      	uxth	r2, r3
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009328:	e05c      	b.n	80093e4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	f003 0302 	and.w	r3, r3, #2
 8009334:	2b02      	cmp	r3, #2
 8009336:	d11b      	bne.n	8009370 <HAL_SPI_TransmitReceive+0x19e>
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800933c:	b29b      	uxth	r3, r3
 800933e:	2b00      	cmp	r3, #0
 8009340:	d016      	beq.n	8009370 <HAL_SPI_TransmitReceive+0x19e>
 8009342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009344:	2b01      	cmp	r3, #1
 8009346:	d113      	bne.n	8009370 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800934c:	881a      	ldrh	r2, [r3, #0]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009358:	1c9a      	adds	r2, r3, #2
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009362:	b29b      	uxth	r3, r3
 8009364:	3b01      	subs	r3, #1
 8009366:	b29a      	uxth	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800936c:	2300      	movs	r3, #0
 800936e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	f003 0301 	and.w	r3, r3, #1
 800937a:	2b01      	cmp	r3, #1
 800937c:	d11c      	bne.n	80093b8 <HAL_SPI_TransmitReceive+0x1e6>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009384:	b29b      	uxth	r3, r3
 8009386:	2b00      	cmp	r3, #0
 8009388:	d016      	beq.n	80093b8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68da      	ldr	r2, [r3, #12]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009394:	b292      	uxth	r2, r2
 8009396:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800939c:	1c9a      	adds	r2, r3, #2
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	3b01      	subs	r3, #1
 80093ac:	b29a      	uxth	r2, r3
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80093b4:	2301      	movs	r3, #1
 80093b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80093b8:	f7fb f920 	bl	80045fc <HAL_GetTick>
 80093bc:	4602      	mov	r2, r0
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d80d      	bhi.n	80093e4 <HAL_SPI_TransmitReceive+0x212>
 80093c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093ce:	d009      	beq.n	80093e4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	e111      	b.n	8009608 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d19d      	bne.n	800932a <HAL_SPI_TransmitReceive+0x158>
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d197      	bne.n	800932a <HAL_SPI_TransmitReceive+0x158>
 80093fa:	e0e5      	b.n	80095c8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d003      	beq.n	800940c <HAL_SPI_TransmitReceive+0x23a>
 8009404:	8afb      	ldrh	r3, [r7, #22]
 8009406:	2b01      	cmp	r3, #1
 8009408:	f040 80d1 	bne.w	80095ae <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009410:	b29b      	uxth	r3, r3
 8009412:	2b01      	cmp	r3, #1
 8009414:	d912      	bls.n	800943c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800941a:	881a      	ldrh	r2, [r3, #0]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009426:	1c9a      	adds	r2, r3, #2
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009430:	b29b      	uxth	r3, r3
 8009432:	3b02      	subs	r3, #2
 8009434:	b29a      	uxth	r2, r3
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800943a:	e0b8      	b.n	80095ae <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	330c      	adds	r3, #12
 8009446:	7812      	ldrb	r2, [r2, #0]
 8009448:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800944e:	1c5a      	adds	r2, r3, #1
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009458:	b29b      	uxth	r3, r3
 800945a:	3b01      	subs	r3, #1
 800945c:	b29a      	uxth	r2, r3
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009462:	e0a4      	b.n	80095ae <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	f003 0302 	and.w	r3, r3, #2
 800946e:	2b02      	cmp	r3, #2
 8009470:	d134      	bne.n	80094dc <HAL_SPI_TransmitReceive+0x30a>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009476:	b29b      	uxth	r3, r3
 8009478:	2b00      	cmp	r3, #0
 800947a:	d02f      	beq.n	80094dc <HAL_SPI_TransmitReceive+0x30a>
 800947c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947e:	2b01      	cmp	r3, #1
 8009480:	d12c      	bne.n	80094dc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009486:	b29b      	uxth	r3, r3
 8009488:	2b01      	cmp	r3, #1
 800948a:	d912      	bls.n	80094b2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009490:	881a      	ldrh	r2, [r3, #0]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800949c:	1c9a      	adds	r2, r3, #2
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	3b02      	subs	r3, #2
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80094b0:	e012      	b.n	80094d8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	330c      	adds	r3, #12
 80094bc:	7812      	ldrb	r2, [r2, #0]
 80094be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094c4:	1c5a      	adds	r2, r3, #1
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	3b01      	subs	r3, #1
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80094d8:	2300      	movs	r3, #0
 80094da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	f003 0301 	and.w	r3, r3, #1
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d148      	bne.n	800957c <HAL_SPI_TransmitReceive+0x3aa>
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d042      	beq.n	800957c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d923      	bls.n	800954a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68da      	ldr	r2, [r3, #12]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800950c:	b292      	uxth	r2, r2
 800950e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009514:	1c9a      	adds	r2, r3, #2
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009520:	b29b      	uxth	r3, r3
 8009522:	3b02      	subs	r3, #2
 8009524:	b29a      	uxth	r2, r3
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009532:	b29b      	uxth	r3, r3
 8009534:	2b01      	cmp	r3, #1
 8009536:	d81f      	bhi.n	8009578 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	685a      	ldr	r2, [r3, #4]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009546:	605a      	str	r2, [r3, #4]
 8009548:	e016      	b.n	8009578 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f103 020c 	add.w	r2, r3, #12
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009556:	7812      	ldrb	r2, [r2, #0]
 8009558:	b2d2      	uxtb	r2, r2
 800955a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009560:	1c5a      	adds	r2, r3, #1
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800956c:	b29b      	uxth	r3, r3
 800956e:	3b01      	subs	r3, #1
 8009570:	b29a      	uxth	r2, r3
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009578:	2301      	movs	r3, #1
 800957a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800957c:	f7fb f83e 	bl	80045fc <HAL_GetTick>
 8009580:	4602      	mov	r2, r0
 8009582:	6a3b      	ldr	r3, [r7, #32]
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009588:	429a      	cmp	r2, r3
 800958a:	d803      	bhi.n	8009594 <HAL_SPI_TransmitReceive+0x3c2>
 800958c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009592:	d102      	bne.n	800959a <HAL_SPI_TransmitReceive+0x3c8>
 8009594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009596:	2b00      	cmp	r3, #0
 8009598:	d109      	bne.n	80095ae <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80095aa:	2303      	movs	r3, #3
 80095ac:	e02c      	b.n	8009608 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f47f af55 	bne.w	8009464 <HAL_SPI_TransmitReceive+0x292>
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	f47f af4e 	bne.w	8009464 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095c8:	6a3a      	ldr	r2, [r7, #32]
 80095ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f000 f995 	bl	80098fc <SPI_EndRxTxTransaction>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d008      	beq.n	80095ea <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2220      	movs	r2, #32
 80095dc:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e00e      	b.n	8009608 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2201      	movs	r2, #1
 80095ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2200      	movs	r2, #0
 80095f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d001      	beq.n	8009606 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	e000      	b.n	8009608 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8009606:	2300      	movs	r3, #0
  }
}
 8009608:	4618      	mov	r0, r3
 800960a:	3728      	adds	r7, #40	@ 0x28
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b088      	sub	sp, #32
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	603b      	str	r3, [r7, #0]
 800961c:	4613      	mov	r3, r2
 800961e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009620:	f7fa ffec 	bl	80045fc <HAL_GetTick>
 8009624:	4602      	mov	r2, r0
 8009626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009628:	1a9b      	subs	r3, r3, r2
 800962a:	683a      	ldr	r2, [r7, #0]
 800962c:	4413      	add	r3, r2
 800962e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009630:	f7fa ffe4 	bl	80045fc <HAL_GetTick>
 8009634:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009636:	4b39      	ldr	r3, [pc, #228]	@ (800971c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	015b      	lsls	r3, r3, #5
 800963c:	0d1b      	lsrs	r3, r3, #20
 800963e:	69fa      	ldr	r2, [r7, #28]
 8009640:	fb02 f303 	mul.w	r3, r2, r3
 8009644:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009646:	e054      	b.n	80096f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800964e:	d050      	beq.n	80096f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009650:	f7fa ffd4 	bl	80045fc <HAL_GetTick>
 8009654:	4602      	mov	r2, r0
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	69fa      	ldr	r2, [r7, #28]
 800965c:	429a      	cmp	r2, r3
 800965e:	d902      	bls.n	8009666 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d13d      	bne.n	80096e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	685a      	ldr	r2, [r3, #4]
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009674:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800967e:	d111      	bne.n	80096a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009688:	d004      	beq.n	8009694 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009692:	d107      	bne.n	80096a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80096a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096ac:	d10f      	bne.n	80096ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80096bc:	601a      	str	r2, [r3, #0]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80096cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2201      	movs	r2, #1
 80096d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2200      	movs	r2, #0
 80096da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80096de:	2303      	movs	r3, #3
 80096e0:	e017      	b.n	8009712 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80096e8:	2300      	movs	r3, #0
 80096ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	3b01      	subs	r3, #1
 80096f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	689a      	ldr	r2, [r3, #8]
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	4013      	ands	r3, r2
 80096fc:	68ba      	ldr	r2, [r7, #8]
 80096fe:	429a      	cmp	r2, r3
 8009700:	bf0c      	ite	eq
 8009702:	2301      	moveq	r3, #1
 8009704:	2300      	movne	r3, #0
 8009706:	b2db      	uxtb	r3, r3
 8009708:	461a      	mov	r2, r3
 800970a:	79fb      	ldrb	r3, [r7, #7]
 800970c:	429a      	cmp	r2, r3
 800970e:	d19b      	bne.n	8009648 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009710:	2300      	movs	r3, #0
}
 8009712:	4618      	mov	r0, r3
 8009714:	3720      	adds	r7, #32
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	20000070 	.word	0x20000070

08009720 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b08a      	sub	sp, #40	@ 0x28
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
 800972c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800972e:	2300      	movs	r3, #0
 8009730:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009732:	f7fa ff63 	bl	80045fc <HAL_GetTick>
 8009736:	4602      	mov	r2, r0
 8009738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800973a:	1a9b      	subs	r3, r3, r2
 800973c:	683a      	ldr	r2, [r7, #0]
 800973e:	4413      	add	r3, r2
 8009740:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009742:	f7fa ff5b 	bl	80045fc <HAL_GetTick>
 8009746:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	330c      	adds	r3, #12
 800974e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009750:	4b3d      	ldr	r3, [pc, #244]	@ (8009848 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	4613      	mov	r3, r2
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	4413      	add	r3, r2
 800975a:	00da      	lsls	r2, r3, #3
 800975c:	1ad3      	subs	r3, r2, r3
 800975e:	0d1b      	lsrs	r3, r3, #20
 8009760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009762:	fb02 f303 	mul.w	r3, r2, r3
 8009766:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009768:	e060      	b.n	800982c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009770:	d107      	bne.n	8009782 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d104      	bne.n	8009782 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	b2db      	uxtb	r3, r3
 800977e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009780:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009788:	d050      	beq.n	800982c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800978a:	f7fa ff37 	bl	80045fc <HAL_GetTick>
 800978e:	4602      	mov	r2, r0
 8009790:	6a3b      	ldr	r3, [r7, #32]
 8009792:	1ad3      	subs	r3, r2, r3
 8009794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009796:	429a      	cmp	r2, r3
 8009798:	d902      	bls.n	80097a0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800979a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800979c:	2b00      	cmp	r3, #0
 800979e:	d13d      	bne.n	800981c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	685a      	ldr	r2, [r3, #4]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80097ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80097b8:	d111      	bne.n	80097de <SPI_WaitFifoStateUntilTimeout+0xbe>
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097c2:	d004      	beq.n	80097ce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097cc:	d107      	bne.n	80097de <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097e6:	d10f      	bne.n	8009808 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80097f6:	601a      	str	r2, [r3, #0]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009806:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2200      	movs	r2, #0
 8009814:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009818:	2303      	movs	r3, #3
 800981a:	e010      	b.n	800983e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d101      	bne.n	8009826 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009822:	2300      	movs	r3, #0
 8009824:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	3b01      	subs	r3, #1
 800982a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	689a      	ldr	r2, [r3, #8]
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	4013      	ands	r3, r2
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	429a      	cmp	r2, r3
 800983a:	d196      	bne.n	800976a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3728      	adds	r7, #40	@ 0x28
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	20000070 	.word	0x20000070

0800984c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b086      	sub	sp, #24
 8009850:	af02      	add	r7, sp, #8
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009860:	d111      	bne.n	8009886 <SPI_EndRxTransaction+0x3a>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800986a:	d004      	beq.n	8009876 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009874:	d107      	bne.n	8009886 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009884:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	2200      	movs	r2, #0
 800988e:	2180      	movs	r1, #128	@ 0x80
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f7ff febd 	bl	8009610 <SPI_WaitFlagStateUntilTimeout>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d007      	beq.n	80098ac <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098a0:	f043 0220 	orr.w	r2, r3, #32
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80098a8:	2303      	movs	r3, #3
 80098aa:	e023      	b.n	80098f4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80098b4:	d11d      	bne.n	80098f2 <SPI_EndRxTransaction+0xa6>
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098be:	d004      	beq.n	80098ca <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098c8:	d113      	bne.n	80098f2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f7ff ff22 	bl	8009720 <SPI_WaitFifoStateUntilTimeout>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d007      	beq.n	80098f2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098e6:	f043 0220 	orr.w	r2, r3, #32
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80098ee:	2303      	movs	r3, #3
 80098f0:	e000      	b.n	80098f4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af02      	add	r7, sp, #8
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	9300      	str	r3, [sp, #0]
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	2200      	movs	r2, #0
 8009910:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f7ff ff03 	bl	8009720 <SPI_WaitFifoStateUntilTimeout>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d007      	beq.n	8009930 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009924:	f043 0220 	orr.w	r2, r3, #32
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800992c:	2303      	movs	r3, #3
 800992e:	e027      	b.n	8009980 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	2200      	movs	r2, #0
 8009938:	2180      	movs	r1, #128	@ 0x80
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f7ff fe68 	bl	8009610 <SPI_WaitFlagStateUntilTimeout>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d007      	beq.n	8009956 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800994a:	f043 0220 	orr.w	r2, r3, #32
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009952:	2303      	movs	r3, #3
 8009954:	e014      	b.n	8009980 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	2200      	movs	r2, #0
 800995e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009962:	68f8      	ldr	r0, [r7, #12]
 8009964:	f7ff fedc 	bl	8009720 <SPI_WaitFifoStateUntilTimeout>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d007      	beq.n	800997e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009972:	f043 0220 	orr.w	r2, r3, #32
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800997a:	2303      	movs	r3, #3
 800997c:	e000      	b.n	8009980 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3710      	adds	r7, #16
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d101      	bne.n	800999a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e040      	b.n	8009a1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d106      	bne.n	80099b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7f9 fe5a 	bl	8003664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2224      	movs	r2, #36	@ 0x24
 80099b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f022 0201 	bic.w	r2, r2, #1
 80099c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d002      	beq.n	80099d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fedc 	bl	800a78c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fc21 	bl	800a21c <UART_SetConfig>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d101      	bne.n	80099e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	e01b      	b.n	8009a1c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	685a      	ldr	r2, [r3, #4]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80099f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	689a      	ldr	r2, [r3, #8]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009a02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f042 0201 	orr.w	r2, r2, #1
 8009a12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 ff5b 	bl	800a8d0 <UART_CheckIdleState>
 8009a1a:	4603      	mov	r3, r0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3708      	adds	r7, #8
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b08a      	sub	sp, #40	@ 0x28
 8009a28:	af02      	add	r7, sp, #8
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	603b      	str	r3, [r7, #0]
 8009a30:	4613      	mov	r3, r2
 8009a32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a38:	2b20      	cmp	r3, #32
 8009a3a:	d177      	bne.n	8009b2c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d002      	beq.n	8009a48 <HAL_UART_Transmit+0x24>
 8009a42:	88fb      	ldrh	r3, [r7, #6]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d101      	bne.n	8009a4c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e070      	b.n	8009b2e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2221      	movs	r2, #33	@ 0x21
 8009a58:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a5a:	f7fa fdcf 	bl	80045fc <HAL_GetTick>
 8009a5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	88fa      	ldrh	r2, [r7, #6]
 8009a64:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	88fa      	ldrh	r2, [r7, #6]
 8009a6c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a78:	d108      	bne.n	8009a8c <HAL_UART_Transmit+0x68>
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d104      	bne.n	8009a8c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009a82:	2300      	movs	r3, #0
 8009a84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	61bb      	str	r3, [r7, #24]
 8009a8a:	e003      	b.n	8009a94 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a90:	2300      	movs	r3, #0
 8009a92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009a94:	e02f      	b.n	8009af6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	9300      	str	r3, [sp, #0]
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	2180      	movs	r1, #128	@ 0x80
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	f000 ffbd 	bl	800aa20 <UART_WaitOnFlagUntilTimeout>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d004      	beq.n	8009ab6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2220      	movs	r2, #32
 8009ab0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	e03b      	b.n	8009b2e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d10b      	bne.n	8009ad4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	881a      	ldrh	r2, [r3, #0]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ac8:	b292      	uxth	r2, r2
 8009aca:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	3302      	adds	r3, #2
 8009ad0:	61bb      	str	r3, [r7, #24]
 8009ad2:	e007      	b.n	8009ae4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	781a      	ldrb	r2, [r3, #0]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	3b01      	subs	r3, #1
 8009aee:	b29a      	uxth	r2, r3
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1c9      	bne.n	8009a96 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	2140      	movs	r1, #64	@ 0x40
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f000 ff87 	bl	800aa20 <UART_WaitOnFlagUntilTimeout>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d004      	beq.n	8009b22 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2220      	movs	r2, #32
 8009b1c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8009b1e:	2303      	movs	r3, #3
 8009b20:	e005      	b.n	8009b2e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2220      	movs	r2, #32
 8009b26:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	e000      	b.n	8009b2e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009b2c:	2302      	movs	r3, #2
  }
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3720      	adds	r7, #32
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
	...

08009b38 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b08a      	sub	sp, #40	@ 0x28
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	4613      	mov	r3, r2
 8009b44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b4c:	2b20      	cmp	r3, #32
 8009b4e:	d137      	bne.n	8009bc0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d002      	beq.n	8009b5c <HAL_UART_Receive_IT+0x24>
 8009b56:	88fb      	ldrh	r3, [r7, #6]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d101      	bne.n	8009b60 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e030      	b.n	8009bc2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2200      	movs	r2, #0
 8009b64:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a18      	ldr	r2, [pc, #96]	@ (8009bcc <HAL_UART_Receive_IT+0x94>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d01f      	beq.n	8009bb0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d018      	beq.n	8009bb0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	e853 3f00 	ldrex	r3, [r3]
 8009b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	461a      	mov	r2, r3
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9c:	623b      	str	r3, [r7, #32]
 8009b9e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba0:	69f9      	ldr	r1, [r7, #28]
 8009ba2:	6a3a      	ldr	r2, [r7, #32]
 8009ba4:	e841 2300 	strex	r3, r2, [r1]
 8009ba8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d1e6      	bne.n	8009b7e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009bb0:	88fb      	ldrh	r3, [r7, #6]
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	68b9      	ldr	r1, [r7, #8]
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f000 ffa0 	bl	800aafc <UART_Start_Receive_IT>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	e000      	b.n	8009bc2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009bc0:	2302      	movs	r3, #2
  }
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3728      	adds	r7, #40	@ 0x28
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	40008000 	.word	0x40008000

08009bd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b0ba      	sub	sp, #232	@ 0xe8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	69db      	ldr	r3, [r3, #28]
 8009bde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009bf6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009bfa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009bfe:	4013      	ands	r3, r2
 8009c00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009c04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d115      	bne.n	8009c38 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c10:	f003 0320 	and.w	r3, r3, #32
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00f      	beq.n	8009c38 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c1c:	f003 0320 	and.w	r3, r3, #32
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d009      	beq.n	8009c38 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f000 82ca 	beq.w	800a1c2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	4798      	blx	r3
      }
      return;
 8009c36:	e2c4      	b.n	800a1c2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009c38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f000 8117 	beq.w	8009e70 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c46:	f003 0301 	and.w	r3, r3, #1
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d106      	bne.n	8009c5c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009c4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009c52:	4b85      	ldr	r3, [pc, #532]	@ (8009e68 <HAL_UART_IRQHandler+0x298>)
 8009c54:	4013      	ands	r3, r2
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f000 810a 	beq.w	8009e70 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c60:	f003 0301 	and.w	r3, r3, #1
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d011      	beq.n	8009c8c <HAL_UART_IRQHandler+0xbc>
 8009c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00b      	beq.n	8009c8c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c82:	f043 0201 	orr.w	r2, r3, #1
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c90:	f003 0302 	and.w	r3, r3, #2
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d011      	beq.n	8009cbc <HAL_UART_IRQHandler+0xec>
 8009c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c9c:	f003 0301 	and.w	r3, r3, #1
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00b      	beq.n	8009cbc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2202      	movs	r2, #2
 8009caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cb2:	f043 0204 	orr.w	r2, r3, #4
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cc0:	f003 0304 	and.w	r3, r3, #4
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d011      	beq.n	8009cec <HAL_UART_IRQHandler+0x11c>
 8009cc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ccc:	f003 0301 	and.w	r3, r3, #1
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00b      	beq.n	8009cec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2204      	movs	r2, #4
 8009cda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ce2:	f043 0202 	orr.w	r2, r3, #2
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cf0:	f003 0308 	and.w	r3, r3, #8
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d017      	beq.n	8009d28 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cfc:	f003 0320 	and.w	r3, r3, #32
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d105      	bne.n	8009d10 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d08:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00b      	beq.n	8009d28 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2208      	movs	r2, #8
 8009d16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d1e:	f043 0208 	orr.w	r2, r3, #8
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d012      	beq.n	8009d5a <HAL_UART_IRQHandler+0x18a>
 8009d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00c      	beq.n	8009d5a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009d48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d50:	f043 0220 	orr.w	r2, r3, #32
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f000 8230 	beq.w	800a1c6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d6a:	f003 0320 	and.w	r3, r3, #32
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00d      	beq.n	8009d8e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d76:	f003 0320 	and.w	r3, r3, #32
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d007      	beq.n	8009d8e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d003      	beq.n	8009d8e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009da2:	2b40      	cmp	r3, #64	@ 0x40
 8009da4:	d005      	beq.n	8009db2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009da6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009daa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d04f      	beq.n	8009e52 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 ff68 	bl	800ac88 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dc2:	2b40      	cmp	r3, #64	@ 0x40
 8009dc4:	d141      	bne.n	8009e4a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	3308      	adds	r3, #8
 8009dcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009dd4:	e853 3f00 	ldrex	r3, [r3]
 8009dd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009ddc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009de0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009de4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	3308      	adds	r3, #8
 8009dee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009df2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009df6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009dfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009e02:	e841 2300 	strex	r3, r2, [r1]
 8009e06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009e0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1d9      	bne.n	8009dc6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d013      	beq.n	8009e42 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e1e:	4a13      	ldr	r2, [pc, #76]	@ (8009e6c <HAL_UART_IRQHandler+0x29c>)
 8009e20:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e26:	4618      	mov	r0, r3
 8009e28:	f7fb fdc4 	bl	80059b4 <HAL_DMA_Abort_IT>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d017      	beq.n	8009e62 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009e3c:	4610      	mov	r0, r2
 8009e3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e40:	e00f      	b.n	8009e62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f9d4 	bl	800a1f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e48:	e00b      	b.n	8009e62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 f9d0 	bl	800a1f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e50:	e007      	b.n	8009e62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f9cc 	bl	800a1f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8009e60:	e1b1      	b.n	800a1c6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e62:	bf00      	nop
    return;
 8009e64:	e1af      	b.n	800a1c6 <HAL_UART_IRQHandler+0x5f6>
 8009e66:	bf00      	nop
 8009e68:	04000120 	.word	0x04000120
 8009e6c:	0800ad51 	.word	0x0800ad51

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	f040 816a 	bne.w	800a14e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e7e:	f003 0310 	and.w	r3, r3, #16
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f000 8163 	beq.w	800a14e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e8c:	f003 0310 	and.w	r3, r3, #16
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	f000 815c 	beq.w	800a14e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2210      	movs	r2, #16
 8009e9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ea8:	2b40      	cmp	r3, #64	@ 0x40
 8009eaa:	f040 80d4 	bne.w	800a056 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009eba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f000 80ad 	beq.w	800a01e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009eca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	f080 80a5 	bcs.w	800a01e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009eda:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 0320 	and.w	r3, r3, #32
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	f040 8086 	bne.w	8009ffc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009efc:	e853 3f00 	ldrex	r3, [r3]
 8009f00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	461a      	mov	r2, r3
 8009f16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009f1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009f1e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f22:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009f26:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009f2a:	e841 2300 	strex	r3, r2, [r1]
 8009f2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d1da      	bne.n	8009ef0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	3308      	adds	r3, #8
 8009f40:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f44:	e853 3f00 	ldrex	r3, [r3]
 8009f48:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009f4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f4c:	f023 0301 	bic.w	r3, r3, #1
 8009f50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	3308      	adds	r3, #8
 8009f5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009f5e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009f62:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f64:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009f66:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009f6a:	e841 2300 	strex	r3, r2, [r1]
 8009f6e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009f70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1e1      	bne.n	8009f3a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	3308      	adds	r3, #8
 8009f7c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f80:	e853 3f00 	ldrex	r3, [r3]
 8009f84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009f86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	3308      	adds	r3, #8
 8009f96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009f9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009f9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009fa0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009fa2:	e841 2300 	strex	r3, r2, [r1]
 8009fa6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009fa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1e3      	bne.n	8009f76 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2220      	movs	r2, #32
 8009fb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fc4:	e853 3f00 	ldrex	r3, [r3]
 8009fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009fca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fcc:	f023 0310 	bic.w	r3, r3, #16
 8009fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	461a      	mov	r2, r3
 8009fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fde:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009fe0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009fe4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009fe6:	e841 2300 	strex	r3, r2, [r1]
 8009fea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009fec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d1e4      	bne.n	8009fbc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7fb fc9e 	bl	8005938 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2202      	movs	r2, #2
 800a000:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a00e:	b29b      	uxth	r3, r3
 800a010:	1ad3      	subs	r3, r2, r3
 800a012:	b29b      	uxth	r3, r3
 800a014:	4619      	mov	r1, r3
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 f8f4 	bl	800a204 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a01c:	e0d5      	b.n	800a1ca <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a024:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a028:	429a      	cmp	r2, r3
 800a02a:	f040 80ce 	bne.w	800a1ca <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f003 0320 	and.w	r3, r3, #32
 800a03a:	2b20      	cmp	r3, #32
 800a03c:	f040 80c5 	bne.w	800a1ca <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2202      	movs	r2, #2
 800a044:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a04c:	4619      	mov	r1, r3
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 f8d8 	bl	800a204 <HAL_UARTEx_RxEventCallback>
      return;
 800a054:	e0b9      	b.n	800a1ca <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a062:	b29b      	uxth	r3, r3
 800a064:	1ad3      	subs	r3, r2, r3
 800a066:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a070:	b29b      	uxth	r3, r3
 800a072:	2b00      	cmp	r3, #0
 800a074:	f000 80ab 	beq.w	800a1ce <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800a078:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f000 80a6 	beq.w	800a1ce <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a08a:	e853 3f00 	ldrex	r3, [r3]
 800a08e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a092:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a096:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	461a      	mov	r2, r3
 800a0a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a0a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0ac:	e841 2300 	strex	r3, r2, [r1]
 800a0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1e4      	bne.n	800a082 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3308      	adds	r3, #8
 800a0be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c2:	e853 3f00 	ldrex	r3, [r3]
 800a0c6:	623b      	str	r3, [r7, #32]
   return(result);
 800a0c8:	6a3b      	ldr	r3, [r7, #32]
 800a0ca:	f023 0301 	bic.w	r3, r3, #1
 800a0ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	3308      	adds	r3, #8
 800a0d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a0dc:	633a      	str	r2, [r7, #48]	@ 0x30
 800a0de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0e4:	e841 2300 	strex	r3, r2, [r1]
 800a0e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d1e3      	bne.n	800a0b8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2220      	movs	r2, #32
 800a0f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	e853 3f00 	ldrex	r3, [r3]
 800a110:	60fb      	str	r3, [r7, #12]
   return(result);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f023 0310 	bic.w	r3, r3, #16
 800a118:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	461a      	mov	r2, r3
 800a122:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a126:	61fb      	str	r3, [r7, #28]
 800a128:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a12a:	69b9      	ldr	r1, [r7, #24]
 800a12c:	69fa      	ldr	r2, [r7, #28]
 800a12e:	e841 2300 	strex	r3, r2, [r1]
 800a132:	617b      	str	r3, [r7, #20]
   return(result);
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1e4      	bne.n	800a104 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2202      	movs	r2, #2
 800a13e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a140:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a144:	4619      	mov	r1, r3
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 f85c 	bl	800a204 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a14c:	e03f      	b.n	800a1ce <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a14e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a152:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00e      	beq.n	800a178 <HAL_UART_IRQHandler+0x5a8>
 800a15a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a15e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a162:	2b00      	cmp	r3, #0
 800a164:	d008      	beq.n	800a178 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a16e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 ffe9 	bl	800b148 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a176:	e02d      	b.n	800a1d4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a17c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00e      	beq.n	800a1a2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d008      	beq.n	800a1a2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a194:	2b00      	cmp	r3, #0
 800a196:	d01c      	beq.n	800a1d2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	4798      	blx	r3
    }
    return;
 800a1a0:	e017      	b.n	800a1d2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a1a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d012      	beq.n	800a1d4 <HAL_UART_IRQHandler+0x604>
 800a1ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d00c      	beq.n	800a1d4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 fdde 	bl	800ad7c <UART_EndTransmit_IT>
    return;
 800a1c0:	e008      	b.n	800a1d4 <HAL_UART_IRQHandler+0x604>
      return;
 800a1c2:	bf00      	nop
 800a1c4:	e006      	b.n	800a1d4 <HAL_UART_IRQHandler+0x604>
    return;
 800a1c6:	bf00      	nop
 800a1c8:	e004      	b.n	800a1d4 <HAL_UART_IRQHandler+0x604>
      return;
 800a1ca:	bf00      	nop
 800a1cc:	e002      	b.n	800a1d4 <HAL_UART_IRQHandler+0x604>
      return;
 800a1ce:	bf00      	nop
 800a1d0:	e000      	b.n	800a1d4 <HAL_UART_IRQHandler+0x604>
    return;
 800a1d2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800a1d4:	37e8      	adds	r7, #232	@ 0xe8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop

0800a1dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a1e4:	bf00      	nop
 800a1e6:	370c      	adds	r7, #12
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a1f8:	bf00      	nop
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	460b      	mov	r3, r1
 800a20e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a210:	bf00      	nop
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a21c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a220:	b08a      	sub	sp, #40	@ 0x28
 800a222:	af00      	add	r7, sp, #0
 800a224:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a226:	2300      	movs	r3, #0
 800a228:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	689a      	ldr	r2, [r3, #8]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	431a      	orrs	r2, r3
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	695b      	ldr	r3, [r3, #20]
 800a23a:	431a      	orrs	r2, r3
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	69db      	ldr	r3, [r3, #28]
 800a240:	4313      	orrs	r3, r2
 800a242:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	4ba4      	ldr	r3, [pc, #656]	@ (800a4dc <UART_SetConfig+0x2c0>)
 800a24c:	4013      	ands	r3, r2
 800a24e:	68fa      	ldr	r2, [r7, #12]
 800a250:	6812      	ldr	r2, [r2, #0]
 800a252:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a254:	430b      	orrs	r3, r1
 800a256:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	68da      	ldr	r2, [r3, #12]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	430a      	orrs	r2, r1
 800a26c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	699b      	ldr	r3, [r3, #24]
 800a272:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a99      	ldr	r2, [pc, #612]	@ (800a4e0 <UART_SetConfig+0x2c4>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d004      	beq.n	800a288 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6a1b      	ldr	r3, [r3, #32]
 800a282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a284:	4313      	orrs	r3, r2
 800a286:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a298:	430a      	orrs	r2, r1
 800a29a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a90      	ldr	r2, [pc, #576]	@ (800a4e4 <UART_SetConfig+0x2c8>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d126      	bne.n	800a2f4 <UART_SetConfig+0xd8>
 800a2a6:	4b90      	ldr	r3, [pc, #576]	@ (800a4e8 <UART_SetConfig+0x2cc>)
 800a2a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2ac:	f003 0303 	and.w	r3, r3, #3
 800a2b0:	2b03      	cmp	r3, #3
 800a2b2:	d81b      	bhi.n	800a2ec <UART_SetConfig+0xd0>
 800a2b4:	a201      	add	r2, pc, #4	@ (adr r2, 800a2bc <UART_SetConfig+0xa0>)
 800a2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ba:	bf00      	nop
 800a2bc:	0800a2cd 	.word	0x0800a2cd
 800a2c0:	0800a2dd 	.word	0x0800a2dd
 800a2c4:	0800a2d5 	.word	0x0800a2d5
 800a2c8:	0800a2e5 	.word	0x0800a2e5
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a2d2:	e116      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a2d4:	2302      	movs	r3, #2
 800a2d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a2da:	e112      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a2dc:	2304      	movs	r3, #4
 800a2de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a2e2:	e10e      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a2e4:	2308      	movs	r3, #8
 800a2e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a2ea:	e10a      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a2ec:	2310      	movs	r3, #16
 800a2ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a2f2:	e106      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a7c      	ldr	r2, [pc, #496]	@ (800a4ec <UART_SetConfig+0x2d0>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d138      	bne.n	800a370 <UART_SetConfig+0x154>
 800a2fe:	4b7a      	ldr	r3, [pc, #488]	@ (800a4e8 <UART_SetConfig+0x2cc>)
 800a300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a304:	f003 030c 	and.w	r3, r3, #12
 800a308:	2b0c      	cmp	r3, #12
 800a30a:	d82d      	bhi.n	800a368 <UART_SetConfig+0x14c>
 800a30c:	a201      	add	r2, pc, #4	@ (adr r2, 800a314 <UART_SetConfig+0xf8>)
 800a30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a312:	bf00      	nop
 800a314:	0800a349 	.word	0x0800a349
 800a318:	0800a369 	.word	0x0800a369
 800a31c:	0800a369 	.word	0x0800a369
 800a320:	0800a369 	.word	0x0800a369
 800a324:	0800a359 	.word	0x0800a359
 800a328:	0800a369 	.word	0x0800a369
 800a32c:	0800a369 	.word	0x0800a369
 800a330:	0800a369 	.word	0x0800a369
 800a334:	0800a351 	.word	0x0800a351
 800a338:	0800a369 	.word	0x0800a369
 800a33c:	0800a369 	.word	0x0800a369
 800a340:	0800a369 	.word	0x0800a369
 800a344:	0800a361 	.word	0x0800a361
 800a348:	2300      	movs	r3, #0
 800a34a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a34e:	e0d8      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a350:	2302      	movs	r3, #2
 800a352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a356:	e0d4      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a358:	2304      	movs	r3, #4
 800a35a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a35e:	e0d0      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a360:	2308      	movs	r3, #8
 800a362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a366:	e0cc      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a368:	2310      	movs	r3, #16
 800a36a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a36e:	e0c8      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a5e      	ldr	r2, [pc, #376]	@ (800a4f0 <UART_SetConfig+0x2d4>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d125      	bne.n	800a3c6 <UART_SetConfig+0x1aa>
 800a37a:	4b5b      	ldr	r3, [pc, #364]	@ (800a4e8 <UART_SetConfig+0x2cc>)
 800a37c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a380:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a384:	2b30      	cmp	r3, #48	@ 0x30
 800a386:	d016      	beq.n	800a3b6 <UART_SetConfig+0x19a>
 800a388:	2b30      	cmp	r3, #48	@ 0x30
 800a38a:	d818      	bhi.n	800a3be <UART_SetConfig+0x1a2>
 800a38c:	2b20      	cmp	r3, #32
 800a38e:	d00a      	beq.n	800a3a6 <UART_SetConfig+0x18a>
 800a390:	2b20      	cmp	r3, #32
 800a392:	d814      	bhi.n	800a3be <UART_SetConfig+0x1a2>
 800a394:	2b00      	cmp	r3, #0
 800a396:	d002      	beq.n	800a39e <UART_SetConfig+0x182>
 800a398:	2b10      	cmp	r3, #16
 800a39a:	d008      	beq.n	800a3ae <UART_SetConfig+0x192>
 800a39c:	e00f      	b.n	800a3be <UART_SetConfig+0x1a2>
 800a39e:	2300      	movs	r3, #0
 800a3a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a3a4:	e0ad      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a3a6:	2302      	movs	r3, #2
 800a3a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a3ac:	e0a9      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a3ae:	2304      	movs	r3, #4
 800a3b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a3b4:	e0a5      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a3b6:	2308      	movs	r3, #8
 800a3b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a3bc:	e0a1      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a3be:	2310      	movs	r3, #16
 800a3c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a3c4:	e09d      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a4a      	ldr	r2, [pc, #296]	@ (800a4f4 <UART_SetConfig+0x2d8>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d125      	bne.n	800a41c <UART_SetConfig+0x200>
 800a3d0:	4b45      	ldr	r3, [pc, #276]	@ (800a4e8 <UART_SetConfig+0x2cc>)
 800a3d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a3da:	2bc0      	cmp	r3, #192	@ 0xc0
 800a3dc:	d016      	beq.n	800a40c <UART_SetConfig+0x1f0>
 800a3de:	2bc0      	cmp	r3, #192	@ 0xc0
 800a3e0:	d818      	bhi.n	800a414 <UART_SetConfig+0x1f8>
 800a3e2:	2b80      	cmp	r3, #128	@ 0x80
 800a3e4:	d00a      	beq.n	800a3fc <UART_SetConfig+0x1e0>
 800a3e6:	2b80      	cmp	r3, #128	@ 0x80
 800a3e8:	d814      	bhi.n	800a414 <UART_SetConfig+0x1f8>
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d002      	beq.n	800a3f4 <UART_SetConfig+0x1d8>
 800a3ee:	2b40      	cmp	r3, #64	@ 0x40
 800a3f0:	d008      	beq.n	800a404 <UART_SetConfig+0x1e8>
 800a3f2:	e00f      	b.n	800a414 <UART_SetConfig+0x1f8>
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a3fa:	e082      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a402:	e07e      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a404:	2304      	movs	r3, #4
 800a406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a40a:	e07a      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a40c:	2308      	movs	r3, #8
 800a40e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a412:	e076      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a414:	2310      	movs	r3, #16
 800a416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a41a:	e072      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a35      	ldr	r2, [pc, #212]	@ (800a4f8 <UART_SetConfig+0x2dc>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d12a      	bne.n	800a47c <UART_SetConfig+0x260>
 800a426:	4b30      	ldr	r3, [pc, #192]	@ (800a4e8 <UART_SetConfig+0x2cc>)
 800a428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a42c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a430:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a434:	d01a      	beq.n	800a46c <UART_SetConfig+0x250>
 800a436:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a43a:	d81b      	bhi.n	800a474 <UART_SetConfig+0x258>
 800a43c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a440:	d00c      	beq.n	800a45c <UART_SetConfig+0x240>
 800a442:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a446:	d815      	bhi.n	800a474 <UART_SetConfig+0x258>
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d003      	beq.n	800a454 <UART_SetConfig+0x238>
 800a44c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a450:	d008      	beq.n	800a464 <UART_SetConfig+0x248>
 800a452:	e00f      	b.n	800a474 <UART_SetConfig+0x258>
 800a454:	2300      	movs	r3, #0
 800a456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a45a:	e052      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a45c:	2302      	movs	r3, #2
 800a45e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a462:	e04e      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a464:	2304      	movs	r3, #4
 800a466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a46a:	e04a      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a46c:	2308      	movs	r3, #8
 800a46e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a472:	e046      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a474:	2310      	movs	r3, #16
 800a476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a47a:	e042      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a17      	ldr	r2, [pc, #92]	@ (800a4e0 <UART_SetConfig+0x2c4>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d13a      	bne.n	800a4fc <UART_SetConfig+0x2e0>
 800a486:	4b18      	ldr	r3, [pc, #96]	@ (800a4e8 <UART_SetConfig+0x2cc>)
 800a488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a48c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a490:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a494:	d01a      	beq.n	800a4cc <UART_SetConfig+0x2b0>
 800a496:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a49a:	d81b      	bhi.n	800a4d4 <UART_SetConfig+0x2b8>
 800a49c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a4a0:	d00c      	beq.n	800a4bc <UART_SetConfig+0x2a0>
 800a4a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a4a6:	d815      	bhi.n	800a4d4 <UART_SetConfig+0x2b8>
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d003      	beq.n	800a4b4 <UART_SetConfig+0x298>
 800a4ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4b0:	d008      	beq.n	800a4c4 <UART_SetConfig+0x2a8>
 800a4b2:	e00f      	b.n	800a4d4 <UART_SetConfig+0x2b8>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4ba:	e022      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a4bc:	2302      	movs	r3, #2
 800a4be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4c2:	e01e      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a4c4:	2304      	movs	r3, #4
 800a4c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4ca:	e01a      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a4cc:	2308      	movs	r3, #8
 800a4ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4d2:	e016      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a4d4:	2310      	movs	r3, #16
 800a4d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4da:	e012      	b.n	800a502 <UART_SetConfig+0x2e6>
 800a4dc:	efff69f3 	.word	0xefff69f3
 800a4e0:	40008000 	.word	0x40008000
 800a4e4:	40013800 	.word	0x40013800
 800a4e8:	40021000 	.word	0x40021000
 800a4ec:	40004400 	.word	0x40004400
 800a4f0:	40004800 	.word	0x40004800
 800a4f4:	40004c00 	.word	0x40004c00
 800a4f8:	40005000 	.word	0x40005000
 800a4fc:	2310      	movs	r3, #16
 800a4fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a9f      	ldr	r2, [pc, #636]	@ (800a784 <UART_SetConfig+0x568>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d17a      	bne.n	800a602 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a50c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a510:	2b08      	cmp	r3, #8
 800a512:	d824      	bhi.n	800a55e <UART_SetConfig+0x342>
 800a514:	a201      	add	r2, pc, #4	@ (adr r2, 800a51c <UART_SetConfig+0x300>)
 800a516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a51a:	bf00      	nop
 800a51c:	0800a541 	.word	0x0800a541
 800a520:	0800a55f 	.word	0x0800a55f
 800a524:	0800a549 	.word	0x0800a549
 800a528:	0800a55f 	.word	0x0800a55f
 800a52c:	0800a54f 	.word	0x0800a54f
 800a530:	0800a55f 	.word	0x0800a55f
 800a534:	0800a55f 	.word	0x0800a55f
 800a538:	0800a55f 	.word	0x0800a55f
 800a53c:	0800a557 	.word	0x0800a557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a540:	f7fd fdae 	bl	80080a0 <HAL_RCC_GetPCLK1Freq>
 800a544:	61f8      	str	r0, [r7, #28]
        break;
 800a546:	e010      	b.n	800a56a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a548:	4b8f      	ldr	r3, [pc, #572]	@ (800a788 <UART_SetConfig+0x56c>)
 800a54a:	61fb      	str	r3, [r7, #28]
        break;
 800a54c:	e00d      	b.n	800a56a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a54e:	f7fd fd0f 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 800a552:	61f8      	str	r0, [r7, #28]
        break;
 800a554:	e009      	b.n	800a56a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a556:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a55a:	61fb      	str	r3, [r7, #28]
        break;
 800a55c:	e005      	b.n	800a56a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800a55e:	2300      	movs	r3, #0
 800a560:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a562:	2301      	movs	r3, #1
 800a564:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a568:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a56a:	69fb      	ldr	r3, [r7, #28]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f000 80fb 	beq.w	800a768 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	685a      	ldr	r2, [r3, #4]
 800a576:	4613      	mov	r3, r2
 800a578:	005b      	lsls	r3, r3, #1
 800a57a:	4413      	add	r3, r2
 800a57c:	69fa      	ldr	r2, [r7, #28]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d305      	bcc.n	800a58e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a588:	69fa      	ldr	r2, [r7, #28]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d903      	bls.n	800a596 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a594:	e0e8      	b.n	800a768 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a596:	69fb      	ldr	r3, [r7, #28]
 800a598:	2200      	movs	r2, #0
 800a59a:	461c      	mov	r4, r3
 800a59c:	4615      	mov	r5, r2
 800a59e:	f04f 0200 	mov.w	r2, #0
 800a5a2:	f04f 0300 	mov.w	r3, #0
 800a5a6:	022b      	lsls	r3, r5, #8
 800a5a8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a5ac:	0222      	lsls	r2, r4, #8
 800a5ae:	68f9      	ldr	r1, [r7, #12]
 800a5b0:	6849      	ldr	r1, [r1, #4]
 800a5b2:	0849      	lsrs	r1, r1, #1
 800a5b4:	2000      	movs	r0, #0
 800a5b6:	4688      	mov	r8, r1
 800a5b8:	4681      	mov	r9, r0
 800a5ba:	eb12 0a08 	adds.w	sl, r2, r8
 800a5be:	eb43 0b09 	adc.w	fp, r3, r9
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	603b      	str	r3, [r7, #0]
 800a5ca:	607a      	str	r2, [r7, #4]
 800a5cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5d0:	4650      	mov	r0, sl
 800a5d2:	4659      	mov	r1, fp
 800a5d4:	f7f6 fb38 	bl	8000c48 <__aeabi_uldivmod>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	460b      	mov	r3, r1
 800a5dc:	4613      	mov	r3, r2
 800a5de:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a5e6:	d308      	bcc.n	800a5fa <UART_SetConfig+0x3de>
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a5ee:	d204      	bcs.n	800a5fa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	69ba      	ldr	r2, [r7, #24]
 800a5f6:	60da      	str	r2, [r3, #12]
 800a5f8:	e0b6      	b.n	800a768 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a600:	e0b2      	b.n	800a768 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	69db      	ldr	r3, [r3, #28]
 800a606:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a60a:	d15e      	bne.n	800a6ca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800a60c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a610:	2b08      	cmp	r3, #8
 800a612:	d828      	bhi.n	800a666 <UART_SetConfig+0x44a>
 800a614:	a201      	add	r2, pc, #4	@ (adr r2, 800a61c <UART_SetConfig+0x400>)
 800a616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61a:	bf00      	nop
 800a61c:	0800a641 	.word	0x0800a641
 800a620:	0800a649 	.word	0x0800a649
 800a624:	0800a651 	.word	0x0800a651
 800a628:	0800a667 	.word	0x0800a667
 800a62c:	0800a657 	.word	0x0800a657
 800a630:	0800a667 	.word	0x0800a667
 800a634:	0800a667 	.word	0x0800a667
 800a638:	0800a667 	.word	0x0800a667
 800a63c:	0800a65f 	.word	0x0800a65f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a640:	f7fd fd2e 	bl	80080a0 <HAL_RCC_GetPCLK1Freq>
 800a644:	61f8      	str	r0, [r7, #28]
        break;
 800a646:	e014      	b.n	800a672 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a648:	f7fd fd40 	bl	80080cc <HAL_RCC_GetPCLK2Freq>
 800a64c:	61f8      	str	r0, [r7, #28]
        break;
 800a64e:	e010      	b.n	800a672 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a650:	4b4d      	ldr	r3, [pc, #308]	@ (800a788 <UART_SetConfig+0x56c>)
 800a652:	61fb      	str	r3, [r7, #28]
        break;
 800a654:	e00d      	b.n	800a672 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a656:	f7fd fc8b 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 800a65a:	61f8      	str	r0, [r7, #28]
        break;
 800a65c:	e009      	b.n	800a672 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a65e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a662:	61fb      	str	r3, [r7, #28]
        break;
 800a664:	e005      	b.n	800a672 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800a666:	2300      	movs	r3, #0
 800a668:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a670:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d077      	beq.n	800a768 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a678:	69fb      	ldr	r3, [r7, #28]
 800a67a:	005a      	lsls	r2, r3, #1
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	085b      	lsrs	r3, r3, #1
 800a682:	441a      	add	r2, r3
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	fbb2 f3f3 	udiv	r3, r2, r3
 800a68c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a68e:	69bb      	ldr	r3, [r7, #24]
 800a690:	2b0f      	cmp	r3, #15
 800a692:	d916      	bls.n	800a6c2 <UART_SetConfig+0x4a6>
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a69a:	d212      	bcs.n	800a6c2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	f023 030f 	bic.w	r3, r3, #15
 800a6a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	085b      	lsrs	r3, r3, #1
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	f003 0307 	and.w	r3, r3, #7
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	8afb      	ldrh	r3, [r7, #22]
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	8afa      	ldrh	r2, [r7, #22]
 800a6be:	60da      	str	r2, [r3, #12]
 800a6c0:	e052      	b.n	800a768 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a6c8:	e04e      	b.n	800a768 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a6ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a6ce:	2b08      	cmp	r3, #8
 800a6d0:	d827      	bhi.n	800a722 <UART_SetConfig+0x506>
 800a6d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a6d8 <UART_SetConfig+0x4bc>)
 800a6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d8:	0800a6fd 	.word	0x0800a6fd
 800a6dc:	0800a705 	.word	0x0800a705
 800a6e0:	0800a70d 	.word	0x0800a70d
 800a6e4:	0800a723 	.word	0x0800a723
 800a6e8:	0800a713 	.word	0x0800a713
 800a6ec:	0800a723 	.word	0x0800a723
 800a6f0:	0800a723 	.word	0x0800a723
 800a6f4:	0800a723 	.word	0x0800a723
 800a6f8:	0800a71b 	.word	0x0800a71b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6fc:	f7fd fcd0 	bl	80080a0 <HAL_RCC_GetPCLK1Freq>
 800a700:	61f8      	str	r0, [r7, #28]
        break;
 800a702:	e014      	b.n	800a72e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a704:	f7fd fce2 	bl	80080cc <HAL_RCC_GetPCLK2Freq>
 800a708:	61f8      	str	r0, [r7, #28]
        break;
 800a70a:	e010      	b.n	800a72e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a70c:	4b1e      	ldr	r3, [pc, #120]	@ (800a788 <UART_SetConfig+0x56c>)
 800a70e:	61fb      	str	r3, [r7, #28]
        break;
 800a710:	e00d      	b.n	800a72e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a712:	f7fd fc2d 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 800a716:	61f8      	str	r0, [r7, #28]
        break;
 800a718:	e009      	b.n	800a72e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a71a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a71e:	61fb      	str	r3, [r7, #28]
        break;
 800a720:	e005      	b.n	800a72e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800a722:	2300      	movs	r3, #0
 800a724:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a72c:	bf00      	nop
    }

    if (pclk != 0U)
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d019      	beq.n	800a768 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	085a      	lsrs	r2, r3, #1
 800a73a:	69fb      	ldr	r3, [r7, #28]
 800a73c:	441a      	add	r2, r3
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	fbb2 f3f3 	udiv	r3, r2, r3
 800a746:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	2b0f      	cmp	r3, #15
 800a74c:	d909      	bls.n	800a762 <UART_SetConfig+0x546>
 800a74e:	69bb      	ldr	r3, [r7, #24]
 800a750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a754:	d205      	bcs.n	800a762 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	b29a      	uxth	r2, r3
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	60da      	str	r2, [r3, #12]
 800a760:	e002      	b.n	800a768 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a762:	2301      	movs	r3, #1
 800a764:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2200      	movs	r2, #0
 800a76c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2200      	movs	r2, #0
 800a772:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a774:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3728      	adds	r7, #40	@ 0x28
 800a77c:	46bd      	mov	sp, r7
 800a77e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a782:	bf00      	nop
 800a784:	40008000 	.word	0x40008000
 800a788:	00f42400 	.word	0x00f42400

0800a78c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a798:	f003 0308 	and.w	r3, r3, #8
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d00a      	beq.n	800a7b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	430a      	orrs	r2, r1
 800a7b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7ba:	f003 0301 	and.w	r3, r3, #1
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00a      	beq.n	800a7d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	430a      	orrs	r2, r1
 800a7d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7dc:	f003 0302 	and.w	r3, r3, #2
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d00a      	beq.n	800a7fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	430a      	orrs	r2, r1
 800a7f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7fe:	f003 0304 	and.w	r3, r3, #4
 800a802:	2b00      	cmp	r3, #0
 800a804:	d00a      	beq.n	800a81c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	430a      	orrs	r2, r1
 800a81a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a820:	f003 0310 	and.w	r3, r3, #16
 800a824:	2b00      	cmp	r3, #0
 800a826:	d00a      	beq.n	800a83e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	430a      	orrs	r2, r1
 800a83c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a842:	f003 0320 	and.w	r3, r3, #32
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00a      	beq.n	800a860 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	430a      	orrs	r2, r1
 800a85e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d01a      	beq.n	800a8a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	430a      	orrs	r2, r1
 800a880:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a886:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a88a:	d10a      	bne.n	800a8a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	430a      	orrs	r2, r1
 800a8a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d00a      	beq.n	800a8c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	430a      	orrs	r2, r1
 800a8c2:	605a      	str	r2, [r3, #4]
  }
}
 800a8c4:	bf00      	nop
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b098      	sub	sp, #96	@ 0x60
 800a8d4:	af02      	add	r7, sp, #8
 800a8d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a8e0:	f7f9 fe8c 	bl	80045fc <HAL_GetTick>
 800a8e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f003 0308 	and.w	r3, r3, #8
 800a8f0:	2b08      	cmp	r3, #8
 800a8f2:	d12e      	bne.n	800a952 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a8f8:	9300      	str	r3, [sp, #0]
 800a8fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 f88c 	bl	800aa20 <UART_WaitOnFlagUntilTimeout>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d021      	beq.n	800a952 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a916:	e853 3f00 	ldrex	r3, [r3]
 800a91a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a91c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a91e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a922:	653b      	str	r3, [r7, #80]	@ 0x50
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	461a      	mov	r2, r3
 800a92a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a92c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a92e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a930:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a932:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a934:	e841 2300 	strex	r3, r2, [r1]
 800a938:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a93a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d1e6      	bne.n	800a90e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2220      	movs	r2, #32
 800a944:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a94e:	2303      	movs	r3, #3
 800a950:	e062      	b.n	800aa18 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 0304 	and.w	r3, r3, #4
 800a95c:	2b04      	cmp	r3, #4
 800a95e:	d149      	bne.n	800a9f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a960:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a964:	9300      	str	r3, [sp, #0]
 800a966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a968:	2200      	movs	r2, #0
 800a96a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f856 	bl	800aa20 <UART_WaitOnFlagUntilTimeout>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d03c      	beq.n	800a9f4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a982:	e853 3f00 	ldrex	r3, [r3]
 800a986:	623b      	str	r3, [r7, #32]
   return(result);
 800a988:	6a3b      	ldr	r3, [r7, #32]
 800a98a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a98e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	461a      	mov	r2, r3
 800a996:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a998:	633b      	str	r3, [r7, #48]	@ 0x30
 800a99a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a99c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a99e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9a0:	e841 2300 	strex	r3, r2, [r1]
 800a9a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1e6      	bne.n	800a97a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	3308      	adds	r3, #8
 800a9b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	e853 3f00 	ldrex	r3, [r3]
 800a9ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f023 0301 	bic.w	r3, r3, #1
 800a9c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	3308      	adds	r3, #8
 800a9ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a9cc:	61fa      	str	r2, [r7, #28]
 800a9ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d0:	69b9      	ldr	r1, [r7, #24]
 800a9d2:	69fa      	ldr	r2, [r7, #28]
 800a9d4:	e841 2300 	strex	r3, r2, [r1]
 800a9d8:	617b      	str	r3, [r7, #20]
   return(result);
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d1e5      	bne.n	800a9ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2220      	movs	r2, #32
 800a9e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9f0:	2303      	movs	r3, #3
 800a9f2:	e011      	b.n	800aa18 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2220      	movs	r2, #32
 800a9f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2220      	movs	r2, #32
 800a9fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800aa16:	2300      	movs	r3, #0
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3758      	adds	r7, #88	@ 0x58
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	603b      	str	r3, [r7, #0]
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa30:	e04f      	b.n	800aad2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa38:	d04b      	beq.n	800aad2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa3a:	f7f9 fddf 	bl	80045fc <HAL_GetTick>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	1ad3      	subs	r3, r2, r3
 800aa44:	69ba      	ldr	r2, [r7, #24]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d302      	bcc.n	800aa50 <UART_WaitOnFlagUntilTimeout+0x30>
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d101      	bne.n	800aa54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aa50:	2303      	movs	r3, #3
 800aa52:	e04e      	b.n	800aaf2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f003 0304 	and.w	r3, r3, #4
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d037      	beq.n	800aad2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	2b80      	cmp	r3, #128	@ 0x80
 800aa66:	d034      	beq.n	800aad2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	2b40      	cmp	r3, #64	@ 0x40
 800aa6c:	d031      	beq.n	800aad2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	69db      	ldr	r3, [r3, #28]
 800aa74:	f003 0308 	and.w	r3, r3, #8
 800aa78:	2b08      	cmp	r3, #8
 800aa7a:	d110      	bne.n	800aa9e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2208      	movs	r2, #8
 800aa82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa84:	68f8      	ldr	r0, [r7, #12]
 800aa86:	f000 f8ff 	bl	800ac88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2208      	movs	r2, #8
 800aa8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e029      	b.n	800aaf2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	69db      	ldr	r3, [r3, #28]
 800aaa4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aaa8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aaac:	d111      	bne.n	800aad2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aab6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	f000 f8e5 	bl	800ac88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2220      	movs	r2, #32
 800aac2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2200      	movs	r2, #0
 800aaca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800aace:	2303      	movs	r3, #3
 800aad0:	e00f      	b.n	800aaf2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	69da      	ldr	r2, [r3, #28]
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	4013      	ands	r3, r2
 800aadc:	68ba      	ldr	r2, [r7, #8]
 800aade:	429a      	cmp	r2, r3
 800aae0:	bf0c      	ite	eq
 800aae2:	2301      	moveq	r3, #1
 800aae4:	2300      	movne	r3, #0
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	461a      	mov	r2, r3
 800aaea:	79fb      	ldrb	r3, [r7, #7]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d0a0      	beq.n	800aa32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aaf0:	2300      	movs	r3, #0
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
	...

0800aafc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b097      	sub	sp, #92	@ 0x5c
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	4613      	mov	r3, r2
 800ab08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	68ba      	ldr	r2, [r7, #8]
 800ab0e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	88fa      	ldrh	r2, [r7, #6]
 800ab14:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	88fa      	ldrh	r2, [r7, #6]
 800ab1c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2200      	movs	r2, #0
 800ab24:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	689b      	ldr	r3, [r3, #8]
 800ab2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab2e:	d10e      	bne.n	800ab4e <UART_Start_Receive_IT+0x52>
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	691b      	ldr	r3, [r3, #16]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d105      	bne.n	800ab44 <UART_Start_Receive_IT+0x48>
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800ab3e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ab42:	e02d      	b.n	800aba0 <UART_Start_Receive_IT+0xa4>
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	22ff      	movs	r2, #255	@ 0xff
 800ab48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ab4c:	e028      	b.n	800aba0 <UART_Start_Receive_IT+0xa4>
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d10d      	bne.n	800ab72 <UART_Start_Receive_IT+0x76>
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	691b      	ldr	r3, [r3, #16]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d104      	bne.n	800ab68 <UART_Start_Receive_IT+0x6c>
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	22ff      	movs	r2, #255	@ 0xff
 800ab62:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ab66:	e01b      	b.n	800aba0 <UART_Start_Receive_IT+0xa4>
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	227f      	movs	r2, #127	@ 0x7f
 800ab6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ab70:	e016      	b.n	800aba0 <UART_Start_Receive_IT+0xa4>
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab7a:	d10d      	bne.n	800ab98 <UART_Start_Receive_IT+0x9c>
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	691b      	ldr	r3, [r3, #16]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d104      	bne.n	800ab8e <UART_Start_Receive_IT+0x92>
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	227f      	movs	r2, #127	@ 0x7f
 800ab88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ab8c:	e008      	b.n	800aba0 <UART_Start_Receive_IT+0xa4>
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	223f      	movs	r2, #63	@ 0x3f
 800ab92:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ab96:	e003      	b.n	800aba0 <UART_Start_Receive_IT+0xa4>
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2222      	movs	r2, #34	@ 0x22
 800abac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	3308      	adds	r3, #8
 800abb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abba:	e853 3f00 	ldrex	r3, [r3]
 800abbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800abc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc2:	f043 0301 	orr.w	r3, r3, #1
 800abc6:	657b      	str	r3, [r7, #84]	@ 0x54
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	3308      	adds	r3, #8
 800abce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800abd0:	64ba      	str	r2, [r7, #72]	@ 0x48
 800abd2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abd4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800abd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abd8:	e841 2300 	strex	r3, r2, [r1]
 800abdc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800abde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d1e5      	bne.n	800abb0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abec:	d107      	bne.n	800abfe <UART_Start_Receive_IT+0x102>
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d103      	bne.n	800abfe <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	4a21      	ldr	r2, [pc, #132]	@ (800ac80 <UART_Start_Receive_IT+0x184>)
 800abfa:	669a      	str	r2, [r3, #104]	@ 0x68
 800abfc:	e002      	b.n	800ac04 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	4a20      	ldr	r2, [pc, #128]	@ (800ac84 <UART_Start_Receive_IT+0x188>)
 800ac02:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	691b      	ldr	r3, [r3, #16]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d019      	beq.n	800ac40 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac14:	e853 3f00 	ldrex	r3, [r3]
 800ac18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac1c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800ac20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	461a      	mov	r2, r3
 800ac28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac2c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ac30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac32:	e841 2300 	strex	r3, r2, [r1]
 800ac36:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ac38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1e6      	bne.n	800ac0c <UART_Start_Receive_IT+0x110>
 800ac3e:	e018      	b.n	800ac72 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	e853 3f00 	ldrex	r3, [r3]
 800ac4c:	613b      	str	r3, [r7, #16]
   return(result);
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	f043 0320 	orr.w	r3, r3, #32
 800ac54:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac5e:	623b      	str	r3, [r7, #32]
 800ac60:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac62:	69f9      	ldr	r1, [r7, #28]
 800ac64:	6a3a      	ldr	r2, [r7, #32]
 800ac66:	e841 2300 	strex	r3, r2, [r1]
 800ac6a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d1e6      	bne.n	800ac40 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800ac72:	2300      	movs	r3, #0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	375c      	adds	r7, #92	@ 0x5c
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr
 800ac80:	0800af8d 	.word	0x0800af8d
 800ac84:	0800add1 	.word	0x0800add1

0800ac88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b095      	sub	sp, #84	@ 0x54
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac98:	e853 3f00 	ldrex	r3, [r3]
 800ac9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ac9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	461a      	mov	r2, r3
 800acac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acae:	643b      	str	r3, [r7, #64]	@ 0x40
 800acb0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800acb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800acb6:	e841 2300 	strex	r3, r2, [r1]
 800acba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800acbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1e6      	bne.n	800ac90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	3308      	adds	r3, #8
 800acc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acca:	6a3b      	ldr	r3, [r7, #32]
 800accc:	e853 3f00 	ldrex	r3, [r3]
 800acd0:	61fb      	str	r3, [r7, #28]
   return(result);
 800acd2:	69fb      	ldr	r3, [r7, #28]
 800acd4:	f023 0301 	bic.w	r3, r3, #1
 800acd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	3308      	adds	r3, #8
 800ace0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ace2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ace4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ace8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acea:	e841 2300 	strex	r3, r2, [r1]
 800acee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800acf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1e5      	bne.n	800acc2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d118      	bne.n	800ad30 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	e853 3f00 	ldrex	r3, [r3]
 800ad0a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	f023 0310 	bic.w	r3, r3, #16
 800ad12:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	461a      	mov	r2, r3
 800ad1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad1c:	61bb      	str	r3, [r7, #24]
 800ad1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad20:	6979      	ldr	r1, [r7, #20]
 800ad22:	69ba      	ldr	r2, [r7, #24]
 800ad24:	e841 2300 	strex	r3, r2, [r1]
 800ad28:	613b      	str	r3, [r7, #16]
   return(result);
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d1e6      	bne.n	800acfe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2220      	movs	r2, #32
 800ad34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ad44:	bf00      	nop
 800ad46:	3754      	adds	r7, #84	@ 0x54
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr

0800ad50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	f7ff fa3e 	bl	800a1f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad74:	bf00      	nop
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b088      	sub	sp, #32
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	e853 3f00 	ldrex	r3, [r3]
 800ad90:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad98:	61fb      	str	r3, [r7, #28]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	61bb      	str	r3, [r7, #24]
 800ada4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada6:	6979      	ldr	r1, [r7, #20]
 800ada8:	69ba      	ldr	r2, [r7, #24]
 800adaa:	e841 2300 	strex	r3, r2, [r1]
 800adae:	613b      	str	r3, [r7, #16]
   return(result);
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1e6      	bne.n	800ad84 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2220      	movs	r2, #32
 800adba:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f7ff fa0a 	bl	800a1dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adc8:	bf00      	nop
 800adca:	3720      	adds	r7, #32
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b09c      	sub	sp, #112	@ 0x70
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800adde:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ade8:	2b22      	cmp	r3, #34	@ 0x22
 800adea:	f040 80be 	bne.w	800af6a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800adf4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800adf8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800adfc:	b2d9      	uxtb	r1, r3
 800adfe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ae02:	b2da      	uxtb	r2, r3
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae08:	400a      	ands	r2, r1
 800ae0a:	b2d2      	uxtb	r2, r2
 800ae0c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae12:	1c5a      	adds	r2, r3, #1
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	3b01      	subs	r3, #1
 800ae22:	b29a      	uxth	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	f040 80a3 	bne.w	800af7e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae40:	e853 3f00 	ldrex	r3, [r3]
 800ae44:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ae46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	461a      	mov	r2, r3
 800ae54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ae56:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ae58:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ae5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ae5e:	e841 2300 	strex	r3, r2, [r1]
 800ae62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ae64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d1e6      	bne.n	800ae38 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	3308      	adds	r3, #8
 800ae70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae74:	e853 3f00 	ldrex	r3, [r3]
 800ae78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae7c:	f023 0301 	bic.w	r3, r3, #1
 800ae80:	667b      	str	r3, [r7, #100]	@ 0x64
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	3308      	adds	r3, #8
 800ae88:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ae8a:	647a      	str	r2, [r7, #68]	@ 0x44
 800ae8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae92:	e841 2300 	strex	r3, r2, [r1]
 800ae96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1e5      	bne.n	800ae6a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2220      	movs	r2, #32
 800aea2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	4a34      	ldr	r2, [pc, #208]	@ (800af88 <UART_RxISR_8BIT+0x1b8>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d01f      	beq.n	800aefc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d018      	beq.n	800aefc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed2:	e853 3f00 	ldrex	r3, [r3]
 800aed6:	623b      	str	r3, [r7, #32]
   return(result);
 800aed8:	6a3b      	ldr	r3, [r7, #32]
 800aeda:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aede:	663b      	str	r3, [r7, #96]	@ 0x60
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	461a      	mov	r2, r3
 800aee6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aee8:	633b      	str	r3, [r7, #48]	@ 0x30
 800aeea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aeee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aef0:	e841 2300 	strex	r3, r2, [r1]
 800aef4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d1e6      	bne.n	800aeca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af00:	2b01      	cmp	r3, #1
 800af02:	d12e      	bne.n	800af62 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	e853 3f00 	ldrex	r3, [r3]
 800af16:	60fb      	str	r3, [r7, #12]
   return(result);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f023 0310 	bic.w	r3, r3, #16
 800af1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	461a      	mov	r2, r3
 800af26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af28:	61fb      	str	r3, [r7, #28]
 800af2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af2c:	69b9      	ldr	r1, [r7, #24]
 800af2e:	69fa      	ldr	r2, [r7, #28]
 800af30:	e841 2300 	strex	r3, r2, [r1]
 800af34:	617b      	str	r3, [r7, #20]
   return(result);
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d1e6      	bne.n	800af0a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	69db      	ldr	r3, [r3, #28]
 800af42:	f003 0310 	and.w	r3, r3, #16
 800af46:	2b10      	cmp	r3, #16
 800af48:	d103      	bne.n	800af52 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	2210      	movs	r2, #16
 800af50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800af58:	4619      	mov	r1, r3
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f7ff f952 	bl	800a204 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800af60:	e00d      	b.n	800af7e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f7f8 feda 	bl	8003d1c <HAL_UART_RxCpltCallback>
}
 800af68:	e009      	b.n	800af7e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	8b1b      	ldrh	r3, [r3, #24]
 800af70:	b29a      	uxth	r2, r3
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f042 0208 	orr.w	r2, r2, #8
 800af7a:	b292      	uxth	r2, r2
 800af7c:	831a      	strh	r2, [r3, #24]
}
 800af7e:	bf00      	nop
 800af80:	3770      	adds	r7, #112	@ 0x70
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	40008000 	.word	0x40008000

0800af8c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b09c      	sub	sp, #112	@ 0x70
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800af9a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afa4:	2b22      	cmp	r3, #34	@ 0x22
 800afa6:	f040 80be 	bne.w	800b126 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800afb0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afb8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800afba:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800afbe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800afc2:	4013      	ands	r3, r2
 800afc4:	b29a      	uxth	r2, r3
 800afc6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800afc8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afce:	1c9a      	adds	r2, r3, #2
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800afda:	b29b      	uxth	r3, r3
 800afdc:	3b01      	subs	r3, #1
 800afde:	b29a      	uxth	r2, r3
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800afec:	b29b      	uxth	r3, r3
 800afee:	2b00      	cmp	r3, #0
 800aff0:	f040 80a3 	bne.w	800b13a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800affa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800affc:	e853 3f00 	ldrex	r3, [r3]
 800b000:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b002:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b004:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b008:	667b      	str	r3, [r7, #100]	@ 0x64
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	461a      	mov	r2, r3
 800b010:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b012:	657b      	str	r3, [r7, #84]	@ 0x54
 800b014:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b016:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b018:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b01a:	e841 2300 	strex	r3, r2, [r1]
 800b01e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1e6      	bne.n	800aff4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	3308      	adds	r3, #8
 800b02c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b02e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b030:	e853 3f00 	ldrex	r3, [r3]
 800b034:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b038:	f023 0301 	bic.w	r3, r3, #1
 800b03c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	3308      	adds	r3, #8
 800b044:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b046:	643a      	str	r2, [r7, #64]	@ 0x40
 800b048:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b04a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b04c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b04e:	e841 2300 	strex	r3, r2, [r1]
 800b052:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b056:	2b00      	cmp	r3, #0
 800b058:	d1e5      	bne.n	800b026 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2220      	movs	r2, #32
 800b05e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2200      	movs	r2, #0
 800b066:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4a34      	ldr	r2, [pc, #208]	@ (800b144 <UART_RxISR_16BIT+0x1b8>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d01f      	beq.n	800b0b8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b082:	2b00      	cmp	r3, #0
 800b084:	d018      	beq.n	800b0b8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b08c:	6a3b      	ldr	r3, [r7, #32]
 800b08e:	e853 3f00 	ldrex	r3, [r3]
 800b092:	61fb      	str	r3, [r7, #28]
   return(result);
 800b094:	69fb      	ldr	r3, [r7, #28]
 800b096:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b09a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0a6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b0aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0ac:	e841 2300 	strex	r3, r2, [r1]
 800b0b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d1e6      	bne.n	800b086 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d12e      	bne.n	800b11e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	e853 3f00 	ldrex	r3, [r3]
 800b0d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	f023 0310 	bic.w	r3, r3, #16
 800b0da:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b0e4:	61bb      	str	r3, [r7, #24]
 800b0e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e8:	6979      	ldr	r1, [r7, #20]
 800b0ea:	69ba      	ldr	r2, [r7, #24]
 800b0ec:	e841 2300 	strex	r3, r2, [r1]
 800b0f0:	613b      	str	r3, [r7, #16]
   return(result);
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d1e6      	bne.n	800b0c6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	69db      	ldr	r3, [r3, #28]
 800b0fe:	f003 0310 	and.w	r3, r3, #16
 800b102:	2b10      	cmp	r3, #16
 800b104:	d103      	bne.n	800b10e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	2210      	movs	r2, #16
 800b10c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b114:	4619      	mov	r1, r3
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f7ff f874 	bl	800a204 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b11c:	e00d      	b.n	800b13a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f7f8 fdfc 	bl	8003d1c <HAL_UART_RxCpltCallback>
}
 800b124:	e009      	b.n	800b13a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	8b1b      	ldrh	r3, [r3, #24]
 800b12c:	b29a      	uxth	r2, r3
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f042 0208 	orr.w	r2, r2, #8
 800b136:	b292      	uxth	r2, r2
 800b138:	831a      	strh	r2, [r3, #24]
}
 800b13a:	bf00      	nop
 800b13c:	3770      	adds	r7, #112	@ 0x70
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	40008000 	.word	0x40008000

0800b148 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b148:	b480      	push	{r7}
 800b14a:	b083      	sub	sp, #12
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b150:	bf00      	nop
 800b152:	370c      	adds	r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr

0800b15c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b15c:	b084      	sub	sp, #16
 800b15e:	b580      	push	{r7, lr}
 800b160:	b084      	sub	sp, #16
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
 800b166:	f107 001c 	add.w	r0, r7, #28
 800b16a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	68db      	ldr	r3, [r3, #12]
 800b172:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 fa68 	bl	800b650 <USB_CoreReset>
 800b180:	4603      	mov	r3, r0
 800b182:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800b184:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d106      	bne.n	800b19a <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b190:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	639a      	str	r2, [r3, #56]	@ 0x38
 800b198:	e005      	b.n	800b1a6 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b19e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 800b1a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3710      	adds	r7, #16
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b1b2:	b004      	add	sp, #16
 800b1b4:	4770      	bx	lr

0800b1b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b1b6:	b480      	push	{r7}
 800b1b8:	b083      	sub	sp, #12
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	f023 0201 	bic.w	r2, r3, #1
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b1ca:	2300      	movs	r3, #0
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b1f4:	78fb      	ldrb	r3, [r7, #3]
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d115      	bne.n	800b226 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b206:	200a      	movs	r0, #10
 800b208:	f7f9 fa04 	bl	8004614 <HAL_Delay>
      ms += 10U;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	330a      	adds	r3, #10
 800b210:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 fa0e 	bl	800b634 <USB_GetMode>
 800b218:	4603      	mov	r3, r0
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d01e      	beq.n	800b25c <USB_SetCurrentMode+0x84>
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2bc7      	cmp	r3, #199	@ 0xc7
 800b222:	d9f0      	bls.n	800b206 <USB_SetCurrentMode+0x2e>
 800b224:	e01a      	b.n	800b25c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b226:	78fb      	ldrb	r3, [r7, #3]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d115      	bne.n	800b258 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b238:	200a      	movs	r0, #10
 800b23a:	f7f9 f9eb 	bl	8004614 <HAL_Delay>
      ms += 10U;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	330a      	adds	r3, #10
 800b242:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 f9f5 	bl	800b634 <USB_GetMode>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d005      	beq.n	800b25c <USB_SetCurrentMode+0x84>
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2bc7      	cmp	r3, #199	@ 0xc7
 800b254:	d9f0      	bls.n	800b238 <USB_SetCurrentMode+0x60>
 800b256:	e001      	b.n	800b25c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b258:	2301      	movs	r3, #1
 800b25a:	e005      	b.n	800b268 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2bc8      	cmp	r3, #200	@ 0xc8
 800b260:	d101      	bne.n	800b266 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b262:	2301      	movs	r3, #1
 800b264:	e000      	b.n	800b268 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b270:	b084      	sub	sp, #16
 800b272:	b580      	push	{r7, lr}
 800b274:	b086      	sub	sp, #24
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
 800b27a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b27e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b282:	2300      	movs	r3, #0
 800b284:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b28a:	2300      	movs	r3, #0
 800b28c:	613b      	str	r3, [r7, #16]
 800b28e:	e009      	b.n	800b2a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	3340      	adds	r3, #64	@ 0x40
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	4413      	add	r3, r2
 800b29a:	2200      	movs	r2, #0
 800b29c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	613b      	str	r3, [r7, #16]
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	2b0e      	cmp	r3, #14
 800b2a8:	d9f2      	bls.n	800b290 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b2aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d11c      	bne.n	800b2ec <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	68fa      	ldr	r2, [r7, #12]
 800b2bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b2c0:	f043 0302 	orr.w	r3, r3, #2
 800b2c4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2ca:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	601a      	str	r2, [r3, #0]
 800b2ea:	e005      	b.n	800b2f8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2f0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b2fe:	461a      	mov	r2, r3
 800b300:	2300      	movs	r3, #0
 800b302:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b304:	2103      	movs	r1, #3
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 f95a 	bl	800b5c0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b30c:	2110      	movs	r1, #16
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 f8f6 	bl	800b500 <USB_FlushTxFifo>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d001      	beq.n	800b31e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800b31a:	2301      	movs	r3, #1
 800b31c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 f920 	bl	800b564 <USB_FlushRxFifo>
 800b324:	4603      	mov	r3, r0
 800b326:	2b00      	cmp	r3, #0
 800b328:	d001      	beq.n	800b32e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800b32a:	2301      	movs	r3, #1
 800b32c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b334:	461a      	mov	r2, r3
 800b336:	2300      	movs	r3, #0
 800b338:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b340:	461a      	mov	r2, r3
 800b342:	2300      	movs	r3, #0
 800b344:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b34c:	461a      	mov	r2, r3
 800b34e:	2300      	movs	r3, #0
 800b350:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b352:	2300      	movs	r3, #0
 800b354:	613b      	str	r3, [r7, #16]
 800b356:	e043      	b.n	800b3e0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	015a      	lsls	r2, r3, #5
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	4413      	add	r3, r2
 800b360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b36a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b36e:	d118      	bne.n	800b3a2 <USB_DevInit+0x132>
    {
      if (i == 0U)
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d10a      	bne.n	800b38c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	015a      	lsls	r2, r3, #5
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	4413      	add	r3, r2
 800b37e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b382:	461a      	mov	r2, r3
 800b384:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b388:	6013      	str	r3, [r2, #0]
 800b38a:	e013      	b.n	800b3b4 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	015a      	lsls	r2, r3, #5
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	4413      	add	r3, r2
 800b394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b398:	461a      	mov	r2, r3
 800b39a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b39e:	6013      	str	r3, [r2, #0]
 800b3a0:	e008      	b.n	800b3b4 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	015a      	lsls	r2, r3, #5
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	4413      	add	r3, r2
 800b3aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	015a      	lsls	r2, r3, #5
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	4413      	add	r3, r2
 800b3bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	015a      	lsls	r2, r3, #5
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b3d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	613b      	str	r3, [r7, #16]
 800b3e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d3b5      	bcc.n	800b358 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	613b      	str	r3, [r7, #16]
 800b3f0:	e043      	b.n	800b47a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	015a      	lsls	r2, r3, #5
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b404:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b408:	d118      	bne.n	800b43c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d10a      	bne.n	800b426 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	015a      	lsls	r2, r3, #5
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	4413      	add	r3, r2
 800b418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b41c:	461a      	mov	r2, r3
 800b41e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b422:	6013      	str	r3, [r2, #0]
 800b424:	e013      	b.n	800b44e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	015a      	lsls	r2, r3, #5
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	4413      	add	r3, r2
 800b42e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b432:	461a      	mov	r2, r3
 800b434:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b438:	6013      	str	r3, [r2, #0]
 800b43a:	e008      	b.n	800b44e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	015a      	lsls	r2, r3, #5
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	4413      	add	r3, r2
 800b444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b448:	461a      	mov	r2, r3
 800b44a:	2300      	movs	r3, #0
 800b44c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	015a      	lsls	r2, r3, #5
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	4413      	add	r3, r2
 800b456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b45a:	461a      	mov	r2, r3
 800b45c:	2300      	movs	r3, #0
 800b45e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	015a      	lsls	r2, r3, #5
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	4413      	add	r3, r2
 800b468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b46c:	461a      	mov	r2, r3
 800b46e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b472:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	3301      	adds	r3, #1
 800b478:	613b      	str	r3, [r7, #16]
 800b47a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b47e:	461a      	mov	r2, r3
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	4293      	cmp	r3, r2
 800b484:	d3b5      	bcc.n	800b3f2 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	68fa      	ldr	r2, [r7, #12]
 800b490:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b494:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b498:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2200      	movs	r2, #0
 800b49e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b4a6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	699b      	ldr	r3, [r3, #24]
 800b4ac:	f043 0210 	orr.w	r2, r3, #16
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	699a      	ldr	r2, [r3, #24]
 800b4b8:	4b10      	ldr	r3, [pc, #64]	@ (800b4fc <USB_DevInit+0x28c>)
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b4c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d005      	beq.n	800b4d4 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	699b      	ldr	r3, [r3, #24]
 800b4cc:	f043 0208 	orr.w	r2, r3, #8
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b4d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d107      	bne.n	800b4ec <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	699b      	ldr	r3, [r3, #24]
 800b4e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b4e4:	f043 0304 	orr.w	r3, r3, #4
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b4ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3718      	adds	r7, #24
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b4f8:	b004      	add	sp, #16
 800b4fa:	4770      	bx	lr
 800b4fc:	803c3800 	.word	0x803c3800

0800b500 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b50a:	2300      	movs	r3, #0
 800b50c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	3301      	adds	r3, #1
 800b512:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b51a:	d901      	bls.n	800b520 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b51c:	2303      	movs	r3, #3
 800b51e:	e01b      	b.n	800b558 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	691b      	ldr	r3, [r3, #16]
 800b524:	2b00      	cmp	r3, #0
 800b526:	daf2      	bge.n	800b50e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b528:	2300      	movs	r3, #0
 800b52a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	019b      	lsls	r3, r3, #6
 800b530:	f043 0220 	orr.w	r2, r3, #32
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	3301      	adds	r3, #1
 800b53c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b544:	d901      	bls.n	800b54a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b546:	2303      	movs	r3, #3
 800b548:	e006      	b.n	800b558 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	691b      	ldr	r3, [r3, #16]
 800b54e:	f003 0320 	and.w	r3, r3, #32
 800b552:	2b20      	cmp	r3, #32
 800b554:	d0f0      	beq.n	800b538 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3714      	adds	r7, #20
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b564:	b480      	push	{r7}
 800b566:	b085      	sub	sp, #20
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b56c:	2300      	movs	r3, #0
 800b56e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	3301      	adds	r3, #1
 800b574:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b57c:	d901      	bls.n	800b582 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b57e:	2303      	movs	r3, #3
 800b580:	e018      	b.n	800b5b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	691b      	ldr	r3, [r3, #16]
 800b586:	2b00      	cmp	r3, #0
 800b588:	daf2      	bge.n	800b570 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b58a:	2300      	movs	r3, #0
 800b58c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2210      	movs	r2, #16
 800b592:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	3301      	adds	r3, #1
 800b598:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b5a0:	d901      	bls.n	800b5a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b5a2:	2303      	movs	r3, #3
 800b5a4:	e006      	b.n	800b5b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	691b      	ldr	r3, [r3, #16]
 800b5aa:	f003 0310 	and.w	r3, r3, #16
 800b5ae:	2b10      	cmp	r3, #16
 800b5b0:	d0f0      	beq.n	800b594 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b5b2:	2300      	movs	r3, #0
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3714      	adds	r7, #20
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b085      	sub	sp, #20
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5d6:	681a      	ldr	r2, [r3, #0]
 800b5d8:	78fb      	ldrb	r3, [r7, #3]
 800b5da:	68f9      	ldr	r1, [r7, #12]
 800b5dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b5e4:	2300      	movs	r3, #0
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3714      	adds	r7, #20
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr

0800b5f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b5f2:	b480      	push	{r7}
 800b5f4:	b085      	sub	sp, #20
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	68fa      	ldr	r2, [r7, #12]
 800b608:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b60c:	f023 0303 	bic.w	r3, r3, #3
 800b610:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b618:	685b      	ldr	r3, [r3, #4]
 800b61a:	68fa      	ldr	r2, [r7, #12]
 800b61c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b620:	f043 0302 	orr.w	r3, r3, #2
 800b624:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b626:	2300      	movs	r3, #0
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3714      	adds	r7, #20
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr

0800b634 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b634:	b480      	push	{r7}
 800b636:	b083      	sub	sp, #12
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	695b      	ldr	r3, [r3, #20]
 800b640:	f003 0301 	and.w	r3, r3, #1
}
 800b644:	4618      	mov	r0, r3
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b650:	b480      	push	{r7}
 800b652:	b085      	sub	sp, #20
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b658:	2300      	movs	r3, #0
 800b65a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	3301      	adds	r3, #1
 800b660:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b668:	d901      	bls.n	800b66e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b66a:	2303      	movs	r3, #3
 800b66c:	e01b      	b.n	800b6a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	691b      	ldr	r3, [r3, #16]
 800b672:	2b00      	cmp	r3, #0
 800b674:	daf2      	bge.n	800b65c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b676:	2300      	movs	r3, #0
 800b678:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	691b      	ldr	r3, [r3, #16]
 800b67e:	f043 0201 	orr.w	r2, r3, #1
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	3301      	adds	r3, #1
 800b68a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b692:	d901      	bls.n	800b698 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b694:	2303      	movs	r3, #3
 800b696:	e006      	b.n	800b6a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	691b      	ldr	r3, [r3, #16]
 800b69c:	f003 0301 	and.w	r3, r3, #1
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d0f0      	beq.n	800b686 <USB_CoreReset+0x36>

  return HAL_OK;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3714      	adds	r7, #20
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr
	...

0800b6b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b6b8:	4904      	ldr	r1, [pc, #16]	@ (800b6cc <MX_FATFS_Init+0x18>)
 800b6ba:	4805      	ldr	r0, [pc, #20]	@ (800b6d0 <MX_FATFS_Init+0x1c>)
 800b6bc:	f003 fc9a 	bl	800eff4 <FATFS_LinkDriver>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	4b03      	ldr	r3, [pc, #12]	@ (800b6d4 <MX_FATFS_Init+0x20>)
 800b6c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b6c8:	bf00      	nop
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	20001408 	.word	0x20001408
 800b6d0:	20000080 	.word	0x20000080
 800b6d4:	20001404 	.word	0x20001404

0800b6d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b6dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 800b6f2:	79fb      	ldrb	r3, [r7, #7]
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f000 f9d7 	bl	800baa8 <USER_SPI_initialize>
 800b6fa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3708      	adds	r7, #8
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
 800b70a:	4603      	mov	r3, r0
 800b70c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800b70e:	79fb      	ldrb	r3, [r7, #7]
 800b710:	4618      	mov	r0, r3
 800b712:	f000 fab3 	bl	800bc7c <USER_SPI_status>
 800b716:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	60b9      	str	r1, [r7, #8]
 800b728:	607a      	str	r2, [r7, #4]
 800b72a:	603b      	str	r3, [r7, #0]
 800b72c:	4603      	mov	r3, r0
 800b72e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 800b730:	7bf8      	ldrb	r0, [r7, #15]
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	68b9      	ldr	r1, [r7, #8]
 800b738:	f000 fab6 	bl	800bca8 <USER_SPI_read>
 800b73c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b084      	sub	sp, #16
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	607a      	str	r2, [r7, #4]
 800b750:	603b      	str	r3, [r7, #0]
 800b752:	4603      	mov	r3, r0
 800b754:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 800b756:	7bf8      	ldrb	r0, [r7, #15]
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	68b9      	ldr	r1, [r7, #8]
 800b75e:	f000 fb09 	bl	800bd74 <USER_SPI_write>
 800b762:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800b764:	4618      	mov	r0, r3
 800b766:	3710      	adds	r7, #16
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b082      	sub	sp, #8
 800b770:	af00      	add	r7, sp, #0
 800b772:	4603      	mov	r3, r0
 800b774:	603a      	str	r2, [r7, #0]
 800b776:	71fb      	strb	r3, [r7, #7]
 800b778:	460b      	mov	r3, r1
 800b77a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 800b77c:	79b9      	ldrb	r1, [r7, #6]
 800b77e:	79fb      	ldrb	r3, [r7, #7]
 800b780:	683a      	ldr	r2, [r7, #0]
 800b782:	4618      	mov	r0, r3
 800b784:	f000 fb72 	bl	800be6c <USER_SPI_ioctl>
 800b788:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3708      	adds	r7, #8
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
	...

0800b794 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800b79c:	f7f8 ff2e 	bl	80045fc <HAL_GetTick>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	4a04      	ldr	r2, [pc, #16]	@ (800b7b4 <SPI_Timer_On+0x20>)
 800b7a4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800b7a6:	4a04      	ldr	r2, [pc, #16]	@ (800b7b8 <SPI_Timer_On+0x24>)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6013      	str	r3, [r2, #0]
}
 800b7ac:	bf00      	nop
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	20001410 	.word	0x20001410
 800b7b8:	20001414 	.word	0x20001414

0800b7bc <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800b7c0:	f7f8 ff1c 	bl	80045fc <HAL_GetTick>
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	4b06      	ldr	r3, [pc, #24]	@ (800b7e0 <SPI_Timer_Status+0x24>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	1ad2      	subs	r2, r2, r3
 800b7cc:	4b05      	ldr	r3, [pc, #20]	@ (800b7e4 <SPI_Timer_Status+0x28>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	bf34      	ite	cc
 800b7d4:	2301      	movcc	r3, #1
 800b7d6:	2300      	movcs	r3, #0
 800b7d8:	b2db      	uxtb	r3, r3
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	20001410 	.word	0x20001410
 800b7e4:	20001414 	.word	0x20001414

0800b7e8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b086      	sub	sp, #24
 800b7ec:	af02      	add	r7, sp, #8
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800b7f2:	f107 020f 	add.w	r2, r7, #15
 800b7f6:	1df9      	adds	r1, r7, #7
 800b7f8:	2332      	movs	r3, #50	@ 0x32
 800b7fa:	9300      	str	r3, [sp, #0]
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	4804      	ldr	r0, [pc, #16]	@ (800b810 <xchg_spi+0x28>)
 800b800:	f7fd fce7 	bl	80091d2 <HAL_SPI_TransmitReceive>
    return rxDat;
 800b804:	7bfb      	ldrb	r3, [r7, #15]
}
 800b806:	4618      	mov	r0, r3
 800b808:	3710      	adds	r7, #16
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop
 800b810:	20000b64 	.word	0x20000b64

0800b814 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800b814:	b590      	push	{r4, r7, lr}
 800b816:	b085      	sub	sp, #20
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800b81e:	2300      	movs	r3, #0
 800b820:	60fb      	str	r3, [r7, #12]
 800b822:	e00a      	b.n	800b83a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800b824:	687a      	ldr	r2, [r7, #4]
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	18d4      	adds	r4, r2, r3
 800b82a:	20ff      	movs	r0, #255	@ 0xff
 800b82c:	f7ff ffdc 	bl	800b7e8 <xchg_spi>
 800b830:	4603      	mov	r3, r0
 800b832:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	3301      	adds	r3, #1
 800b838:	60fb      	str	r3, [r7, #12]
 800b83a:	68fa      	ldr	r2, [r7, #12]
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	429a      	cmp	r2, r3
 800b840:	d3f0      	bcc.n	800b824 <rcvr_spi_multi+0x10>
	}
}
 800b842:	bf00      	nop
 800b844:	bf00      	nop
 800b846:	3714      	adds	r7, #20
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd90      	pop	{r4, r7, pc}

0800b84c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	b29a      	uxth	r2, r3
 800b85a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b85e:	6879      	ldr	r1, [r7, #4]
 800b860:	4803      	ldr	r0, [pc, #12]	@ (800b870 <xmit_spi_multi+0x24>)
 800b862:	f7fd fa08 	bl	8008c76 <HAL_SPI_Transmit>
}
 800b866:	bf00      	nop
 800b868:	3708      	adds	r7, #8
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	20000b64 	.word	0x20000b64

0800b874 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b086      	sub	sp, #24
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800b87c:	f7f8 febe 	bl	80045fc <HAL_GetTick>
 800b880:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800b886:	20ff      	movs	r0, #255	@ 0xff
 800b888:	f7ff ffae 	bl	800b7e8 <xchg_spi>
 800b88c:	4603      	mov	r3, r0
 800b88e:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800b890:	7bfb      	ldrb	r3, [r7, #15]
 800b892:	2bff      	cmp	r3, #255	@ 0xff
 800b894:	d007      	beq.n	800b8a6 <wait_ready+0x32>
 800b896:	f7f8 feb1 	bl	80045fc <HAL_GetTick>
 800b89a:	4602      	mov	r2, r0
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	1ad3      	subs	r3, r2, r3
 800b8a0:	693a      	ldr	r2, [r7, #16]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d8ef      	bhi.n	800b886 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800b8a6:	7bfb      	ldrb	r3, [r7, #15]
 800b8a8:	2bff      	cmp	r3, #255	@ 0xff
 800b8aa:	bf0c      	ite	eq
 800b8ac:	2301      	moveq	r3, #1
 800b8ae:	2300      	movne	r3, #0
 800b8b0:	b2db      	uxtb	r3, r3
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3718      	adds	r7, #24
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
	...

0800b8bc <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b8c6:	4804      	ldr	r0, [pc, #16]	@ (800b8d8 <despiselect+0x1c>)
 800b8c8:	f7fa fb0e 	bl	8005ee8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800b8cc:	20ff      	movs	r0, #255	@ 0xff
 800b8ce:	f7ff ff8b 	bl	800b7e8 <xchg_spi>

}
 800b8d2:	bf00      	nop
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	48000400 	.word	0x48000400

0800b8dc <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b8e6:	480a      	ldr	r0, [pc, #40]	@ (800b910 <spiselect+0x34>)
 800b8e8:	f7fa fafe 	bl	8005ee8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800b8ec:	20ff      	movs	r0, #255	@ 0xff
 800b8ee:	f7ff ff7b 	bl	800b7e8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800b8f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b8f6:	f7ff ffbd 	bl	800b874 <wait_ready>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d001      	beq.n	800b904 <spiselect+0x28>
 800b900:	2301      	movs	r3, #1
 800b902:	e002      	b.n	800b90a <spiselect+0x2e>

	despiselect();
 800b904:	f7ff ffda 	bl	800b8bc <despiselect>
	return 0;	/* Timeout */
 800b908:	2300      	movs	r3, #0
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop
 800b910:	48000400 	.word	0x48000400

0800b914 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800b91e:	20c8      	movs	r0, #200	@ 0xc8
 800b920:	f7ff ff38 	bl	800b794 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800b924:	20ff      	movs	r0, #255	@ 0xff
 800b926:	f7ff ff5f 	bl	800b7e8 <xchg_spi>
 800b92a:	4603      	mov	r3, r0
 800b92c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800b92e:	7bfb      	ldrb	r3, [r7, #15]
 800b930:	2bff      	cmp	r3, #255	@ 0xff
 800b932:	d104      	bne.n	800b93e <rcvr_datablock+0x2a>
 800b934:	f7ff ff42 	bl	800b7bc <SPI_Timer_Status>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d1f2      	bne.n	800b924 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800b93e:	7bfb      	ldrb	r3, [r7, #15]
 800b940:	2bfe      	cmp	r3, #254	@ 0xfe
 800b942:	d001      	beq.n	800b948 <rcvr_datablock+0x34>
 800b944:	2300      	movs	r3, #0
 800b946:	e00a      	b.n	800b95e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800b948:	6839      	ldr	r1, [r7, #0]
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f7ff ff62 	bl	800b814 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800b950:	20ff      	movs	r0, #255	@ 0xff
 800b952:	f7ff ff49 	bl	800b7e8 <xchg_spi>
 800b956:	20ff      	movs	r0, #255	@ 0xff
 800b958:	f7ff ff46 	bl	800b7e8 <xchg_spi>

	return 1;						/* Function succeeded */
 800b95c:	2301      	movs	r3, #1
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}

0800b966 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800b966:	b580      	push	{r7, lr}
 800b968:	b084      	sub	sp, #16
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
 800b96e:	460b      	mov	r3, r1
 800b970:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800b972:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b976:	f7ff ff7d 	bl	800b874 <wait_ready>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d101      	bne.n	800b984 <xmit_datablock+0x1e>
 800b980:	2300      	movs	r3, #0
 800b982:	e01e      	b.n	800b9c2 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800b984:	78fb      	ldrb	r3, [r7, #3]
 800b986:	4618      	mov	r0, r3
 800b988:	f7ff ff2e 	bl	800b7e8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800b98c:	78fb      	ldrb	r3, [r7, #3]
 800b98e:	2bfd      	cmp	r3, #253	@ 0xfd
 800b990:	d016      	beq.n	800b9c0 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800b992:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f7ff ff58 	bl	800b84c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800b99c:	20ff      	movs	r0, #255	@ 0xff
 800b99e:	f7ff ff23 	bl	800b7e8 <xchg_spi>
 800b9a2:	20ff      	movs	r0, #255	@ 0xff
 800b9a4:	f7ff ff20 	bl	800b7e8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800b9a8:	20ff      	movs	r0, #255	@ 0xff
 800b9aa:	f7ff ff1d 	bl	800b7e8 <xchg_spi>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800b9b2:	7bfb      	ldrb	r3, [r7, #15]
 800b9b4:	f003 031f 	and.w	r3, r3, #31
 800b9b8:	2b05      	cmp	r3, #5
 800b9ba:	d001      	beq.n	800b9c0 <xmit_datablock+0x5a>
 800b9bc:	2300      	movs	r3, #0
 800b9be:	e000      	b.n	800b9c2 <xmit_datablock+0x5c>
	}
	return 1;
 800b9c0:	2301      	movs	r3, #1
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3710      	adds	r7, #16
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}

0800b9ca <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800b9ca:	b580      	push	{r7, lr}
 800b9cc:	b084      	sub	sp, #16
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	6039      	str	r1, [r7, #0]
 800b9d4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800b9d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	da0e      	bge.n	800b9fc <send_cmd+0x32>
		cmd &= 0x7F;
 800b9de:	79fb      	ldrb	r3, [r7, #7]
 800b9e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9e4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800b9e6:	2100      	movs	r1, #0
 800b9e8:	2037      	movs	r0, #55	@ 0x37
 800b9ea:	f7ff ffee 	bl	800b9ca <send_cmd>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800b9f2:	7bbb      	ldrb	r3, [r7, #14]
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d901      	bls.n	800b9fc <send_cmd+0x32>
 800b9f8:	7bbb      	ldrb	r3, [r7, #14]
 800b9fa:	e051      	b.n	800baa0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800b9fc:	79fb      	ldrb	r3, [r7, #7]
 800b9fe:	2b0c      	cmp	r3, #12
 800ba00:	d008      	beq.n	800ba14 <send_cmd+0x4a>
		despiselect();
 800ba02:	f7ff ff5b 	bl	800b8bc <despiselect>
		if (!spiselect()) return 0xFF;
 800ba06:	f7ff ff69 	bl	800b8dc <spiselect>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d101      	bne.n	800ba14 <send_cmd+0x4a>
 800ba10:	23ff      	movs	r3, #255	@ 0xff
 800ba12:	e045      	b.n	800baa0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800ba14:	79fb      	ldrb	r3, [r7, #7]
 800ba16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7ff fee3 	bl	800b7e8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	0e1b      	lsrs	r3, r3, #24
 800ba26:	b2db      	uxtb	r3, r3
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7ff fedd 	bl	800b7e8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	0c1b      	lsrs	r3, r3, #16
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7ff fed7 	bl	800b7e8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	0a1b      	lsrs	r3, r3, #8
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7ff fed1 	bl	800b7e8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7ff fecc 	bl	800b7e8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800ba50:	2301      	movs	r3, #1
 800ba52:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800ba54:	79fb      	ldrb	r3, [r7, #7]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d101      	bne.n	800ba5e <send_cmd+0x94>
 800ba5a:	2395      	movs	r3, #149	@ 0x95
 800ba5c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800ba5e:	79fb      	ldrb	r3, [r7, #7]
 800ba60:	2b08      	cmp	r3, #8
 800ba62:	d101      	bne.n	800ba68 <send_cmd+0x9e>
 800ba64:	2387      	movs	r3, #135	@ 0x87
 800ba66:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800ba68:	7bfb      	ldrb	r3, [r7, #15]
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7ff febc 	bl	800b7e8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800ba70:	79fb      	ldrb	r3, [r7, #7]
 800ba72:	2b0c      	cmp	r3, #12
 800ba74:	d102      	bne.n	800ba7c <send_cmd+0xb2>
 800ba76:	20ff      	movs	r0, #255	@ 0xff
 800ba78:	f7ff feb6 	bl	800b7e8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800ba7c:	230a      	movs	r3, #10
 800ba7e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800ba80:	20ff      	movs	r0, #255	@ 0xff
 800ba82:	f7ff feb1 	bl	800b7e8 <xchg_spi>
 800ba86:	4603      	mov	r3, r0
 800ba88:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800ba8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	da05      	bge.n	800ba9e <send_cmd+0xd4>
 800ba92:	7bfb      	ldrb	r3, [r7, #15]
 800ba94:	3b01      	subs	r3, #1
 800ba96:	73fb      	strb	r3, [r7, #15]
 800ba98:	7bfb      	ldrb	r3, [r7, #15]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d1f0      	bne.n	800ba80 <send_cmd+0xb6>

	return res;							/* Return received response */
 800ba9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800baa8:	b590      	push	{r4, r7, lr}
 800baaa:	b085      	sub	sp, #20
 800baac:	af00      	add	r7, sp, #0
 800baae:	4603      	mov	r3, r0
 800bab0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800bab2:	79fb      	ldrb	r3, [r7, #7]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d001      	beq.n	800babc <USER_SPI_initialize+0x14>
 800bab8:	2301      	movs	r3, #1
 800baba:	e0d4      	b.n	800bc66 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800babc:	4b6c      	ldr	r3, [pc, #432]	@ (800bc70 <USER_SPI_initialize+0x1c8>)
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	f003 0302 	and.w	r3, r3, #2
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d003      	beq.n	800bad2 <USER_SPI_initialize+0x2a>
 800baca:	4b69      	ldr	r3, [pc, #420]	@ (800bc70 <USER_SPI_initialize+0x1c8>)
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	e0c9      	b.n	800bc66 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800bad2:	4b68      	ldr	r3, [pc, #416]	@ (800bc74 <USER_SPI_initialize+0x1cc>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	4b66      	ldr	r3, [pc, #408]	@ (800bc74 <USER_SPI_initialize+0x1cc>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f042 0238 	orr.w	r2, r2, #56	@ 0x38
 800bae0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800bae2:	230a      	movs	r3, #10
 800bae4:	73fb      	strb	r3, [r7, #15]
 800bae6:	e005      	b.n	800baf4 <USER_SPI_initialize+0x4c>
 800bae8:	20ff      	movs	r0, #255	@ 0xff
 800baea:	f7ff fe7d 	bl	800b7e8 <xchg_spi>
 800baee:	7bfb      	ldrb	r3, [r7, #15]
 800baf0:	3b01      	subs	r3, #1
 800baf2:	73fb      	strb	r3, [r7, #15]
 800baf4:	7bfb      	ldrb	r3, [r7, #15]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d1f6      	bne.n	800bae8 <USER_SPI_initialize+0x40>

	ty = 0;
 800bafa:	2300      	movs	r3, #0
 800bafc:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800bafe:	2100      	movs	r1, #0
 800bb00:	2000      	movs	r0, #0
 800bb02:	f7ff ff62 	bl	800b9ca <send_cmd>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	f040 808b 	bne.w	800bc24 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800bb0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800bb12:	f7ff fe3f 	bl	800b794 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800bb16:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800bb1a:	2008      	movs	r0, #8
 800bb1c:	f7ff ff55 	bl	800b9ca <send_cmd>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d151      	bne.n	800bbca <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800bb26:	2300      	movs	r3, #0
 800bb28:	73fb      	strb	r3, [r7, #15]
 800bb2a:	e00d      	b.n	800bb48 <USER_SPI_initialize+0xa0>
 800bb2c:	7bfc      	ldrb	r4, [r7, #15]
 800bb2e:	20ff      	movs	r0, #255	@ 0xff
 800bb30:	f7ff fe5a 	bl	800b7e8 <xchg_spi>
 800bb34:	4603      	mov	r3, r0
 800bb36:	461a      	mov	r2, r3
 800bb38:	f104 0310 	add.w	r3, r4, #16
 800bb3c:	443b      	add	r3, r7
 800bb3e:	f803 2c08 	strb.w	r2, [r3, #-8]
 800bb42:	7bfb      	ldrb	r3, [r7, #15]
 800bb44:	3301      	adds	r3, #1
 800bb46:	73fb      	strb	r3, [r7, #15]
 800bb48:	7bfb      	ldrb	r3, [r7, #15]
 800bb4a:	2b03      	cmp	r3, #3
 800bb4c:	d9ee      	bls.n	800bb2c <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800bb4e:	7abb      	ldrb	r3, [r7, #10]
 800bb50:	2b01      	cmp	r3, #1
 800bb52:	d167      	bne.n	800bc24 <USER_SPI_initialize+0x17c>
 800bb54:	7afb      	ldrb	r3, [r7, #11]
 800bb56:	2baa      	cmp	r3, #170	@ 0xaa
 800bb58:	d164      	bne.n	800bc24 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800bb5a:	bf00      	nop
 800bb5c:	f7ff fe2e 	bl	800b7bc <SPI_Timer_Status>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d007      	beq.n	800bb76 <USER_SPI_initialize+0xce>
 800bb66:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800bb6a:	20a9      	movs	r0, #169	@ 0xa9
 800bb6c:	f7ff ff2d 	bl	800b9ca <send_cmd>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d1f2      	bne.n	800bb5c <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800bb76:	f7ff fe21 	bl	800b7bc <SPI_Timer_Status>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d051      	beq.n	800bc24 <USER_SPI_initialize+0x17c>
 800bb80:	2100      	movs	r1, #0
 800bb82:	203a      	movs	r0, #58	@ 0x3a
 800bb84:	f7ff ff21 	bl	800b9ca <send_cmd>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d14a      	bne.n	800bc24 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800bb8e:	2300      	movs	r3, #0
 800bb90:	73fb      	strb	r3, [r7, #15]
 800bb92:	e00d      	b.n	800bbb0 <USER_SPI_initialize+0x108>
 800bb94:	7bfc      	ldrb	r4, [r7, #15]
 800bb96:	20ff      	movs	r0, #255	@ 0xff
 800bb98:	f7ff fe26 	bl	800b7e8 <xchg_spi>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	461a      	mov	r2, r3
 800bba0:	f104 0310 	add.w	r3, r4, #16
 800bba4:	443b      	add	r3, r7
 800bba6:	f803 2c08 	strb.w	r2, [r3, #-8]
 800bbaa:	7bfb      	ldrb	r3, [r7, #15]
 800bbac:	3301      	adds	r3, #1
 800bbae:	73fb      	strb	r3, [r7, #15]
 800bbb0:	7bfb      	ldrb	r3, [r7, #15]
 800bbb2:	2b03      	cmp	r3, #3
 800bbb4:	d9ee      	bls.n	800bb94 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800bbb6:	7a3b      	ldrb	r3, [r7, #8]
 800bbb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d001      	beq.n	800bbc4 <USER_SPI_initialize+0x11c>
 800bbc0:	230c      	movs	r3, #12
 800bbc2:	e000      	b.n	800bbc6 <USER_SPI_initialize+0x11e>
 800bbc4:	2304      	movs	r3, #4
 800bbc6:	737b      	strb	r3, [r7, #13]
 800bbc8:	e02c      	b.n	800bc24 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800bbca:	2100      	movs	r1, #0
 800bbcc:	20a9      	movs	r0, #169	@ 0xa9
 800bbce:	f7ff fefc 	bl	800b9ca <send_cmd>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d804      	bhi.n	800bbe2 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800bbd8:	2302      	movs	r3, #2
 800bbda:	737b      	strb	r3, [r7, #13]
 800bbdc:	23a9      	movs	r3, #169	@ 0xa9
 800bbde:	73bb      	strb	r3, [r7, #14]
 800bbe0:	e003      	b.n	800bbea <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	737b      	strb	r3, [r7, #13]
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800bbea:	bf00      	nop
 800bbec:	f7ff fde6 	bl	800b7bc <SPI_Timer_Status>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d007      	beq.n	800bc06 <USER_SPI_initialize+0x15e>
 800bbf6:	7bbb      	ldrb	r3, [r7, #14]
 800bbf8:	2100      	movs	r1, #0
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7ff fee5 	bl	800b9ca <send_cmd>
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d1f2      	bne.n	800bbec <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800bc06:	f7ff fdd9 	bl	800b7bc <SPI_Timer_Status>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d007      	beq.n	800bc20 <USER_SPI_initialize+0x178>
 800bc10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bc14:	2010      	movs	r0, #16
 800bc16:	f7ff fed8 	bl	800b9ca <send_cmd>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d001      	beq.n	800bc24 <USER_SPI_initialize+0x17c>
				ty = 0;
 800bc20:	2300      	movs	r3, #0
 800bc22:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800bc24:	4a14      	ldr	r2, [pc, #80]	@ (800bc78 <USER_SPI_initialize+0x1d0>)
 800bc26:	7b7b      	ldrb	r3, [r7, #13]
 800bc28:	7013      	strb	r3, [r2, #0]
	despiselect();
 800bc2a:	f7ff fe47 	bl	800b8bc <despiselect>

	if (ty) {			/* OK */
 800bc2e:	7b7b      	ldrb	r3, [r7, #13]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d012      	beq.n	800bc5a <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800bc34:	4b0f      	ldr	r3, [pc, #60]	@ (800bc74 <USER_SPI_initialize+0x1cc>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800bc3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bc74 <USER_SPI_initialize+0x1cc>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f042 0210 	orr.w	r2, r2, #16
 800bc46:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800bc48:	4b09      	ldr	r3, [pc, #36]	@ (800bc70 <USER_SPI_initialize+0x1c8>)
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	f023 0301 	bic.w	r3, r3, #1
 800bc52:	b2da      	uxtb	r2, r3
 800bc54:	4b06      	ldr	r3, [pc, #24]	@ (800bc70 <USER_SPI_initialize+0x1c8>)
 800bc56:	701a      	strb	r2, [r3, #0]
 800bc58:	e002      	b.n	800bc60 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800bc5a:	4b05      	ldr	r3, [pc, #20]	@ (800bc70 <USER_SPI_initialize+0x1c8>)
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800bc60:	4b03      	ldr	r3, [pc, #12]	@ (800bc70 <USER_SPI_initialize+0x1c8>)
 800bc62:	781b      	ldrb	r3, [r3, #0]
 800bc64:	b2db      	uxtb	r3, r3
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3714      	adds	r7, #20
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd90      	pop	{r4, r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	20000094 	.word	0x20000094
 800bc74:	20000b64 	.word	0x20000b64
 800bc78:	2000140c 	.word	0x2000140c

0800bc7c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b083      	sub	sp, #12
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	4603      	mov	r3, r0
 800bc84:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800bc86:	79fb      	ldrb	r3, [r7, #7]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d001      	beq.n	800bc90 <USER_SPI_status+0x14>
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	e002      	b.n	800bc96 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800bc90:	4b04      	ldr	r3, [pc, #16]	@ (800bca4 <USER_SPI_status+0x28>)
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	b2db      	uxtb	r3, r3
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	370c      	adds	r7, #12
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr
 800bca2:	bf00      	nop
 800bca4:	20000094 	.word	0x20000094

0800bca8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b084      	sub	sp, #16
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	60b9      	str	r1, [r7, #8]
 800bcb0:	607a      	str	r2, [r7, #4]
 800bcb2:	603b      	str	r3, [r7, #0]
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800bcb8:	7bfb      	ldrb	r3, [r7, #15]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d102      	bne.n	800bcc4 <USER_SPI_read+0x1c>
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d101      	bne.n	800bcc8 <USER_SPI_read+0x20>
 800bcc4:	2304      	movs	r3, #4
 800bcc6:	e04d      	b.n	800bd64 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800bcc8:	4b28      	ldr	r3, [pc, #160]	@ (800bd6c <USER_SPI_read+0xc4>)
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	f003 0301 	and.w	r3, r3, #1
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d001      	beq.n	800bcda <USER_SPI_read+0x32>
 800bcd6:	2303      	movs	r3, #3
 800bcd8:	e044      	b.n	800bd64 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800bcda:	4b25      	ldr	r3, [pc, #148]	@ (800bd70 <USER_SPI_read+0xc8>)
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	f003 0308 	and.w	r3, r3, #8
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d102      	bne.n	800bcec <USER_SPI_read+0x44>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	025b      	lsls	r3, r3, #9
 800bcea:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d111      	bne.n	800bd16 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800bcf2:	6879      	ldr	r1, [r7, #4]
 800bcf4:	2011      	movs	r0, #17
 800bcf6:	f7ff fe68 	bl	800b9ca <send_cmd>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d129      	bne.n	800bd54 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800bd00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bd04:	68b8      	ldr	r0, [r7, #8]
 800bd06:	f7ff fe05 	bl	800b914 <rcvr_datablock>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d021      	beq.n	800bd54 <USER_SPI_read+0xac>
			count = 0;
 800bd10:	2300      	movs	r3, #0
 800bd12:	603b      	str	r3, [r7, #0]
 800bd14:	e01e      	b.n	800bd54 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800bd16:	6879      	ldr	r1, [r7, #4]
 800bd18:	2012      	movs	r0, #18
 800bd1a:	f7ff fe56 	bl	800b9ca <send_cmd>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d117      	bne.n	800bd54 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800bd24:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bd28:	68b8      	ldr	r0, [r7, #8]
 800bd2a:	f7ff fdf3 	bl	800b914 <rcvr_datablock>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d00a      	beq.n	800bd4a <USER_SPI_read+0xa2>
				buff += 512;
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800bd3a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	603b      	str	r3, [r7, #0]
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d1ed      	bne.n	800bd24 <USER_SPI_read+0x7c>
 800bd48:	e000      	b.n	800bd4c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800bd4a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800bd4c:	2100      	movs	r1, #0
 800bd4e:	200c      	movs	r0, #12
 800bd50:	f7ff fe3b 	bl	800b9ca <send_cmd>
		}
	}
	despiselect();
 800bd54:	f7ff fdb2 	bl	800b8bc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	bf14      	ite	ne
 800bd5e:	2301      	movne	r3, #1
 800bd60:	2300      	moveq	r3, #0
 800bd62:	b2db      	uxtb	r3, r3
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3710      	adds	r7, #16
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	20000094 	.word	0x20000094
 800bd70:	2000140c 	.word	0x2000140c

0800bd74 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	60b9      	str	r1, [r7, #8]
 800bd7c:	607a      	str	r2, [r7, #4]
 800bd7e:	603b      	str	r3, [r7, #0]
 800bd80:	4603      	mov	r3, r0
 800bd82:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800bd84:	7bfb      	ldrb	r3, [r7, #15]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d102      	bne.n	800bd90 <USER_SPI_write+0x1c>
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d101      	bne.n	800bd94 <USER_SPI_write+0x20>
 800bd90:	2304      	movs	r3, #4
 800bd92:	e063      	b.n	800be5c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800bd94:	4b33      	ldr	r3, [pc, #204]	@ (800be64 <USER_SPI_write+0xf0>)
 800bd96:	781b      	ldrb	r3, [r3, #0]
 800bd98:	b2db      	uxtb	r3, r3
 800bd9a:	f003 0301 	and.w	r3, r3, #1
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d001      	beq.n	800bda6 <USER_SPI_write+0x32>
 800bda2:	2303      	movs	r3, #3
 800bda4:	e05a      	b.n	800be5c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800bda6:	4b2f      	ldr	r3, [pc, #188]	@ (800be64 <USER_SPI_write+0xf0>)
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	f003 0304 	and.w	r3, r3, #4
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d001      	beq.n	800bdb8 <USER_SPI_write+0x44>
 800bdb4:	2302      	movs	r3, #2
 800bdb6:	e051      	b.n	800be5c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800bdb8:	4b2b      	ldr	r3, [pc, #172]	@ (800be68 <USER_SPI_write+0xf4>)
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	f003 0308 	and.w	r3, r3, #8
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d102      	bne.n	800bdca <USER_SPI_write+0x56>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	025b      	lsls	r3, r3, #9
 800bdc8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d110      	bne.n	800bdf2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800bdd0:	6879      	ldr	r1, [r7, #4]
 800bdd2:	2018      	movs	r0, #24
 800bdd4:	f7ff fdf9 	bl	800b9ca <send_cmd>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d136      	bne.n	800be4c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800bdde:	21fe      	movs	r1, #254	@ 0xfe
 800bde0:	68b8      	ldr	r0, [r7, #8]
 800bde2:	f7ff fdc0 	bl	800b966 <xmit_datablock>
 800bde6:	4603      	mov	r3, r0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d02f      	beq.n	800be4c <USER_SPI_write+0xd8>
			count = 0;
 800bdec:	2300      	movs	r3, #0
 800bdee:	603b      	str	r3, [r7, #0]
 800bdf0:	e02c      	b.n	800be4c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800bdf2:	4b1d      	ldr	r3, [pc, #116]	@ (800be68 <USER_SPI_write+0xf4>)
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	f003 0306 	and.w	r3, r3, #6
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d003      	beq.n	800be06 <USER_SPI_write+0x92>
 800bdfe:	6839      	ldr	r1, [r7, #0]
 800be00:	2097      	movs	r0, #151	@ 0x97
 800be02:	f7ff fde2 	bl	800b9ca <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800be06:	6879      	ldr	r1, [r7, #4]
 800be08:	2019      	movs	r0, #25
 800be0a:	f7ff fdde 	bl	800b9ca <send_cmd>
 800be0e:	4603      	mov	r3, r0
 800be10:	2b00      	cmp	r3, #0
 800be12:	d11b      	bne.n	800be4c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800be14:	21fc      	movs	r1, #252	@ 0xfc
 800be16:	68b8      	ldr	r0, [r7, #8]
 800be18:	f7ff fda5 	bl	800b966 <xmit_datablock>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d00a      	beq.n	800be38 <USER_SPI_write+0xc4>
				buff += 512;
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800be28:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	3b01      	subs	r3, #1
 800be2e:	603b      	str	r3, [r7, #0]
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d1ee      	bne.n	800be14 <USER_SPI_write+0xa0>
 800be36:	e000      	b.n	800be3a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800be38:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800be3a:	21fd      	movs	r1, #253	@ 0xfd
 800be3c:	2000      	movs	r0, #0
 800be3e:	f7ff fd92 	bl	800b966 <xmit_datablock>
 800be42:	4603      	mov	r3, r0
 800be44:	2b00      	cmp	r3, #0
 800be46:	d101      	bne.n	800be4c <USER_SPI_write+0xd8>
 800be48:	2301      	movs	r3, #1
 800be4a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800be4c:	f7ff fd36 	bl	800b8bc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	2b00      	cmp	r3, #0
 800be54:	bf14      	ite	ne
 800be56:	2301      	movne	r3, #1
 800be58:	2300      	moveq	r3, #0
 800be5a:	b2db      	uxtb	r3, r3
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3710      	adds	r7, #16
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}
 800be64:	20000094 	.word	0x20000094
 800be68:	2000140c 	.word	0x2000140c

0800be6c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b08c      	sub	sp, #48	@ 0x30
 800be70:	af00      	add	r7, sp, #0
 800be72:	4603      	mov	r3, r0
 800be74:	603a      	str	r2, [r7, #0]
 800be76:	71fb      	strb	r3, [r7, #7]
 800be78:	460b      	mov	r3, r1
 800be7a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800be7c:	79fb      	ldrb	r3, [r7, #7]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d001      	beq.n	800be86 <USER_SPI_ioctl+0x1a>
 800be82:	2304      	movs	r3, #4
 800be84:	e15a      	b.n	800c13c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800be86:	4baf      	ldr	r3, [pc, #700]	@ (800c144 <USER_SPI_ioctl+0x2d8>)
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	b2db      	uxtb	r3, r3
 800be8c:	f003 0301 	and.w	r3, r3, #1
 800be90:	2b00      	cmp	r3, #0
 800be92:	d001      	beq.n	800be98 <USER_SPI_ioctl+0x2c>
 800be94:	2303      	movs	r3, #3
 800be96:	e151      	b.n	800c13c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800be98:	2301      	movs	r3, #1
 800be9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800be9e:	79bb      	ldrb	r3, [r7, #6]
 800bea0:	2b04      	cmp	r3, #4
 800bea2:	f200 8136 	bhi.w	800c112 <USER_SPI_ioctl+0x2a6>
 800bea6:	a201      	add	r2, pc, #4	@ (adr r2, 800beac <USER_SPI_ioctl+0x40>)
 800bea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beac:	0800bec1 	.word	0x0800bec1
 800beb0:	0800bed5 	.word	0x0800bed5
 800beb4:	0800c113 	.word	0x0800c113
 800beb8:	0800bf81 	.word	0x0800bf81
 800bebc:	0800c077 	.word	0x0800c077
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800bec0:	f7ff fd0c 	bl	800b8dc <spiselect>
 800bec4:	4603      	mov	r3, r0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	f000 8127 	beq.w	800c11a <USER_SPI_ioctl+0x2ae>
 800becc:	2300      	movs	r3, #0
 800bece:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800bed2:	e122      	b.n	800c11a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800bed4:	2100      	movs	r1, #0
 800bed6:	2009      	movs	r0, #9
 800bed8:	f7ff fd77 	bl	800b9ca <send_cmd>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	f040 811d 	bne.w	800c11e <USER_SPI_ioctl+0x2b2>
 800bee4:	f107 030c 	add.w	r3, r7, #12
 800bee8:	2110      	movs	r1, #16
 800beea:	4618      	mov	r0, r3
 800beec:	f7ff fd12 	bl	800b914 <rcvr_datablock>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	f000 8113 	beq.w	800c11e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800bef8:	7b3b      	ldrb	r3, [r7, #12]
 800befa:	099b      	lsrs	r3, r3, #6
 800befc:	b2db      	uxtb	r3, r3
 800befe:	2b01      	cmp	r3, #1
 800bf00:	d111      	bne.n	800bf26 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800bf02:	7d7b      	ldrb	r3, [r7, #21]
 800bf04:	461a      	mov	r2, r3
 800bf06:	7d3b      	ldrb	r3, [r7, #20]
 800bf08:	021b      	lsls	r3, r3, #8
 800bf0a:	4413      	add	r3, r2
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	7cfb      	ldrb	r3, [r7, #19]
 800bf10:	041b      	lsls	r3, r3, #16
 800bf12:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800bf16:	4413      	add	r3, r2
 800bf18:	3301      	adds	r3, #1
 800bf1a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800bf1c:	69fb      	ldr	r3, [r7, #28]
 800bf1e:	029a      	lsls	r2, r3, #10
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	601a      	str	r2, [r3, #0]
 800bf24:	e028      	b.n	800bf78 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800bf26:	7c7b      	ldrb	r3, [r7, #17]
 800bf28:	f003 030f 	and.w	r3, r3, #15
 800bf2c:	b2da      	uxtb	r2, r3
 800bf2e:	7dbb      	ldrb	r3, [r7, #22]
 800bf30:	09db      	lsrs	r3, r3, #7
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	4413      	add	r3, r2
 800bf36:	b2da      	uxtb	r2, r3
 800bf38:	7d7b      	ldrb	r3, [r7, #21]
 800bf3a:	005b      	lsls	r3, r3, #1
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	f003 0306 	and.w	r3, r3, #6
 800bf42:	b2db      	uxtb	r3, r3
 800bf44:	4413      	add	r3, r2
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	3302      	adds	r3, #2
 800bf4a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800bf4e:	7d3b      	ldrb	r3, [r7, #20]
 800bf50:	099b      	lsrs	r3, r3, #6
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	461a      	mov	r2, r3
 800bf56:	7cfb      	ldrb	r3, [r7, #19]
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	441a      	add	r2, r3
 800bf5c:	7cbb      	ldrb	r3, [r7, #18]
 800bf5e:	029b      	lsls	r3, r3, #10
 800bf60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bf64:	4413      	add	r3, r2
 800bf66:	3301      	adds	r3, #1
 800bf68:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800bf6a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bf6e:	3b09      	subs	r3, #9
 800bf70:	69fa      	ldr	r2, [r7, #28]
 800bf72:	409a      	lsls	r2, r3
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800bf7e:	e0ce      	b.n	800c11e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800bf80:	4b71      	ldr	r3, [pc, #452]	@ (800c148 <USER_SPI_ioctl+0x2dc>)
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	f003 0304 	and.w	r3, r3, #4
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d031      	beq.n	800bff0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800bf8c:	2100      	movs	r1, #0
 800bf8e:	208d      	movs	r0, #141	@ 0x8d
 800bf90:	f7ff fd1b 	bl	800b9ca <send_cmd>
 800bf94:	4603      	mov	r3, r0
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	f040 80c3 	bne.w	800c122 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800bf9c:	20ff      	movs	r0, #255	@ 0xff
 800bf9e:	f7ff fc23 	bl	800b7e8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800bfa2:	f107 030c 	add.w	r3, r7, #12
 800bfa6:	2110      	movs	r1, #16
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f7ff fcb3 	bl	800b914 <rcvr_datablock>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	f000 80b6 	beq.w	800c122 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800bfb6:	2330      	movs	r3, #48	@ 0x30
 800bfb8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800bfbc:	e007      	b.n	800bfce <USER_SPI_ioctl+0x162>
 800bfbe:	20ff      	movs	r0, #255	@ 0xff
 800bfc0:	f7ff fc12 	bl	800b7e8 <xchg_spi>
 800bfc4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bfc8:	3b01      	subs	r3, #1
 800bfca:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800bfce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d1f3      	bne.n	800bfbe <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800bfd6:	7dbb      	ldrb	r3, [r7, #22]
 800bfd8:	091b      	lsrs	r3, r3, #4
 800bfda:	b2db      	uxtb	r3, r3
 800bfdc:	461a      	mov	r2, r3
 800bfde:	2310      	movs	r3, #16
 800bfe0:	fa03 f202 	lsl.w	r2, r3, r2
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800bfee:	e098      	b.n	800c122 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800bff0:	2100      	movs	r1, #0
 800bff2:	2009      	movs	r0, #9
 800bff4:	f7ff fce9 	bl	800b9ca <send_cmd>
 800bff8:	4603      	mov	r3, r0
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f040 8091 	bne.w	800c122 <USER_SPI_ioctl+0x2b6>
 800c000:	f107 030c 	add.w	r3, r7, #12
 800c004:	2110      	movs	r1, #16
 800c006:	4618      	mov	r0, r3
 800c008:	f7ff fc84 	bl	800b914 <rcvr_datablock>
 800c00c:	4603      	mov	r3, r0
 800c00e:	2b00      	cmp	r3, #0
 800c010:	f000 8087 	beq.w	800c122 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800c014:	4b4c      	ldr	r3, [pc, #304]	@ (800c148 <USER_SPI_ioctl+0x2dc>)
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	f003 0302 	and.w	r3, r3, #2
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d012      	beq.n	800c046 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800c020:	7dbb      	ldrb	r3, [r7, #22]
 800c022:	005b      	lsls	r3, r3, #1
 800c024:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800c028:	7dfa      	ldrb	r2, [r7, #23]
 800c02a:	09d2      	lsrs	r2, r2, #7
 800c02c:	b2d2      	uxtb	r2, r2
 800c02e:	4413      	add	r3, r2
 800c030:	1c5a      	adds	r2, r3, #1
 800c032:	7e7b      	ldrb	r3, [r7, #25]
 800c034:	099b      	lsrs	r3, r3, #6
 800c036:	b2db      	uxtb	r3, r3
 800c038:	3b01      	subs	r3, #1
 800c03a:	fa02 f303 	lsl.w	r3, r2, r3
 800c03e:	461a      	mov	r2, r3
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	601a      	str	r2, [r3, #0]
 800c044:	e013      	b.n	800c06e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800c046:	7dbb      	ldrb	r3, [r7, #22]
 800c048:	109b      	asrs	r3, r3, #2
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	f003 031f 	and.w	r3, r3, #31
 800c050:	3301      	adds	r3, #1
 800c052:	7dfa      	ldrb	r2, [r7, #23]
 800c054:	00d2      	lsls	r2, r2, #3
 800c056:	f002 0218 	and.w	r2, r2, #24
 800c05a:	7df9      	ldrb	r1, [r7, #23]
 800c05c:	0949      	lsrs	r1, r1, #5
 800c05e:	b2c9      	uxtb	r1, r1
 800c060:	440a      	add	r2, r1
 800c062:	3201      	adds	r2, #1
 800c064:	fb02 f303 	mul.w	r3, r2, r3
 800c068:	461a      	mov	r2, r3
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800c06e:	2300      	movs	r3, #0
 800c070:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800c074:	e055      	b.n	800c122 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800c076:	4b34      	ldr	r3, [pc, #208]	@ (800c148 <USER_SPI_ioctl+0x2dc>)
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	f003 0306 	and.w	r3, r3, #6
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d051      	beq.n	800c126 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800c082:	f107 020c 	add.w	r2, r7, #12
 800c086:	79fb      	ldrb	r3, [r7, #7]
 800c088:	210b      	movs	r1, #11
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7ff feee 	bl	800be6c <USER_SPI_ioctl>
 800c090:	4603      	mov	r3, r0
 800c092:	2b00      	cmp	r3, #0
 800c094:	d149      	bne.n	800c12a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800c096:	7b3b      	ldrb	r3, [r7, #12]
 800c098:	099b      	lsrs	r3, r3, #6
 800c09a:	b2db      	uxtb	r3, r3
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d104      	bne.n	800c0aa <USER_SPI_ioctl+0x23e>
 800c0a0:	7dbb      	ldrb	r3, [r7, #22]
 800c0a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d041      	beq.n	800c12e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	623b      	str	r3, [r7, #32]
 800c0ae:	6a3b      	ldr	r3, [r7, #32]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c0b4:	6a3b      	ldr	r3, [r7, #32]
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800c0ba:	4b23      	ldr	r3, [pc, #140]	@ (800c148 <USER_SPI_ioctl+0x2dc>)
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	f003 0308 	and.w	r3, r3, #8
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d105      	bne.n	800c0d2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800c0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c8:	025b      	lsls	r3, r3, #9
 800c0ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ce:	025b      	lsls	r3, r3, #9
 800c0d0:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800c0d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c0d4:	2020      	movs	r0, #32
 800c0d6:	f7ff fc78 	bl	800b9ca <send_cmd>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d128      	bne.n	800c132 <USER_SPI_ioctl+0x2c6>
 800c0e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c0e2:	2021      	movs	r0, #33	@ 0x21
 800c0e4:	f7ff fc71 	bl	800b9ca <send_cmd>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d121      	bne.n	800c132 <USER_SPI_ioctl+0x2c6>
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	2026      	movs	r0, #38	@ 0x26
 800c0f2:	f7ff fc6a 	bl	800b9ca <send_cmd>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d11a      	bne.n	800c132 <USER_SPI_ioctl+0x2c6>
 800c0fc:	f247 5030 	movw	r0, #30000	@ 0x7530
 800c100:	f7ff fbb8 	bl	800b874 <wait_ready>
 800c104:	4603      	mov	r3, r0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d013      	beq.n	800c132 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800c10a:	2300      	movs	r3, #0
 800c10c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800c110:	e00f      	b.n	800c132 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800c112:	2304      	movs	r3, #4
 800c114:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c118:	e00c      	b.n	800c134 <USER_SPI_ioctl+0x2c8>
		break;
 800c11a:	bf00      	nop
 800c11c:	e00a      	b.n	800c134 <USER_SPI_ioctl+0x2c8>
		break;
 800c11e:	bf00      	nop
 800c120:	e008      	b.n	800c134 <USER_SPI_ioctl+0x2c8>
		break;
 800c122:	bf00      	nop
 800c124:	e006      	b.n	800c134 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800c126:	bf00      	nop
 800c128:	e004      	b.n	800c134 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800c12a:	bf00      	nop
 800c12c:	e002      	b.n	800c134 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800c12e:	bf00      	nop
 800c130:	e000      	b.n	800c134 <USER_SPI_ioctl+0x2c8>
		break;
 800c132:	bf00      	nop
	}

	despiselect();
 800c134:	f7ff fbc2 	bl	800b8bc <despiselect>

	return res;
 800c138:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3730      	adds	r7, #48	@ 0x30
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}
 800c144:	20000094 	.word	0x20000094
 800c148:	2000140c 	.word	0x2000140c

0800c14c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	4603      	mov	r3, r0
 800c154:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c156:	79fb      	ldrb	r3, [r7, #7]
 800c158:	4a08      	ldr	r2, [pc, #32]	@ (800c17c <disk_status+0x30>)
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	4413      	add	r3, r2
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	79fa      	ldrb	r2, [r7, #7]
 800c164:	4905      	ldr	r1, [pc, #20]	@ (800c17c <disk_status+0x30>)
 800c166:	440a      	add	r2, r1
 800c168:	7a12      	ldrb	r2, [r2, #8]
 800c16a:	4610      	mov	r0, r2
 800c16c:	4798      	blx	r3
 800c16e:	4603      	mov	r3, r0
 800c170:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c172:	7bfb      	ldrb	r3, [r7, #15]
}
 800c174:	4618      	mov	r0, r3
 800c176:	3710      	adds	r7, #16
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	20001670 	.word	0x20001670

0800c180 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	4603      	mov	r3, r0
 800c188:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c18a:	2300      	movs	r3, #0
 800c18c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c18e:	79fb      	ldrb	r3, [r7, #7]
 800c190:	4a0d      	ldr	r2, [pc, #52]	@ (800c1c8 <disk_initialize+0x48>)
 800c192:	5cd3      	ldrb	r3, [r2, r3]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d111      	bne.n	800c1bc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c198:	79fb      	ldrb	r3, [r7, #7]
 800c19a:	4a0b      	ldr	r2, [pc, #44]	@ (800c1c8 <disk_initialize+0x48>)
 800c19c:	2101      	movs	r1, #1
 800c19e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c1a0:	79fb      	ldrb	r3, [r7, #7]
 800c1a2:	4a09      	ldr	r2, [pc, #36]	@ (800c1c8 <disk_initialize+0x48>)
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	4413      	add	r3, r2
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	79fa      	ldrb	r2, [r7, #7]
 800c1ae:	4906      	ldr	r1, [pc, #24]	@ (800c1c8 <disk_initialize+0x48>)
 800c1b0:	440a      	add	r2, r1
 800c1b2:	7a12      	ldrb	r2, [r2, #8]
 800c1b4:	4610      	mov	r0, r2
 800c1b6:	4798      	blx	r3
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c1bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	20001670 	.word	0x20001670

0800c1cc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c1cc:	b590      	push	{r4, r7, lr}
 800c1ce:	b087      	sub	sp, #28
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	60b9      	str	r1, [r7, #8]
 800c1d4:	607a      	str	r2, [r7, #4]
 800c1d6:	603b      	str	r3, [r7, #0]
 800c1d8:	4603      	mov	r3, r0
 800c1da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c1dc:	7bfb      	ldrb	r3, [r7, #15]
 800c1de:	4a0a      	ldr	r2, [pc, #40]	@ (800c208 <disk_read+0x3c>)
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	4413      	add	r3, r2
 800c1e4:	685b      	ldr	r3, [r3, #4]
 800c1e6:	689c      	ldr	r4, [r3, #8]
 800c1e8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ea:	4a07      	ldr	r2, [pc, #28]	@ (800c208 <disk_read+0x3c>)
 800c1ec:	4413      	add	r3, r2
 800c1ee:	7a18      	ldrb	r0, [r3, #8]
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	68b9      	ldr	r1, [r7, #8]
 800c1f6:	47a0      	blx	r4
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	75fb      	strb	r3, [r7, #23]
  return res;
 800c1fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	371c      	adds	r7, #28
 800c202:	46bd      	mov	sp, r7
 800c204:	bd90      	pop	{r4, r7, pc}
 800c206:	bf00      	nop
 800c208:	20001670 	.word	0x20001670

0800c20c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c20c:	b590      	push	{r4, r7, lr}
 800c20e:	b087      	sub	sp, #28
 800c210:	af00      	add	r7, sp, #0
 800c212:	60b9      	str	r1, [r7, #8]
 800c214:	607a      	str	r2, [r7, #4]
 800c216:	603b      	str	r3, [r7, #0]
 800c218:	4603      	mov	r3, r0
 800c21a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c21c:	7bfb      	ldrb	r3, [r7, #15]
 800c21e:	4a0a      	ldr	r2, [pc, #40]	@ (800c248 <disk_write+0x3c>)
 800c220:	009b      	lsls	r3, r3, #2
 800c222:	4413      	add	r3, r2
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	68dc      	ldr	r4, [r3, #12]
 800c228:	7bfb      	ldrb	r3, [r7, #15]
 800c22a:	4a07      	ldr	r2, [pc, #28]	@ (800c248 <disk_write+0x3c>)
 800c22c:	4413      	add	r3, r2
 800c22e:	7a18      	ldrb	r0, [r3, #8]
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	68b9      	ldr	r1, [r7, #8]
 800c236:	47a0      	blx	r4
 800c238:	4603      	mov	r3, r0
 800c23a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c23c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c23e:	4618      	mov	r0, r3
 800c240:	371c      	adds	r7, #28
 800c242:	46bd      	mov	sp, r7
 800c244:	bd90      	pop	{r4, r7, pc}
 800c246:	bf00      	nop
 800c248:	20001670 	.word	0x20001670

0800c24c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	4603      	mov	r3, r0
 800c254:	603a      	str	r2, [r7, #0]
 800c256:	71fb      	strb	r3, [r7, #7]
 800c258:	460b      	mov	r3, r1
 800c25a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c25c:	79fb      	ldrb	r3, [r7, #7]
 800c25e:	4a09      	ldr	r2, [pc, #36]	@ (800c284 <disk_ioctl+0x38>)
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	4413      	add	r3, r2
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	691b      	ldr	r3, [r3, #16]
 800c268:	79fa      	ldrb	r2, [r7, #7]
 800c26a:	4906      	ldr	r1, [pc, #24]	@ (800c284 <disk_ioctl+0x38>)
 800c26c:	440a      	add	r2, r1
 800c26e:	7a10      	ldrb	r0, [r2, #8]
 800c270:	79b9      	ldrb	r1, [r7, #6]
 800c272:	683a      	ldr	r2, [r7, #0]
 800c274:	4798      	blx	r3
 800c276:	4603      	mov	r3, r0
 800c278:	73fb      	strb	r3, [r7, #15]
  return res;
 800c27a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3710      	adds	r7, #16
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	20001670 	.word	0x20001670

0800c288 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c288:	b480      	push	{r7}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	3301      	adds	r3, #1
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c298:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c29c:	021b      	lsls	r3, r3, #8
 800c29e:	b21a      	sxth	r2, r3
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	781b      	ldrb	r3, [r3, #0]
 800c2a4:	b21b      	sxth	r3, r3
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	b21b      	sxth	r3, r3
 800c2aa:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c2ac:	89fb      	ldrh	r3, [r7, #14]
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3714      	adds	r7, #20
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b8:	4770      	bx	lr

0800c2ba <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c2ba:	b480      	push	{r7}
 800c2bc:	b085      	sub	sp, #20
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	3303      	adds	r3, #3
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	021b      	lsls	r3, r3, #8
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	3202      	adds	r2, #2
 800c2d2:	7812      	ldrb	r2, [r2, #0]
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	021b      	lsls	r3, r3, #8
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	3201      	adds	r2, #1
 800c2e0:	7812      	ldrb	r2, [r2, #0]
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	021b      	lsls	r3, r3, #8
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	7812      	ldrb	r2, [r2, #0]
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	60fb      	str	r3, [r7, #12]
	return rv;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3714      	adds	r7, #20
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c300:	b480      	push	{r7}
 800c302:	b083      	sub	sp, #12
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	460b      	mov	r3, r1
 800c30a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	1c5a      	adds	r2, r3, #1
 800c310:	607a      	str	r2, [r7, #4]
 800c312:	887a      	ldrh	r2, [r7, #2]
 800c314:	b2d2      	uxtb	r2, r2
 800c316:	701a      	strb	r2, [r3, #0]
 800c318:	887b      	ldrh	r3, [r7, #2]
 800c31a:	0a1b      	lsrs	r3, r3, #8
 800c31c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	1c5a      	adds	r2, r3, #1
 800c322:	607a      	str	r2, [r7, #4]
 800c324:	887a      	ldrh	r2, [r7, #2]
 800c326:	b2d2      	uxtb	r2, r2
 800c328:	701a      	strb	r2, [r3, #0]
}
 800c32a:	bf00      	nop
 800c32c:	370c      	adds	r7, #12
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr

0800c336 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c336:	b480      	push	{r7}
 800c338:	b083      	sub	sp, #12
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	6078      	str	r0, [r7, #4]
 800c33e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	1c5a      	adds	r2, r3, #1
 800c344:	607a      	str	r2, [r7, #4]
 800c346:	683a      	ldr	r2, [r7, #0]
 800c348:	b2d2      	uxtb	r2, r2
 800c34a:	701a      	strb	r2, [r3, #0]
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	0a1b      	lsrs	r3, r3, #8
 800c350:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	1c5a      	adds	r2, r3, #1
 800c356:	607a      	str	r2, [r7, #4]
 800c358:	683a      	ldr	r2, [r7, #0]
 800c35a:	b2d2      	uxtb	r2, r2
 800c35c:	701a      	strb	r2, [r3, #0]
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	0a1b      	lsrs	r3, r3, #8
 800c362:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	1c5a      	adds	r2, r3, #1
 800c368:	607a      	str	r2, [r7, #4]
 800c36a:	683a      	ldr	r2, [r7, #0]
 800c36c:	b2d2      	uxtb	r2, r2
 800c36e:	701a      	strb	r2, [r3, #0]
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	0a1b      	lsrs	r3, r3, #8
 800c374:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	1c5a      	adds	r2, r3, #1
 800c37a:	607a      	str	r2, [r7, #4]
 800c37c:	683a      	ldr	r2, [r7, #0]
 800c37e:	b2d2      	uxtb	r2, r2
 800c380:	701a      	strb	r2, [r3, #0]
}
 800c382:	bf00      	nop
 800c384:	370c      	adds	r7, #12
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr

0800c38e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c38e:	b480      	push	{r7}
 800c390:	b087      	sub	sp, #28
 800c392:	af00      	add	r7, sp, #0
 800c394:	60f8      	str	r0, [r7, #12]
 800c396:	60b9      	str	r1, [r7, #8]
 800c398:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d00d      	beq.n	800c3c4 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c3a8:	693a      	ldr	r2, [r7, #16]
 800c3aa:	1c53      	adds	r3, r2, #1
 800c3ac:	613b      	str	r3, [r7, #16]
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	1c59      	adds	r1, r3, #1
 800c3b2:	6179      	str	r1, [r7, #20]
 800c3b4:	7812      	ldrb	r2, [r2, #0]
 800c3b6:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	3b01      	subs	r3, #1
 800c3bc:	607b      	str	r3, [r7, #4]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d1f1      	bne.n	800c3a8 <mem_cpy+0x1a>
	}
}
 800c3c4:	bf00      	nop
 800c3c6:	371c      	adds	r7, #28
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr

0800c3d0 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c3d0:	b480      	push	{r7}
 800c3d2:	b087      	sub	sp, #28
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	60f8      	str	r0, [r7, #12]
 800c3d8:	60b9      	str	r1, [r7, #8]
 800c3da:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	1c5a      	adds	r2, r3, #1
 800c3e4:	617a      	str	r2, [r7, #20]
 800c3e6:	68ba      	ldr	r2, [r7, #8]
 800c3e8:	b2d2      	uxtb	r2, r2
 800c3ea:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	3b01      	subs	r3, #1
 800c3f0:	607b      	str	r3, [r7, #4]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d1f3      	bne.n	800c3e0 <mem_set+0x10>
}
 800c3f8:	bf00      	nop
 800c3fa:	bf00      	nop
 800c3fc:	371c      	adds	r7, #28
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr

0800c406 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c406:	b480      	push	{r7}
 800c408:	b089      	sub	sp, #36	@ 0x24
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	60f8      	str	r0, [r7, #12]
 800c40e:	60b9      	str	r1, [r7, #8]
 800c410:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	61fb      	str	r3, [r7, #28]
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c41a:	2300      	movs	r3, #0
 800c41c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c41e:	69fb      	ldr	r3, [r7, #28]
 800c420:	1c5a      	adds	r2, r3, #1
 800c422:	61fa      	str	r2, [r7, #28]
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	4619      	mov	r1, r3
 800c428:	69bb      	ldr	r3, [r7, #24]
 800c42a:	1c5a      	adds	r2, r3, #1
 800c42c:	61ba      	str	r2, [r7, #24]
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	1acb      	subs	r3, r1, r3
 800c432:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	3b01      	subs	r3, #1
 800c438:	607b      	str	r3, [r7, #4]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d002      	beq.n	800c446 <mem_cmp+0x40>
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d0eb      	beq.n	800c41e <mem_cmp+0x18>

	return r;
 800c446:	697b      	ldr	r3, [r7, #20]
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3724      	adds	r7, #36	@ 0x24
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr

0800c454 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c454:	b480      	push	{r7}
 800c456:	b083      	sub	sp, #12
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c45e:	e002      	b.n	800c466 <chk_chr+0x12>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	3301      	adds	r3, #1
 800c464:	607b      	str	r3, [r7, #4]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d005      	beq.n	800c47a <chk_chr+0x26>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	461a      	mov	r2, r3
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	4293      	cmp	r3, r2
 800c478:	d1f2      	bne.n	800c460 <chk_chr+0xc>
	return *str;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	781b      	ldrb	r3, [r3, #0]
}
 800c47e:	4618      	mov	r0, r3
 800c480:	370c      	adds	r7, #12
 800c482:	46bd      	mov	sp, r7
 800c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c488:	4770      	bx	lr
	...

0800c48c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b085      	sub	sp, #20
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c496:	2300      	movs	r3, #0
 800c498:	60bb      	str	r3, [r7, #8]
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	60fb      	str	r3, [r7, #12]
 800c49e:	e029      	b.n	800c4f4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c4a0:	4a27      	ldr	r2, [pc, #156]	@ (800c540 <chk_lock+0xb4>)
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	011b      	lsls	r3, r3, #4
 800c4a6:	4413      	add	r3, r2
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d01d      	beq.n	800c4ea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c4ae:	4a24      	ldr	r2, [pc, #144]	@ (800c540 <chk_lock+0xb4>)
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	011b      	lsls	r3, r3, #4
 800c4b4:	4413      	add	r3, r2
 800c4b6:	681a      	ldr	r2, [r3, #0]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d116      	bne.n	800c4ee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c4c0:	4a1f      	ldr	r2, [pc, #124]	@ (800c540 <chk_lock+0xb4>)
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	011b      	lsls	r3, r3, #4
 800c4c6:	4413      	add	r3, r2
 800c4c8:	3304      	adds	r3, #4
 800c4ca:	681a      	ldr	r2, [r3, #0]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d10c      	bne.n	800c4ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c4d4:	4a1a      	ldr	r2, [pc, #104]	@ (800c540 <chk_lock+0xb4>)
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	011b      	lsls	r3, r3, #4
 800c4da:	4413      	add	r3, r2
 800c4dc:	3308      	adds	r3, #8
 800c4de:	681a      	ldr	r2, [r3, #0]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d102      	bne.n	800c4ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c4e8:	e007      	b.n	800c4fa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	60fb      	str	r3, [r7, #12]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2b04      	cmp	r3, #4
 800c4f8:	d9d2      	bls.n	800c4a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2b05      	cmp	r3, #5
 800c4fe:	d109      	bne.n	800c514 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d102      	bne.n	800c50c <chk_lock+0x80>
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	2b02      	cmp	r3, #2
 800c50a:	d101      	bne.n	800c510 <chk_lock+0x84>
 800c50c:	2300      	movs	r3, #0
 800c50e:	e010      	b.n	800c532 <chk_lock+0xa6>
 800c510:	2312      	movs	r3, #18
 800c512:	e00e      	b.n	800c532 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d108      	bne.n	800c52c <chk_lock+0xa0>
 800c51a:	4a09      	ldr	r2, [pc, #36]	@ (800c540 <chk_lock+0xb4>)
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	011b      	lsls	r3, r3, #4
 800c520:	4413      	add	r3, r2
 800c522:	330c      	adds	r3, #12
 800c524:	881b      	ldrh	r3, [r3, #0]
 800c526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c52a:	d101      	bne.n	800c530 <chk_lock+0xa4>
 800c52c:	2310      	movs	r3, #16
 800c52e:	e000      	b.n	800c532 <chk_lock+0xa6>
 800c530:	2300      	movs	r3, #0
}
 800c532:	4618      	mov	r0, r3
 800c534:	3714      	adds	r7, #20
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr
 800c53e:	bf00      	nop
 800c540:	20001420 	.word	0x20001420

0800c544 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c54a:	2300      	movs	r3, #0
 800c54c:	607b      	str	r3, [r7, #4]
 800c54e:	e002      	b.n	800c556 <enq_lock+0x12>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	3301      	adds	r3, #1
 800c554:	607b      	str	r3, [r7, #4]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2b04      	cmp	r3, #4
 800c55a:	d806      	bhi.n	800c56a <enq_lock+0x26>
 800c55c:	4a09      	ldr	r2, [pc, #36]	@ (800c584 <enq_lock+0x40>)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	011b      	lsls	r3, r3, #4
 800c562:	4413      	add	r3, r2
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d1f2      	bne.n	800c550 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2b05      	cmp	r3, #5
 800c56e:	bf14      	ite	ne
 800c570:	2301      	movne	r3, #1
 800c572:	2300      	moveq	r3, #0
 800c574:	b2db      	uxtb	r3, r3
}
 800c576:	4618      	mov	r0, r3
 800c578:	370c      	adds	r7, #12
 800c57a:	46bd      	mov	sp, r7
 800c57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c580:	4770      	bx	lr
 800c582:	bf00      	nop
 800c584:	20001420 	.word	0x20001420

0800c588 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c588:	b480      	push	{r7}
 800c58a:	b085      	sub	sp, #20
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c592:	2300      	movs	r3, #0
 800c594:	60fb      	str	r3, [r7, #12]
 800c596:	e01f      	b.n	800c5d8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c598:	4a41      	ldr	r2, [pc, #260]	@ (800c6a0 <inc_lock+0x118>)
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	011b      	lsls	r3, r3, #4
 800c59e:	4413      	add	r3, r2
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d113      	bne.n	800c5d2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c5aa:	4a3d      	ldr	r2, [pc, #244]	@ (800c6a0 <inc_lock+0x118>)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	011b      	lsls	r3, r3, #4
 800c5b0:	4413      	add	r3, r2
 800c5b2:	3304      	adds	r3, #4
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d109      	bne.n	800c5d2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c5be:	4a38      	ldr	r2, [pc, #224]	@ (800c6a0 <inc_lock+0x118>)
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	011b      	lsls	r3, r3, #4
 800c5c4:	4413      	add	r3, r2
 800c5c6:	3308      	adds	r3, #8
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d006      	beq.n	800c5e0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	3301      	adds	r3, #1
 800c5d6:	60fb      	str	r3, [r7, #12]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2b04      	cmp	r3, #4
 800c5dc:	d9dc      	bls.n	800c598 <inc_lock+0x10>
 800c5de:	e000      	b.n	800c5e2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c5e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2b05      	cmp	r3, #5
 800c5e6:	d132      	bne.n	800c64e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	60fb      	str	r3, [r7, #12]
 800c5ec:	e002      	b.n	800c5f4 <inc_lock+0x6c>
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	3301      	adds	r3, #1
 800c5f2:	60fb      	str	r3, [r7, #12]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2b04      	cmp	r3, #4
 800c5f8:	d806      	bhi.n	800c608 <inc_lock+0x80>
 800c5fa:	4a29      	ldr	r2, [pc, #164]	@ (800c6a0 <inc_lock+0x118>)
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	011b      	lsls	r3, r3, #4
 800c600:	4413      	add	r3, r2
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d1f2      	bne.n	800c5ee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2b05      	cmp	r3, #5
 800c60c:	d101      	bne.n	800c612 <inc_lock+0x8a>
 800c60e:	2300      	movs	r3, #0
 800c610:	e040      	b.n	800c694 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681a      	ldr	r2, [r3, #0]
 800c616:	4922      	ldr	r1, [pc, #136]	@ (800c6a0 <inc_lock+0x118>)
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	011b      	lsls	r3, r3, #4
 800c61c:	440b      	add	r3, r1
 800c61e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	689a      	ldr	r2, [r3, #8]
 800c624:	491e      	ldr	r1, [pc, #120]	@ (800c6a0 <inc_lock+0x118>)
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	011b      	lsls	r3, r3, #4
 800c62a:	440b      	add	r3, r1
 800c62c:	3304      	adds	r3, #4
 800c62e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	695a      	ldr	r2, [r3, #20]
 800c634:	491a      	ldr	r1, [pc, #104]	@ (800c6a0 <inc_lock+0x118>)
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	011b      	lsls	r3, r3, #4
 800c63a:	440b      	add	r3, r1
 800c63c:	3308      	adds	r3, #8
 800c63e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c640:	4a17      	ldr	r2, [pc, #92]	@ (800c6a0 <inc_lock+0x118>)
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	011b      	lsls	r3, r3, #4
 800c646:	4413      	add	r3, r2
 800c648:	330c      	adds	r3, #12
 800c64a:	2200      	movs	r2, #0
 800c64c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d009      	beq.n	800c668 <inc_lock+0xe0>
 800c654:	4a12      	ldr	r2, [pc, #72]	@ (800c6a0 <inc_lock+0x118>)
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	011b      	lsls	r3, r3, #4
 800c65a:	4413      	add	r3, r2
 800c65c:	330c      	adds	r3, #12
 800c65e:	881b      	ldrh	r3, [r3, #0]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d001      	beq.n	800c668 <inc_lock+0xe0>
 800c664:	2300      	movs	r3, #0
 800c666:	e015      	b.n	800c694 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d108      	bne.n	800c680 <inc_lock+0xf8>
 800c66e:	4a0c      	ldr	r2, [pc, #48]	@ (800c6a0 <inc_lock+0x118>)
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	011b      	lsls	r3, r3, #4
 800c674:	4413      	add	r3, r2
 800c676:	330c      	adds	r3, #12
 800c678:	881b      	ldrh	r3, [r3, #0]
 800c67a:	3301      	adds	r3, #1
 800c67c:	b29a      	uxth	r2, r3
 800c67e:	e001      	b.n	800c684 <inc_lock+0xfc>
 800c680:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c684:	4906      	ldr	r1, [pc, #24]	@ (800c6a0 <inc_lock+0x118>)
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	011b      	lsls	r3, r3, #4
 800c68a:	440b      	add	r3, r1
 800c68c:	330c      	adds	r3, #12
 800c68e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	3301      	adds	r3, #1
}
 800c694:	4618      	mov	r0, r3
 800c696:	3714      	adds	r7, #20
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr
 800c6a0:	20001420 	.word	0x20001420

0800c6a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b085      	sub	sp, #20
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	3b01      	subs	r3, #1
 800c6b0:	607b      	str	r3, [r7, #4]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2b04      	cmp	r3, #4
 800c6b6:	d825      	bhi.n	800c704 <dec_lock+0x60>
		n = Files[i].ctr;
 800c6b8:	4a17      	ldr	r2, [pc, #92]	@ (800c718 <dec_lock+0x74>)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	011b      	lsls	r3, r3, #4
 800c6be:	4413      	add	r3, r2
 800c6c0:	330c      	adds	r3, #12
 800c6c2:	881b      	ldrh	r3, [r3, #0]
 800c6c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c6c6:	89fb      	ldrh	r3, [r7, #14]
 800c6c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c6cc:	d101      	bne.n	800c6d2 <dec_lock+0x2e>
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c6d2:	89fb      	ldrh	r3, [r7, #14]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d002      	beq.n	800c6de <dec_lock+0x3a>
 800c6d8:	89fb      	ldrh	r3, [r7, #14]
 800c6da:	3b01      	subs	r3, #1
 800c6dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c6de:	4a0e      	ldr	r2, [pc, #56]	@ (800c718 <dec_lock+0x74>)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	011b      	lsls	r3, r3, #4
 800c6e4:	4413      	add	r3, r2
 800c6e6:	330c      	adds	r3, #12
 800c6e8:	89fa      	ldrh	r2, [r7, #14]
 800c6ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c6ec:	89fb      	ldrh	r3, [r7, #14]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d105      	bne.n	800c6fe <dec_lock+0x5a>
 800c6f2:	4a09      	ldr	r2, [pc, #36]	@ (800c718 <dec_lock+0x74>)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	011b      	lsls	r3, r3, #4
 800c6f8:	4413      	add	r3, r2
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c6fe:	2300      	movs	r3, #0
 800c700:	737b      	strb	r3, [r7, #13]
 800c702:	e001      	b.n	800c708 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c704:	2302      	movs	r3, #2
 800c706:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c708:	7b7b      	ldrb	r3, [r7, #13]
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3714      	adds	r7, #20
 800c70e:	46bd      	mov	sp, r7
 800c710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c714:	4770      	bx	lr
 800c716:	bf00      	nop
 800c718:	20001420 	.word	0x20001420

0800c71c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b085      	sub	sp, #20
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c724:	2300      	movs	r3, #0
 800c726:	60fb      	str	r3, [r7, #12]
 800c728:	e010      	b.n	800c74c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c72a:	4a0d      	ldr	r2, [pc, #52]	@ (800c760 <clear_lock+0x44>)
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	011b      	lsls	r3, r3, #4
 800c730:	4413      	add	r3, r2
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	429a      	cmp	r2, r3
 800c738:	d105      	bne.n	800c746 <clear_lock+0x2a>
 800c73a:	4a09      	ldr	r2, [pc, #36]	@ (800c760 <clear_lock+0x44>)
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	011b      	lsls	r3, r3, #4
 800c740:	4413      	add	r3, r2
 800c742:	2200      	movs	r2, #0
 800c744:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	3301      	adds	r3, #1
 800c74a:	60fb      	str	r3, [r7, #12]
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2b04      	cmp	r3, #4
 800c750:	d9eb      	bls.n	800c72a <clear_lock+0xe>
	}
}
 800c752:	bf00      	nop
 800c754:	bf00      	nop
 800c756:	3714      	adds	r7, #20
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr
 800c760:	20001420 	.word	0x20001420

0800c764 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b086      	sub	sp, #24
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c76c:	2300      	movs	r3, #0
 800c76e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	78db      	ldrb	r3, [r3, #3]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d034      	beq.n	800c7e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c77c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	7858      	ldrb	r0, [r3, #1]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c788:	2301      	movs	r3, #1
 800c78a:	697a      	ldr	r2, [r7, #20]
 800c78c:	f7ff fd3e 	bl	800c20c <disk_write>
 800c790:	4603      	mov	r3, r0
 800c792:	2b00      	cmp	r3, #0
 800c794:	d002      	beq.n	800c79c <sync_window+0x38>
			res = FR_DISK_ERR;
 800c796:	2301      	movs	r3, #1
 800c798:	73fb      	strb	r3, [r7, #15]
 800c79a:	e022      	b.n	800c7e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7a6:	697a      	ldr	r2, [r7, #20]
 800c7a8:	1ad2      	subs	r2, r2, r3
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	69db      	ldr	r3, [r3, #28]
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d217      	bcs.n	800c7e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	789b      	ldrb	r3, [r3, #2]
 800c7b6:	613b      	str	r3, [r7, #16]
 800c7b8:	e010      	b.n	800c7dc <sync_window+0x78>
					wsect += fs->fsize;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	69db      	ldr	r3, [r3, #28]
 800c7be:	697a      	ldr	r2, [r7, #20]
 800c7c0:	4413      	add	r3, r2
 800c7c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	7858      	ldrb	r0, [r3, #1]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	697a      	ldr	r2, [r7, #20]
 800c7d2:	f7ff fd1b 	bl	800c20c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	3b01      	subs	r3, #1
 800c7da:	613b      	str	r3, [r7, #16]
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d8eb      	bhi.n	800c7ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c7e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3718      	adds	r7, #24
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7fe:	683a      	ldr	r2, [r7, #0]
 800c800:	429a      	cmp	r2, r3
 800c802:	d01b      	beq.n	800c83c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f7ff ffad 	bl	800c764 <sync_window>
 800c80a:	4603      	mov	r3, r0
 800c80c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c80e:	7bfb      	ldrb	r3, [r7, #15]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d113      	bne.n	800c83c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	7858      	ldrb	r0, [r3, #1]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c81e:	2301      	movs	r3, #1
 800c820:	683a      	ldr	r2, [r7, #0]
 800c822:	f7ff fcd3 	bl	800c1cc <disk_read>
 800c826:	4603      	mov	r3, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d004      	beq.n	800c836 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c82c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c830:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c832:	2301      	movs	r3, #1
 800c834:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	683a      	ldr	r2, [r7, #0]
 800c83a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800c83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3710      	adds	r7, #16
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
	...

0800c848 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b084      	sub	sp, #16
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f7ff ff87 	bl	800c764 <sync_window>
 800c856:	4603      	mov	r3, r0
 800c858:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c85a:	7bfb      	ldrb	r3, [r7, #15]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d158      	bne.n	800c912 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	2b03      	cmp	r3, #3
 800c866:	d148      	bne.n	800c8fa <sync_fs+0xb2>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	791b      	ldrb	r3, [r3, #4]
 800c86c:	2b01      	cmp	r3, #1
 800c86e:	d144      	bne.n	800c8fa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	3334      	adds	r3, #52	@ 0x34
 800c874:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c878:	2100      	movs	r1, #0
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7ff fda8 	bl	800c3d0 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	3334      	adds	r3, #52	@ 0x34
 800c884:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c888:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7ff fd37 	bl	800c300 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	3334      	adds	r3, #52	@ 0x34
 800c896:	4921      	ldr	r1, [pc, #132]	@ (800c91c <sync_fs+0xd4>)
 800c898:	4618      	mov	r0, r3
 800c89a:	f7ff fd4c 	bl	800c336 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	3334      	adds	r3, #52	@ 0x34
 800c8a2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c8a6:	491e      	ldr	r1, [pc, #120]	@ (800c920 <sync_fs+0xd8>)
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f7ff fd44 	bl	800c336 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	3334      	adds	r3, #52	@ 0x34
 800c8b2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	695b      	ldr	r3, [r3, #20]
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	4610      	mov	r0, r2
 800c8be:	f7ff fd3a 	bl	800c336 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	3334      	adds	r3, #52	@ 0x34
 800c8c6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	691b      	ldr	r3, [r3, #16]
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	4610      	mov	r0, r2
 800c8d2:	f7ff fd30 	bl	800c336 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6a1b      	ldr	r3, [r3, #32]
 800c8da:	1c5a      	adds	r2, r3, #1
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	7858      	ldrb	r0, [r3, #1]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	f7ff fc8c 	bl	800c20c <disk_write>
			fs->fsi_flag = 0;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	785b      	ldrb	r3, [r3, #1]
 800c8fe:	2200      	movs	r2, #0
 800c900:	2100      	movs	r1, #0
 800c902:	4618      	mov	r0, r3
 800c904:	f7ff fca2 	bl	800c24c <disk_ioctl>
 800c908:	4603      	mov	r3, r0
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d001      	beq.n	800c912 <sync_fs+0xca>
 800c90e:	2301      	movs	r3, #1
 800c910:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c912:	7bfb      	ldrb	r3, [r7, #15]
}
 800c914:	4618      	mov	r0, r3
 800c916:	3710      	adds	r7, #16
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}
 800c91c:	41615252 	.word	0x41615252
 800c920:	61417272 	.word	0x61417272

0800c924 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c924:	b480      	push	{r7}
 800c926:	b083      	sub	sp, #12
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	3b02      	subs	r3, #2
 800c932:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	699b      	ldr	r3, [r3, #24]
 800c938:	3b02      	subs	r3, #2
 800c93a:	683a      	ldr	r2, [r7, #0]
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d301      	bcc.n	800c944 <clust2sect+0x20>
 800c940:	2300      	movs	r3, #0
 800c942:	e008      	b.n	800c956 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	895b      	ldrh	r3, [r3, #10]
 800c948:	461a      	mov	r2, r3
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	fb03 f202 	mul.w	r2, r3, r2
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c954:	4413      	add	r3, r2
}
 800c956:	4618      	mov	r0, r3
 800c958:	370c      	adds	r7, #12
 800c95a:	46bd      	mov	sp, r7
 800c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c960:	4770      	bx	lr

0800c962 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c962:	b580      	push	{r7, lr}
 800c964:	b086      	sub	sp, #24
 800c966:	af00      	add	r7, sp, #0
 800c968:	6078      	str	r0, [r7, #4]
 800c96a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	2b01      	cmp	r3, #1
 800c976:	d904      	bls.n	800c982 <get_fat+0x20>
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	699b      	ldr	r3, [r3, #24]
 800c97c:	683a      	ldr	r2, [r7, #0]
 800c97e:	429a      	cmp	r2, r3
 800c980:	d302      	bcc.n	800c988 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c982:	2301      	movs	r3, #1
 800c984:	617b      	str	r3, [r7, #20]
 800c986:	e08e      	b.n	800caa6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c988:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c98c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	2b03      	cmp	r3, #3
 800c994:	d061      	beq.n	800ca5a <get_fat+0xf8>
 800c996:	2b03      	cmp	r3, #3
 800c998:	dc7b      	bgt.n	800ca92 <get_fat+0x130>
 800c99a:	2b01      	cmp	r3, #1
 800c99c:	d002      	beq.n	800c9a4 <get_fat+0x42>
 800c99e:	2b02      	cmp	r3, #2
 800c9a0:	d041      	beq.n	800ca26 <get_fat+0xc4>
 800c9a2:	e076      	b.n	800ca92 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	60fb      	str	r3, [r7, #12]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	085b      	lsrs	r3, r3, #1
 800c9ac:	68fa      	ldr	r2, [r7, #12]
 800c9ae:	4413      	add	r3, r2
 800c9b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	0a5b      	lsrs	r3, r3, #9
 800c9ba:	4413      	add	r3, r2
 800c9bc:	4619      	mov	r1, r3
 800c9be:	6938      	ldr	r0, [r7, #16]
 800c9c0:	f7ff ff14 	bl	800c7ec <move_window>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d166      	bne.n	800ca98 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	1c5a      	adds	r2, r3, #1
 800c9ce:	60fa      	str	r2, [r7, #12]
 800c9d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9d4:	693a      	ldr	r2, [r7, #16]
 800c9d6:	4413      	add	r3, r2
 800c9d8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c9dc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	0a5b      	lsrs	r3, r3, #9
 800c9e6:	4413      	add	r3, r2
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	6938      	ldr	r0, [r7, #16]
 800c9ec:	f7ff fefe 	bl	800c7ec <move_window>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d152      	bne.n	800ca9c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9fc:	693a      	ldr	r2, [r7, #16]
 800c9fe:	4413      	add	r3, r2
 800ca00:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ca04:	021b      	lsls	r3, r3, #8
 800ca06:	68ba      	ldr	r2, [r7, #8]
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	f003 0301 	and.w	r3, r3, #1
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d002      	beq.n	800ca1c <get_fat+0xba>
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	091b      	lsrs	r3, r3, #4
 800ca1a:	e002      	b.n	800ca22 <get_fat+0xc0>
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca22:	617b      	str	r3, [r7, #20]
			break;
 800ca24:	e03f      	b.n	800caa6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	0a1b      	lsrs	r3, r3, #8
 800ca2e:	4413      	add	r3, r2
 800ca30:	4619      	mov	r1, r3
 800ca32:	6938      	ldr	r0, [r7, #16]
 800ca34:	f7ff feda 	bl	800c7ec <move_window>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d130      	bne.n	800caa0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	005b      	lsls	r3, r3, #1
 800ca48:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ca4c:	4413      	add	r3, r2
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7ff fc1a 	bl	800c288 <ld_word>
 800ca54:	4603      	mov	r3, r0
 800ca56:	617b      	str	r3, [r7, #20]
			break;
 800ca58:	e025      	b.n	800caa6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	09db      	lsrs	r3, r3, #7
 800ca62:	4413      	add	r3, r2
 800ca64:	4619      	mov	r1, r3
 800ca66:	6938      	ldr	r0, [r7, #16]
 800ca68:	f7ff fec0 	bl	800c7ec <move_window>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d118      	bne.n	800caa4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ca80:	4413      	add	r3, r2
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7ff fc19 	bl	800c2ba <ld_dword>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ca8e:	617b      	str	r3, [r7, #20]
			break;
 800ca90:	e009      	b.n	800caa6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ca92:	2301      	movs	r3, #1
 800ca94:	617b      	str	r3, [r7, #20]
 800ca96:	e006      	b.n	800caa6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ca98:	bf00      	nop
 800ca9a:	e004      	b.n	800caa6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ca9c:	bf00      	nop
 800ca9e:	e002      	b.n	800caa6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800caa0:	bf00      	nop
 800caa2:	e000      	b.n	800caa6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800caa4:	bf00      	nop
		}
	}

	return val;
 800caa6:	697b      	ldr	r3, [r7, #20]
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3718      	adds	r7, #24
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cab0:	b590      	push	{r4, r7, lr}
 800cab2:	b089      	sub	sp, #36	@ 0x24
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	60f8      	str	r0, [r7, #12]
 800cab8:	60b9      	str	r1, [r7, #8]
 800caba:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cabc:	2302      	movs	r3, #2
 800cabe:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	2b01      	cmp	r3, #1
 800cac4:	f240 80d9 	bls.w	800cc7a <put_fat+0x1ca>
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	699b      	ldr	r3, [r3, #24]
 800cacc:	68ba      	ldr	r2, [r7, #8]
 800cace:	429a      	cmp	r2, r3
 800cad0:	f080 80d3 	bcs.w	800cc7a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	2b03      	cmp	r3, #3
 800cada:	f000 8096 	beq.w	800cc0a <put_fat+0x15a>
 800cade:	2b03      	cmp	r3, #3
 800cae0:	f300 80cb 	bgt.w	800cc7a <put_fat+0x1ca>
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d002      	beq.n	800caee <put_fat+0x3e>
 800cae8:	2b02      	cmp	r3, #2
 800caea:	d06e      	beq.n	800cbca <put_fat+0x11a>
 800caec:	e0c5      	b.n	800cc7a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	61bb      	str	r3, [r7, #24]
 800caf2:	69bb      	ldr	r3, [r7, #24]
 800caf4:	085b      	lsrs	r3, r3, #1
 800caf6:	69ba      	ldr	r2, [r7, #24]
 800caf8:	4413      	add	r3, r2
 800cafa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb00:	69bb      	ldr	r3, [r7, #24]
 800cb02:	0a5b      	lsrs	r3, r3, #9
 800cb04:	4413      	add	r3, r2
 800cb06:	4619      	mov	r1, r3
 800cb08:	68f8      	ldr	r0, [r7, #12]
 800cb0a:	f7ff fe6f 	bl	800c7ec <move_window>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cb12:	7ffb      	ldrb	r3, [r7, #31]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	f040 80a9 	bne.w	800cc6c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	1c59      	adds	r1, r3, #1
 800cb24:	61b9      	str	r1, [r7, #24]
 800cb26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb2a:	4413      	add	r3, r2
 800cb2c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	f003 0301 	and.w	r3, r3, #1
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d00d      	beq.n	800cb54 <put_fat+0xa4>
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	b25b      	sxtb	r3, r3
 800cb3e:	f003 030f 	and.w	r3, r3, #15
 800cb42:	b25a      	sxtb	r2, r3
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	b25b      	sxtb	r3, r3
 800cb48:	011b      	lsls	r3, r3, #4
 800cb4a:	b25b      	sxtb	r3, r3
 800cb4c:	4313      	orrs	r3, r2
 800cb4e:	b25b      	sxtb	r3, r3
 800cb50:	b2db      	uxtb	r3, r3
 800cb52:	e001      	b.n	800cb58 <put_fat+0xa8>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	697a      	ldr	r2, [r7, #20]
 800cb5a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2201      	movs	r2, #1
 800cb60:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb66:	69bb      	ldr	r3, [r7, #24]
 800cb68:	0a5b      	lsrs	r3, r3, #9
 800cb6a:	4413      	add	r3, r2
 800cb6c:	4619      	mov	r1, r3
 800cb6e:	68f8      	ldr	r0, [r7, #12]
 800cb70:	f7ff fe3c 	bl	800c7ec <move_window>
 800cb74:	4603      	mov	r3, r0
 800cb76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cb78:	7ffb      	ldrb	r3, [r7, #31]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d178      	bne.n	800cc70 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cb84:	69bb      	ldr	r3, [r7, #24]
 800cb86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb8a:	4413      	add	r3, r2
 800cb8c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	f003 0301 	and.w	r3, r3, #1
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d003      	beq.n	800cba0 <put_fat+0xf0>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	091b      	lsrs	r3, r3, #4
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	e00e      	b.n	800cbbe <put_fat+0x10e>
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	b25b      	sxtb	r3, r3
 800cba6:	f023 030f 	bic.w	r3, r3, #15
 800cbaa:	b25a      	sxtb	r2, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	0a1b      	lsrs	r3, r3, #8
 800cbb0:	b25b      	sxtb	r3, r3
 800cbb2:	f003 030f 	and.w	r3, r3, #15
 800cbb6:	b25b      	sxtb	r3, r3
 800cbb8:	4313      	orrs	r3, r2
 800cbba:	b25b      	sxtb	r3, r3
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	697a      	ldr	r2, [r7, #20]
 800cbc0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	70da      	strb	r2, [r3, #3]
			break;
 800cbc8:	e057      	b.n	800cc7a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	0a1b      	lsrs	r3, r3, #8
 800cbd2:	4413      	add	r3, r2
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	68f8      	ldr	r0, [r7, #12]
 800cbd8:	f7ff fe08 	bl	800c7ec <move_window>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cbe0:	7ffb      	ldrb	r3, [r7, #31]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d146      	bne.n	800cc74 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	005b      	lsls	r3, r3, #1
 800cbf0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800cbf4:	4413      	add	r3, r2
 800cbf6:	687a      	ldr	r2, [r7, #4]
 800cbf8:	b292      	uxth	r2, r2
 800cbfa:	4611      	mov	r1, r2
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f7ff fb7f 	bl	800c300 <st_word>
			fs->wflag = 1;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	2201      	movs	r2, #1
 800cc06:	70da      	strb	r2, [r3, #3]
			break;
 800cc08:	e037      	b.n	800cc7a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	09db      	lsrs	r3, r3, #7
 800cc12:	4413      	add	r3, r2
 800cc14:	4619      	mov	r1, r3
 800cc16:	68f8      	ldr	r0, [r7, #12]
 800cc18:	f7ff fde8 	bl	800c7ec <move_window>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cc20:	7ffb      	ldrb	r3, [r7, #31]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d128      	bne.n	800cc78 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	009b      	lsls	r3, r3, #2
 800cc36:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cc3a:	4413      	add	r3, r2
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f7ff fb3c 	bl	800c2ba <ld_dword>
 800cc42:	4603      	mov	r3, r0
 800cc44:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800cc48:	4323      	orrs	r3, r4
 800cc4a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	009b      	lsls	r3, r3, #2
 800cc56:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cc5a:	4413      	add	r3, r2
 800cc5c:	6879      	ldr	r1, [r7, #4]
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7ff fb69 	bl	800c336 <st_dword>
			fs->wflag = 1;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2201      	movs	r2, #1
 800cc68:	70da      	strb	r2, [r3, #3]
			break;
 800cc6a:	e006      	b.n	800cc7a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cc6c:	bf00      	nop
 800cc6e:	e004      	b.n	800cc7a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cc70:	bf00      	nop
 800cc72:	e002      	b.n	800cc7a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cc74:	bf00      	nop
 800cc76:	e000      	b.n	800cc7a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cc78:	bf00      	nop
		}
	}
	return res;
 800cc7a:	7ffb      	ldrb	r3, [r7, #31]
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3724      	adds	r7, #36	@ 0x24
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd90      	pop	{r4, r7, pc}

0800cc84 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b088      	sub	sp, #32
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cc90:	2300      	movs	r3, #0
 800cc92:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d904      	bls.n	800ccaa <remove_chain+0x26>
 800cca0:	69bb      	ldr	r3, [r7, #24]
 800cca2:	699b      	ldr	r3, [r3, #24]
 800cca4:	68ba      	ldr	r2, [r7, #8]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d301      	bcc.n	800ccae <remove_chain+0x2a>
 800ccaa:	2302      	movs	r3, #2
 800ccac:	e04b      	b.n	800cd46 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d00c      	beq.n	800ccce <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ccb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ccb8:	6879      	ldr	r1, [r7, #4]
 800ccba:	69b8      	ldr	r0, [r7, #24]
 800ccbc:	f7ff fef8 	bl	800cab0 <put_fat>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ccc4:	7ffb      	ldrb	r3, [r7, #31]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d001      	beq.n	800ccce <remove_chain+0x4a>
 800ccca:	7ffb      	ldrb	r3, [r7, #31]
 800cccc:	e03b      	b.n	800cd46 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ccce:	68b9      	ldr	r1, [r7, #8]
 800ccd0:	68f8      	ldr	r0, [r7, #12]
 800ccd2:	f7ff fe46 	bl	800c962 <get_fat>
 800ccd6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d031      	beq.n	800cd42 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	d101      	bne.n	800cce8 <remove_chain+0x64>
 800cce4:	2302      	movs	r3, #2
 800cce6:	e02e      	b.n	800cd46 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ccee:	d101      	bne.n	800ccf4 <remove_chain+0x70>
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	e028      	b.n	800cd46 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	68b9      	ldr	r1, [r7, #8]
 800ccf8:	69b8      	ldr	r0, [r7, #24]
 800ccfa:	f7ff fed9 	bl	800cab0 <put_fat>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cd02:	7ffb      	ldrb	r3, [r7, #31]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d001      	beq.n	800cd0c <remove_chain+0x88>
 800cd08:	7ffb      	ldrb	r3, [r7, #31]
 800cd0a:	e01c      	b.n	800cd46 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cd0c:	69bb      	ldr	r3, [r7, #24]
 800cd0e:	695a      	ldr	r2, [r3, #20]
 800cd10:	69bb      	ldr	r3, [r7, #24]
 800cd12:	699b      	ldr	r3, [r3, #24]
 800cd14:	3b02      	subs	r3, #2
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d20b      	bcs.n	800cd32 <remove_chain+0xae>
			fs->free_clst++;
 800cd1a:	69bb      	ldr	r3, [r7, #24]
 800cd1c:	695b      	ldr	r3, [r3, #20]
 800cd1e:	1c5a      	adds	r2, r3, #1
 800cd20:	69bb      	ldr	r3, [r7, #24]
 800cd22:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800cd24:	69bb      	ldr	r3, [r7, #24]
 800cd26:	791b      	ldrb	r3, [r3, #4]
 800cd28:	f043 0301 	orr.w	r3, r3, #1
 800cd2c:	b2da      	uxtb	r2, r3
 800cd2e:	69bb      	ldr	r3, [r7, #24]
 800cd30:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cd36:	69bb      	ldr	r3, [r7, #24]
 800cd38:	699b      	ldr	r3, [r3, #24]
 800cd3a:	68ba      	ldr	r2, [r7, #8]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d3c6      	bcc.n	800ccce <remove_chain+0x4a>
 800cd40:	e000      	b.n	800cd44 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cd42:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cd44:	2300      	movs	r3, #0
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3720      	adds	r7, #32
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}

0800cd4e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cd4e:	b580      	push	{r7, lr}
 800cd50:	b088      	sub	sp, #32
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	6078      	str	r0, [r7, #4]
 800cd56:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d10d      	bne.n	800cd80 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	691b      	ldr	r3, [r3, #16]
 800cd68:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cd6a:	69bb      	ldr	r3, [r7, #24]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d004      	beq.n	800cd7a <create_chain+0x2c>
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	699b      	ldr	r3, [r3, #24]
 800cd74:	69ba      	ldr	r2, [r7, #24]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d31b      	bcc.n	800cdb2 <create_chain+0x64>
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	61bb      	str	r3, [r7, #24]
 800cd7e:	e018      	b.n	800cdb2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cd80:	6839      	ldr	r1, [r7, #0]
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f7ff fded 	bl	800c962 <get_fat>
 800cd88:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2b01      	cmp	r3, #1
 800cd8e:	d801      	bhi.n	800cd94 <create_chain+0x46>
 800cd90:	2301      	movs	r3, #1
 800cd92:	e070      	b.n	800ce76 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cd9a:	d101      	bne.n	800cda0 <create_chain+0x52>
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	e06a      	b.n	800ce76 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	699b      	ldr	r3, [r3, #24]
 800cda4:	68fa      	ldr	r2, [r7, #12]
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d201      	bcs.n	800cdae <create_chain+0x60>
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	e063      	b.n	800ce76 <create_chain+0x128>
		scl = clst;
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cdb2:	69bb      	ldr	r3, [r7, #24]
 800cdb4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cdb6:	69fb      	ldr	r3, [r7, #28]
 800cdb8:	3301      	adds	r3, #1
 800cdba:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	699b      	ldr	r3, [r3, #24]
 800cdc0:	69fa      	ldr	r2, [r7, #28]
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d307      	bcc.n	800cdd6 <create_chain+0x88>
				ncl = 2;
 800cdc6:	2302      	movs	r3, #2
 800cdc8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cdca:	69fa      	ldr	r2, [r7, #28]
 800cdcc:	69bb      	ldr	r3, [r7, #24]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d901      	bls.n	800cdd6 <create_chain+0x88>
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	e04f      	b.n	800ce76 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cdd6:	69f9      	ldr	r1, [r7, #28]
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f7ff fdc2 	bl	800c962 <get_fat>
 800cdde:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d00e      	beq.n	800ce04 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d003      	beq.n	800cdf4 <create_chain+0xa6>
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cdf2:	d101      	bne.n	800cdf8 <create_chain+0xaa>
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	e03e      	b.n	800ce76 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cdf8:	69fa      	ldr	r2, [r7, #28]
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d1da      	bne.n	800cdb6 <create_chain+0x68>
 800ce00:	2300      	movs	r3, #0
 800ce02:	e038      	b.n	800ce76 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ce04:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ce06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ce0a:	69f9      	ldr	r1, [r7, #28]
 800ce0c:	6938      	ldr	r0, [r7, #16]
 800ce0e:	f7ff fe4f 	bl	800cab0 <put_fat>
 800ce12:	4603      	mov	r3, r0
 800ce14:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ce16:	7dfb      	ldrb	r3, [r7, #23]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d109      	bne.n	800ce30 <create_chain+0xe2>
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d006      	beq.n	800ce30 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ce22:	69fa      	ldr	r2, [r7, #28]
 800ce24:	6839      	ldr	r1, [r7, #0]
 800ce26:	6938      	ldr	r0, [r7, #16]
 800ce28:	f7ff fe42 	bl	800cab0 <put_fat>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ce30:	7dfb      	ldrb	r3, [r7, #23]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d116      	bne.n	800ce64 <create_chain+0x116>
		fs->last_clst = ncl;
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	69fa      	ldr	r2, [r7, #28]
 800ce3a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	695a      	ldr	r2, [r3, #20]
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	699b      	ldr	r3, [r3, #24]
 800ce44:	3b02      	subs	r3, #2
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d804      	bhi.n	800ce54 <create_chain+0x106>
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	695b      	ldr	r3, [r3, #20]
 800ce4e:	1e5a      	subs	r2, r3, #1
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	791b      	ldrb	r3, [r3, #4]
 800ce58:	f043 0301 	orr.w	r3, r3, #1
 800ce5c:	b2da      	uxtb	r2, r3
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	711a      	strb	r2, [r3, #4]
 800ce62:	e007      	b.n	800ce74 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ce64:	7dfb      	ldrb	r3, [r7, #23]
 800ce66:	2b01      	cmp	r3, #1
 800ce68:	d102      	bne.n	800ce70 <create_chain+0x122>
 800ce6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ce6e:	e000      	b.n	800ce72 <create_chain+0x124>
 800ce70:	2301      	movs	r3, #1
 800ce72:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ce74:	69fb      	ldr	r3, [r7, #28]
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3720      	adds	r7, #32
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}

0800ce7e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ce7e:	b480      	push	{r7}
 800ce80:	b087      	sub	sp, #28
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
 800ce86:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce92:	3304      	adds	r3, #4
 800ce94:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	0a5b      	lsrs	r3, r3, #9
 800ce9a:	68fa      	ldr	r2, [r7, #12]
 800ce9c:	8952      	ldrh	r2, [r2, #10]
 800ce9e:	fbb3 f3f2 	udiv	r3, r3, r2
 800cea2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	1d1a      	adds	r2, r3, #4
 800cea8:	613a      	str	r2, [r7, #16]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d101      	bne.n	800ceb8 <clmt_clust+0x3a>
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	e010      	b.n	800ceda <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ceb8:	697a      	ldr	r2, [r7, #20]
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d307      	bcc.n	800ced0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800cec0:	697a      	ldr	r2, [r7, #20]
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	1ad3      	subs	r3, r2, r3
 800cec6:	617b      	str	r3, [r7, #20]
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	3304      	adds	r3, #4
 800cecc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cece:	e7e9      	b.n	800cea4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ced0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	681a      	ldr	r2, [r3, #0]
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	4413      	add	r3, r2
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	371c      	adds	r7, #28
 800cede:	46bd      	mov	sp, r7
 800cee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee4:	4770      	bx	lr

0800cee6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cee6:	b580      	push	{r7, lr}
 800cee8:	b086      	sub	sp, #24
 800ceea:	af00      	add	r7, sp, #0
 800ceec:	6078      	str	r0, [r7, #4]
 800ceee:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cefc:	d204      	bcs.n	800cf08 <dir_sdi+0x22>
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	f003 031f 	and.w	r3, r3, #31
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d001      	beq.n	800cf0c <dir_sdi+0x26>
		return FR_INT_ERR;
 800cf08:	2302      	movs	r3, #2
 800cf0a:	e063      	b.n	800cfd4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	683a      	ldr	r2, [r7, #0]
 800cf10:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	689b      	ldr	r3, [r3, #8]
 800cf16:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d106      	bne.n	800cf2c <dir_sdi+0x46>
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	2b02      	cmp	r3, #2
 800cf24:	d902      	bls.n	800cf2c <dir_sdi+0x46>
		clst = fs->dirbase;
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf2a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d10c      	bne.n	800cf4c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	095b      	lsrs	r3, r3, #5
 800cf36:	693a      	ldr	r2, [r7, #16]
 800cf38:	8912      	ldrh	r2, [r2, #8]
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d301      	bcc.n	800cf42 <dir_sdi+0x5c>
 800cf3e:	2302      	movs	r3, #2
 800cf40:	e048      	b.n	800cfd4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	61da      	str	r2, [r3, #28]
 800cf4a:	e029      	b.n	800cfa0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	895b      	ldrh	r3, [r3, #10]
 800cf50:	025b      	lsls	r3, r3, #9
 800cf52:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cf54:	e019      	b.n	800cf8a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6979      	ldr	r1, [r7, #20]
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7ff fd01 	bl	800c962 <get_fat>
 800cf60:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cf68:	d101      	bne.n	800cf6e <dir_sdi+0x88>
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	e032      	b.n	800cfd4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d904      	bls.n	800cf7e <dir_sdi+0x98>
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	699b      	ldr	r3, [r3, #24]
 800cf78:	697a      	ldr	r2, [r7, #20]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d301      	bcc.n	800cf82 <dir_sdi+0x9c>
 800cf7e:	2302      	movs	r3, #2
 800cf80:	e028      	b.n	800cfd4 <dir_sdi+0xee>
			ofs -= csz;
 800cf82:	683a      	ldr	r2, [r7, #0]
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	1ad3      	subs	r3, r2, r3
 800cf88:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cf8a:	683a      	ldr	r2, [r7, #0]
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d2e1      	bcs.n	800cf56 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800cf92:	6979      	ldr	r1, [r7, #20]
 800cf94:	6938      	ldr	r0, [r7, #16]
 800cf96:	f7ff fcc5 	bl	800c924 <clust2sect>
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	697a      	ldr	r2, [r7, #20]
 800cfa4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	69db      	ldr	r3, [r3, #28]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d101      	bne.n	800cfb2 <dir_sdi+0xcc>
 800cfae:	2302      	movs	r3, #2
 800cfb0:	e010      	b.n	800cfd4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	69da      	ldr	r2, [r3, #28]
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	0a5b      	lsrs	r3, r3, #9
 800cfba:	441a      	add	r2, r3
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfcc:	441a      	add	r2, r3
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cfd2:	2300      	movs	r3, #0
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3718      	adds	r7, #24
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b086      	sub	sp, #24
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	695b      	ldr	r3, [r3, #20]
 800cff0:	3320      	adds	r3, #32
 800cff2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	69db      	ldr	r3, [r3, #28]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d003      	beq.n	800d004 <dir_next+0x28>
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d002:	d301      	bcc.n	800d008 <dir_next+0x2c>
 800d004:	2304      	movs	r3, #4
 800d006:	e0aa      	b.n	800d15e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d00e:	2b00      	cmp	r3, #0
 800d010:	f040 8098 	bne.w	800d144 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	69db      	ldr	r3, [r3, #28]
 800d018:	1c5a      	adds	r2, r3, #1
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	699b      	ldr	r3, [r3, #24]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d10b      	bne.n	800d03e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	095b      	lsrs	r3, r3, #5
 800d02a:	68fa      	ldr	r2, [r7, #12]
 800d02c:	8912      	ldrh	r2, [r2, #8]
 800d02e:	4293      	cmp	r3, r2
 800d030:	f0c0 8088 	bcc.w	800d144 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2200      	movs	r2, #0
 800d038:	61da      	str	r2, [r3, #28]
 800d03a:	2304      	movs	r3, #4
 800d03c:	e08f      	b.n	800d15e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	0a5b      	lsrs	r3, r3, #9
 800d042:	68fa      	ldr	r2, [r7, #12]
 800d044:	8952      	ldrh	r2, [r2, #10]
 800d046:	3a01      	subs	r2, #1
 800d048:	4013      	ands	r3, r2
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d17a      	bne.n	800d144 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d04e:	687a      	ldr	r2, [r7, #4]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	699b      	ldr	r3, [r3, #24]
 800d054:	4619      	mov	r1, r3
 800d056:	4610      	mov	r0, r2
 800d058:	f7ff fc83 	bl	800c962 <get_fat>
 800d05c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	2b01      	cmp	r3, #1
 800d062:	d801      	bhi.n	800d068 <dir_next+0x8c>
 800d064:	2302      	movs	r3, #2
 800d066:	e07a      	b.n	800d15e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d06e:	d101      	bne.n	800d074 <dir_next+0x98>
 800d070:	2301      	movs	r3, #1
 800d072:	e074      	b.n	800d15e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	699b      	ldr	r3, [r3, #24]
 800d078:	697a      	ldr	r2, [r7, #20]
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d358      	bcc.n	800d130 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d104      	bne.n	800d08e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2200      	movs	r2, #0
 800d088:	61da      	str	r2, [r3, #28]
 800d08a:	2304      	movs	r3, #4
 800d08c:	e067      	b.n	800d15e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d08e:	687a      	ldr	r2, [r7, #4]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	699b      	ldr	r3, [r3, #24]
 800d094:	4619      	mov	r1, r3
 800d096:	4610      	mov	r0, r2
 800d098:	f7ff fe59 	bl	800cd4e <create_chain>
 800d09c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d101      	bne.n	800d0a8 <dir_next+0xcc>
 800d0a4:	2307      	movs	r3, #7
 800d0a6:	e05a      	b.n	800d15e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d101      	bne.n	800d0b2 <dir_next+0xd6>
 800d0ae:	2302      	movs	r3, #2
 800d0b0:	e055      	b.n	800d15e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d0b8:	d101      	bne.n	800d0be <dir_next+0xe2>
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	e04f      	b.n	800d15e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d0be:	68f8      	ldr	r0, [r7, #12]
 800d0c0:	f7ff fb50 	bl	800c764 <sync_window>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d001      	beq.n	800d0ce <dir_next+0xf2>
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e047      	b.n	800d15e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	3334      	adds	r3, #52	@ 0x34
 800d0d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d0d6:	2100      	movs	r1, #0
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7ff f979 	bl	800c3d0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d0de:	2300      	movs	r3, #0
 800d0e0:	613b      	str	r3, [r7, #16]
 800d0e2:	6979      	ldr	r1, [r7, #20]
 800d0e4:	68f8      	ldr	r0, [r7, #12]
 800d0e6:	f7ff fc1d 	bl	800c924 <clust2sect>
 800d0ea:	4602      	mov	r2, r0
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	631a      	str	r2, [r3, #48]	@ 0x30
 800d0f0:	e012      	b.n	800d118 <dir_next+0x13c>
						fs->wflag = 1;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	2201      	movs	r2, #1
 800d0f6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d0f8:	68f8      	ldr	r0, [r7, #12]
 800d0fa:	f7ff fb33 	bl	800c764 <sync_window>
 800d0fe:	4603      	mov	r3, r0
 800d100:	2b00      	cmp	r3, #0
 800d102:	d001      	beq.n	800d108 <dir_next+0x12c>
 800d104:	2301      	movs	r3, #1
 800d106:	e02a      	b.n	800d15e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	3301      	adds	r3, #1
 800d10c:	613b      	str	r3, [r7, #16]
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d112:	1c5a      	adds	r2, r3, #1
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	631a      	str	r2, [r3, #48]	@ 0x30
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	895b      	ldrh	r3, [r3, #10]
 800d11c:	461a      	mov	r2, r3
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	4293      	cmp	r3, r2
 800d122:	d3e6      	bcc.n	800d0f2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	1ad2      	subs	r2, r2, r3
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	697a      	ldr	r2, [r7, #20]
 800d134:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d136:	6979      	ldr	r1, [r7, #20]
 800d138:	68f8      	ldr	r0, [r7, #12]
 800d13a:	f7ff fbf3 	bl	800c924 <clust2sect>
 800d13e:	4602      	mov	r2, r0
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	68ba      	ldr	r2, [r7, #8]
 800d148:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d156:	441a      	add	r2, r3
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d15c:	2300      	movs	r3, #0
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3718      	adds	r7, #24
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}

0800d166 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d166:	b580      	push	{r7, lr}
 800d168:	b086      	sub	sp, #24
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
 800d16e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d176:	2100      	movs	r1, #0
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f7ff feb4 	bl	800cee6 <dir_sdi>
 800d17e:	4603      	mov	r3, r0
 800d180:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d182:	7dfb      	ldrb	r3, [r7, #23]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d12b      	bne.n	800d1e0 <dir_alloc+0x7a>
		n = 0;
 800d188:	2300      	movs	r3, #0
 800d18a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	69db      	ldr	r3, [r3, #28]
 800d190:	4619      	mov	r1, r3
 800d192:	68f8      	ldr	r0, [r7, #12]
 800d194:	f7ff fb2a 	bl	800c7ec <move_window>
 800d198:	4603      	mov	r3, r0
 800d19a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d19c:	7dfb      	ldrb	r3, [r7, #23]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d11d      	bne.n	800d1de <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6a1b      	ldr	r3, [r3, #32]
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	2be5      	cmp	r3, #229	@ 0xe5
 800d1aa:	d004      	beq.n	800d1b6 <dir_alloc+0x50>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6a1b      	ldr	r3, [r3, #32]
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d107      	bne.n	800d1c6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	613b      	str	r3, [r7, #16]
 800d1bc:	693a      	ldr	r2, [r7, #16]
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	d102      	bne.n	800d1ca <dir_alloc+0x64>
 800d1c4:	e00c      	b.n	800d1e0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d1ca:	2101      	movs	r1, #1
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f7ff ff05 	bl	800cfdc <dir_next>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d1d6:	7dfb      	ldrb	r3, [r7, #23]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d0d7      	beq.n	800d18c <dir_alloc+0x26>
 800d1dc:	e000      	b.n	800d1e0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d1de:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d1e0:	7dfb      	ldrb	r3, [r7, #23]
 800d1e2:	2b04      	cmp	r3, #4
 800d1e4:	d101      	bne.n	800d1ea <dir_alloc+0x84>
 800d1e6:	2307      	movs	r3, #7
 800d1e8:	75fb      	strb	r3, [r7, #23]
	return res;
 800d1ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3718      	adds	r7, #24
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b084      	sub	sp, #16
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	331a      	adds	r3, #26
 800d202:	4618      	mov	r0, r3
 800d204:	f7ff f840 	bl	800c288 <ld_word>
 800d208:	4603      	mov	r3, r0
 800d20a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	781b      	ldrb	r3, [r3, #0]
 800d210:	2b03      	cmp	r3, #3
 800d212:	d109      	bne.n	800d228 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	3314      	adds	r3, #20
 800d218:	4618      	mov	r0, r3
 800d21a:	f7ff f835 	bl	800c288 <ld_word>
 800d21e:	4603      	mov	r3, r0
 800d220:	041b      	lsls	r3, r3, #16
 800d222:	68fa      	ldr	r2, [r7, #12]
 800d224:	4313      	orrs	r3, r2
 800d226:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d228:	68fb      	ldr	r3, [r7, #12]
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d232:	b580      	push	{r7, lr}
 800d234:	b084      	sub	sp, #16
 800d236:	af00      	add	r7, sp, #0
 800d238:	60f8      	str	r0, [r7, #12]
 800d23a:	60b9      	str	r1, [r7, #8]
 800d23c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	331a      	adds	r3, #26
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	b292      	uxth	r2, r2
 800d246:	4611      	mov	r1, r2
 800d248:	4618      	mov	r0, r3
 800d24a:	f7ff f859 	bl	800c300 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	2b03      	cmp	r3, #3
 800d254:	d109      	bne.n	800d26a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	f103 0214 	add.w	r2, r3, #20
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	0c1b      	lsrs	r3, r3, #16
 800d260:	b29b      	uxth	r3, r3
 800d262:	4619      	mov	r1, r3
 800d264:	4610      	mov	r0, r2
 800d266:	f7ff f84b 	bl	800c300 <st_word>
	}
}
 800d26a:	bf00      	nop
 800d26c:	3710      	adds	r7, #16
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
	...

0800d274 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d274:	b590      	push	{r4, r7, lr}
 800d276:	b087      	sub	sp, #28
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	331a      	adds	r3, #26
 800d282:	4618      	mov	r0, r3
 800d284:	f7ff f800 	bl	800c288 <ld_word>
 800d288:	4603      	mov	r3, r0
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d001      	beq.n	800d292 <cmp_lfn+0x1e>
 800d28e:	2300      	movs	r3, #0
 800d290:	e059      	b.n	800d346 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d29a:	1e5a      	subs	r2, r3, #1
 800d29c:	4613      	mov	r3, r2
 800d29e:	005b      	lsls	r3, r3, #1
 800d2a0:	4413      	add	r3, r2
 800d2a2:	009b      	lsls	r3, r3, #2
 800d2a4:	4413      	add	r3, r2
 800d2a6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	81fb      	strh	r3, [r7, #14]
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	613b      	str	r3, [r7, #16]
 800d2b0:	e033      	b.n	800d31a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d2b2:	4a27      	ldr	r2, [pc, #156]	@ (800d350 <cmp_lfn+0xdc>)
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	4413      	add	r3, r2
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	4413      	add	r3, r2
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7fe ffe1 	bl	800c288 <ld_word>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d2ca:	89fb      	ldrh	r3, [r7, #14]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d01a      	beq.n	800d306 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	2bfe      	cmp	r3, #254	@ 0xfe
 800d2d4:	d812      	bhi.n	800d2fc <cmp_lfn+0x88>
 800d2d6:	89bb      	ldrh	r3, [r7, #12]
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f001 fed7 	bl	800f08c <ff_wtoupper>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	461c      	mov	r4, r3
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	1c5a      	adds	r2, r3, #1
 800d2e6:	617a      	str	r2, [r7, #20]
 800d2e8:	005b      	lsls	r3, r3, #1
 800d2ea:	687a      	ldr	r2, [r7, #4]
 800d2ec:	4413      	add	r3, r2
 800d2ee:	881b      	ldrh	r3, [r3, #0]
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f001 fecb 	bl	800f08c <ff_wtoupper>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	429c      	cmp	r4, r3
 800d2fa:	d001      	beq.n	800d300 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	e022      	b.n	800d346 <cmp_lfn+0xd2>
			}
			wc = uc;
 800d300:	89bb      	ldrh	r3, [r7, #12]
 800d302:	81fb      	strh	r3, [r7, #14]
 800d304:	e006      	b.n	800d314 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d306:	89bb      	ldrh	r3, [r7, #12]
 800d308:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d001      	beq.n	800d314 <cmp_lfn+0xa0>
 800d310:	2300      	movs	r3, #0
 800d312:	e018      	b.n	800d346 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	3301      	adds	r3, #1
 800d318:	613b      	str	r3, [r7, #16]
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	2b0c      	cmp	r3, #12
 800d31e:	d9c8      	bls.n	800d2b2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d00b      	beq.n	800d344 <cmp_lfn+0xd0>
 800d32c:	89fb      	ldrh	r3, [r7, #14]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d008      	beq.n	800d344 <cmp_lfn+0xd0>
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	005b      	lsls	r3, r3, #1
 800d336:	687a      	ldr	r2, [r7, #4]
 800d338:	4413      	add	r3, r2
 800d33a:	881b      	ldrh	r3, [r3, #0]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d001      	beq.n	800d344 <cmp_lfn+0xd0>
 800d340:	2300      	movs	r3, #0
 800d342:	e000      	b.n	800d346 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d344:	2301      	movs	r3, #1
}
 800d346:	4618      	mov	r0, r3
 800d348:	371c      	adds	r7, #28
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd90      	pop	{r4, r7, pc}
 800d34e:	bf00      	nop
 800d350:	08013814 	.word	0x08013814

0800d354 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b088      	sub	sp, #32
 800d358:	af00      	add	r7, sp, #0
 800d35a:	60f8      	str	r0, [r7, #12]
 800d35c:	60b9      	str	r1, [r7, #8]
 800d35e:	4611      	mov	r1, r2
 800d360:	461a      	mov	r2, r3
 800d362:	460b      	mov	r3, r1
 800d364:	71fb      	strb	r3, [r7, #7]
 800d366:	4613      	mov	r3, r2
 800d368:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	330d      	adds	r3, #13
 800d36e:	79ba      	ldrb	r2, [r7, #6]
 800d370:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	330b      	adds	r3, #11
 800d376:	220f      	movs	r2, #15
 800d378:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	330c      	adds	r3, #12
 800d37e:	2200      	movs	r2, #0
 800d380:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	331a      	adds	r3, #26
 800d386:	2100      	movs	r1, #0
 800d388:	4618      	mov	r0, r3
 800d38a:	f7fe ffb9 	bl	800c300 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d38e:	79fb      	ldrb	r3, [r7, #7]
 800d390:	1e5a      	subs	r2, r3, #1
 800d392:	4613      	mov	r3, r2
 800d394:	005b      	lsls	r3, r3, #1
 800d396:	4413      	add	r3, r2
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	4413      	add	r3, r2
 800d39c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	82fb      	strh	r3, [r7, #22]
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d3a6:	8afb      	ldrh	r3, [r7, #22]
 800d3a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d007      	beq.n	800d3c0 <put_lfn+0x6c>
 800d3b0:	69fb      	ldr	r3, [r7, #28]
 800d3b2:	1c5a      	adds	r2, r3, #1
 800d3b4:	61fa      	str	r2, [r7, #28]
 800d3b6:	005b      	lsls	r3, r3, #1
 800d3b8:	68fa      	ldr	r2, [r7, #12]
 800d3ba:	4413      	add	r3, r2
 800d3bc:	881b      	ldrh	r3, [r3, #0]
 800d3be:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d3c0:	4a17      	ldr	r2, [pc, #92]	@ (800d420 <put_lfn+0xcc>)
 800d3c2:	69bb      	ldr	r3, [r7, #24]
 800d3c4:	4413      	add	r3, r2
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	4413      	add	r3, r2
 800d3ce:	8afa      	ldrh	r2, [r7, #22]
 800d3d0:	4611      	mov	r1, r2
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7fe ff94 	bl	800c300 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d3d8:	8afb      	ldrh	r3, [r7, #22]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d102      	bne.n	800d3e4 <put_lfn+0x90>
 800d3de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d3e2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d3e4:	69bb      	ldr	r3, [r7, #24]
 800d3e6:	3301      	adds	r3, #1
 800d3e8:	61bb      	str	r3, [r7, #24]
 800d3ea:	69bb      	ldr	r3, [r7, #24]
 800d3ec:	2b0c      	cmp	r3, #12
 800d3ee:	d9da      	bls.n	800d3a6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d3f0:	8afb      	ldrh	r3, [r7, #22]
 800d3f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d006      	beq.n	800d408 <put_lfn+0xb4>
 800d3fa:	69fb      	ldr	r3, [r7, #28]
 800d3fc:	005b      	lsls	r3, r3, #1
 800d3fe:	68fa      	ldr	r2, [r7, #12]
 800d400:	4413      	add	r3, r2
 800d402:	881b      	ldrh	r3, [r3, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d103      	bne.n	800d410 <put_lfn+0xbc>
 800d408:	79fb      	ldrb	r3, [r7, #7]
 800d40a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d40e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	79fa      	ldrb	r2, [r7, #7]
 800d414:	701a      	strb	r2, [r3, #0]
}
 800d416:	bf00      	nop
 800d418:	3720      	adds	r7, #32
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	08013814 	.word	0x08013814

0800d424 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b08c      	sub	sp, #48	@ 0x30
 800d428:	af00      	add	r7, sp, #0
 800d42a:	60f8      	str	r0, [r7, #12]
 800d42c:	60b9      	str	r1, [r7, #8]
 800d42e:	607a      	str	r2, [r7, #4]
 800d430:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d432:	220b      	movs	r2, #11
 800d434:	68b9      	ldr	r1, [r7, #8]
 800d436:	68f8      	ldr	r0, [r7, #12]
 800d438:	f7fe ffa9 	bl	800c38e <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	2b05      	cmp	r3, #5
 800d440:	d92b      	bls.n	800d49a <gen_numname+0x76>
		sr = seq;
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d446:	e022      	b.n	800d48e <gen_numname+0x6a>
			wc = *lfn++;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	1c9a      	adds	r2, r3, #2
 800d44c:	607a      	str	r2, [r7, #4]
 800d44e:	881b      	ldrh	r3, [r3, #0]
 800d450:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800d452:	2300      	movs	r3, #0
 800d454:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d456:	e017      	b.n	800d488 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d458:	69fb      	ldr	r3, [r7, #28]
 800d45a:	005a      	lsls	r2, r3, #1
 800d45c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d45e:	f003 0301 	and.w	r3, r3, #1
 800d462:	4413      	add	r3, r2
 800d464:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d466:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d468:	085b      	lsrs	r3, r3, #1
 800d46a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d46c:	69fb      	ldr	r3, [r7, #28]
 800d46e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d472:	2b00      	cmp	r3, #0
 800d474:	d005      	beq.n	800d482 <gen_numname+0x5e>
 800d476:	69fb      	ldr	r3, [r7, #28]
 800d478:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800d47c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800d480:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d484:	3301      	adds	r3, #1
 800d486:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d48a:	2b0f      	cmp	r3, #15
 800d48c:	d9e4      	bls.n	800d458 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	881b      	ldrh	r3, [r3, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d1d8      	bne.n	800d448 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d496:	69fb      	ldr	r3, [r7, #28]
 800d498:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d49a:	2307      	movs	r3, #7
 800d49c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	b2db      	uxtb	r3, r3
 800d4a2:	f003 030f 	and.w	r3, r3, #15
 800d4a6:	b2db      	uxtb	r3, r3
 800d4a8:	3330      	adds	r3, #48	@ 0x30
 800d4aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800d4ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d4b2:	2b39      	cmp	r3, #57	@ 0x39
 800d4b4:	d904      	bls.n	800d4c0 <gen_numname+0x9c>
 800d4b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d4ba:	3307      	adds	r3, #7
 800d4bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800d4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4c2:	1e5a      	subs	r2, r3, #1
 800d4c4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d4c6:	3330      	adds	r3, #48	@ 0x30
 800d4c8:	443b      	add	r3, r7
 800d4ca:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800d4ce:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	091b      	lsrs	r3, r3, #4
 800d4d6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d1df      	bne.n	800d49e <gen_numname+0x7a>
	ns[i] = '~';
 800d4de:	f107 0214 	add.w	r2, r7, #20
 800d4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4e4:	4413      	add	r3, r2
 800d4e6:	227e      	movs	r2, #126	@ 0x7e
 800d4e8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800d4ee:	e002      	b.n	800d4f6 <gen_numname+0xd2>
 800d4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d4f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d205      	bcs.n	800d50a <gen_numname+0xe6>
 800d4fe:	68fa      	ldr	r2, [r7, #12]
 800d500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d502:	4413      	add	r3, r2
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	2b20      	cmp	r3, #32
 800d508:	d1f2      	bne.n	800d4f0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d50c:	2b07      	cmp	r3, #7
 800d50e:	d807      	bhi.n	800d520 <gen_numname+0xfc>
 800d510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d512:	1c5a      	adds	r2, r3, #1
 800d514:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d516:	3330      	adds	r3, #48	@ 0x30
 800d518:	443b      	add	r3, r7
 800d51a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d51e:	e000      	b.n	800d522 <gen_numname+0xfe>
 800d520:	2120      	movs	r1, #32
 800d522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d524:	1c5a      	adds	r2, r3, #1
 800d526:	627a      	str	r2, [r7, #36]	@ 0x24
 800d528:	68fa      	ldr	r2, [r7, #12]
 800d52a:	4413      	add	r3, r2
 800d52c:	460a      	mov	r2, r1
 800d52e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d532:	2b07      	cmp	r3, #7
 800d534:	d9e9      	bls.n	800d50a <gen_numname+0xe6>
}
 800d536:	bf00      	nop
 800d538:	bf00      	nop
 800d53a:	3730      	adds	r7, #48	@ 0x30
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}

0800d540 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d540:	b480      	push	{r7}
 800d542:	b085      	sub	sp, #20
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d548:	2300      	movs	r3, #0
 800d54a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d54c:	230b      	movs	r3, #11
 800d54e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d550:	7bfb      	ldrb	r3, [r7, #15]
 800d552:	b2da      	uxtb	r2, r3
 800d554:	0852      	lsrs	r2, r2, #1
 800d556:	01db      	lsls	r3, r3, #7
 800d558:	4313      	orrs	r3, r2
 800d55a:	b2da      	uxtb	r2, r3
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	1c59      	adds	r1, r3, #1
 800d560:	6079      	str	r1, [r7, #4]
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	4413      	add	r3, r2
 800d566:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	3b01      	subs	r3, #1
 800d56c:	60bb      	str	r3, [r7, #8]
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d1ed      	bne.n	800d550 <sum_sfn+0x10>
	return sum;
 800d574:	7bfb      	ldrb	r3, [r7, #15]
}
 800d576:	4618      	mov	r0, r3
 800d578:	3714      	adds	r7, #20
 800d57a:	46bd      	mov	sp, r7
 800d57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d580:	4770      	bx	lr

0800d582 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d582:	b580      	push	{r7, lr}
 800d584:	b086      	sub	sp, #24
 800d586:	af00      	add	r7, sp, #0
 800d588:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d590:	2100      	movs	r1, #0
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f7ff fca7 	bl	800cee6 <dir_sdi>
 800d598:	4603      	mov	r3, r0
 800d59a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d59c:	7dfb      	ldrb	r3, [r7, #23]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d001      	beq.n	800d5a6 <dir_find+0x24>
 800d5a2:	7dfb      	ldrb	r3, [r7, #23]
 800d5a4:	e0a9      	b.n	800d6fa <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d5a6:	23ff      	movs	r3, #255	@ 0xff
 800d5a8:	753b      	strb	r3, [r7, #20]
 800d5aa:	7d3b      	ldrb	r3, [r7, #20]
 800d5ac:	757b      	strb	r3, [r7, #21]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d5b4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	69db      	ldr	r3, [r3, #28]
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	6938      	ldr	r0, [r7, #16]
 800d5be:	f7ff f915 	bl	800c7ec <move_window>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d5c6:	7dfb      	ldrb	r3, [r7, #23]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	f040 8090 	bne.w	800d6ee <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6a1b      	ldr	r3, [r3, #32]
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d5d6:	7dbb      	ldrb	r3, [r7, #22]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d102      	bne.n	800d5e2 <dir_find+0x60>
 800d5dc:	2304      	movs	r3, #4
 800d5de:	75fb      	strb	r3, [r7, #23]
 800d5e0:	e08a      	b.n	800d6f8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6a1b      	ldr	r3, [r3, #32]
 800d5e6:	330b      	adds	r3, #11
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d5ee:	73fb      	strb	r3, [r7, #15]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	7bfa      	ldrb	r2, [r7, #15]
 800d5f4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d5f6:	7dbb      	ldrb	r3, [r7, #22]
 800d5f8:	2be5      	cmp	r3, #229	@ 0xe5
 800d5fa:	d007      	beq.n	800d60c <dir_find+0x8a>
 800d5fc:	7bfb      	ldrb	r3, [r7, #15]
 800d5fe:	f003 0308 	and.w	r3, r3, #8
 800d602:	2b00      	cmp	r3, #0
 800d604:	d009      	beq.n	800d61a <dir_find+0x98>
 800d606:	7bfb      	ldrb	r3, [r7, #15]
 800d608:	2b0f      	cmp	r3, #15
 800d60a:	d006      	beq.n	800d61a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d60c:	23ff      	movs	r3, #255	@ 0xff
 800d60e:	757b      	strb	r3, [r7, #21]
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d616:	631a      	str	r2, [r3, #48]	@ 0x30
 800d618:	e05e      	b.n	800d6d8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d61a:	7bfb      	ldrb	r3, [r7, #15]
 800d61c:	2b0f      	cmp	r3, #15
 800d61e:	d136      	bne.n	800d68e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d154      	bne.n	800d6d8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d62e:	7dbb      	ldrb	r3, [r7, #22]
 800d630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d634:	2b00      	cmp	r3, #0
 800d636:	d00d      	beq.n	800d654 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6a1b      	ldr	r3, [r3, #32]
 800d63c:	7b5b      	ldrb	r3, [r3, #13]
 800d63e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d640:	7dbb      	ldrb	r3, [r7, #22]
 800d642:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d646:	75bb      	strb	r3, [r7, #22]
 800d648:	7dbb      	ldrb	r3, [r7, #22]
 800d64a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	695a      	ldr	r2, [r3, #20]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d654:	7dba      	ldrb	r2, [r7, #22]
 800d656:	7d7b      	ldrb	r3, [r7, #21]
 800d658:	429a      	cmp	r2, r3
 800d65a:	d115      	bne.n	800d688 <dir_find+0x106>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6a1b      	ldr	r3, [r3, #32]
 800d660:	330d      	adds	r3, #13
 800d662:	781b      	ldrb	r3, [r3, #0]
 800d664:	7d3a      	ldrb	r2, [r7, #20]
 800d666:	429a      	cmp	r2, r3
 800d668:	d10e      	bne.n	800d688 <dir_find+0x106>
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	68da      	ldr	r2, [r3, #12]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6a1b      	ldr	r3, [r3, #32]
 800d672:	4619      	mov	r1, r3
 800d674:	4610      	mov	r0, r2
 800d676:	f7ff fdfd 	bl	800d274 <cmp_lfn>
 800d67a:	4603      	mov	r3, r0
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d003      	beq.n	800d688 <dir_find+0x106>
 800d680:	7d7b      	ldrb	r3, [r7, #21]
 800d682:	3b01      	subs	r3, #1
 800d684:	b2db      	uxtb	r3, r3
 800d686:	e000      	b.n	800d68a <dir_find+0x108>
 800d688:	23ff      	movs	r3, #255	@ 0xff
 800d68a:	757b      	strb	r3, [r7, #21]
 800d68c:	e024      	b.n	800d6d8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d68e:	7d7b      	ldrb	r3, [r7, #21]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d109      	bne.n	800d6a8 <dir_find+0x126>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6a1b      	ldr	r3, [r3, #32]
 800d698:	4618      	mov	r0, r3
 800d69a:	f7ff ff51 	bl	800d540 <sum_sfn>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	7d3b      	ldrb	r3, [r7, #20]
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	d024      	beq.n	800d6f2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d6ae:	f003 0301 	and.w	r3, r3, #1
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d10a      	bne.n	800d6cc <dir_find+0x14a>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6a18      	ldr	r0, [r3, #32]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	3324      	adds	r3, #36	@ 0x24
 800d6be:	220b      	movs	r2, #11
 800d6c0:	4619      	mov	r1, r3
 800d6c2:	f7fe fea0 	bl	800c406 <mem_cmp>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d014      	beq.n	800d6f6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d6cc:	23ff      	movs	r3, #255	@ 0xff
 800d6ce:	757b      	strb	r3, [r7, #21]
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d6d6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d6d8:	2100      	movs	r1, #0
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f7ff fc7e 	bl	800cfdc <dir_next>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d6e4:	7dfb      	ldrb	r3, [r7, #23]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	f43f af65 	beq.w	800d5b6 <dir_find+0x34>
 800d6ec:	e004      	b.n	800d6f8 <dir_find+0x176>
		if (res != FR_OK) break;
 800d6ee:	bf00      	nop
 800d6f0:	e002      	b.n	800d6f8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d6f2:	bf00      	nop
 800d6f4:	e000      	b.n	800d6f8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d6f6:	bf00      	nop

	return res;
 800d6f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3718      	adds	r7, #24
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}
	...

0800d704 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b08c      	sub	sp, #48	@ 0x30
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d718:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d001      	beq.n	800d724 <dir_register+0x20>
 800d720:	2306      	movs	r3, #6
 800d722:	e0e0      	b.n	800d8e6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d724:	2300      	movs	r3, #0
 800d726:	627b      	str	r3, [r7, #36]	@ 0x24
 800d728:	e002      	b.n	800d730 <dir_register+0x2c>
 800d72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d72c:	3301      	adds	r3, #1
 800d72e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d730:	69fb      	ldr	r3, [r7, #28]
 800d732:	68da      	ldr	r2, [r3, #12]
 800d734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d736:	005b      	lsls	r3, r3, #1
 800d738:	4413      	add	r3, r2
 800d73a:	881b      	ldrh	r3, [r3, #0]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d1f4      	bne.n	800d72a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800d746:	f107 030c 	add.w	r3, r7, #12
 800d74a:	220c      	movs	r2, #12
 800d74c:	4618      	mov	r0, r3
 800d74e:	f7fe fe1e 	bl	800c38e <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d752:	7dfb      	ldrb	r3, [r7, #23]
 800d754:	f003 0301 	and.w	r3, r3, #1
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d032      	beq.n	800d7c2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2240      	movs	r2, #64	@ 0x40
 800d760:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800d764:	2301      	movs	r3, #1
 800d766:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d768:	e016      	b.n	800d798 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800d770:	69fb      	ldr	r3, [r7, #28]
 800d772:	68da      	ldr	r2, [r3, #12]
 800d774:	f107 010c 	add.w	r1, r7, #12
 800d778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d77a:	f7ff fe53 	bl	800d424 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f7ff feff 	bl	800d582 <dir_find>
 800d784:	4603      	mov	r3, r0
 800d786:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800d78a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d106      	bne.n	800d7a0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d794:	3301      	adds	r3, #1
 800d796:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d79a:	2b63      	cmp	r3, #99	@ 0x63
 800d79c:	d9e5      	bls.n	800d76a <dir_register+0x66>
 800d79e:	e000      	b.n	800d7a2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800d7a0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7a4:	2b64      	cmp	r3, #100	@ 0x64
 800d7a6:	d101      	bne.n	800d7ac <dir_register+0xa8>
 800d7a8:	2307      	movs	r3, #7
 800d7aa:	e09c      	b.n	800d8e6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d7ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d7b0:	2b04      	cmp	r3, #4
 800d7b2:	d002      	beq.n	800d7ba <dir_register+0xb6>
 800d7b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d7b8:	e095      	b.n	800d8e6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d7ba:	7dfa      	ldrb	r2, [r7, #23]
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d7c2:	7dfb      	ldrb	r3, [r7, #23]
 800d7c4:	f003 0302 	and.w	r3, r3, #2
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d007      	beq.n	800d7dc <dir_register+0xd8>
 800d7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ce:	330c      	adds	r3, #12
 800d7d0:	4a47      	ldr	r2, [pc, #284]	@ (800d8f0 <dir_register+0x1ec>)
 800d7d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d7d6:	089b      	lsrs	r3, r3, #2
 800d7d8:	3301      	adds	r3, #1
 800d7da:	e000      	b.n	800d7de <dir_register+0xda>
 800d7dc:	2301      	movs	r3, #1
 800d7de:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d7e0:	6a39      	ldr	r1, [r7, #32]
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f7ff fcbf 	bl	800d166 <dir_alloc>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d7ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d148      	bne.n	800d888 <dir_register+0x184>
 800d7f6:	6a3b      	ldr	r3, [r7, #32]
 800d7f8:	3b01      	subs	r3, #1
 800d7fa:	623b      	str	r3, [r7, #32]
 800d7fc:	6a3b      	ldr	r3, [r7, #32]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d042      	beq.n	800d888 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	695a      	ldr	r2, [r3, #20]
 800d806:	6a3b      	ldr	r3, [r7, #32]
 800d808:	015b      	lsls	r3, r3, #5
 800d80a:	1ad3      	subs	r3, r2, r3
 800d80c:	4619      	mov	r1, r3
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f7ff fb69 	bl	800cee6 <dir_sdi>
 800d814:	4603      	mov	r3, r0
 800d816:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800d81a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d132      	bne.n	800d888 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	3324      	adds	r3, #36	@ 0x24
 800d826:	4618      	mov	r0, r3
 800d828:	f7ff fe8a 	bl	800d540 <sum_sfn>
 800d82c:	4603      	mov	r3, r0
 800d82e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	69db      	ldr	r3, [r3, #28]
 800d834:	4619      	mov	r1, r3
 800d836:	69f8      	ldr	r0, [r7, #28]
 800d838:	f7fe ffd8 	bl	800c7ec <move_window>
 800d83c:	4603      	mov	r3, r0
 800d83e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800d842:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d846:	2b00      	cmp	r3, #0
 800d848:	d11d      	bne.n	800d886 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d84a:	69fb      	ldr	r3, [r7, #28]
 800d84c:	68d8      	ldr	r0, [r3, #12]
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6a19      	ldr	r1, [r3, #32]
 800d852:	6a3b      	ldr	r3, [r7, #32]
 800d854:	b2da      	uxtb	r2, r3
 800d856:	7efb      	ldrb	r3, [r7, #27]
 800d858:	f7ff fd7c 	bl	800d354 <put_lfn>
				fs->wflag = 1;
 800d85c:	69fb      	ldr	r3, [r7, #28]
 800d85e:	2201      	movs	r2, #1
 800d860:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d862:	2100      	movs	r1, #0
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f7ff fbb9 	bl	800cfdc <dir_next>
 800d86a:	4603      	mov	r3, r0
 800d86c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800d870:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d874:	2b00      	cmp	r3, #0
 800d876:	d107      	bne.n	800d888 <dir_register+0x184>
 800d878:	6a3b      	ldr	r3, [r7, #32]
 800d87a:	3b01      	subs	r3, #1
 800d87c:	623b      	str	r3, [r7, #32]
 800d87e:	6a3b      	ldr	r3, [r7, #32]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d1d5      	bne.n	800d830 <dir_register+0x12c>
 800d884:	e000      	b.n	800d888 <dir_register+0x184>
				if (res != FR_OK) break;
 800d886:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d888:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d128      	bne.n	800d8e2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	69db      	ldr	r3, [r3, #28]
 800d894:	4619      	mov	r1, r3
 800d896:	69f8      	ldr	r0, [r7, #28]
 800d898:	f7fe ffa8 	bl	800c7ec <move_window>
 800d89c:	4603      	mov	r3, r0
 800d89e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800d8a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d11b      	bne.n	800d8e2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6a1b      	ldr	r3, [r3, #32]
 800d8ae:	2220      	movs	r2, #32
 800d8b0:	2100      	movs	r1, #0
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f7fe fd8c 	bl	800c3d0 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6a18      	ldr	r0, [r3, #32]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	3324      	adds	r3, #36	@ 0x24
 800d8c0:	220b      	movs	r2, #11
 800d8c2:	4619      	mov	r1, r3
 800d8c4:	f7fe fd63 	bl	800c38e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6a1b      	ldr	r3, [r3, #32]
 800d8d2:	330c      	adds	r3, #12
 800d8d4:	f002 0218 	and.w	r2, r2, #24
 800d8d8:	b2d2      	uxtb	r2, r2
 800d8da:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d8dc:	69fb      	ldr	r3, [r7, #28]
 800d8de:	2201      	movs	r2, #1
 800d8e0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d8e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3730      	adds	r7, #48	@ 0x30
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	4ec4ec4f 	.word	0x4ec4ec4f

0800d8f4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b088      	sub	sp, #32
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	2200      	movs	r2, #0
 800d908:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	69db      	ldr	r3, [r3, #28]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	f000 80ca 	beq.w	800daa8 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d918:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d91c:	d032      	beq.n	800d984 <get_fileinfo+0x90>
			i = j = 0;
 800d91e:	2300      	movs	r3, #0
 800d920:	61bb      	str	r3, [r7, #24]
 800d922:	69bb      	ldr	r3, [r7, #24]
 800d924:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d926:	e01b      	b.n	800d960 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800d928:	89fb      	ldrh	r3, [r7, #14]
 800d92a:	2100      	movs	r1, #0
 800d92c:	4618      	mov	r0, r3
 800d92e:	f001 fb71 	bl	800f014 <ff_convert>
 800d932:	4603      	mov	r3, r0
 800d934:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800d936:	89fb      	ldrh	r3, [r7, #14]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d102      	bne.n	800d942 <get_fileinfo+0x4e>
 800d93c:	2300      	movs	r3, #0
 800d93e:	61fb      	str	r3, [r7, #28]
 800d940:	e01a      	b.n	800d978 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800d942:	69fb      	ldr	r3, [r7, #28]
 800d944:	2bfe      	cmp	r3, #254	@ 0xfe
 800d946:	d902      	bls.n	800d94e <get_fileinfo+0x5a>
 800d948:	2300      	movs	r3, #0
 800d94a:	61fb      	str	r3, [r7, #28]
 800d94c:	e014      	b.n	800d978 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800d94e:	69fb      	ldr	r3, [r7, #28]
 800d950:	1c5a      	adds	r2, r3, #1
 800d952:	61fa      	str	r2, [r7, #28]
 800d954:	89fa      	ldrh	r2, [r7, #14]
 800d956:	b2d1      	uxtb	r1, r2
 800d958:	683a      	ldr	r2, [r7, #0]
 800d95a:	4413      	add	r3, r2
 800d95c:	460a      	mov	r2, r1
 800d95e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	68da      	ldr	r2, [r3, #12]
 800d964:	69bb      	ldr	r3, [r7, #24]
 800d966:	1c59      	adds	r1, r3, #1
 800d968:	61b9      	str	r1, [r7, #24]
 800d96a:	005b      	lsls	r3, r3, #1
 800d96c:	4413      	add	r3, r2
 800d96e:	881b      	ldrh	r3, [r3, #0]
 800d970:	81fb      	strh	r3, [r7, #14]
 800d972:	89fb      	ldrh	r3, [r7, #14]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d1d7      	bne.n	800d928 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800d978:	683a      	ldr	r2, [r7, #0]
 800d97a:	69fb      	ldr	r3, [r7, #28]
 800d97c:	4413      	add	r3, r2
 800d97e:	3316      	adds	r3, #22
 800d980:	2200      	movs	r2, #0
 800d982:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800d984:	2300      	movs	r3, #0
 800d986:	61bb      	str	r3, [r7, #24]
 800d988:	69bb      	ldr	r3, [r7, #24]
 800d98a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800d98c:	683a      	ldr	r2, [r7, #0]
 800d98e:	69fb      	ldr	r3, [r7, #28]
 800d990:	4413      	add	r3, r2
 800d992:	3316      	adds	r3, #22
 800d994:	781b      	ldrb	r3, [r3, #0]
 800d996:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800d998:	e04d      	b.n	800da36 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6a1a      	ldr	r2, [r3, #32]
 800d99e:	69fb      	ldr	r3, [r7, #28]
 800d9a0:	1c59      	adds	r1, r3, #1
 800d9a2:	61f9      	str	r1, [r7, #28]
 800d9a4:	4413      	add	r3, r2
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d9aa:	7dfb      	ldrb	r3, [r7, #23]
 800d9ac:	2b20      	cmp	r3, #32
 800d9ae:	d041      	beq.n	800da34 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d9b0:	7dfb      	ldrb	r3, [r7, #23]
 800d9b2:	2b05      	cmp	r3, #5
 800d9b4:	d101      	bne.n	800d9ba <get_fileinfo+0xc6>
 800d9b6:	23e5      	movs	r3, #229	@ 0xe5
 800d9b8:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800d9ba:	69fb      	ldr	r3, [r7, #28]
 800d9bc:	2b09      	cmp	r3, #9
 800d9be:	d10f      	bne.n	800d9e0 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 800d9c0:	89bb      	ldrh	r3, [r7, #12]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d105      	bne.n	800d9d2 <get_fileinfo+0xde>
 800d9c6:	683a      	ldr	r2, [r7, #0]
 800d9c8:	69bb      	ldr	r3, [r7, #24]
 800d9ca:	4413      	add	r3, r2
 800d9cc:	3316      	adds	r3, #22
 800d9ce:	222e      	movs	r2, #46	@ 0x2e
 800d9d0:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800d9d2:	69bb      	ldr	r3, [r7, #24]
 800d9d4:	1c5a      	adds	r2, r3, #1
 800d9d6:	61ba      	str	r2, [r7, #24]
 800d9d8:	683a      	ldr	r2, [r7, #0]
 800d9da:	4413      	add	r3, r2
 800d9dc:	222e      	movs	r2, #46	@ 0x2e
 800d9de:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800d9e0:	683a      	ldr	r2, [r7, #0]
 800d9e2:	69bb      	ldr	r3, [r7, #24]
 800d9e4:	4413      	add	r3, r2
 800d9e6:	3309      	adds	r3, #9
 800d9e8:	7dfa      	ldrb	r2, [r7, #23]
 800d9ea:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800d9ec:	89bb      	ldrh	r3, [r7, #12]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d11c      	bne.n	800da2c <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800d9f2:	7dfb      	ldrb	r3, [r7, #23]
 800d9f4:	2b40      	cmp	r3, #64	@ 0x40
 800d9f6:	d913      	bls.n	800da20 <get_fileinfo+0x12c>
 800d9f8:	7dfb      	ldrb	r3, [r7, #23]
 800d9fa:	2b5a      	cmp	r3, #90	@ 0x5a
 800d9fc:	d810      	bhi.n	800da20 <get_fileinfo+0x12c>
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6a1b      	ldr	r3, [r3, #32]
 800da02:	330c      	adds	r3, #12
 800da04:	781b      	ldrb	r3, [r3, #0]
 800da06:	461a      	mov	r2, r3
 800da08:	69fb      	ldr	r3, [r7, #28]
 800da0a:	2b08      	cmp	r3, #8
 800da0c:	d901      	bls.n	800da12 <get_fileinfo+0x11e>
 800da0e:	2310      	movs	r3, #16
 800da10:	e000      	b.n	800da14 <get_fileinfo+0x120>
 800da12:	2308      	movs	r3, #8
 800da14:	4013      	ands	r3, r2
 800da16:	2b00      	cmp	r3, #0
 800da18:	d002      	beq.n	800da20 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 800da1a:	7dfb      	ldrb	r3, [r7, #23]
 800da1c:	3320      	adds	r3, #32
 800da1e:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800da20:	683a      	ldr	r2, [r7, #0]
 800da22:	69bb      	ldr	r3, [r7, #24]
 800da24:	4413      	add	r3, r2
 800da26:	3316      	adds	r3, #22
 800da28:	7dfa      	ldrb	r2, [r7, #23]
 800da2a:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800da2c:	69bb      	ldr	r3, [r7, #24]
 800da2e:	3301      	adds	r3, #1
 800da30:	61bb      	str	r3, [r7, #24]
 800da32:	e000      	b.n	800da36 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 800da34:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800da36:	69fb      	ldr	r3, [r7, #28]
 800da38:	2b0a      	cmp	r3, #10
 800da3a:	d9ae      	bls.n	800d99a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800da3c:	89bb      	ldrh	r3, [r7, #12]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d10d      	bne.n	800da5e <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 800da42:	683a      	ldr	r2, [r7, #0]
 800da44:	69bb      	ldr	r3, [r7, #24]
 800da46:	4413      	add	r3, r2
 800da48:	3316      	adds	r3, #22
 800da4a:	2200      	movs	r2, #0
 800da4c:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6a1b      	ldr	r3, [r3, #32]
 800da52:	330c      	adds	r3, #12
 800da54:	781b      	ldrb	r3, [r3, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d101      	bne.n	800da5e <get_fileinfo+0x16a>
 800da5a:	2300      	movs	r3, #0
 800da5c:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800da5e:	683a      	ldr	r2, [r7, #0]
 800da60:	69bb      	ldr	r3, [r7, #24]
 800da62:	4413      	add	r3, r2
 800da64:	3309      	adds	r3, #9
 800da66:	2200      	movs	r2, #0
 800da68:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6a1b      	ldr	r3, [r3, #32]
 800da6e:	7ada      	ldrb	r2, [r3, #11]
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6a1b      	ldr	r3, [r3, #32]
 800da78:	331c      	adds	r3, #28
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7fe fc1d 	bl	800c2ba <ld_dword>
 800da80:	4602      	mov	r2, r0
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6a1b      	ldr	r3, [r3, #32]
 800da8a:	3316      	adds	r3, #22
 800da8c:	4618      	mov	r0, r3
 800da8e:	f7fe fc14 	bl	800c2ba <ld_dword>
 800da92:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	b29a      	uxth	r2, r3
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	80da      	strh	r2, [r3, #6]
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	0c1b      	lsrs	r3, r3, #16
 800daa0:	b29a      	uxth	r2, r3
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	809a      	strh	r2, [r3, #4]
 800daa6:	e000      	b.n	800daaa <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800daa8:	bf00      	nop
}
 800daaa:	3720      	adds	r7, #32
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b08a      	sub	sp, #40	@ 0x28
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	613b      	str	r3, [r7, #16]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	68db      	ldr	r3, [r3, #12]
 800dac6:	60fb      	str	r3, [r7, #12]
 800dac8:	2300      	movs	r3, #0
 800daca:	617b      	str	r3, [r7, #20]
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800dad0:	69bb      	ldr	r3, [r7, #24]
 800dad2:	1c5a      	adds	r2, r3, #1
 800dad4:	61ba      	str	r2, [r7, #24]
 800dad6:	693a      	ldr	r2, [r7, #16]
 800dad8:	4413      	add	r3, r2
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800dade:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dae0:	2b1f      	cmp	r3, #31
 800dae2:	d940      	bls.n	800db66 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800dae4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dae6:	2b2f      	cmp	r3, #47	@ 0x2f
 800dae8:	d006      	beq.n	800daf8 <create_name+0x48>
 800daea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800daec:	2b5c      	cmp	r3, #92	@ 0x5c
 800daee:	d110      	bne.n	800db12 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800daf0:	e002      	b.n	800daf8 <create_name+0x48>
 800daf2:	69bb      	ldr	r3, [r7, #24]
 800daf4:	3301      	adds	r3, #1
 800daf6:	61bb      	str	r3, [r7, #24]
 800daf8:	693a      	ldr	r2, [r7, #16]
 800dafa:	69bb      	ldr	r3, [r7, #24]
 800dafc:	4413      	add	r3, r2
 800dafe:	781b      	ldrb	r3, [r3, #0]
 800db00:	2b2f      	cmp	r3, #47	@ 0x2f
 800db02:	d0f6      	beq.n	800daf2 <create_name+0x42>
 800db04:	693a      	ldr	r2, [r7, #16]
 800db06:	69bb      	ldr	r3, [r7, #24]
 800db08:	4413      	add	r3, r2
 800db0a:	781b      	ldrb	r3, [r3, #0]
 800db0c:	2b5c      	cmp	r3, #92	@ 0x5c
 800db0e:	d0f0      	beq.n	800daf2 <create_name+0x42>
			break;
 800db10:	e02a      	b.n	800db68 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	2bfe      	cmp	r3, #254	@ 0xfe
 800db16:	d901      	bls.n	800db1c <create_name+0x6c>
 800db18:	2306      	movs	r3, #6
 800db1a:	e17d      	b.n	800de18 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800db1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db1e:	b2db      	uxtb	r3, r3
 800db20:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800db22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db24:	2101      	movs	r1, #1
 800db26:	4618      	mov	r0, r3
 800db28:	f001 fa74 	bl	800f014 <ff_convert>
 800db2c:	4603      	mov	r3, r0
 800db2e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800db30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db32:	2b00      	cmp	r3, #0
 800db34:	d101      	bne.n	800db3a <create_name+0x8a>
 800db36:	2306      	movs	r3, #6
 800db38:	e16e      	b.n	800de18 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800db3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db3c:	2b7f      	cmp	r3, #127	@ 0x7f
 800db3e:	d809      	bhi.n	800db54 <create_name+0xa4>
 800db40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db42:	4619      	mov	r1, r3
 800db44:	488d      	ldr	r0, [pc, #564]	@ (800dd7c <create_name+0x2cc>)
 800db46:	f7fe fc85 	bl	800c454 <chk_chr>
 800db4a:	4603      	mov	r3, r0
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d001      	beq.n	800db54 <create_name+0xa4>
 800db50:	2306      	movs	r3, #6
 800db52:	e161      	b.n	800de18 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	1c5a      	adds	r2, r3, #1
 800db58:	617a      	str	r2, [r7, #20]
 800db5a:	005b      	lsls	r3, r3, #1
 800db5c:	68fa      	ldr	r2, [r7, #12]
 800db5e:	4413      	add	r3, r2
 800db60:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800db62:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800db64:	e7b4      	b.n	800dad0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800db66:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800db68:	693a      	ldr	r2, [r7, #16]
 800db6a:	69bb      	ldr	r3, [r7, #24]
 800db6c:	441a      	add	r2, r3
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800db72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db74:	2b1f      	cmp	r3, #31
 800db76:	d801      	bhi.n	800db7c <create_name+0xcc>
 800db78:	2304      	movs	r3, #4
 800db7a:	e000      	b.n	800db7e <create_name+0xce>
 800db7c:	2300      	movs	r3, #0
 800db7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800db82:	e011      	b.n	800dba8 <create_name+0xf8>
		w = lfn[di - 1];
 800db84:	697b      	ldr	r3, [r7, #20]
 800db86:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800db8a:	3b01      	subs	r3, #1
 800db8c:	005b      	lsls	r3, r3, #1
 800db8e:	68fa      	ldr	r2, [r7, #12]
 800db90:	4413      	add	r3, r2
 800db92:	881b      	ldrh	r3, [r3, #0]
 800db94:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800db96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db98:	2b20      	cmp	r3, #32
 800db9a:	d002      	beq.n	800dba2 <create_name+0xf2>
 800db9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db9e:	2b2e      	cmp	r3, #46	@ 0x2e
 800dba0:	d106      	bne.n	800dbb0 <create_name+0x100>
		di--;
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	3b01      	subs	r3, #1
 800dba6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d1ea      	bne.n	800db84 <create_name+0xd4>
 800dbae:	e000      	b.n	800dbb2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800dbb0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	005b      	lsls	r3, r3, #1
 800dbb6:	68fa      	ldr	r2, [r7, #12]
 800dbb8:	4413      	add	r3, r2
 800dbba:	2200      	movs	r2, #0
 800dbbc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d101      	bne.n	800dbc8 <create_name+0x118>
 800dbc4:	2306      	movs	r3, #6
 800dbc6:	e127      	b.n	800de18 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	3324      	adds	r3, #36	@ 0x24
 800dbcc:	220b      	movs	r2, #11
 800dbce:	2120      	movs	r1, #32
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f7fe fbfd 	bl	800c3d0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	61bb      	str	r3, [r7, #24]
 800dbda:	e002      	b.n	800dbe2 <create_name+0x132>
 800dbdc:	69bb      	ldr	r3, [r7, #24]
 800dbde:	3301      	adds	r3, #1
 800dbe0:	61bb      	str	r3, [r7, #24]
 800dbe2:	69bb      	ldr	r3, [r7, #24]
 800dbe4:	005b      	lsls	r3, r3, #1
 800dbe6:	68fa      	ldr	r2, [r7, #12]
 800dbe8:	4413      	add	r3, r2
 800dbea:	881b      	ldrh	r3, [r3, #0]
 800dbec:	2b20      	cmp	r3, #32
 800dbee:	d0f5      	beq.n	800dbdc <create_name+0x12c>
 800dbf0:	69bb      	ldr	r3, [r7, #24]
 800dbf2:	005b      	lsls	r3, r3, #1
 800dbf4:	68fa      	ldr	r2, [r7, #12]
 800dbf6:	4413      	add	r3, r2
 800dbf8:	881b      	ldrh	r3, [r3, #0]
 800dbfa:	2b2e      	cmp	r3, #46	@ 0x2e
 800dbfc:	d0ee      	beq.n	800dbdc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800dbfe:	69bb      	ldr	r3, [r7, #24]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d009      	beq.n	800dc18 <create_name+0x168>
 800dc04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc08:	f043 0303 	orr.w	r3, r3, #3
 800dc0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800dc10:	e002      	b.n	800dc18 <create_name+0x168>
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	3b01      	subs	r3, #1
 800dc16:	617b      	str	r3, [r7, #20]
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d009      	beq.n	800dc32 <create_name+0x182>
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800dc24:	3b01      	subs	r3, #1
 800dc26:	005b      	lsls	r3, r3, #1
 800dc28:	68fa      	ldr	r2, [r7, #12]
 800dc2a:	4413      	add	r3, r2
 800dc2c:	881b      	ldrh	r3, [r3, #0]
 800dc2e:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc30:	d1ef      	bne.n	800dc12 <create_name+0x162>

	i = b = 0; ni = 8;
 800dc32:	2300      	movs	r3, #0
 800dc34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800dc38:	2300      	movs	r3, #0
 800dc3a:	623b      	str	r3, [r7, #32]
 800dc3c:	2308      	movs	r3, #8
 800dc3e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800dc40:	69bb      	ldr	r3, [r7, #24]
 800dc42:	1c5a      	adds	r2, r3, #1
 800dc44:	61ba      	str	r2, [r7, #24]
 800dc46:	005b      	lsls	r3, r3, #1
 800dc48:	68fa      	ldr	r2, [r7, #12]
 800dc4a:	4413      	add	r3, r2
 800dc4c:	881b      	ldrh	r3, [r3, #0]
 800dc4e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800dc50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	f000 8090 	beq.w	800dd78 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800dc58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc5a:	2b20      	cmp	r3, #32
 800dc5c:	d006      	beq.n	800dc6c <create_name+0x1bc>
 800dc5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc60:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc62:	d10a      	bne.n	800dc7a <create_name+0x1ca>
 800dc64:	69ba      	ldr	r2, [r7, #24]
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d006      	beq.n	800dc7a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800dc6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc70:	f043 0303 	orr.w	r3, r3, #3
 800dc74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dc78:	e07d      	b.n	800dd76 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800dc7a:	6a3a      	ldr	r2, [r7, #32]
 800dc7c:	69fb      	ldr	r3, [r7, #28]
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	d203      	bcs.n	800dc8a <create_name+0x1da>
 800dc82:	69ba      	ldr	r2, [r7, #24]
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d123      	bne.n	800dcd2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800dc8a:	69fb      	ldr	r3, [r7, #28]
 800dc8c:	2b0b      	cmp	r3, #11
 800dc8e:	d106      	bne.n	800dc9e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800dc90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc94:	f043 0303 	orr.w	r3, r3, #3
 800dc98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dc9c:	e075      	b.n	800dd8a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800dc9e:	69ba      	ldr	r2, [r7, #24]
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d005      	beq.n	800dcb2 <create_name+0x202>
 800dca6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dcaa:	f043 0303 	orr.w	r3, r3, #3
 800dcae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800dcb2:	69ba      	ldr	r2, [r7, #24]
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d866      	bhi.n	800dd88 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	61bb      	str	r3, [r7, #24]
 800dcbe:	2308      	movs	r3, #8
 800dcc0:	623b      	str	r3, [r7, #32]
 800dcc2:	230b      	movs	r3, #11
 800dcc4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800dcc6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dcca:	009b      	lsls	r3, r3, #2
 800dccc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800dcd0:	e051      	b.n	800dd76 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800dcd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dcd4:	2b7f      	cmp	r3, #127	@ 0x7f
 800dcd6:	d914      	bls.n	800dd02 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800dcd8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dcda:	2100      	movs	r1, #0
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f001 f999 	bl	800f014 <ff_convert>
 800dce2:	4603      	mov	r3, r0
 800dce4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800dce6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d004      	beq.n	800dcf6 <create_name+0x246>
 800dcec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dcee:	3b80      	subs	r3, #128	@ 0x80
 800dcf0:	4a23      	ldr	r2, [pc, #140]	@ (800dd80 <create_name+0x2d0>)
 800dcf2:	5cd3      	ldrb	r3, [r2, r3]
 800dcf4:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800dcf6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dcfa:	f043 0302 	orr.w	r3, r3, #2
 800dcfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800dd02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d007      	beq.n	800dd18 <create_name+0x268>
 800dd08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd0a:	4619      	mov	r1, r3
 800dd0c:	481d      	ldr	r0, [pc, #116]	@ (800dd84 <create_name+0x2d4>)
 800dd0e:	f7fe fba1 	bl	800c454 <chk_chr>
 800dd12:	4603      	mov	r3, r0
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d008      	beq.n	800dd2a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800dd18:	235f      	movs	r3, #95	@ 0x5f
 800dd1a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800dd1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd20:	f043 0303 	orr.w	r3, r3, #3
 800dd24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dd28:	e01b      	b.n	800dd62 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800dd2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd2c:	2b40      	cmp	r3, #64	@ 0x40
 800dd2e:	d909      	bls.n	800dd44 <create_name+0x294>
 800dd30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd32:	2b5a      	cmp	r3, #90	@ 0x5a
 800dd34:	d806      	bhi.n	800dd44 <create_name+0x294>
					b |= 2;
 800dd36:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dd3a:	f043 0302 	orr.w	r3, r3, #2
 800dd3e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800dd42:	e00e      	b.n	800dd62 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800dd44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd46:	2b60      	cmp	r3, #96	@ 0x60
 800dd48:	d90b      	bls.n	800dd62 <create_name+0x2b2>
 800dd4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd4c:	2b7a      	cmp	r3, #122	@ 0x7a
 800dd4e:	d808      	bhi.n	800dd62 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800dd50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dd54:	f043 0301 	orr.w	r3, r3, #1
 800dd58:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800dd5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd5e:	3b20      	subs	r3, #32
 800dd60:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800dd62:	6a3b      	ldr	r3, [r7, #32]
 800dd64:	1c5a      	adds	r2, r3, #1
 800dd66:	623a      	str	r2, [r7, #32]
 800dd68:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dd6a:	b2d1      	uxtb	r1, r2
 800dd6c:	687a      	ldr	r2, [r7, #4]
 800dd6e:	4413      	add	r3, r2
 800dd70:	460a      	mov	r2, r1
 800dd72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800dd76:	e763      	b.n	800dc40 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800dd78:	bf00      	nop
 800dd7a:	e006      	b.n	800dd8a <create_name+0x2da>
 800dd7c:	080136f0 	.word	0x080136f0
 800dd80:	08013794 	.word	0x08013794
 800dd84:	080136fc 	.word	0x080136fc
			if (si > di) break;			/* No extension */
 800dd88:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800dd90:	2be5      	cmp	r3, #229	@ 0xe5
 800dd92:	d103      	bne.n	800dd9c <create_name+0x2ec>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2205      	movs	r2, #5
 800dd98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800dd9c:	69fb      	ldr	r3, [r7, #28]
 800dd9e:	2b08      	cmp	r3, #8
 800dda0:	d104      	bne.n	800ddac <create_name+0x2fc>
 800dda2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dda6:	009b      	lsls	r3, r3, #2
 800dda8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ddac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ddb0:	f003 030c 	and.w	r3, r3, #12
 800ddb4:	2b0c      	cmp	r3, #12
 800ddb6:	d005      	beq.n	800ddc4 <create_name+0x314>
 800ddb8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ddbc:	f003 0303 	and.w	r3, r3, #3
 800ddc0:	2b03      	cmp	r3, #3
 800ddc2:	d105      	bne.n	800ddd0 <create_name+0x320>
 800ddc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ddc8:	f043 0302 	orr.w	r3, r3, #2
 800ddcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ddd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ddd4:	f003 0302 	and.w	r3, r3, #2
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d117      	bne.n	800de0c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800dddc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dde0:	f003 0303 	and.w	r3, r3, #3
 800dde4:	2b01      	cmp	r3, #1
 800dde6:	d105      	bne.n	800ddf4 <create_name+0x344>
 800dde8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ddec:	f043 0310 	orr.w	r3, r3, #16
 800ddf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ddf4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ddf8:	f003 030c 	and.w	r3, r3, #12
 800ddfc:	2b04      	cmp	r3, #4
 800ddfe:	d105      	bne.n	800de0c <create_name+0x35c>
 800de00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800de04:	f043 0308 	orr.w	r3, r3, #8
 800de08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800de12:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800de16:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3728      	adds	r7, #40	@ 0x28
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}

0800de20 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b086      	sub	sp, #24
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800de34:	e002      	b.n	800de3c <follow_path+0x1c>
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	3301      	adds	r3, #1
 800de3a:	603b      	str	r3, [r7, #0]
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	2b2f      	cmp	r3, #47	@ 0x2f
 800de42:	d0f8      	beq.n	800de36 <follow_path+0x16>
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	2b5c      	cmp	r3, #92	@ 0x5c
 800de4a:	d0f4      	beq.n	800de36 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	2200      	movs	r2, #0
 800de50:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	2b1f      	cmp	r3, #31
 800de58:	d80a      	bhi.n	800de70 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2280      	movs	r2, #128	@ 0x80
 800de5e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800de62:	2100      	movs	r1, #0
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f7ff f83e 	bl	800cee6 <dir_sdi>
 800de6a:	4603      	mov	r3, r0
 800de6c:	75fb      	strb	r3, [r7, #23]
 800de6e:	e043      	b.n	800def8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800de70:	463b      	mov	r3, r7
 800de72:	4619      	mov	r1, r3
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f7ff fe1b 	bl	800dab0 <create_name>
 800de7a:	4603      	mov	r3, r0
 800de7c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800de7e:	7dfb      	ldrb	r3, [r7, #23]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d134      	bne.n	800deee <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f7ff fb7c 	bl	800d582 <dir_find>
 800de8a:	4603      	mov	r3, r0
 800de8c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800de94:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800de96:	7dfb      	ldrb	r3, [r7, #23]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d00a      	beq.n	800deb2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800de9c:	7dfb      	ldrb	r3, [r7, #23]
 800de9e:	2b04      	cmp	r3, #4
 800dea0:	d127      	bne.n	800def2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dea2:	7afb      	ldrb	r3, [r7, #11]
 800dea4:	f003 0304 	and.w	r3, r3, #4
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d122      	bne.n	800def2 <follow_path+0xd2>
 800deac:	2305      	movs	r3, #5
 800deae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800deb0:	e01f      	b.n	800def2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800deb2:	7afb      	ldrb	r3, [r7, #11]
 800deb4:	f003 0304 	and.w	r3, r3, #4
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d11c      	bne.n	800def6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	799b      	ldrb	r3, [r3, #6]
 800dec0:	f003 0310 	and.w	r3, r3, #16
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d102      	bne.n	800dece <follow_path+0xae>
				res = FR_NO_PATH; break;
 800dec8:	2305      	movs	r3, #5
 800deca:	75fb      	strb	r3, [r7, #23]
 800decc:	e014      	b.n	800def8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	695b      	ldr	r3, [r3, #20]
 800ded8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dedc:	4413      	add	r3, r2
 800dede:	4619      	mov	r1, r3
 800dee0:	68f8      	ldr	r0, [r7, #12]
 800dee2:	f7ff f987 	bl	800d1f4 <ld_clust>
 800dee6:	4602      	mov	r2, r0
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800deec:	e7c0      	b.n	800de70 <follow_path+0x50>
			if (res != FR_OK) break;
 800deee:	bf00      	nop
 800def0:	e002      	b.n	800def8 <follow_path+0xd8>
				break;
 800def2:	bf00      	nop
 800def4:	e000      	b.n	800def8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800def6:	bf00      	nop
			}
		}
	}

	return res;
 800def8:	7dfb      	ldrb	r3, [r7, #23]
}
 800defa:	4618      	mov	r0, r3
 800defc:	3718      	adds	r7, #24
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}

0800df02 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800df02:	b480      	push	{r7}
 800df04:	b087      	sub	sp, #28
 800df06:	af00      	add	r7, sp, #0
 800df08:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800df0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800df0e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d031      	beq.n	800df7c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	617b      	str	r3, [r7, #20]
 800df1e:	e002      	b.n	800df26 <get_ldnumber+0x24>
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	3301      	adds	r3, #1
 800df24:	617b      	str	r3, [r7, #20]
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	2b1f      	cmp	r3, #31
 800df2c:	d903      	bls.n	800df36 <get_ldnumber+0x34>
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	781b      	ldrb	r3, [r3, #0]
 800df32:	2b3a      	cmp	r3, #58	@ 0x3a
 800df34:	d1f4      	bne.n	800df20 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	2b3a      	cmp	r3, #58	@ 0x3a
 800df3c:	d11c      	bne.n	800df78 <get_ldnumber+0x76>
			tp = *path;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	1c5a      	adds	r2, r3, #1
 800df48:	60fa      	str	r2, [r7, #12]
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	3b30      	subs	r3, #48	@ 0x30
 800df4e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	2b09      	cmp	r3, #9
 800df54:	d80e      	bhi.n	800df74 <get_ldnumber+0x72>
 800df56:	68fa      	ldr	r2, [r7, #12]
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d10a      	bne.n	800df74 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d107      	bne.n	800df74 <get_ldnumber+0x72>
					vol = (int)i;
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	3301      	adds	r3, #1
 800df6c:	617b      	str	r3, [r7, #20]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	697a      	ldr	r2, [r7, #20]
 800df72:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	e002      	b.n	800df7e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800df78:	2300      	movs	r3, #0
 800df7a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800df7c:	693b      	ldr	r3, [r7, #16]
}
 800df7e:	4618      	mov	r0, r3
 800df80:	371c      	adds	r7, #28
 800df82:	46bd      	mov	sp, r7
 800df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df88:	4770      	bx	lr
	...

0800df8c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2200      	movs	r2, #0
 800df9a:	70da      	strb	r2, [r3, #3]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dfa2:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dfa4:	6839      	ldr	r1, [r7, #0]
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f7fe fc20 	bl	800c7ec <move_window>
 800dfac:	4603      	mov	r3, r0
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d001      	beq.n	800dfb6 <check_fs+0x2a>
 800dfb2:	2304      	movs	r3, #4
 800dfb4:	e038      	b.n	800e028 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	3334      	adds	r3, #52	@ 0x34
 800dfba:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7fe f962 	bl	800c288 <ld_word>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d001      	beq.n	800dfd4 <check_fs+0x48>
 800dfd0:	2303      	movs	r3, #3
 800dfd2:	e029      	b.n	800e028 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dfda:	2be9      	cmp	r3, #233	@ 0xe9
 800dfdc:	d009      	beq.n	800dff2 <check_fs+0x66>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dfe4:	2beb      	cmp	r3, #235	@ 0xeb
 800dfe6:	d11e      	bne.n	800e026 <check_fs+0x9a>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800dfee:	2b90      	cmp	r3, #144	@ 0x90
 800dff0:	d119      	bne.n	800e026 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	3334      	adds	r3, #52	@ 0x34
 800dff6:	3336      	adds	r3, #54	@ 0x36
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7fe f95e 	bl	800c2ba <ld_dword>
 800dffe:	4603      	mov	r3, r0
 800e000:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e004:	4a0a      	ldr	r2, [pc, #40]	@ (800e030 <check_fs+0xa4>)
 800e006:	4293      	cmp	r3, r2
 800e008:	d101      	bne.n	800e00e <check_fs+0x82>
 800e00a:	2300      	movs	r3, #0
 800e00c:	e00c      	b.n	800e028 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	3334      	adds	r3, #52	@ 0x34
 800e012:	3352      	adds	r3, #82	@ 0x52
 800e014:	4618      	mov	r0, r3
 800e016:	f7fe f950 	bl	800c2ba <ld_dword>
 800e01a:	4603      	mov	r3, r0
 800e01c:	4a05      	ldr	r2, [pc, #20]	@ (800e034 <check_fs+0xa8>)
 800e01e:	4293      	cmp	r3, r2
 800e020:	d101      	bne.n	800e026 <check_fs+0x9a>
 800e022:	2300      	movs	r3, #0
 800e024:	e000      	b.n	800e028 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e026:	2302      	movs	r3, #2
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3708      	adds	r7, #8
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}
 800e030:	00544146 	.word	0x00544146
 800e034:	33544146 	.word	0x33544146

0800e038 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b096      	sub	sp, #88	@ 0x58
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	60f8      	str	r0, [r7, #12]
 800e040:	60b9      	str	r1, [r7, #8]
 800e042:	4613      	mov	r3, r2
 800e044:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	2200      	movs	r2, #0
 800e04a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e04c:	68f8      	ldr	r0, [r7, #12]
 800e04e:	f7ff ff58 	bl	800df02 <get_ldnumber>
 800e052:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e056:	2b00      	cmp	r3, #0
 800e058:	da01      	bge.n	800e05e <find_volume+0x26>
 800e05a:	230b      	movs	r3, #11
 800e05c:	e230      	b.n	800e4c0 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e05e:	4aa1      	ldr	r2, [pc, #644]	@ (800e2e4 <find_volume+0x2ac>)
 800e060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e066:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d101      	bne.n	800e072 <find_volume+0x3a>
 800e06e:	230c      	movs	r3, #12
 800e070:	e226      	b.n	800e4c0 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e076:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e078:	79fb      	ldrb	r3, [r7, #7]
 800e07a:	f023 0301 	bic.w	r3, r3, #1
 800e07e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d01a      	beq.n	800e0be <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e08a:	785b      	ldrb	r3, [r3, #1]
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7fe f85d 	bl	800c14c <disk_status>
 800e092:	4603      	mov	r3, r0
 800e094:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e098:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e09c:	f003 0301 	and.w	r3, r3, #1
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d10c      	bne.n	800e0be <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e0a4:	79fb      	ldrb	r3, [r7, #7]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d007      	beq.n	800e0ba <find_volume+0x82>
 800e0aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e0ae:	f003 0304 	and.w	r3, r3, #4
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d001      	beq.n	800e0ba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e0b6:	230a      	movs	r3, #10
 800e0b8:	e202      	b.n	800e4c0 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	e200      	b.n	800e4c0 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e0be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e0c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0c6:	b2da      	uxtb	r2, r3
 800e0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0ca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0ce:	785b      	ldrb	r3, [r3, #1]
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f7fe f855 	bl	800c180 <disk_initialize>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e0dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e0e0:	f003 0301 	and.w	r3, r3, #1
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d001      	beq.n	800e0ec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e0e8:	2303      	movs	r3, #3
 800e0ea:	e1e9      	b.n	800e4c0 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e0ec:	79fb      	ldrb	r3, [r7, #7]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d007      	beq.n	800e102 <find_volume+0xca>
 800e0f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e0f6:	f003 0304 	and.w	r3, r3, #4
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d001      	beq.n	800e102 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e0fe:	230a      	movs	r3, #10
 800e100:	e1de      	b.n	800e4c0 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e102:	2300      	movs	r3, #0
 800e104:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e106:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e108:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e10a:	f7ff ff3f 	bl	800df8c <check_fs>
 800e10e:	4603      	mov	r3, r0
 800e110:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e114:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e118:	2b02      	cmp	r3, #2
 800e11a:	d149      	bne.n	800e1b0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e11c:	2300      	movs	r3, #0
 800e11e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e120:	e01e      	b.n	800e160 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e124:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e128:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e12a:	011b      	lsls	r3, r3, #4
 800e12c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e130:	4413      	add	r3, r2
 800e132:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e136:	3304      	adds	r3, #4
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d006      	beq.n	800e14c <find_volume+0x114>
 800e13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e140:	3308      	adds	r3, #8
 800e142:	4618      	mov	r0, r3
 800e144:	f7fe f8b9 	bl	800c2ba <ld_dword>
 800e148:	4602      	mov	r2, r0
 800e14a:	e000      	b.n	800e14e <find_volume+0x116>
 800e14c:	2200      	movs	r2, #0
 800e14e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e150:	009b      	lsls	r3, r3, #2
 800e152:	3358      	adds	r3, #88	@ 0x58
 800e154:	443b      	add	r3, r7
 800e156:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e15a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e15c:	3301      	adds	r3, #1
 800e15e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e160:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e162:	2b03      	cmp	r3, #3
 800e164:	d9dd      	bls.n	800e122 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e166:	2300      	movs	r3, #0
 800e168:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800e16a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d002      	beq.n	800e176 <find_volume+0x13e>
 800e170:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e172:	3b01      	subs	r3, #1
 800e174:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e178:	009b      	lsls	r3, r3, #2
 800e17a:	3358      	adds	r3, #88	@ 0x58
 800e17c:	443b      	add	r3, r7
 800e17e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e182:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e184:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e186:	2b00      	cmp	r3, #0
 800e188:	d005      	beq.n	800e196 <find_volume+0x15e>
 800e18a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e18c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e18e:	f7ff fefd 	bl	800df8c <check_fs>
 800e192:	4603      	mov	r3, r0
 800e194:	e000      	b.n	800e198 <find_volume+0x160>
 800e196:	2303      	movs	r3, #3
 800e198:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e19c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d905      	bls.n	800e1b0 <find_volume+0x178>
 800e1a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1a6:	3301      	adds	r3, #1
 800e1a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800e1aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1ac:	2b03      	cmp	r3, #3
 800e1ae:	d9e2      	bls.n	800e176 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e1b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e1b4:	2b04      	cmp	r3, #4
 800e1b6:	d101      	bne.n	800e1bc <find_volume+0x184>
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	e181      	b.n	800e4c0 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e1bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	d901      	bls.n	800e1c8 <find_volume+0x190>
 800e1c4:	230d      	movs	r3, #13
 800e1c6:	e17b      	b.n	800e4c0 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e1c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1ca:	3334      	adds	r3, #52	@ 0x34
 800e1cc:	330b      	adds	r3, #11
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7fe f85a 	bl	800c288 <ld_word>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e1da:	d001      	beq.n	800e1e0 <find_volume+0x1a8>
 800e1dc:	230d      	movs	r3, #13
 800e1de:	e16f      	b.n	800e4c0 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1e2:	3334      	adds	r3, #52	@ 0x34
 800e1e4:	3316      	adds	r3, #22
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f7fe f84e 	bl	800c288 <ld_word>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e1f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d106      	bne.n	800e204 <find_volume+0x1cc>
 800e1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1f8:	3334      	adds	r3, #52	@ 0x34
 800e1fa:	3324      	adds	r3, #36	@ 0x24
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f7fe f85c 	bl	800c2ba <ld_dword>
 800e202:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800e204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e206:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e208:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e20c:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800e210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e212:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e216:	789b      	ldrb	r3, [r3, #2]
 800e218:	2b01      	cmp	r3, #1
 800e21a:	d005      	beq.n	800e228 <find_volume+0x1f0>
 800e21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e21e:	789b      	ldrb	r3, [r3, #2]
 800e220:	2b02      	cmp	r3, #2
 800e222:	d001      	beq.n	800e228 <find_volume+0x1f0>
 800e224:	230d      	movs	r3, #13
 800e226:	e14b      	b.n	800e4c0 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e22a:	789b      	ldrb	r3, [r3, #2]
 800e22c:	461a      	mov	r2, r3
 800e22e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e230:	fb02 f303 	mul.w	r3, r2, r3
 800e234:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e23c:	461a      	mov	r2, r3
 800e23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e240:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e244:	895b      	ldrh	r3, [r3, #10]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d008      	beq.n	800e25c <find_volume+0x224>
 800e24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e24c:	895b      	ldrh	r3, [r3, #10]
 800e24e:	461a      	mov	r2, r3
 800e250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e252:	895b      	ldrh	r3, [r3, #10]
 800e254:	3b01      	subs	r3, #1
 800e256:	4013      	ands	r3, r2
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d001      	beq.n	800e260 <find_volume+0x228>
 800e25c:	230d      	movs	r3, #13
 800e25e:	e12f      	b.n	800e4c0 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e262:	3334      	adds	r3, #52	@ 0x34
 800e264:	3311      	adds	r3, #17
 800e266:	4618      	mov	r0, r3
 800e268:	f7fe f80e 	bl	800c288 <ld_word>
 800e26c:	4603      	mov	r3, r0
 800e26e:	461a      	mov	r2, r3
 800e270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e272:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e276:	891b      	ldrh	r3, [r3, #8]
 800e278:	f003 030f 	and.w	r3, r3, #15
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d001      	beq.n	800e286 <find_volume+0x24e>
 800e282:	230d      	movs	r3, #13
 800e284:	e11c      	b.n	800e4c0 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e288:	3334      	adds	r3, #52	@ 0x34
 800e28a:	3313      	adds	r3, #19
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7fd fffb 	bl	800c288 <ld_word>
 800e292:	4603      	mov	r3, r0
 800e294:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e296:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d106      	bne.n	800e2aa <find_volume+0x272>
 800e29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e29e:	3334      	adds	r3, #52	@ 0x34
 800e2a0:	3320      	adds	r3, #32
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7fe f809 	bl	800c2ba <ld_dword>
 800e2a8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e2aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ac:	3334      	adds	r3, #52	@ 0x34
 800e2ae:	330e      	adds	r3, #14
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7fd ffe9 	bl	800c288 <ld_word>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e2ba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d101      	bne.n	800e2c4 <find_volume+0x28c>
 800e2c0:	230d      	movs	r3, #13
 800e2c2:	e0fd      	b.n	800e4c0 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e2c4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e2c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2c8:	4413      	add	r3, r2
 800e2ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e2cc:	8912      	ldrh	r2, [r2, #8]
 800e2ce:	0912      	lsrs	r2, r2, #4
 800e2d0:	b292      	uxth	r2, r2
 800e2d2:	4413      	add	r3, r2
 800e2d4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e2d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d204      	bcs.n	800e2e8 <find_volume+0x2b0>
 800e2de:	230d      	movs	r3, #13
 800e2e0:	e0ee      	b.n	800e4c0 <find_volume+0x488>
 800e2e2:	bf00      	nop
 800e2e4:	20001418 	.word	0x20001418
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e2e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ec:	1ad3      	subs	r3, r2, r3
 800e2ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e2f0:	8952      	ldrh	r2, [r2, #10]
 800e2f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2f6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d101      	bne.n	800e302 <find_volume+0x2ca>
 800e2fe:	230d      	movs	r3, #13
 800e300:	e0de      	b.n	800e4c0 <find_volume+0x488>
		fmt = FS_FAT32;
 800e302:	2303      	movs	r3, #3
 800e304:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e30a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e30e:	4293      	cmp	r3, r2
 800e310:	d802      	bhi.n	800e318 <find_volume+0x2e0>
 800e312:	2302      	movs	r3, #2
 800e314:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e31a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e31e:	4293      	cmp	r3, r2
 800e320:	d802      	bhi.n	800e328 <find_volume+0x2f0>
 800e322:	2301      	movs	r3, #1
 800e324:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e32a:	1c9a      	adds	r2, r3, #2
 800e32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e32e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e332:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e334:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e336:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e338:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e33a:	441a      	add	r2, r3
 800e33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e33e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e340:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e344:	441a      	add	r2, r3
 800e346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e348:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800e34a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e34e:	2b03      	cmp	r3, #3
 800e350:	d11e      	bne.n	800e390 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e354:	3334      	adds	r3, #52	@ 0x34
 800e356:	332a      	adds	r3, #42	@ 0x2a
 800e358:	4618      	mov	r0, r3
 800e35a:	f7fd ff95 	bl	800c288 <ld_word>
 800e35e:	4603      	mov	r3, r0
 800e360:	2b00      	cmp	r3, #0
 800e362:	d001      	beq.n	800e368 <find_volume+0x330>
 800e364:	230d      	movs	r3, #13
 800e366:	e0ab      	b.n	800e4c0 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e36a:	891b      	ldrh	r3, [r3, #8]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d001      	beq.n	800e374 <find_volume+0x33c>
 800e370:	230d      	movs	r3, #13
 800e372:	e0a5      	b.n	800e4c0 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e376:	3334      	adds	r3, #52	@ 0x34
 800e378:	332c      	adds	r3, #44	@ 0x2c
 800e37a:	4618      	mov	r0, r3
 800e37c:	f7fd ff9d 	bl	800c2ba <ld_dword>
 800e380:	4602      	mov	r2, r0
 800e382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e384:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e388:	699b      	ldr	r3, [r3, #24]
 800e38a:	009b      	lsls	r3, r3, #2
 800e38c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e38e:	e01f      	b.n	800e3d0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e392:	891b      	ldrh	r3, [r3, #8]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d101      	bne.n	800e39c <find_volume+0x364>
 800e398:	230d      	movs	r3, #13
 800e39a:	e091      	b.n	800e4c0 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e39e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e3a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3a2:	441a      	add	r2, r3
 800e3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3a6:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e3a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e3ac:	2b02      	cmp	r3, #2
 800e3ae:	d103      	bne.n	800e3b8 <find_volume+0x380>
 800e3b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3b2:	699b      	ldr	r3, [r3, #24]
 800e3b4:	005b      	lsls	r3, r3, #1
 800e3b6:	e00a      	b.n	800e3ce <find_volume+0x396>
 800e3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ba:	699a      	ldr	r2, [r3, #24]
 800e3bc:	4613      	mov	r3, r2
 800e3be:	005b      	lsls	r3, r3, #1
 800e3c0:	4413      	add	r3, r2
 800e3c2:	085a      	lsrs	r2, r3, #1
 800e3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3c6:	699b      	ldr	r3, [r3, #24]
 800e3c8:	f003 0301 	and.w	r3, r3, #1
 800e3cc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e3ce:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3d2:	69da      	ldr	r2, [r3, #28]
 800e3d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3d6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e3da:	0a5b      	lsrs	r3, r3, #9
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d201      	bcs.n	800e3e4 <find_volume+0x3ac>
 800e3e0:	230d      	movs	r3, #13
 800e3e2:	e06d      	b.n	800e4c0 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e3ea:	615a      	str	r2, [r3, #20]
 800e3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ee:	695a      	ldr	r2, [r3, #20]
 800e3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3f2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3f6:	2280      	movs	r2, #128	@ 0x80
 800e3f8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e3fa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e3fe:	2b03      	cmp	r3, #3
 800e400:	d149      	bne.n	800e496 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e404:	3334      	adds	r3, #52	@ 0x34
 800e406:	3330      	adds	r3, #48	@ 0x30
 800e408:	4618      	mov	r0, r3
 800e40a:	f7fd ff3d 	bl	800c288 <ld_word>
 800e40e:	4603      	mov	r3, r0
 800e410:	2b01      	cmp	r3, #1
 800e412:	d140      	bne.n	800e496 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e414:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e416:	3301      	adds	r3, #1
 800e418:	4619      	mov	r1, r3
 800e41a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e41c:	f7fe f9e6 	bl	800c7ec <move_window>
 800e420:	4603      	mov	r3, r0
 800e422:	2b00      	cmp	r3, #0
 800e424:	d137      	bne.n	800e496 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e428:	2200      	movs	r2, #0
 800e42a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e42c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e42e:	3334      	adds	r3, #52	@ 0x34
 800e430:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e434:	4618      	mov	r0, r3
 800e436:	f7fd ff27 	bl	800c288 <ld_word>
 800e43a:	4603      	mov	r3, r0
 800e43c:	461a      	mov	r2, r3
 800e43e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e442:	429a      	cmp	r2, r3
 800e444:	d127      	bne.n	800e496 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e448:	3334      	adds	r3, #52	@ 0x34
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7fd ff35 	bl	800c2ba <ld_dword>
 800e450:	4603      	mov	r3, r0
 800e452:	4a1d      	ldr	r2, [pc, #116]	@ (800e4c8 <find_volume+0x490>)
 800e454:	4293      	cmp	r3, r2
 800e456:	d11e      	bne.n	800e496 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e45a:	3334      	adds	r3, #52	@ 0x34
 800e45c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e460:	4618      	mov	r0, r3
 800e462:	f7fd ff2a 	bl	800c2ba <ld_dword>
 800e466:	4603      	mov	r3, r0
 800e468:	4a18      	ldr	r2, [pc, #96]	@ (800e4cc <find_volume+0x494>)
 800e46a:	4293      	cmp	r3, r2
 800e46c:	d113      	bne.n	800e496 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e46e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e470:	3334      	adds	r3, #52	@ 0x34
 800e472:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e476:	4618      	mov	r0, r3
 800e478:	f7fd ff1f 	bl	800c2ba <ld_dword>
 800e47c:	4602      	mov	r2, r0
 800e47e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e480:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e484:	3334      	adds	r3, #52	@ 0x34
 800e486:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7fd ff15 	bl	800c2ba <ld_dword>
 800e490:	4602      	mov	r2, r0
 800e492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e494:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e498:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e49c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e49e:	4b0c      	ldr	r3, [pc, #48]	@ (800e4d0 <find_volume+0x498>)
 800e4a0:	881b      	ldrh	r3, [r3, #0]
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	b29a      	uxth	r2, r3
 800e4a6:	4b0a      	ldr	r3, [pc, #40]	@ (800e4d0 <find_volume+0x498>)
 800e4a8:	801a      	strh	r2, [r3, #0]
 800e4aa:	4b09      	ldr	r3, [pc, #36]	@ (800e4d0 <find_volume+0x498>)
 800e4ac:	881a      	ldrh	r2, [r3, #0]
 800e4ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4b0:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4b4:	4a07      	ldr	r2, [pc, #28]	@ (800e4d4 <find_volume+0x49c>)
 800e4b6:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e4b8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e4ba:	f7fe f92f 	bl	800c71c <clear_lock>
#endif
	return FR_OK;
 800e4be:	2300      	movs	r3, #0
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3758      	adds	r7, #88	@ 0x58
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}
 800e4c8:	41615252 	.word	0x41615252
 800e4cc:	61417272 	.word	0x61417272
 800e4d0:	2000141c 	.word	0x2000141c
 800e4d4:	20001470 	.word	0x20001470

0800e4d8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b084      	sub	sp, #16
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e4e2:	2309      	movs	r3, #9
 800e4e4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d01c      	beq.n	800e526 <validate+0x4e>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d018      	beq.n	800e526 <validate+0x4e>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d013      	beq.n	800e526 <validate+0x4e>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	889a      	ldrh	r2, [r3, #4]
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	88db      	ldrh	r3, [r3, #6]
 800e508:	429a      	cmp	r2, r3
 800e50a:	d10c      	bne.n	800e526 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	785b      	ldrb	r3, [r3, #1]
 800e512:	4618      	mov	r0, r3
 800e514:	f7fd fe1a 	bl	800c14c <disk_status>
 800e518:	4603      	mov	r3, r0
 800e51a:	f003 0301 	and.w	r3, r3, #1
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d101      	bne.n	800e526 <validate+0x4e>
			res = FR_OK;
 800e522:	2300      	movs	r3, #0
 800e524:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e526:	7bfb      	ldrb	r3, [r7, #15]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d102      	bne.n	800e532 <validate+0x5a>
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	e000      	b.n	800e534 <validate+0x5c>
 800e532:	2300      	movs	r3, #0
 800e534:	683a      	ldr	r2, [r7, #0]
 800e536:	6013      	str	r3, [r2, #0]
	return res;
 800e538:	7bfb      	ldrb	r3, [r7, #15]
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3710      	adds	r7, #16
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
	...

0800e544 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b088      	sub	sp, #32
 800e548:	af00      	add	r7, sp, #0
 800e54a:	60f8      	str	r0, [r7, #12]
 800e54c:	60b9      	str	r1, [r7, #8]
 800e54e:	4613      	mov	r3, r2
 800e550:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e556:	f107 0310 	add.w	r3, r7, #16
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7ff fcd1 	bl	800df02 <get_ldnumber>
 800e560:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e562:	69fb      	ldr	r3, [r7, #28]
 800e564:	2b00      	cmp	r3, #0
 800e566:	da01      	bge.n	800e56c <f_mount+0x28>
 800e568:	230b      	movs	r3, #11
 800e56a:	e02b      	b.n	800e5c4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e56c:	4a17      	ldr	r2, [pc, #92]	@ (800e5cc <f_mount+0x88>)
 800e56e:	69fb      	ldr	r3, [r7, #28]
 800e570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e574:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e576:	69bb      	ldr	r3, [r7, #24]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d005      	beq.n	800e588 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e57c:	69b8      	ldr	r0, [r7, #24]
 800e57e:	f7fe f8cd 	bl	800c71c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e582:	69bb      	ldr	r3, [r7, #24]
 800e584:	2200      	movs	r2, #0
 800e586:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d002      	beq.n	800e594 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	2200      	movs	r2, #0
 800e592:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e594:	68fa      	ldr	r2, [r7, #12]
 800e596:	490d      	ldr	r1, [pc, #52]	@ (800e5cc <f_mount+0x88>)
 800e598:	69fb      	ldr	r3, [r7, #28]
 800e59a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d002      	beq.n	800e5aa <f_mount+0x66>
 800e5a4:	79fb      	ldrb	r3, [r7, #7]
 800e5a6:	2b01      	cmp	r3, #1
 800e5a8:	d001      	beq.n	800e5ae <f_mount+0x6a>
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	e00a      	b.n	800e5c4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e5ae:	f107 010c 	add.w	r1, r7, #12
 800e5b2:	f107 0308 	add.w	r3, r7, #8
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f7ff fd3d 	bl	800e038 <find_volume>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e5c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3720      	adds	r7, #32
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}
 800e5cc:	20001418 	.word	0x20001418

0800e5d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b09a      	sub	sp, #104	@ 0x68
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	60f8      	str	r0, [r7, #12]
 800e5d8:	60b9      	str	r1, [r7, #8]
 800e5da:	4613      	mov	r3, r2
 800e5dc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d101      	bne.n	800e5e8 <f_open+0x18>
 800e5e4:	2309      	movs	r3, #9
 800e5e6:	e1a9      	b.n	800e93c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e5e8:	79fb      	ldrb	r3, [r7, #7]
 800e5ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e5ee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e5f0:	79fa      	ldrb	r2, [r7, #7]
 800e5f2:	f107 0114 	add.w	r1, r7, #20
 800e5f6:	f107 0308 	add.w	r3, r7, #8
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f7ff fd1c 	bl	800e038 <find_volume>
 800e600:	4603      	mov	r3, r0
 800e602:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800e606:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	f040 818d 	bne.w	800e92a <f_open+0x35a>
		dj.obj.fs = fs;
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e614:	68ba      	ldr	r2, [r7, #8]
 800e616:	f107 0318 	add.w	r3, r7, #24
 800e61a:	4611      	mov	r1, r2
 800e61c:	4618      	mov	r0, r3
 800e61e:	f7ff fbff 	bl	800de20 <follow_path>
 800e622:	4603      	mov	r3, r0
 800e624:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e628:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d118      	bne.n	800e662 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e630:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800e634:	b25b      	sxtb	r3, r3
 800e636:	2b00      	cmp	r3, #0
 800e638:	da03      	bge.n	800e642 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e63a:	2306      	movs	r3, #6
 800e63c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e640:	e00f      	b.n	800e662 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e642:	79fb      	ldrb	r3, [r7, #7]
 800e644:	2b01      	cmp	r3, #1
 800e646:	bf8c      	ite	hi
 800e648:	2301      	movhi	r3, #1
 800e64a:	2300      	movls	r3, #0
 800e64c:	b2db      	uxtb	r3, r3
 800e64e:	461a      	mov	r2, r3
 800e650:	f107 0318 	add.w	r3, r7, #24
 800e654:	4611      	mov	r1, r2
 800e656:	4618      	mov	r0, r3
 800e658:	f7fd ff18 	bl	800c48c <chk_lock>
 800e65c:	4603      	mov	r3, r0
 800e65e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e662:	79fb      	ldrb	r3, [r7, #7]
 800e664:	f003 031c 	and.w	r3, r3, #28
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d07f      	beq.n	800e76c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e66c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e670:	2b00      	cmp	r3, #0
 800e672:	d017      	beq.n	800e6a4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e674:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e678:	2b04      	cmp	r3, #4
 800e67a:	d10e      	bne.n	800e69a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e67c:	f7fd ff62 	bl	800c544 <enq_lock>
 800e680:	4603      	mov	r3, r0
 800e682:	2b00      	cmp	r3, #0
 800e684:	d006      	beq.n	800e694 <f_open+0xc4>
 800e686:	f107 0318 	add.w	r3, r7, #24
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7ff f83a 	bl	800d704 <dir_register>
 800e690:	4603      	mov	r3, r0
 800e692:	e000      	b.n	800e696 <f_open+0xc6>
 800e694:	2312      	movs	r3, #18
 800e696:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e69a:	79fb      	ldrb	r3, [r7, #7]
 800e69c:	f043 0308 	orr.w	r3, r3, #8
 800e6a0:	71fb      	strb	r3, [r7, #7]
 800e6a2:	e010      	b.n	800e6c6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e6a4:	7fbb      	ldrb	r3, [r7, #30]
 800e6a6:	f003 0311 	and.w	r3, r3, #17
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d003      	beq.n	800e6b6 <f_open+0xe6>
					res = FR_DENIED;
 800e6ae:	2307      	movs	r3, #7
 800e6b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e6b4:	e007      	b.n	800e6c6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e6b6:	79fb      	ldrb	r3, [r7, #7]
 800e6b8:	f003 0304 	and.w	r3, r3, #4
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d002      	beq.n	800e6c6 <f_open+0xf6>
 800e6c0:	2308      	movs	r3, #8
 800e6c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e6c6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d168      	bne.n	800e7a0 <f_open+0x1d0>
 800e6ce:	79fb      	ldrb	r3, [r7, #7]
 800e6d0:	f003 0308 	and.w	r3, r3, #8
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d063      	beq.n	800e7a0 <f_open+0x1d0>
				dw = GET_FATTIME();
 800e6d8:	f7fc fffe 	bl	800b6d8 <get_fattime>
 800e6dc:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e6de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6e0:	330e      	adds	r3, #14
 800e6e2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f7fd fe26 	bl	800c336 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e6ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ec:	3316      	adds	r3, #22
 800e6ee:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f7fd fe20 	bl	800c336 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6f8:	330b      	adds	r3, #11
 800e6fa:	2220      	movs	r2, #32
 800e6fc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e702:	4611      	mov	r1, r2
 800e704:	4618      	mov	r0, r3
 800e706:	f7fe fd75 	bl	800d1f4 <ld_clust>
 800e70a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e710:	2200      	movs	r2, #0
 800e712:	4618      	mov	r0, r3
 800e714:	f7fe fd8d 	bl	800d232 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e71a:	331c      	adds	r3, #28
 800e71c:	2100      	movs	r1, #0
 800e71e:	4618      	mov	r0, r3
 800e720:	f7fd fe09 	bl	800c336 <st_dword>
					fs->wflag = 1;
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	2201      	movs	r2, #1
 800e728:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e72a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d037      	beq.n	800e7a0 <f_open+0x1d0>
						dw = fs->winsect;
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e734:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e736:	f107 0318 	add.w	r3, r7, #24
 800e73a:	2200      	movs	r2, #0
 800e73c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e73e:	4618      	mov	r0, r3
 800e740:	f7fe faa0 	bl	800cc84 <remove_chain>
 800e744:	4603      	mov	r3, r0
 800e746:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800e74a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d126      	bne.n	800e7a0 <f_open+0x1d0>
							res = move_window(fs, dw);
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e756:	4618      	mov	r0, r3
 800e758:	f7fe f848 	bl	800c7ec <move_window>
 800e75c:	4603      	mov	r3, r0
 800e75e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e766:	3a01      	subs	r2, #1
 800e768:	611a      	str	r2, [r3, #16]
 800e76a:	e019      	b.n	800e7a0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e76c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e770:	2b00      	cmp	r3, #0
 800e772:	d115      	bne.n	800e7a0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e774:	7fbb      	ldrb	r3, [r7, #30]
 800e776:	f003 0310 	and.w	r3, r3, #16
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d003      	beq.n	800e786 <f_open+0x1b6>
					res = FR_NO_FILE;
 800e77e:	2304      	movs	r3, #4
 800e780:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e784:	e00c      	b.n	800e7a0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e786:	79fb      	ldrb	r3, [r7, #7]
 800e788:	f003 0302 	and.w	r3, r3, #2
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d007      	beq.n	800e7a0 <f_open+0x1d0>
 800e790:	7fbb      	ldrb	r3, [r7, #30]
 800e792:	f003 0301 	and.w	r3, r3, #1
 800e796:	2b00      	cmp	r3, #0
 800e798:	d002      	beq.n	800e7a0 <f_open+0x1d0>
						res = FR_DENIED;
 800e79a:	2307      	movs	r3, #7
 800e79c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e7a0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d126      	bne.n	800e7f6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e7a8:	79fb      	ldrb	r3, [r7, #7]
 800e7aa:	f003 0308 	and.w	r3, r3, #8
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d003      	beq.n	800e7ba <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e7b2:	79fb      	ldrb	r3, [r7, #7]
 800e7b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7b8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e7c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e7c8:	79fb      	ldrb	r3, [r7, #7]
 800e7ca:	2b01      	cmp	r3, #1
 800e7cc:	bf8c      	ite	hi
 800e7ce:	2301      	movhi	r3, #1
 800e7d0:	2300      	movls	r3, #0
 800e7d2:	b2db      	uxtb	r3, r3
 800e7d4:	461a      	mov	r2, r3
 800e7d6:	f107 0318 	add.w	r3, r7, #24
 800e7da:	4611      	mov	r1, r2
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f7fd fed3 	bl	800c588 <inc_lock>
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	691b      	ldr	r3, [r3, #16]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d102      	bne.n	800e7f6 <f_open+0x226>
 800e7f0:	2302      	movs	r3, #2
 800e7f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e7f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	f040 8095 	bne.w	800e92a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e804:	4611      	mov	r1, r2
 800e806:	4618      	mov	r0, r3
 800e808:	f7fe fcf4 	bl	800d1f4 <ld_clust>
 800e80c:	4602      	mov	r2, r0
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e814:	331c      	adds	r3, #28
 800e816:	4618      	mov	r0, r3
 800e818:	f7fd fd4f 	bl	800c2ba <ld_dword>
 800e81c:	4602      	mov	r2, r0
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2200      	movs	r2, #0
 800e826:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e828:	697a      	ldr	r2, [r7, #20]
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	88da      	ldrh	r2, [r3, #6]
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	79fa      	ldrb	r2, [r7, #7]
 800e83a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	2200      	movs	r2, #0
 800e840:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2200      	movs	r2, #0
 800e846:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	2200      	movs	r2, #0
 800e84c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	3330      	adds	r3, #48	@ 0x30
 800e852:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e856:	2100      	movs	r1, #0
 800e858:	4618      	mov	r0, r3
 800e85a:	f7fd fdb9 	bl	800c3d0 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e85e:	79fb      	ldrb	r3, [r7, #7]
 800e860:	f003 0320 	and.w	r3, r3, #32
 800e864:	2b00      	cmp	r3, #0
 800e866:	d060      	beq.n	800e92a <f_open+0x35a>
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	68db      	ldr	r3, [r3, #12]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d05c      	beq.n	800e92a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	68da      	ldr	r2, [r3, #12]
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	895b      	ldrh	r3, [r3, #10]
 800e87c:	025b      	lsls	r3, r3, #9
 800e87e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	689b      	ldr	r3, [r3, #8]
 800e884:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	68db      	ldr	r3, [r3, #12]
 800e88a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e88c:	e016      	b.n	800e8bc <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e892:	4618      	mov	r0, r3
 800e894:	f7fe f865 	bl	800c962 <get_fat>
 800e898:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e89a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	d802      	bhi.n	800e8a6 <f_open+0x2d6>
 800e8a0:	2302      	movs	r3, #2
 800e8a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e8a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e8a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e8ac:	d102      	bne.n	800e8b4 <f_open+0x2e4>
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e8b4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e8b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8b8:	1ad3      	subs	r3, r2, r3
 800e8ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e8bc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d103      	bne.n	800e8cc <f_open+0x2fc>
 800e8c4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e8c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d8e0      	bhi.n	800e88e <f_open+0x2be>
				}
				fp->clust = clst;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e8d0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e8d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d127      	bne.n	800e92a <f_open+0x35a>
 800e8da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e8dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d022      	beq.n	800e92a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f7fe f81b 	bl	800c924 <clust2sect>
 800e8ee:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800e8f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d103      	bne.n	800e8fe <f_open+0x32e>
						res = FR_INT_ERR;
 800e8f6:	2302      	movs	r3, #2
 800e8f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e8fc:	e015      	b.n	800e92a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e8fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e900:	0a5a      	lsrs	r2, r3, #9
 800e902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e904:	441a      	add	r2, r3
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	7858      	ldrb	r0, [r3, #1]
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	6a1a      	ldr	r2, [r3, #32]
 800e918:	2301      	movs	r3, #1
 800e91a:	f7fd fc57 	bl	800c1cc <disk_read>
 800e91e:	4603      	mov	r3, r0
 800e920:	2b00      	cmp	r3, #0
 800e922:	d002      	beq.n	800e92a <f_open+0x35a>
 800e924:	2301      	movs	r3, #1
 800e926:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e92a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d002      	beq.n	800e938 <f_open+0x368>
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2200      	movs	r2, #0
 800e936:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e938:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3768      	adds	r7, #104	@ 0x68
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}

0800e944 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b08c      	sub	sp, #48	@ 0x30
 800e948:	af00      	add	r7, sp, #0
 800e94a:	60f8      	str	r0, [r7, #12]
 800e94c:	60b9      	str	r1, [r7, #8]
 800e94e:	607a      	str	r2, [r7, #4]
 800e950:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	2200      	movs	r2, #0
 800e95a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	f107 0210 	add.w	r2, r7, #16
 800e962:	4611      	mov	r1, r2
 800e964:	4618      	mov	r0, r3
 800e966:	f7ff fdb7 	bl	800e4d8 <validate>
 800e96a:	4603      	mov	r3, r0
 800e96c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e970:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e974:	2b00      	cmp	r3, #0
 800e976:	d107      	bne.n	800e988 <f_write+0x44>
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	7d5b      	ldrb	r3, [r3, #21]
 800e97c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e980:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e984:	2b00      	cmp	r3, #0
 800e986:	d002      	beq.n	800e98e <f_write+0x4a>
 800e988:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e98c:	e14b      	b.n	800ec26 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	7d1b      	ldrb	r3, [r3, #20]
 800e992:	f003 0302 	and.w	r3, r3, #2
 800e996:	2b00      	cmp	r3, #0
 800e998:	d101      	bne.n	800e99e <f_write+0x5a>
 800e99a:	2307      	movs	r3, #7
 800e99c:	e143      	b.n	800ec26 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	699a      	ldr	r2, [r3, #24]
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	441a      	add	r2, r3
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	699b      	ldr	r3, [r3, #24]
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	f080 812d 	bcs.w	800ec0a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	699b      	ldr	r3, [r3, #24]
 800e9b4:	43db      	mvns	r3, r3
 800e9b6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e9b8:	e127      	b.n	800ec0a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	699b      	ldr	r3, [r3, #24]
 800e9be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	f040 80e3 	bne.w	800eb8e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	699b      	ldr	r3, [r3, #24]
 800e9cc:	0a5b      	lsrs	r3, r3, #9
 800e9ce:	693a      	ldr	r2, [r7, #16]
 800e9d0:	8952      	ldrh	r2, [r2, #10]
 800e9d2:	3a01      	subs	r2, #1
 800e9d4:	4013      	ands	r3, r2
 800e9d6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e9d8:	69bb      	ldr	r3, [r7, #24]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d143      	bne.n	800ea66 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	699b      	ldr	r3, [r3, #24]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d10c      	bne.n	800ea00 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	689b      	ldr	r3, [r3, #8]
 800e9ea:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e9ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d11a      	bne.n	800ea28 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	2100      	movs	r1, #0
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f7fe f9a9 	bl	800cd4e <create_chain>
 800e9fc:	62b8      	str	r0, [r7, #40]	@ 0x28
 800e9fe:	e013      	b.n	800ea28 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d007      	beq.n	800ea18 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	699b      	ldr	r3, [r3, #24]
 800ea0c:	4619      	mov	r1, r3
 800ea0e:	68f8      	ldr	r0, [r7, #12]
 800ea10:	f7fe fa35 	bl	800ce7e <clmt_clust>
 800ea14:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ea16:	e007      	b.n	800ea28 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ea18:	68fa      	ldr	r2, [r7, #12]
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	69db      	ldr	r3, [r3, #28]
 800ea1e:	4619      	mov	r1, r3
 800ea20:	4610      	mov	r0, r2
 800ea22:	f7fe f994 	bl	800cd4e <create_chain>
 800ea26:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ea28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	f000 80f2 	beq.w	800ec14 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ea30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea32:	2b01      	cmp	r3, #1
 800ea34:	d104      	bne.n	800ea40 <f_write+0xfc>
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	2202      	movs	r2, #2
 800ea3a:	755a      	strb	r2, [r3, #21]
 800ea3c:	2302      	movs	r3, #2
 800ea3e:	e0f2      	b.n	800ec26 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ea40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ea46:	d104      	bne.n	800ea52 <f_write+0x10e>
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	755a      	strb	r2, [r3, #21]
 800ea4e:	2301      	movs	r3, #1
 800ea50:	e0e9      	b.n	800ec26 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea56:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	689b      	ldr	r3, [r3, #8]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d102      	bne.n	800ea66 <f_write+0x122>
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea64:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	7d1b      	ldrb	r3, [r3, #20]
 800ea6a:	b25b      	sxtb	r3, r3
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	da18      	bge.n	800eaa2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	7858      	ldrb	r0, [r3, #1]
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	6a1a      	ldr	r2, [r3, #32]
 800ea7e:	2301      	movs	r3, #1
 800ea80:	f7fd fbc4 	bl	800c20c <disk_write>
 800ea84:	4603      	mov	r3, r0
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d004      	beq.n	800ea94 <f_write+0x150>
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	755a      	strb	r2, [r3, #21]
 800ea90:	2301      	movs	r3, #1
 800ea92:	e0c8      	b.n	800ec26 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	7d1b      	ldrb	r3, [r3, #20]
 800ea98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea9c:	b2da      	uxtb	r2, r3
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800eaa2:	693a      	ldr	r2, [r7, #16]
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	69db      	ldr	r3, [r3, #28]
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	4610      	mov	r0, r2
 800eaac:	f7fd ff3a 	bl	800c924 <clust2sect>
 800eab0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800eab2:	697b      	ldr	r3, [r7, #20]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d104      	bne.n	800eac2 <f_write+0x17e>
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2202      	movs	r2, #2
 800eabc:	755a      	strb	r2, [r3, #21]
 800eabe:	2302      	movs	r3, #2
 800eac0:	e0b1      	b.n	800ec26 <f_write+0x2e2>
			sect += csect;
 800eac2:	697a      	ldr	r2, [r7, #20]
 800eac4:	69bb      	ldr	r3, [r7, #24]
 800eac6:	4413      	add	r3, r2
 800eac8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	0a5b      	lsrs	r3, r3, #9
 800eace:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ead0:	6a3b      	ldr	r3, [r7, #32]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d03c      	beq.n	800eb50 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ead6:	69ba      	ldr	r2, [r7, #24]
 800ead8:	6a3b      	ldr	r3, [r7, #32]
 800eada:	4413      	add	r3, r2
 800eadc:	693a      	ldr	r2, [r7, #16]
 800eade:	8952      	ldrh	r2, [r2, #10]
 800eae0:	4293      	cmp	r3, r2
 800eae2:	d905      	bls.n	800eaf0 <f_write+0x1ac>
					cc = fs->csize - csect;
 800eae4:	693b      	ldr	r3, [r7, #16]
 800eae6:	895b      	ldrh	r3, [r3, #10]
 800eae8:	461a      	mov	r2, r3
 800eaea:	69bb      	ldr	r3, [r7, #24]
 800eaec:	1ad3      	subs	r3, r2, r3
 800eaee:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	7858      	ldrb	r0, [r3, #1]
 800eaf4:	6a3b      	ldr	r3, [r7, #32]
 800eaf6:	697a      	ldr	r2, [r7, #20]
 800eaf8:	69f9      	ldr	r1, [r7, #28]
 800eafa:	f7fd fb87 	bl	800c20c <disk_write>
 800eafe:	4603      	mov	r3, r0
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d004      	beq.n	800eb0e <f_write+0x1ca>
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	2201      	movs	r2, #1
 800eb08:	755a      	strb	r2, [r3, #21]
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	e08b      	b.n	800ec26 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	6a1a      	ldr	r2, [r3, #32]
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	1ad3      	subs	r3, r2, r3
 800eb16:	6a3a      	ldr	r2, [r7, #32]
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d915      	bls.n	800eb48 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	6a1a      	ldr	r2, [r3, #32]
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	1ad3      	subs	r3, r2, r3
 800eb2a:	025b      	lsls	r3, r3, #9
 800eb2c:	69fa      	ldr	r2, [r7, #28]
 800eb2e:	4413      	add	r3, r2
 800eb30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb34:	4619      	mov	r1, r3
 800eb36:	f7fd fc2a 	bl	800c38e <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	7d1b      	ldrb	r3, [r3, #20]
 800eb3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eb42:	b2da      	uxtb	r2, r3
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800eb48:	6a3b      	ldr	r3, [r7, #32]
 800eb4a:	025b      	lsls	r3, r3, #9
 800eb4c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800eb4e:	e03f      	b.n	800ebd0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	6a1b      	ldr	r3, [r3, #32]
 800eb54:	697a      	ldr	r2, [r7, #20]
 800eb56:	429a      	cmp	r2, r3
 800eb58:	d016      	beq.n	800eb88 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	699a      	ldr	r2, [r3, #24]
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800eb62:	429a      	cmp	r2, r3
 800eb64:	d210      	bcs.n	800eb88 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	7858      	ldrb	r0, [r3, #1]
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eb70:	2301      	movs	r3, #1
 800eb72:	697a      	ldr	r2, [r7, #20]
 800eb74:	f7fd fb2a 	bl	800c1cc <disk_read>
 800eb78:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d004      	beq.n	800eb88 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2201      	movs	r2, #1
 800eb82:	755a      	strb	r2, [r3, #21]
 800eb84:	2301      	movs	r3, #1
 800eb86:	e04e      	b.n	800ec26 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	697a      	ldr	r2, [r7, #20]
 800eb8c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	699b      	ldr	r3, [r3, #24]
 800eb92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb96:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800eb9a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800eb9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	429a      	cmp	r2, r3
 800eba2:	d901      	bls.n	800eba8 <f_write+0x264>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	699b      	ldr	r3, [r3, #24]
 800ebb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebb6:	4413      	add	r3, r2
 800ebb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ebba:	69f9      	ldr	r1, [r7, #28]
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f7fd fbe6 	bl	800c38e <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	7d1b      	ldrb	r3, [r3, #20]
 800ebc6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ebca:	b2da      	uxtb	r2, r3
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ebd0:	69fa      	ldr	r2, [r7, #28]
 800ebd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebd4:	4413      	add	r3, r2
 800ebd6:	61fb      	str	r3, [r7, #28]
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	699a      	ldr	r2, [r3, #24]
 800ebdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebde:	441a      	add	r2, r3
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	619a      	str	r2, [r3, #24]
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	68da      	ldr	r2, [r3, #12]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	699b      	ldr	r3, [r3, #24]
 800ebec:	429a      	cmp	r2, r3
 800ebee:	bf38      	it	cc
 800ebf0:	461a      	movcc	r2, r3
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	60da      	str	r2, [r3, #12]
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebfc:	441a      	add	r2, r3
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	601a      	str	r2, [r3, #0]
 800ec02:	687a      	ldr	r2, [r7, #4]
 800ec04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec06:	1ad3      	subs	r3, r2, r3
 800ec08:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	f47f aed4 	bne.w	800e9ba <f_write+0x76>
 800ec12:	e000      	b.n	800ec16 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ec14:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	7d1b      	ldrb	r3, [r3, #20]
 800ec1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec1e:	b2da      	uxtb	r2, r3
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ec24:	2300      	movs	r3, #0
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3730      	adds	r7, #48	@ 0x30
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}

0800ec2e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ec2e:	b580      	push	{r7, lr}
 800ec30:	b086      	sub	sp, #24
 800ec32:	af00      	add	r7, sp, #0
 800ec34:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f107 0208 	add.w	r2, r7, #8
 800ec3c:	4611      	mov	r1, r2
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f7ff fc4a 	bl	800e4d8 <validate>
 800ec44:	4603      	mov	r3, r0
 800ec46:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ec48:	7dfb      	ldrb	r3, [r7, #23]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d168      	bne.n	800ed20 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	7d1b      	ldrb	r3, [r3, #20]
 800ec52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d062      	beq.n	800ed20 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	7d1b      	ldrb	r3, [r3, #20]
 800ec5e:	b25b      	sxtb	r3, r3
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	da15      	bge.n	800ec90 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ec64:	68bb      	ldr	r3, [r7, #8]
 800ec66:	7858      	ldrb	r0, [r3, #1]
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6a1a      	ldr	r2, [r3, #32]
 800ec72:	2301      	movs	r3, #1
 800ec74:	f7fd faca 	bl	800c20c <disk_write>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d001      	beq.n	800ec82 <f_sync+0x54>
 800ec7e:	2301      	movs	r3, #1
 800ec80:	e04f      	b.n	800ed22 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	7d1b      	ldrb	r3, [r3, #20]
 800ec86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ec8a:	b2da      	uxtb	r2, r3
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ec90:	f7fc fd22 	bl	800b6d8 <get_fattime>
 800ec94:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ec96:	68ba      	ldr	r2, [r7, #8]
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec9c:	4619      	mov	r1, r3
 800ec9e:	4610      	mov	r0, r2
 800eca0:	f7fd fda4 	bl	800c7ec <move_window>
 800eca4:	4603      	mov	r3, r0
 800eca6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800eca8:	7dfb      	ldrb	r3, [r7, #23]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d138      	bne.n	800ed20 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecb2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	330b      	adds	r3, #11
 800ecb8:	781a      	ldrb	r2, [r3, #0]
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	330b      	adds	r3, #11
 800ecbe:	f042 0220 	orr.w	r2, r2, #32
 800ecc2:	b2d2      	uxtb	r2, r2
 800ecc4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	6818      	ldr	r0, [r3, #0]
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	689b      	ldr	r3, [r3, #8]
 800ecce:	461a      	mov	r2, r3
 800ecd0:	68f9      	ldr	r1, [r7, #12]
 800ecd2:	f7fe faae 	bl	800d232 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	f103 021c 	add.w	r2, r3, #28
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	68db      	ldr	r3, [r3, #12]
 800ece0:	4619      	mov	r1, r3
 800ece2:	4610      	mov	r0, r2
 800ece4:	f7fd fb27 	bl	800c336 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	3316      	adds	r3, #22
 800ecec:	6939      	ldr	r1, [r7, #16]
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f7fd fb21 	bl	800c336 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	3312      	adds	r3, #18
 800ecf8:	2100      	movs	r1, #0
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7fd fb00 	bl	800c300 <st_word>
					fs->wflag = 1;
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	2201      	movs	r2, #1
 800ed04:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f7fd fd9d 	bl	800c848 <sync_fs>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	7d1b      	ldrb	r3, [r3, #20]
 800ed16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ed1a:	b2da      	uxtb	r2, r3
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ed20:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3718      	adds	r7, #24
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}

0800ed2a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ed2a:	b580      	push	{r7, lr}
 800ed2c:	b084      	sub	sp, #16
 800ed2e:	af00      	add	r7, sp, #0
 800ed30:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f7ff ff7b 	bl	800ec2e <f_sync>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ed3c:	7bfb      	ldrb	r3, [r7, #15]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d118      	bne.n	800ed74 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f107 0208 	add.w	r2, r7, #8
 800ed48:	4611      	mov	r1, r2
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7ff fbc4 	bl	800e4d8 <validate>
 800ed50:	4603      	mov	r3, r0
 800ed52:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ed54:	7bfb      	ldrb	r3, [r7, #15]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d10c      	bne.n	800ed74 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	691b      	ldr	r3, [r3, #16]
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7fd fca0 	bl	800c6a4 <dec_lock>
 800ed64:	4603      	mov	r3, r0
 800ed66:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ed68:	7bfb      	ldrb	r3, [r7, #15]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d102      	bne.n	800ed74 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2200      	movs	r2, #0
 800ed72:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ed74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	3710      	adds	r7, #16
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}

0800ed7e <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ed7e:	b580      	push	{r7, lr}
 800ed80:	b090      	sub	sp, #64	@ 0x40
 800ed82:	af00      	add	r7, sp, #0
 800ed84:	6078      	str	r0, [r7, #4]
 800ed86:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800ed88:	f107 0108 	add.w	r1, r7, #8
 800ed8c:	1d3b      	adds	r3, r7, #4
 800ed8e:	2200      	movs	r2, #0
 800ed90:	4618      	mov	r0, r3
 800ed92:	f7ff f951 	bl	800e038 <find_volume>
 800ed96:	4603      	mov	r3, r0
 800ed98:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 800ed9c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d11f      	bne.n	800ede4 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800eda4:	687a      	ldr	r2, [r7, #4]
 800eda6:	f107 0308 	add.w	r3, r7, #8
 800edaa:	4611      	mov	r1, r2
 800edac:	4618      	mov	r0, r3
 800edae:	f7ff f837 	bl	800de20 <follow_path>
 800edb2:	4603      	mov	r3, r0
 800edb4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800edb8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d111      	bne.n	800ede4 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800edc0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800edc4:	b25b      	sxtb	r3, r3
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	da03      	bge.n	800edd2 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800edca:	2306      	movs	r3, #6
 800edcc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800edd0:	e008      	b.n	800ede4 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d005      	beq.n	800ede4 <f_stat+0x66>
 800edd8:	f107 0308 	add.w	r3, r7, #8
 800eddc:	6839      	ldr	r1, [r7, #0]
 800edde:	4618      	mov	r0, r3
 800ede0:	f7fe fd88 	bl	800d8f4 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800ede4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3740      	adds	r7, #64	@ 0x40
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b092      	sub	sp, #72	@ 0x48
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	60b9      	str	r1, [r7, #8]
 800edfa:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800edfc:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800ee00:	f107 030c 	add.w	r3, r7, #12
 800ee04:	2200      	movs	r2, #0
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7ff f916 	bl	800e038 <find_volume>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800ee12:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	f040 8099 	bne.w	800ef4e <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800ee1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800ee22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee24:	695a      	ldr	r2, [r3, #20]
 800ee26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee28:	699b      	ldr	r3, [r3, #24]
 800ee2a:	3b02      	subs	r3, #2
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d804      	bhi.n	800ee3a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800ee30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee32:	695a      	ldr	r2, [r3, #20]
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	601a      	str	r2, [r3, #0]
 800ee38:	e089      	b.n	800ef4e <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800ee3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee40:	781b      	ldrb	r3, [r3, #0]
 800ee42:	2b01      	cmp	r3, #1
 800ee44:	d128      	bne.n	800ee98 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800ee46:	2302      	movs	r3, #2
 800ee48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee4c:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800ee4e:	f107 0314 	add.w	r3, r7, #20
 800ee52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ee54:	4618      	mov	r0, r3
 800ee56:	f7fd fd84 	bl	800c962 <get_fat>
 800ee5a:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800ee5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ee62:	d103      	bne.n	800ee6c <f_getfree+0x7c>
 800ee64:	2301      	movs	r3, #1
 800ee66:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ee6a:	e063      	b.n	800ef34 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800ee6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee6e:	2b01      	cmp	r3, #1
 800ee70:	d103      	bne.n	800ee7a <f_getfree+0x8a>
 800ee72:	2302      	movs	r3, #2
 800ee74:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ee78:	e05c      	b.n	800ef34 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800ee7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d102      	bne.n	800ee86 <f_getfree+0x96>
 800ee80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee82:	3301      	adds	r3, #1
 800ee84:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800ee86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee88:	3301      	adds	r3, #1
 800ee8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee8e:	699b      	ldr	r3, [r3, #24]
 800ee90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d3db      	bcc.n	800ee4e <f_getfree+0x5e>
 800ee96:	e04d      	b.n	800ef34 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800ee98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee9a:	699b      	ldr	r3, [r3, #24]
 800ee9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eea2:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800eea4:	2300      	movs	r3, #0
 800eea6:	637b      	str	r3, [r7, #52]	@ 0x34
 800eea8:	2300      	movs	r3, #0
 800eeaa:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800eeac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d113      	bne.n	800eeda <f_getfree+0xea>
							res = move_window(fs, sect++);
 800eeb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eeb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeb6:	1c5a      	adds	r2, r3, #1
 800eeb8:	63ba      	str	r2, [r7, #56]	@ 0x38
 800eeba:	4619      	mov	r1, r3
 800eebc:	f7fd fc96 	bl	800c7ec <move_window>
 800eec0:	4603      	mov	r3, r0
 800eec2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800eec6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d131      	bne.n	800ef32 <f_getfree+0x142>
							p = fs->win;
 800eece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eed0:	3334      	adds	r3, #52	@ 0x34
 800eed2:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800eed4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eed8:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800eeda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eedc:	781b      	ldrb	r3, [r3, #0]
 800eede:	2b02      	cmp	r3, #2
 800eee0:	d10f      	bne.n	800ef02 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800eee2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eee4:	f7fd f9d0 	bl	800c288 <ld_word>
 800eee8:	4603      	mov	r3, r0
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d102      	bne.n	800eef4 <f_getfree+0x104>
 800eeee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eef0:	3301      	adds	r3, #1
 800eef2:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800eef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eef6:	3302      	adds	r3, #2
 800eef8:	633b      	str	r3, [r7, #48]	@ 0x30
 800eefa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eefc:	3b02      	subs	r3, #2
 800eefe:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef00:	e010      	b.n	800ef24 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800ef02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ef04:	f7fd f9d9 	bl	800c2ba <ld_dword>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d102      	bne.n	800ef18 <f_getfree+0x128>
 800ef12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef14:	3301      	adds	r3, #1
 800ef16:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800ef18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef1a:	3304      	adds	r3, #4
 800ef1c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ef1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef20:	3b04      	subs	r3, #4
 800ef22:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800ef24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef26:	3b01      	subs	r3, #1
 800ef28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d1bd      	bne.n	800eeac <f_getfree+0xbc>
 800ef30:	e000      	b.n	800ef34 <f_getfree+0x144>
							if (res != FR_OK) break;
 800ef32:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ef38:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800ef3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ef3e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800ef40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef42:	791a      	ldrb	r2, [r3, #4]
 800ef44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef46:	f042 0201 	orr.w	r2, r2, #1
 800ef4a:	b2d2      	uxtb	r2, r2
 800ef4c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800ef4e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800ef52:	4618      	mov	r0, r3
 800ef54:	3748      	adds	r7, #72	@ 0x48
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}
	...

0800ef5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ef5c:	b480      	push	{r7}
 800ef5e:	b087      	sub	sp, #28
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	60f8      	str	r0, [r7, #12]
 800ef64:	60b9      	str	r1, [r7, #8]
 800ef66:	4613      	mov	r3, r2
 800ef68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ef72:	4b1f      	ldr	r3, [pc, #124]	@ (800eff0 <FATFS_LinkDriverEx+0x94>)
 800ef74:	7a5b      	ldrb	r3, [r3, #9]
 800ef76:	b2db      	uxtb	r3, r3
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d131      	bne.n	800efe0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ef7c:	4b1c      	ldr	r3, [pc, #112]	@ (800eff0 <FATFS_LinkDriverEx+0x94>)
 800ef7e:	7a5b      	ldrb	r3, [r3, #9]
 800ef80:	b2db      	uxtb	r3, r3
 800ef82:	461a      	mov	r2, r3
 800ef84:	4b1a      	ldr	r3, [pc, #104]	@ (800eff0 <FATFS_LinkDriverEx+0x94>)
 800ef86:	2100      	movs	r1, #0
 800ef88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ef8a:	4b19      	ldr	r3, [pc, #100]	@ (800eff0 <FATFS_LinkDriverEx+0x94>)
 800ef8c:	7a5b      	ldrb	r3, [r3, #9]
 800ef8e:	b2db      	uxtb	r3, r3
 800ef90:	4a17      	ldr	r2, [pc, #92]	@ (800eff0 <FATFS_LinkDriverEx+0x94>)
 800ef92:	009b      	lsls	r3, r3, #2
 800ef94:	4413      	add	r3, r2
 800ef96:	68fa      	ldr	r2, [r7, #12]
 800ef98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ef9a:	4b15      	ldr	r3, [pc, #84]	@ (800eff0 <FATFS_LinkDriverEx+0x94>)
 800ef9c:	7a5b      	ldrb	r3, [r3, #9]
 800ef9e:	b2db      	uxtb	r3, r3
 800efa0:	461a      	mov	r2, r3
 800efa2:	4b13      	ldr	r3, [pc, #76]	@ (800eff0 <FATFS_LinkDriverEx+0x94>)
 800efa4:	4413      	add	r3, r2
 800efa6:	79fa      	ldrb	r2, [r7, #7]
 800efa8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800efaa:	4b11      	ldr	r3, [pc, #68]	@ (800eff0 <FATFS_LinkDriverEx+0x94>)
 800efac:	7a5b      	ldrb	r3, [r3, #9]
 800efae:	b2db      	uxtb	r3, r3
 800efb0:	1c5a      	adds	r2, r3, #1
 800efb2:	b2d1      	uxtb	r1, r2
 800efb4:	4a0e      	ldr	r2, [pc, #56]	@ (800eff0 <FATFS_LinkDriverEx+0x94>)
 800efb6:	7251      	strb	r1, [r2, #9]
 800efb8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800efba:	7dbb      	ldrb	r3, [r7, #22]
 800efbc:	3330      	adds	r3, #48	@ 0x30
 800efbe:	b2da      	uxtb	r2, r3
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	3301      	adds	r3, #1
 800efc8:	223a      	movs	r2, #58	@ 0x3a
 800efca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	3302      	adds	r3, #2
 800efd0:	222f      	movs	r2, #47	@ 0x2f
 800efd2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	3303      	adds	r3, #3
 800efd8:	2200      	movs	r2, #0
 800efda:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800efdc:	2300      	movs	r3, #0
 800efde:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800efe0:	7dfb      	ldrb	r3, [r7, #23]
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	371c      	adds	r7, #28
 800efe6:	46bd      	mov	sp, r7
 800efe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efec:	4770      	bx	lr
 800efee:	bf00      	nop
 800eff0:	20001670 	.word	0x20001670

0800eff4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b082      	sub	sp, #8
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
 800effc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800effe:	2200      	movs	r2, #0
 800f000:	6839      	ldr	r1, [r7, #0]
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f7ff ffaa 	bl	800ef5c <FATFS_LinkDriverEx>
 800f008:	4603      	mov	r3, r0
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3708      	adds	r7, #8
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}
	...

0800f014 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f014:	b480      	push	{r7}
 800f016:	b085      	sub	sp, #20
 800f018:	af00      	add	r7, sp, #0
 800f01a:	4603      	mov	r3, r0
 800f01c:	6039      	str	r1, [r7, #0]
 800f01e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f020:	88fb      	ldrh	r3, [r7, #6]
 800f022:	2b7f      	cmp	r3, #127	@ 0x7f
 800f024:	d802      	bhi.n	800f02c <ff_convert+0x18>
		c = chr;
 800f026:	88fb      	ldrh	r3, [r7, #6]
 800f028:	81fb      	strh	r3, [r7, #14]
 800f02a:	e025      	b.n	800f078 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d00b      	beq.n	800f04a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f032:	88fb      	ldrh	r3, [r7, #6]
 800f034:	2bff      	cmp	r3, #255	@ 0xff
 800f036:	d805      	bhi.n	800f044 <ff_convert+0x30>
 800f038:	88fb      	ldrh	r3, [r7, #6]
 800f03a:	3b80      	subs	r3, #128	@ 0x80
 800f03c:	4a12      	ldr	r2, [pc, #72]	@ (800f088 <ff_convert+0x74>)
 800f03e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f042:	e000      	b.n	800f046 <ff_convert+0x32>
 800f044:	2300      	movs	r3, #0
 800f046:	81fb      	strh	r3, [r7, #14]
 800f048:	e016      	b.n	800f078 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f04a:	2300      	movs	r3, #0
 800f04c:	81fb      	strh	r3, [r7, #14]
 800f04e:	e009      	b.n	800f064 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f050:	89fb      	ldrh	r3, [r7, #14]
 800f052:	4a0d      	ldr	r2, [pc, #52]	@ (800f088 <ff_convert+0x74>)
 800f054:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f058:	88fa      	ldrh	r2, [r7, #6]
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d006      	beq.n	800f06c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f05e:	89fb      	ldrh	r3, [r7, #14]
 800f060:	3301      	adds	r3, #1
 800f062:	81fb      	strh	r3, [r7, #14]
 800f064:	89fb      	ldrh	r3, [r7, #14]
 800f066:	2b7f      	cmp	r3, #127	@ 0x7f
 800f068:	d9f2      	bls.n	800f050 <ff_convert+0x3c>
 800f06a:	e000      	b.n	800f06e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f06c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f06e:	89fb      	ldrh	r3, [r7, #14]
 800f070:	3380      	adds	r3, #128	@ 0x80
 800f072:	b29b      	uxth	r3, r3
 800f074:	b2db      	uxtb	r3, r3
 800f076:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f078:	89fb      	ldrh	r3, [r7, #14]
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	3714      	adds	r7, #20
 800f07e:	46bd      	mov	sp, r7
 800f080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f084:	4770      	bx	lr
 800f086:	bf00      	nop
 800f088:	08013824 	.word	0x08013824

0800f08c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f08c:	b480      	push	{r7}
 800f08e:	b087      	sub	sp, #28
 800f090:	af00      	add	r7, sp, #0
 800f092:	4603      	mov	r3, r0
 800f094:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f096:	88fb      	ldrh	r3, [r7, #6]
 800f098:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f09c:	d201      	bcs.n	800f0a2 <ff_wtoupper+0x16>
 800f09e:	4b3e      	ldr	r3, [pc, #248]	@ (800f198 <ff_wtoupper+0x10c>)
 800f0a0:	e000      	b.n	800f0a4 <ff_wtoupper+0x18>
 800f0a2:	4b3e      	ldr	r3, [pc, #248]	@ (800f19c <ff_wtoupper+0x110>)
 800f0a4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	1c9a      	adds	r2, r3, #2
 800f0aa:	617a      	str	r2, [r7, #20]
 800f0ac:	881b      	ldrh	r3, [r3, #0]
 800f0ae:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f0b0:	8a7b      	ldrh	r3, [r7, #18]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d068      	beq.n	800f188 <ff_wtoupper+0xfc>
 800f0b6:	88fa      	ldrh	r2, [r7, #6]
 800f0b8:	8a7b      	ldrh	r3, [r7, #18]
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	d364      	bcc.n	800f188 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	1c9a      	adds	r2, r3, #2
 800f0c2:	617a      	str	r2, [r7, #20]
 800f0c4:	881b      	ldrh	r3, [r3, #0]
 800f0c6:	823b      	strh	r3, [r7, #16]
 800f0c8:	8a3b      	ldrh	r3, [r7, #16]
 800f0ca:	0a1b      	lsrs	r3, r3, #8
 800f0cc:	81fb      	strh	r3, [r7, #14]
 800f0ce:	8a3b      	ldrh	r3, [r7, #16]
 800f0d0:	b2db      	uxtb	r3, r3
 800f0d2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f0d4:	88fa      	ldrh	r2, [r7, #6]
 800f0d6:	8a79      	ldrh	r1, [r7, #18]
 800f0d8:	8a3b      	ldrh	r3, [r7, #16]
 800f0da:	440b      	add	r3, r1
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	da49      	bge.n	800f174 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f0e0:	89fb      	ldrh	r3, [r7, #14]
 800f0e2:	2b08      	cmp	r3, #8
 800f0e4:	d84f      	bhi.n	800f186 <ff_wtoupper+0xfa>
 800f0e6:	a201      	add	r2, pc, #4	@ (adr r2, 800f0ec <ff_wtoupper+0x60>)
 800f0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ec:	0800f111 	.word	0x0800f111
 800f0f0:	0800f123 	.word	0x0800f123
 800f0f4:	0800f139 	.word	0x0800f139
 800f0f8:	0800f141 	.word	0x0800f141
 800f0fc:	0800f149 	.word	0x0800f149
 800f100:	0800f151 	.word	0x0800f151
 800f104:	0800f159 	.word	0x0800f159
 800f108:	0800f161 	.word	0x0800f161
 800f10c:	0800f169 	.word	0x0800f169
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f110:	88fa      	ldrh	r2, [r7, #6]
 800f112:	8a7b      	ldrh	r3, [r7, #18]
 800f114:	1ad3      	subs	r3, r2, r3
 800f116:	005b      	lsls	r3, r3, #1
 800f118:	697a      	ldr	r2, [r7, #20]
 800f11a:	4413      	add	r3, r2
 800f11c:	881b      	ldrh	r3, [r3, #0]
 800f11e:	80fb      	strh	r3, [r7, #6]
 800f120:	e027      	b.n	800f172 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f122:	88fa      	ldrh	r2, [r7, #6]
 800f124:	8a7b      	ldrh	r3, [r7, #18]
 800f126:	1ad3      	subs	r3, r2, r3
 800f128:	b29b      	uxth	r3, r3
 800f12a:	f003 0301 	and.w	r3, r3, #1
 800f12e:	b29b      	uxth	r3, r3
 800f130:	88fa      	ldrh	r2, [r7, #6]
 800f132:	1ad3      	subs	r3, r2, r3
 800f134:	80fb      	strh	r3, [r7, #6]
 800f136:	e01c      	b.n	800f172 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f138:	88fb      	ldrh	r3, [r7, #6]
 800f13a:	3b10      	subs	r3, #16
 800f13c:	80fb      	strh	r3, [r7, #6]
 800f13e:	e018      	b.n	800f172 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f140:	88fb      	ldrh	r3, [r7, #6]
 800f142:	3b20      	subs	r3, #32
 800f144:	80fb      	strh	r3, [r7, #6]
 800f146:	e014      	b.n	800f172 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f148:	88fb      	ldrh	r3, [r7, #6]
 800f14a:	3b30      	subs	r3, #48	@ 0x30
 800f14c:	80fb      	strh	r3, [r7, #6]
 800f14e:	e010      	b.n	800f172 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f150:	88fb      	ldrh	r3, [r7, #6]
 800f152:	3b1a      	subs	r3, #26
 800f154:	80fb      	strh	r3, [r7, #6]
 800f156:	e00c      	b.n	800f172 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f158:	88fb      	ldrh	r3, [r7, #6]
 800f15a:	3308      	adds	r3, #8
 800f15c:	80fb      	strh	r3, [r7, #6]
 800f15e:	e008      	b.n	800f172 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f160:	88fb      	ldrh	r3, [r7, #6]
 800f162:	3b50      	subs	r3, #80	@ 0x50
 800f164:	80fb      	strh	r3, [r7, #6]
 800f166:	e004      	b.n	800f172 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f168:	88fb      	ldrh	r3, [r7, #6]
 800f16a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800f16e:	80fb      	strh	r3, [r7, #6]
 800f170:	bf00      	nop
			}
			break;
 800f172:	e008      	b.n	800f186 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f174:	89fb      	ldrh	r3, [r7, #14]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d195      	bne.n	800f0a6 <ff_wtoupper+0x1a>
 800f17a:	8a3b      	ldrh	r3, [r7, #16]
 800f17c:	005b      	lsls	r3, r3, #1
 800f17e:	697a      	ldr	r2, [r7, #20]
 800f180:	4413      	add	r3, r2
 800f182:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f184:	e78f      	b.n	800f0a6 <ff_wtoupper+0x1a>
			break;
 800f186:	bf00      	nop
	}

	return chr;
 800f188:	88fb      	ldrh	r3, [r7, #6]
}
 800f18a:	4618      	mov	r0, r3
 800f18c:	371c      	adds	r7, #28
 800f18e:	46bd      	mov	sp, r7
 800f190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f194:	4770      	bx	lr
 800f196:	bf00      	nop
 800f198:	08013924 	.word	0x08013924
 800f19c:	08013b18 	.word	0x08013b18

0800f1a0 <__cvt>:
 800f1a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f1a4:	ec57 6b10 	vmov	r6, r7, d0
 800f1a8:	2f00      	cmp	r7, #0
 800f1aa:	460c      	mov	r4, r1
 800f1ac:	4619      	mov	r1, r3
 800f1ae:	463b      	mov	r3, r7
 800f1b0:	bfbb      	ittet	lt
 800f1b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f1b6:	461f      	movlt	r7, r3
 800f1b8:	2300      	movge	r3, #0
 800f1ba:	232d      	movlt	r3, #45	@ 0x2d
 800f1bc:	700b      	strb	r3, [r1, #0]
 800f1be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f1c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f1c4:	4691      	mov	r9, r2
 800f1c6:	f023 0820 	bic.w	r8, r3, #32
 800f1ca:	bfbc      	itt	lt
 800f1cc:	4632      	movlt	r2, r6
 800f1ce:	4616      	movlt	r6, r2
 800f1d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f1d4:	d005      	beq.n	800f1e2 <__cvt+0x42>
 800f1d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f1da:	d100      	bne.n	800f1de <__cvt+0x3e>
 800f1dc:	3401      	adds	r4, #1
 800f1de:	2102      	movs	r1, #2
 800f1e0:	e000      	b.n	800f1e4 <__cvt+0x44>
 800f1e2:	2103      	movs	r1, #3
 800f1e4:	ab03      	add	r3, sp, #12
 800f1e6:	9301      	str	r3, [sp, #4]
 800f1e8:	ab02      	add	r3, sp, #8
 800f1ea:	9300      	str	r3, [sp, #0]
 800f1ec:	ec47 6b10 	vmov	d0, r6, r7
 800f1f0:	4653      	mov	r3, sl
 800f1f2:	4622      	mov	r2, r4
 800f1f4:	f000 fe90 	bl	800ff18 <_dtoa_r>
 800f1f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f1fc:	4605      	mov	r5, r0
 800f1fe:	d119      	bne.n	800f234 <__cvt+0x94>
 800f200:	f019 0f01 	tst.w	r9, #1
 800f204:	d00e      	beq.n	800f224 <__cvt+0x84>
 800f206:	eb00 0904 	add.w	r9, r0, r4
 800f20a:	2200      	movs	r2, #0
 800f20c:	2300      	movs	r3, #0
 800f20e:	4630      	mov	r0, r6
 800f210:	4639      	mov	r1, r7
 800f212:	f7f1 fc59 	bl	8000ac8 <__aeabi_dcmpeq>
 800f216:	b108      	cbz	r0, 800f21c <__cvt+0x7c>
 800f218:	f8cd 900c 	str.w	r9, [sp, #12]
 800f21c:	2230      	movs	r2, #48	@ 0x30
 800f21e:	9b03      	ldr	r3, [sp, #12]
 800f220:	454b      	cmp	r3, r9
 800f222:	d31e      	bcc.n	800f262 <__cvt+0xc2>
 800f224:	9b03      	ldr	r3, [sp, #12]
 800f226:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f228:	1b5b      	subs	r3, r3, r5
 800f22a:	4628      	mov	r0, r5
 800f22c:	6013      	str	r3, [r2, #0]
 800f22e:	b004      	add	sp, #16
 800f230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f234:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f238:	eb00 0904 	add.w	r9, r0, r4
 800f23c:	d1e5      	bne.n	800f20a <__cvt+0x6a>
 800f23e:	7803      	ldrb	r3, [r0, #0]
 800f240:	2b30      	cmp	r3, #48	@ 0x30
 800f242:	d10a      	bne.n	800f25a <__cvt+0xba>
 800f244:	2200      	movs	r2, #0
 800f246:	2300      	movs	r3, #0
 800f248:	4630      	mov	r0, r6
 800f24a:	4639      	mov	r1, r7
 800f24c:	f7f1 fc3c 	bl	8000ac8 <__aeabi_dcmpeq>
 800f250:	b918      	cbnz	r0, 800f25a <__cvt+0xba>
 800f252:	f1c4 0401 	rsb	r4, r4, #1
 800f256:	f8ca 4000 	str.w	r4, [sl]
 800f25a:	f8da 3000 	ldr.w	r3, [sl]
 800f25e:	4499      	add	r9, r3
 800f260:	e7d3      	b.n	800f20a <__cvt+0x6a>
 800f262:	1c59      	adds	r1, r3, #1
 800f264:	9103      	str	r1, [sp, #12]
 800f266:	701a      	strb	r2, [r3, #0]
 800f268:	e7d9      	b.n	800f21e <__cvt+0x7e>

0800f26a <__exponent>:
 800f26a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f26c:	2900      	cmp	r1, #0
 800f26e:	bfba      	itte	lt
 800f270:	4249      	neglt	r1, r1
 800f272:	232d      	movlt	r3, #45	@ 0x2d
 800f274:	232b      	movge	r3, #43	@ 0x2b
 800f276:	2909      	cmp	r1, #9
 800f278:	7002      	strb	r2, [r0, #0]
 800f27a:	7043      	strb	r3, [r0, #1]
 800f27c:	dd29      	ble.n	800f2d2 <__exponent+0x68>
 800f27e:	f10d 0307 	add.w	r3, sp, #7
 800f282:	461d      	mov	r5, r3
 800f284:	270a      	movs	r7, #10
 800f286:	461a      	mov	r2, r3
 800f288:	fbb1 f6f7 	udiv	r6, r1, r7
 800f28c:	fb07 1416 	mls	r4, r7, r6, r1
 800f290:	3430      	adds	r4, #48	@ 0x30
 800f292:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f296:	460c      	mov	r4, r1
 800f298:	2c63      	cmp	r4, #99	@ 0x63
 800f29a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800f29e:	4631      	mov	r1, r6
 800f2a0:	dcf1      	bgt.n	800f286 <__exponent+0x1c>
 800f2a2:	3130      	adds	r1, #48	@ 0x30
 800f2a4:	1e94      	subs	r4, r2, #2
 800f2a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f2aa:	1c41      	adds	r1, r0, #1
 800f2ac:	4623      	mov	r3, r4
 800f2ae:	42ab      	cmp	r3, r5
 800f2b0:	d30a      	bcc.n	800f2c8 <__exponent+0x5e>
 800f2b2:	f10d 0309 	add.w	r3, sp, #9
 800f2b6:	1a9b      	subs	r3, r3, r2
 800f2b8:	42ac      	cmp	r4, r5
 800f2ba:	bf88      	it	hi
 800f2bc:	2300      	movhi	r3, #0
 800f2be:	3302      	adds	r3, #2
 800f2c0:	4403      	add	r3, r0
 800f2c2:	1a18      	subs	r0, r3, r0
 800f2c4:	b003      	add	sp, #12
 800f2c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f2cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f2d0:	e7ed      	b.n	800f2ae <__exponent+0x44>
 800f2d2:	2330      	movs	r3, #48	@ 0x30
 800f2d4:	3130      	adds	r1, #48	@ 0x30
 800f2d6:	7083      	strb	r3, [r0, #2]
 800f2d8:	70c1      	strb	r1, [r0, #3]
 800f2da:	1d03      	adds	r3, r0, #4
 800f2dc:	e7f1      	b.n	800f2c2 <__exponent+0x58>
	...

0800f2e0 <_printf_float>:
 800f2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2e4:	b08d      	sub	sp, #52	@ 0x34
 800f2e6:	460c      	mov	r4, r1
 800f2e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f2ec:	4616      	mov	r6, r2
 800f2ee:	461f      	mov	r7, r3
 800f2f0:	4605      	mov	r5, r0
 800f2f2:	f000 fd85 	bl	800fe00 <_localeconv_r>
 800f2f6:	6803      	ldr	r3, [r0, #0]
 800f2f8:	9304      	str	r3, [sp, #16]
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f7f0 ffb8 	bl	8000270 <strlen>
 800f300:	2300      	movs	r3, #0
 800f302:	930a      	str	r3, [sp, #40]	@ 0x28
 800f304:	f8d8 3000 	ldr.w	r3, [r8]
 800f308:	9005      	str	r0, [sp, #20]
 800f30a:	3307      	adds	r3, #7
 800f30c:	f023 0307 	bic.w	r3, r3, #7
 800f310:	f103 0208 	add.w	r2, r3, #8
 800f314:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f318:	f8d4 b000 	ldr.w	fp, [r4]
 800f31c:	f8c8 2000 	str.w	r2, [r8]
 800f320:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f324:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f328:	9307      	str	r3, [sp, #28]
 800f32a:	f8cd 8018 	str.w	r8, [sp, #24]
 800f32e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f332:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f336:	4b9c      	ldr	r3, [pc, #624]	@ (800f5a8 <_printf_float+0x2c8>)
 800f338:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f33c:	f7f1 fbf6 	bl	8000b2c <__aeabi_dcmpun>
 800f340:	bb70      	cbnz	r0, 800f3a0 <_printf_float+0xc0>
 800f342:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f346:	4b98      	ldr	r3, [pc, #608]	@ (800f5a8 <_printf_float+0x2c8>)
 800f348:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f34c:	f7f1 fbd0 	bl	8000af0 <__aeabi_dcmple>
 800f350:	bb30      	cbnz	r0, 800f3a0 <_printf_float+0xc0>
 800f352:	2200      	movs	r2, #0
 800f354:	2300      	movs	r3, #0
 800f356:	4640      	mov	r0, r8
 800f358:	4649      	mov	r1, r9
 800f35a:	f7f1 fbbf 	bl	8000adc <__aeabi_dcmplt>
 800f35e:	b110      	cbz	r0, 800f366 <_printf_float+0x86>
 800f360:	232d      	movs	r3, #45	@ 0x2d
 800f362:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f366:	4a91      	ldr	r2, [pc, #580]	@ (800f5ac <_printf_float+0x2cc>)
 800f368:	4b91      	ldr	r3, [pc, #580]	@ (800f5b0 <_printf_float+0x2d0>)
 800f36a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f36e:	bf8c      	ite	hi
 800f370:	4690      	movhi	r8, r2
 800f372:	4698      	movls	r8, r3
 800f374:	2303      	movs	r3, #3
 800f376:	6123      	str	r3, [r4, #16]
 800f378:	f02b 0304 	bic.w	r3, fp, #4
 800f37c:	6023      	str	r3, [r4, #0]
 800f37e:	f04f 0900 	mov.w	r9, #0
 800f382:	9700      	str	r7, [sp, #0]
 800f384:	4633      	mov	r3, r6
 800f386:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f388:	4621      	mov	r1, r4
 800f38a:	4628      	mov	r0, r5
 800f38c:	f000 f9d2 	bl	800f734 <_printf_common>
 800f390:	3001      	adds	r0, #1
 800f392:	f040 808d 	bne.w	800f4b0 <_printf_float+0x1d0>
 800f396:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f39a:	b00d      	add	sp, #52	@ 0x34
 800f39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3a0:	4642      	mov	r2, r8
 800f3a2:	464b      	mov	r3, r9
 800f3a4:	4640      	mov	r0, r8
 800f3a6:	4649      	mov	r1, r9
 800f3a8:	f7f1 fbc0 	bl	8000b2c <__aeabi_dcmpun>
 800f3ac:	b140      	cbz	r0, 800f3c0 <_printf_float+0xe0>
 800f3ae:	464b      	mov	r3, r9
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	bfbc      	itt	lt
 800f3b4:	232d      	movlt	r3, #45	@ 0x2d
 800f3b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f3ba:	4a7e      	ldr	r2, [pc, #504]	@ (800f5b4 <_printf_float+0x2d4>)
 800f3bc:	4b7e      	ldr	r3, [pc, #504]	@ (800f5b8 <_printf_float+0x2d8>)
 800f3be:	e7d4      	b.n	800f36a <_printf_float+0x8a>
 800f3c0:	6863      	ldr	r3, [r4, #4]
 800f3c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f3c6:	9206      	str	r2, [sp, #24]
 800f3c8:	1c5a      	adds	r2, r3, #1
 800f3ca:	d13b      	bne.n	800f444 <_printf_float+0x164>
 800f3cc:	2306      	movs	r3, #6
 800f3ce:	6063      	str	r3, [r4, #4]
 800f3d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	6022      	str	r2, [r4, #0]
 800f3d8:	9303      	str	r3, [sp, #12]
 800f3da:	ab0a      	add	r3, sp, #40	@ 0x28
 800f3dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f3e0:	ab09      	add	r3, sp, #36	@ 0x24
 800f3e2:	9300      	str	r3, [sp, #0]
 800f3e4:	6861      	ldr	r1, [r4, #4]
 800f3e6:	ec49 8b10 	vmov	d0, r8, r9
 800f3ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f3ee:	4628      	mov	r0, r5
 800f3f0:	f7ff fed6 	bl	800f1a0 <__cvt>
 800f3f4:	9b06      	ldr	r3, [sp, #24]
 800f3f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f3f8:	2b47      	cmp	r3, #71	@ 0x47
 800f3fa:	4680      	mov	r8, r0
 800f3fc:	d129      	bne.n	800f452 <_printf_float+0x172>
 800f3fe:	1cc8      	adds	r0, r1, #3
 800f400:	db02      	blt.n	800f408 <_printf_float+0x128>
 800f402:	6863      	ldr	r3, [r4, #4]
 800f404:	4299      	cmp	r1, r3
 800f406:	dd41      	ble.n	800f48c <_printf_float+0x1ac>
 800f408:	f1aa 0a02 	sub.w	sl, sl, #2
 800f40c:	fa5f fa8a 	uxtb.w	sl, sl
 800f410:	3901      	subs	r1, #1
 800f412:	4652      	mov	r2, sl
 800f414:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f418:	9109      	str	r1, [sp, #36]	@ 0x24
 800f41a:	f7ff ff26 	bl	800f26a <__exponent>
 800f41e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f420:	1813      	adds	r3, r2, r0
 800f422:	2a01      	cmp	r2, #1
 800f424:	4681      	mov	r9, r0
 800f426:	6123      	str	r3, [r4, #16]
 800f428:	dc02      	bgt.n	800f430 <_printf_float+0x150>
 800f42a:	6822      	ldr	r2, [r4, #0]
 800f42c:	07d2      	lsls	r2, r2, #31
 800f42e:	d501      	bpl.n	800f434 <_printf_float+0x154>
 800f430:	3301      	adds	r3, #1
 800f432:	6123      	str	r3, [r4, #16]
 800f434:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d0a2      	beq.n	800f382 <_printf_float+0xa2>
 800f43c:	232d      	movs	r3, #45	@ 0x2d
 800f43e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f442:	e79e      	b.n	800f382 <_printf_float+0xa2>
 800f444:	9a06      	ldr	r2, [sp, #24]
 800f446:	2a47      	cmp	r2, #71	@ 0x47
 800f448:	d1c2      	bne.n	800f3d0 <_printf_float+0xf0>
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d1c0      	bne.n	800f3d0 <_printf_float+0xf0>
 800f44e:	2301      	movs	r3, #1
 800f450:	e7bd      	b.n	800f3ce <_printf_float+0xee>
 800f452:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f456:	d9db      	bls.n	800f410 <_printf_float+0x130>
 800f458:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f45c:	d118      	bne.n	800f490 <_printf_float+0x1b0>
 800f45e:	2900      	cmp	r1, #0
 800f460:	6863      	ldr	r3, [r4, #4]
 800f462:	dd0b      	ble.n	800f47c <_printf_float+0x19c>
 800f464:	6121      	str	r1, [r4, #16]
 800f466:	b913      	cbnz	r3, 800f46e <_printf_float+0x18e>
 800f468:	6822      	ldr	r2, [r4, #0]
 800f46a:	07d0      	lsls	r0, r2, #31
 800f46c:	d502      	bpl.n	800f474 <_printf_float+0x194>
 800f46e:	3301      	adds	r3, #1
 800f470:	440b      	add	r3, r1
 800f472:	6123      	str	r3, [r4, #16]
 800f474:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f476:	f04f 0900 	mov.w	r9, #0
 800f47a:	e7db      	b.n	800f434 <_printf_float+0x154>
 800f47c:	b913      	cbnz	r3, 800f484 <_printf_float+0x1a4>
 800f47e:	6822      	ldr	r2, [r4, #0]
 800f480:	07d2      	lsls	r2, r2, #31
 800f482:	d501      	bpl.n	800f488 <_printf_float+0x1a8>
 800f484:	3302      	adds	r3, #2
 800f486:	e7f4      	b.n	800f472 <_printf_float+0x192>
 800f488:	2301      	movs	r3, #1
 800f48a:	e7f2      	b.n	800f472 <_printf_float+0x192>
 800f48c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f490:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f492:	4299      	cmp	r1, r3
 800f494:	db05      	blt.n	800f4a2 <_printf_float+0x1c2>
 800f496:	6823      	ldr	r3, [r4, #0]
 800f498:	6121      	str	r1, [r4, #16]
 800f49a:	07d8      	lsls	r0, r3, #31
 800f49c:	d5ea      	bpl.n	800f474 <_printf_float+0x194>
 800f49e:	1c4b      	adds	r3, r1, #1
 800f4a0:	e7e7      	b.n	800f472 <_printf_float+0x192>
 800f4a2:	2900      	cmp	r1, #0
 800f4a4:	bfd4      	ite	le
 800f4a6:	f1c1 0202 	rsble	r2, r1, #2
 800f4aa:	2201      	movgt	r2, #1
 800f4ac:	4413      	add	r3, r2
 800f4ae:	e7e0      	b.n	800f472 <_printf_float+0x192>
 800f4b0:	6823      	ldr	r3, [r4, #0]
 800f4b2:	055a      	lsls	r2, r3, #21
 800f4b4:	d407      	bmi.n	800f4c6 <_printf_float+0x1e6>
 800f4b6:	6923      	ldr	r3, [r4, #16]
 800f4b8:	4642      	mov	r2, r8
 800f4ba:	4631      	mov	r1, r6
 800f4bc:	4628      	mov	r0, r5
 800f4be:	47b8      	blx	r7
 800f4c0:	3001      	adds	r0, #1
 800f4c2:	d12b      	bne.n	800f51c <_printf_float+0x23c>
 800f4c4:	e767      	b.n	800f396 <_printf_float+0xb6>
 800f4c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f4ca:	f240 80dd 	bls.w	800f688 <_printf_float+0x3a8>
 800f4ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	f7f1 faf7 	bl	8000ac8 <__aeabi_dcmpeq>
 800f4da:	2800      	cmp	r0, #0
 800f4dc:	d033      	beq.n	800f546 <_printf_float+0x266>
 800f4de:	4a37      	ldr	r2, [pc, #220]	@ (800f5bc <_printf_float+0x2dc>)
 800f4e0:	2301      	movs	r3, #1
 800f4e2:	4631      	mov	r1, r6
 800f4e4:	4628      	mov	r0, r5
 800f4e6:	47b8      	blx	r7
 800f4e8:	3001      	adds	r0, #1
 800f4ea:	f43f af54 	beq.w	800f396 <_printf_float+0xb6>
 800f4ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f4f2:	4543      	cmp	r3, r8
 800f4f4:	db02      	blt.n	800f4fc <_printf_float+0x21c>
 800f4f6:	6823      	ldr	r3, [r4, #0]
 800f4f8:	07d8      	lsls	r0, r3, #31
 800f4fa:	d50f      	bpl.n	800f51c <_printf_float+0x23c>
 800f4fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f500:	4631      	mov	r1, r6
 800f502:	4628      	mov	r0, r5
 800f504:	47b8      	blx	r7
 800f506:	3001      	adds	r0, #1
 800f508:	f43f af45 	beq.w	800f396 <_printf_float+0xb6>
 800f50c:	f04f 0900 	mov.w	r9, #0
 800f510:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800f514:	f104 0a1a 	add.w	sl, r4, #26
 800f518:	45c8      	cmp	r8, r9
 800f51a:	dc09      	bgt.n	800f530 <_printf_float+0x250>
 800f51c:	6823      	ldr	r3, [r4, #0]
 800f51e:	079b      	lsls	r3, r3, #30
 800f520:	f100 8103 	bmi.w	800f72a <_printf_float+0x44a>
 800f524:	68e0      	ldr	r0, [r4, #12]
 800f526:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f528:	4298      	cmp	r0, r3
 800f52a:	bfb8      	it	lt
 800f52c:	4618      	movlt	r0, r3
 800f52e:	e734      	b.n	800f39a <_printf_float+0xba>
 800f530:	2301      	movs	r3, #1
 800f532:	4652      	mov	r2, sl
 800f534:	4631      	mov	r1, r6
 800f536:	4628      	mov	r0, r5
 800f538:	47b8      	blx	r7
 800f53a:	3001      	adds	r0, #1
 800f53c:	f43f af2b 	beq.w	800f396 <_printf_float+0xb6>
 800f540:	f109 0901 	add.w	r9, r9, #1
 800f544:	e7e8      	b.n	800f518 <_printf_float+0x238>
 800f546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f548:	2b00      	cmp	r3, #0
 800f54a:	dc39      	bgt.n	800f5c0 <_printf_float+0x2e0>
 800f54c:	4a1b      	ldr	r2, [pc, #108]	@ (800f5bc <_printf_float+0x2dc>)
 800f54e:	2301      	movs	r3, #1
 800f550:	4631      	mov	r1, r6
 800f552:	4628      	mov	r0, r5
 800f554:	47b8      	blx	r7
 800f556:	3001      	adds	r0, #1
 800f558:	f43f af1d 	beq.w	800f396 <_printf_float+0xb6>
 800f55c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f560:	ea59 0303 	orrs.w	r3, r9, r3
 800f564:	d102      	bne.n	800f56c <_printf_float+0x28c>
 800f566:	6823      	ldr	r3, [r4, #0]
 800f568:	07d9      	lsls	r1, r3, #31
 800f56a:	d5d7      	bpl.n	800f51c <_printf_float+0x23c>
 800f56c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f570:	4631      	mov	r1, r6
 800f572:	4628      	mov	r0, r5
 800f574:	47b8      	blx	r7
 800f576:	3001      	adds	r0, #1
 800f578:	f43f af0d 	beq.w	800f396 <_printf_float+0xb6>
 800f57c:	f04f 0a00 	mov.w	sl, #0
 800f580:	f104 0b1a 	add.w	fp, r4, #26
 800f584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f586:	425b      	negs	r3, r3
 800f588:	4553      	cmp	r3, sl
 800f58a:	dc01      	bgt.n	800f590 <_printf_float+0x2b0>
 800f58c:	464b      	mov	r3, r9
 800f58e:	e793      	b.n	800f4b8 <_printf_float+0x1d8>
 800f590:	2301      	movs	r3, #1
 800f592:	465a      	mov	r2, fp
 800f594:	4631      	mov	r1, r6
 800f596:	4628      	mov	r0, r5
 800f598:	47b8      	blx	r7
 800f59a:	3001      	adds	r0, #1
 800f59c:	f43f aefb 	beq.w	800f396 <_printf_float+0xb6>
 800f5a0:	f10a 0a01 	add.w	sl, sl, #1
 800f5a4:	e7ee      	b.n	800f584 <_printf_float+0x2a4>
 800f5a6:	bf00      	nop
 800f5a8:	7fefffff 	.word	0x7fefffff
 800f5ac:	08013bd8 	.word	0x08013bd8
 800f5b0:	08013bd4 	.word	0x08013bd4
 800f5b4:	08013be0 	.word	0x08013be0
 800f5b8:	08013bdc 	.word	0x08013bdc
 800f5bc:	08013be4 	.word	0x08013be4
 800f5c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f5c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f5c6:	4553      	cmp	r3, sl
 800f5c8:	bfa8      	it	ge
 800f5ca:	4653      	movge	r3, sl
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	4699      	mov	r9, r3
 800f5d0:	dc36      	bgt.n	800f640 <_printf_float+0x360>
 800f5d2:	f04f 0b00 	mov.w	fp, #0
 800f5d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f5da:	f104 021a 	add.w	r2, r4, #26
 800f5de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f5e0:	9306      	str	r3, [sp, #24]
 800f5e2:	eba3 0309 	sub.w	r3, r3, r9
 800f5e6:	455b      	cmp	r3, fp
 800f5e8:	dc31      	bgt.n	800f64e <_printf_float+0x36e>
 800f5ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5ec:	459a      	cmp	sl, r3
 800f5ee:	dc3a      	bgt.n	800f666 <_printf_float+0x386>
 800f5f0:	6823      	ldr	r3, [r4, #0]
 800f5f2:	07da      	lsls	r2, r3, #31
 800f5f4:	d437      	bmi.n	800f666 <_printf_float+0x386>
 800f5f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5f8:	ebaa 0903 	sub.w	r9, sl, r3
 800f5fc:	9b06      	ldr	r3, [sp, #24]
 800f5fe:	ebaa 0303 	sub.w	r3, sl, r3
 800f602:	4599      	cmp	r9, r3
 800f604:	bfa8      	it	ge
 800f606:	4699      	movge	r9, r3
 800f608:	f1b9 0f00 	cmp.w	r9, #0
 800f60c:	dc33      	bgt.n	800f676 <_printf_float+0x396>
 800f60e:	f04f 0800 	mov.w	r8, #0
 800f612:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f616:	f104 0b1a 	add.w	fp, r4, #26
 800f61a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f61c:	ebaa 0303 	sub.w	r3, sl, r3
 800f620:	eba3 0309 	sub.w	r3, r3, r9
 800f624:	4543      	cmp	r3, r8
 800f626:	f77f af79 	ble.w	800f51c <_printf_float+0x23c>
 800f62a:	2301      	movs	r3, #1
 800f62c:	465a      	mov	r2, fp
 800f62e:	4631      	mov	r1, r6
 800f630:	4628      	mov	r0, r5
 800f632:	47b8      	blx	r7
 800f634:	3001      	adds	r0, #1
 800f636:	f43f aeae 	beq.w	800f396 <_printf_float+0xb6>
 800f63a:	f108 0801 	add.w	r8, r8, #1
 800f63e:	e7ec      	b.n	800f61a <_printf_float+0x33a>
 800f640:	4642      	mov	r2, r8
 800f642:	4631      	mov	r1, r6
 800f644:	4628      	mov	r0, r5
 800f646:	47b8      	blx	r7
 800f648:	3001      	adds	r0, #1
 800f64a:	d1c2      	bne.n	800f5d2 <_printf_float+0x2f2>
 800f64c:	e6a3      	b.n	800f396 <_printf_float+0xb6>
 800f64e:	2301      	movs	r3, #1
 800f650:	4631      	mov	r1, r6
 800f652:	4628      	mov	r0, r5
 800f654:	9206      	str	r2, [sp, #24]
 800f656:	47b8      	blx	r7
 800f658:	3001      	adds	r0, #1
 800f65a:	f43f ae9c 	beq.w	800f396 <_printf_float+0xb6>
 800f65e:	9a06      	ldr	r2, [sp, #24]
 800f660:	f10b 0b01 	add.w	fp, fp, #1
 800f664:	e7bb      	b.n	800f5de <_printf_float+0x2fe>
 800f666:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f66a:	4631      	mov	r1, r6
 800f66c:	4628      	mov	r0, r5
 800f66e:	47b8      	blx	r7
 800f670:	3001      	adds	r0, #1
 800f672:	d1c0      	bne.n	800f5f6 <_printf_float+0x316>
 800f674:	e68f      	b.n	800f396 <_printf_float+0xb6>
 800f676:	9a06      	ldr	r2, [sp, #24]
 800f678:	464b      	mov	r3, r9
 800f67a:	4442      	add	r2, r8
 800f67c:	4631      	mov	r1, r6
 800f67e:	4628      	mov	r0, r5
 800f680:	47b8      	blx	r7
 800f682:	3001      	adds	r0, #1
 800f684:	d1c3      	bne.n	800f60e <_printf_float+0x32e>
 800f686:	e686      	b.n	800f396 <_printf_float+0xb6>
 800f688:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f68c:	f1ba 0f01 	cmp.w	sl, #1
 800f690:	dc01      	bgt.n	800f696 <_printf_float+0x3b6>
 800f692:	07db      	lsls	r3, r3, #31
 800f694:	d536      	bpl.n	800f704 <_printf_float+0x424>
 800f696:	2301      	movs	r3, #1
 800f698:	4642      	mov	r2, r8
 800f69a:	4631      	mov	r1, r6
 800f69c:	4628      	mov	r0, r5
 800f69e:	47b8      	blx	r7
 800f6a0:	3001      	adds	r0, #1
 800f6a2:	f43f ae78 	beq.w	800f396 <_printf_float+0xb6>
 800f6a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f6aa:	4631      	mov	r1, r6
 800f6ac:	4628      	mov	r0, r5
 800f6ae:	47b8      	blx	r7
 800f6b0:	3001      	adds	r0, #1
 800f6b2:	f43f ae70 	beq.w	800f396 <_printf_float+0xb6>
 800f6b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	2300      	movs	r3, #0
 800f6be:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800f6c2:	f7f1 fa01 	bl	8000ac8 <__aeabi_dcmpeq>
 800f6c6:	b9c0      	cbnz	r0, 800f6fa <_printf_float+0x41a>
 800f6c8:	4653      	mov	r3, sl
 800f6ca:	f108 0201 	add.w	r2, r8, #1
 800f6ce:	4631      	mov	r1, r6
 800f6d0:	4628      	mov	r0, r5
 800f6d2:	47b8      	blx	r7
 800f6d4:	3001      	adds	r0, #1
 800f6d6:	d10c      	bne.n	800f6f2 <_printf_float+0x412>
 800f6d8:	e65d      	b.n	800f396 <_printf_float+0xb6>
 800f6da:	2301      	movs	r3, #1
 800f6dc:	465a      	mov	r2, fp
 800f6de:	4631      	mov	r1, r6
 800f6e0:	4628      	mov	r0, r5
 800f6e2:	47b8      	blx	r7
 800f6e4:	3001      	adds	r0, #1
 800f6e6:	f43f ae56 	beq.w	800f396 <_printf_float+0xb6>
 800f6ea:	f108 0801 	add.w	r8, r8, #1
 800f6ee:	45d0      	cmp	r8, sl
 800f6f0:	dbf3      	blt.n	800f6da <_printf_float+0x3fa>
 800f6f2:	464b      	mov	r3, r9
 800f6f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f6f8:	e6df      	b.n	800f4ba <_printf_float+0x1da>
 800f6fa:	f04f 0800 	mov.w	r8, #0
 800f6fe:	f104 0b1a 	add.w	fp, r4, #26
 800f702:	e7f4      	b.n	800f6ee <_printf_float+0x40e>
 800f704:	2301      	movs	r3, #1
 800f706:	4642      	mov	r2, r8
 800f708:	e7e1      	b.n	800f6ce <_printf_float+0x3ee>
 800f70a:	2301      	movs	r3, #1
 800f70c:	464a      	mov	r2, r9
 800f70e:	4631      	mov	r1, r6
 800f710:	4628      	mov	r0, r5
 800f712:	47b8      	blx	r7
 800f714:	3001      	adds	r0, #1
 800f716:	f43f ae3e 	beq.w	800f396 <_printf_float+0xb6>
 800f71a:	f108 0801 	add.w	r8, r8, #1
 800f71e:	68e3      	ldr	r3, [r4, #12]
 800f720:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f722:	1a5b      	subs	r3, r3, r1
 800f724:	4543      	cmp	r3, r8
 800f726:	dcf0      	bgt.n	800f70a <_printf_float+0x42a>
 800f728:	e6fc      	b.n	800f524 <_printf_float+0x244>
 800f72a:	f04f 0800 	mov.w	r8, #0
 800f72e:	f104 0919 	add.w	r9, r4, #25
 800f732:	e7f4      	b.n	800f71e <_printf_float+0x43e>

0800f734 <_printf_common>:
 800f734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f738:	4616      	mov	r6, r2
 800f73a:	4698      	mov	r8, r3
 800f73c:	688a      	ldr	r2, [r1, #8]
 800f73e:	690b      	ldr	r3, [r1, #16]
 800f740:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f744:	4293      	cmp	r3, r2
 800f746:	bfb8      	it	lt
 800f748:	4613      	movlt	r3, r2
 800f74a:	6033      	str	r3, [r6, #0]
 800f74c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f750:	4607      	mov	r7, r0
 800f752:	460c      	mov	r4, r1
 800f754:	b10a      	cbz	r2, 800f75a <_printf_common+0x26>
 800f756:	3301      	adds	r3, #1
 800f758:	6033      	str	r3, [r6, #0]
 800f75a:	6823      	ldr	r3, [r4, #0]
 800f75c:	0699      	lsls	r1, r3, #26
 800f75e:	bf42      	ittt	mi
 800f760:	6833      	ldrmi	r3, [r6, #0]
 800f762:	3302      	addmi	r3, #2
 800f764:	6033      	strmi	r3, [r6, #0]
 800f766:	6825      	ldr	r5, [r4, #0]
 800f768:	f015 0506 	ands.w	r5, r5, #6
 800f76c:	d106      	bne.n	800f77c <_printf_common+0x48>
 800f76e:	f104 0a19 	add.w	sl, r4, #25
 800f772:	68e3      	ldr	r3, [r4, #12]
 800f774:	6832      	ldr	r2, [r6, #0]
 800f776:	1a9b      	subs	r3, r3, r2
 800f778:	42ab      	cmp	r3, r5
 800f77a:	dc26      	bgt.n	800f7ca <_printf_common+0x96>
 800f77c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f780:	6822      	ldr	r2, [r4, #0]
 800f782:	3b00      	subs	r3, #0
 800f784:	bf18      	it	ne
 800f786:	2301      	movne	r3, #1
 800f788:	0692      	lsls	r2, r2, #26
 800f78a:	d42b      	bmi.n	800f7e4 <_printf_common+0xb0>
 800f78c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f790:	4641      	mov	r1, r8
 800f792:	4638      	mov	r0, r7
 800f794:	47c8      	blx	r9
 800f796:	3001      	adds	r0, #1
 800f798:	d01e      	beq.n	800f7d8 <_printf_common+0xa4>
 800f79a:	6823      	ldr	r3, [r4, #0]
 800f79c:	6922      	ldr	r2, [r4, #16]
 800f79e:	f003 0306 	and.w	r3, r3, #6
 800f7a2:	2b04      	cmp	r3, #4
 800f7a4:	bf02      	ittt	eq
 800f7a6:	68e5      	ldreq	r5, [r4, #12]
 800f7a8:	6833      	ldreq	r3, [r6, #0]
 800f7aa:	1aed      	subeq	r5, r5, r3
 800f7ac:	68a3      	ldr	r3, [r4, #8]
 800f7ae:	bf0c      	ite	eq
 800f7b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f7b4:	2500      	movne	r5, #0
 800f7b6:	4293      	cmp	r3, r2
 800f7b8:	bfc4      	itt	gt
 800f7ba:	1a9b      	subgt	r3, r3, r2
 800f7bc:	18ed      	addgt	r5, r5, r3
 800f7be:	2600      	movs	r6, #0
 800f7c0:	341a      	adds	r4, #26
 800f7c2:	42b5      	cmp	r5, r6
 800f7c4:	d11a      	bne.n	800f7fc <_printf_common+0xc8>
 800f7c6:	2000      	movs	r0, #0
 800f7c8:	e008      	b.n	800f7dc <_printf_common+0xa8>
 800f7ca:	2301      	movs	r3, #1
 800f7cc:	4652      	mov	r2, sl
 800f7ce:	4641      	mov	r1, r8
 800f7d0:	4638      	mov	r0, r7
 800f7d2:	47c8      	blx	r9
 800f7d4:	3001      	adds	r0, #1
 800f7d6:	d103      	bne.n	800f7e0 <_printf_common+0xac>
 800f7d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f7dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7e0:	3501      	adds	r5, #1
 800f7e2:	e7c6      	b.n	800f772 <_printf_common+0x3e>
 800f7e4:	18e1      	adds	r1, r4, r3
 800f7e6:	1c5a      	adds	r2, r3, #1
 800f7e8:	2030      	movs	r0, #48	@ 0x30
 800f7ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f7ee:	4422      	add	r2, r4
 800f7f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f7f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f7f8:	3302      	adds	r3, #2
 800f7fa:	e7c7      	b.n	800f78c <_printf_common+0x58>
 800f7fc:	2301      	movs	r3, #1
 800f7fe:	4622      	mov	r2, r4
 800f800:	4641      	mov	r1, r8
 800f802:	4638      	mov	r0, r7
 800f804:	47c8      	blx	r9
 800f806:	3001      	adds	r0, #1
 800f808:	d0e6      	beq.n	800f7d8 <_printf_common+0xa4>
 800f80a:	3601      	adds	r6, #1
 800f80c:	e7d9      	b.n	800f7c2 <_printf_common+0x8e>
	...

0800f810 <_printf_i>:
 800f810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f814:	7e0f      	ldrb	r7, [r1, #24]
 800f816:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f818:	2f78      	cmp	r7, #120	@ 0x78
 800f81a:	4691      	mov	r9, r2
 800f81c:	4680      	mov	r8, r0
 800f81e:	460c      	mov	r4, r1
 800f820:	469a      	mov	sl, r3
 800f822:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f826:	d807      	bhi.n	800f838 <_printf_i+0x28>
 800f828:	2f62      	cmp	r7, #98	@ 0x62
 800f82a:	d80a      	bhi.n	800f842 <_printf_i+0x32>
 800f82c:	2f00      	cmp	r7, #0
 800f82e:	f000 80d1 	beq.w	800f9d4 <_printf_i+0x1c4>
 800f832:	2f58      	cmp	r7, #88	@ 0x58
 800f834:	f000 80b8 	beq.w	800f9a8 <_printf_i+0x198>
 800f838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f83c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f840:	e03a      	b.n	800f8b8 <_printf_i+0xa8>
 800f842:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f846:	2b15      	cmp	r3, #21
 800f848:	d8f6      	bhi.n	800f838 <_printf_i+0x28>
 800f84a:	a101      	add	r1, pc, #4	@ (adr r1, 800f850 <_printf_i+0x40>)
 800f84c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f850:	0800f8a9 	.word	0x0800f8a9
 800f854:	0800f8bd 	.word	0x0800f8bd
 800f858:	0800f839 	.word	0x0800f839
 800f85c:	0800f839 	.word	0x0800f839
 800f860:	0800f839 	.word	0x0800f839
 800f864:	0800f839 	.word	0x0800f839
 800f868:	0800f8bd 	.word	0x0800f8bd
 800f86c:	0800f839 	.word	0x0800f839
 800f870:	0800f839 	.word	0x0800f839
 800f874:	0800f839 	.word	0x0800f839
 800f878:	0800f839 	.word	0x0800f839
 800f87c:	0800f9bb 	.word	0x0800f9bb
 800f880:	0800f8e7 	.word	0x0800f8e7
 800f884:	0800f975 	.word	0x0800f975
 800f888:	0800f839 	.word	0x0800f839
 800f88c:	0800f839 	.word	0x0800f839
 800f890:	0800f9dd 	.word	0x0800f9dd
 800f894:	0800f839 	.word	0x0800f839
 800f898:	0800f8e7 	.word	0x0800f8e7
 800f89c:	0800f839 	.word	0x0800f839
 800f8a0:	0800f839 	.word	0x0800f839
 800f8a4:	0800f97d 	.word	0x0800f97d
 800f8a8:	6833      	ldr	r3, [r6, #0]
 800f8aa:	1d1a      	adds	r2, r3, #4
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	6032      	str	r2, [r6, #0]
 800f8b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f8b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f8b8:	2301      	movs	r3, #1
 800f8ba:	e09c      	b.n	800f9f6 <_printf_i+0x1e6>
 800f8bc:	6833      	ldr	r3, [r6, #0]
 800f8be:	6820      	ldr	r0, [r4, #0]
 800f8c0:	1d19      	adds	r1, r3, #4
 800f8c2:	6031      	str	r1, [r6, #0]
 800f8c4:	0606      	lsls	r6, r0, #24
 800f8c6:	d501      	bpl.n	800f8cc <_printf_i+0xbc>
 800f8c8:	681d      	ldr	r5, [r3, #0]
 800f8ca:	e003      	b.n	800f8d4 <_printf_i+0xc4>
 800f8cc:	0645      	lsls	r5, r0, #25
 800f8ce:	d5fb      	bpl.n	800f8c8 <_printf_i+0xb8>
 800f8d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f8d4:	2d00      	cmp	r5, #0
 800f8d6:	da03      	bge.n	800f8e0 <_printf_i+0xd0>
 800f8d8:	232d      	movs	r3, #45	@ 0x2d
 800f8da:	426d      	negs	r5, r5
 800f8dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f8e0:	4858      	ldr	r0, [pc, #352]	@ (800fa44 <_printf_i+0x234>)
 800f8e2:	230a      	movs	r3, #10
 800f8e4:	e011      	b.n	800f90a <_printf_i+0xfa>
 800f8e6:	6821      	ldr	r1, [r4, #0]
 800f8e8:	6833      	ldr	r3, [r6, #0]
 800f8ea:	0608      	lsls	r0, r1, #24
 800f8ec:	f853 5b04 	ldr.w	r5, [r3], #4
 800f8f0:	d402      	bmi.n	800f8f8 <_printf_i+0xe8>
 800f8f2:	0649      	lsls	r1, r1, #25
 800f8f4:	bf48      	it	mi
 800f8f6:	b2ad      	uxthmi	r5, r5
 800f8f8:	2f6f      	cmp	r7, #111	@ 0x6f
 800f8fa:	4852      	ldr	r0, [pc, #328]	@ (800fa44 <_printf_i+0x234>)
 800f8fc:	6033      	str	r3, [r6, #0]
 800f8fe:	bf14      	ite	ne
 800f900:	230a      	movne	r3, #10
 800f902:	2308      	moveq	r3, #8
 800f904:	2100      	movs	r1, #0
 800f906:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f90a:	6866      	ldr	r6, [r4, #4]
 800f90c:	60a6      	str	r6, [r4, #8]
 800f90e:	2e00      	cmp	r6, #0
 800f910:	db05      	blt.n	800f91e <_printf_i+0x10e>
 800f912:	6821      	ldr	r1, [r4, #0]
 800f914:	432e      	orrs	r6, r5
 800f916:	f021 0104 	bic.w	r1, r1, #4
 800f91a:	6021      	str	r1, [r4, #0]
 800f91c:	d04b      	beq.n	800f9b6 <_printf_i+0x1a6>
 800f91e:	4616      	mov	r6, r2
 800f920:	fbb5 f1f3 	udiv	r1, r5, r3
 800f924:	fb03 5711 	mls	r7, r3, r1, r5
 800f928:	5dc7      	ldrb	r7, [r0, r7]
 800f92a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f92e:	462f      	mov	r7, r5
 800f930:	42bb      	cmp	r3, r7
 800f932:	460d      	mov	r5, r1
 800f934:	d9f4      	bls.n	800f920 <_printf_i+0x110>
 800f936:	2b08      	cmp	r3, #8
 800f938:	d10b      	bne.n	800f952 <_printf_i+0x142>
 800f93a:	6823      	ldr	r3, [r4, #0]
 800f93c:	07df      	lsls	r7, r3, #31
 800f93e:	d508      	bpl.n	800f952 <_printf_i+0x142>
 800f940:	6923      	ldr	r3, [r4, #16]
 800f942:	6861      	ldr	r1, [r4, #4]
 800f944:	4299      	cmp	r1, r3
 800f946:	bfde      	ittt	le
 800f948:	2330      	movle	r3, #48	@ 0x30
 800f94a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f94e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800f952:	1b92      	subs	r2, r2, r6
 800f954:	6122      	str	r2, [r4, #16]
 800f956:	f8cd a000 	str.w	sl, [sp]
 800f95a:	464b      	mov	r3, r9
 800f95c:	aa03      	add	r2, sp, #12
 800f95e:	4621      	mov	r1, r4
 800f960:	4640      	mov	r0, r8
 800f962:	f7ff fee7 	bl	800f734 <_printf_common>
 800f966:	3001      	adds	r0, #1
 800f968:	d14a      	bne.n	800fa00 <_printf_i+0x1f0>
 800f96a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f96e:	b004      	add	sp, #16
 800f970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f974:	6823      	ldr	r3, [r4, #0]
 800f976:	f043 0320 	orr.w	r3, r3, #32
 800f97a:	6023      	str	r3, [r4, #0]
 800f97c:	4832      	ldr	r0, [pc, #200]	@ (800fa48 <_printf_i+0x238>)
 800f97e:	2778      	movs	r7, #120	@ 0x78
 800f980:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f984:	6823      	ldr	r3, [r4, #0]
 800f986:	6831      	ldr	r1, [r6, #0]
 800f988:	061f      	lsls	r7, r3, #24
 800f98a:	f851 5b04 	ldr.w	r5, [r1], #4
 800f98e:	d402      	bmi.n	800f996 <_printf_i+0x186>
 800f990:	065f      	lsls	r7, r3, #25
 800f992:	bf48      	it	mi
 800f994:	b2ad      	uxthmi	r5, r5
 800f996:	6031      	str	r1, [r6, #0]
 800f998:	07d9      	lsls	r1, r3, #31
 800f99a:	bf44      	itt	mi
 800f99c:	f043 0320 	orrmi.w	r3, r3, #32
 800f9a0:	6023      	strmi	r3, [r4, #0]
 800f9a2:	b11d      	cbz	r5, 800f9ac <_printf_i+0x19c>
 800f9a4:	2310      	movs	r3, #16
 800f9a6:	e7ad      	b.n	800f904 <_printf_i+0xf4>
 800f9a8:	4826      	ldr	r0, [pc, #152]	@ (800fa44 <_printf_i+0x234>)
 800f9aa:	e7e9      	b.n	800f980 <_printf_i+0x170>
 800f9ac:	6823      	ldr	r3, [r4, #0]
 800f9ae:	f023 0320 	bic.w	r3, r3, #32
 800f9b2:	6023      	str	r3, [r4, #0]
 800f9b4:	e7f6      	b.n	800f9a4 <_printf_i+0x194>
 800f9b6:	4616      	mov	r6, r2
 800f9b8:	e7bd      	b.n	800f936 <_printf_i+0x126>
 800f9ba:	6833      	ldr	r3, [r6, #0]
 800f9bc:	6825      	ldr	r5, [r4, #0]
 800f9be:	6961      	ldr	r1, [r4, #20]
 800f9c0:	1d18      	adds	r0, r3, #4
 800f9c2:	6030      	str	r0, [r6, #0]
 800f9c4:	062e      	lsls	r6, r5, #24
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	d501      	bpl.n	800f9ce <_printf_i+0x1be>
 800f9ca:	6019      	str	r1, [r3, #0]
 800f9cc:	e002      	b.n	800f9d4 <_printf_i+0x1c4>
 800f9ce:	0668      	lsls	r0, r5, #25
 800f9d0:	d5fb      	bpl.n	800f9ca <_printf_i+0x1ba>
 800f9d2:	8019      	strh	r1, [r3, #0]
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	6123      	str	r3, [r4, #16]
 800f9d8:	4616      	mov	r6, r2
 800f9da:	e7bc      	b.n	800f956 <_printf_i+0x146>
 800f9dc:	6833      	ldr	r3, [r6, #0]
 800f9de:	1d1a      	adds	r2, r3, #4
 800f9e0:	6032      	str	r2, [r6, #0]
 800f9e2:	681e      	ldr	r6, [r3, #0]
 800f9e4:	6862      	ldr	r2, [r4, #4]
 800f9e6:	2100      	movs	r1, #0
 800f9e8:	4630      	mov	r0, r6
 800f9ea:	f7f0 fbf1 	bl	80001d0 <memchr>
 800f9ee:	b108      	cbz	r0, 800f9f4 <_printf_i+0x1e4>
 800f9f0:	1b80      	subs	r0, r0, r6
 800f9f2:	6060      	str	r0, [r4, #4]
 800f9f4:	6863      	ldr	r3, [r4, #4]
 800f9f6:	6123      	str	r3, [r4, #16]
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f9fe:	e7aa      	b.n	800f956 <_printf_i+0x146>
 800fa00:	6923      	ldr	r3, [r4, #16]
 800fa02:	4632      	mov	r2, r6
 800fa04:	4649      	mov	r1, r9
 800fa06:	4640      	mov	r0, r8
 800fa08:	47d0      	blx	sl
 800fa0a:	3001      	adds	r0, #1
 800fa0c:	d0ad      	beq.n	800f96a <_printf_i+0x15a>
 800fa0e:	6823      	ldr	r3, [r4, #0]
 800fa10:	079b      	lsls	r3, r3, #30
 800fa12:	d413      	bmi.n	800fa3c <_printf_i+0x22c>
 800fa14:	68e0      	ldr	r0, [r4, #12]
 800fa16:	9b03      	ldr	r3, [sp, #12]
 800fa18:	4298      	cmp	r0, r3
 800fa1a:	bfb8      	it	lt
 800fa1c:	4618      	movlt	r0, r3
 800fa1e:	e7a6      	b.n	800f96e <_printf_i+0x15e>
 800fa20:	2301      	movs	r3, #1
 800fa22:	4632      	mov	r2, r6
 800fa24:	4649      	mov	r1, r9
 800fa26:	4640      	mov	r0, r8
 800fa28:	47d0      	blx	sl
 800fa2a:	3001      	adds	r0, #1
 800fa2c:	d09d      	beq.n	800f96a <_printf_i+0x15a>
 800fa2e:	3501      	adds	r5, #1
 800fa30:	68e3      	ldr	r3, [r4, #12]
 800fa32:	9903      	ldr	r1, [sp, #12]
 800fa34:	1a5b      	subs	r3, r3, r1
 800fa36:	42ab      	cmp	r3, r5
 800fa38:	dcf2      	bgt.n	800fa20 <_printf_i+0x210>
 800fa3a:	e7eb      	b.n	800fa14 <_printf_i+0x204>
 800fa3c:	2500      	movs	r5, #0
 800fa3e:	f104 0619 	add.w	r6, r4, #25
 800fa42:	e7f5      	b.n	800fa30 <_printf_i+0x220>
 800fa44:	08013be6 	.word	0x08013be6
 800fa48:	08013bf7 	.word	0x08013bf7

0800fa4c <sniprintf>:
 800fa4c:	b40c      	push	{r2, r3}
 800fa4e:	b530      	push	{r4, r5, lr}
 800fa50:	4b18      	ldr	r3, [pc, #96]	@ (800fab4 <sniprintf+0x68>)
 800fa52:	1e0c      	subs	r4, r1, #0
 800fa54:	681d      	ldr	r5, [r3, #0]
 800fa56:	b09d      	sub	sp, #116	@ 0x74
 800fa58:	da08      	bge.n	800fa6c <sniprintf+0x20>
 800fa5a:	238b      	movs	r3, #139	@ 0x8b
 800fa5c:	602b      	str	r3, [r5, #0]
 800fa5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fa62:	b01d      	add	sp, #116	@ 0x74
 800fa64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa68:	b002      	add	sp, #8
 800fa6a:	4770      	bx	lr
 800fa6c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fa70:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fa74:	f04f 0300 	mov.w	r3, #0
 800fa78:	931b      	str	r3, [sp, #108]	@ 0x6c
 800fa7a:	bf14      	ite	ne
 800fa7c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800fa80:	4623      	moveq	r3, r4
 800fa82:	9304      	str	r3, [sp, #16]
 800fa84:	9307      	str	r3, [sp, #28]
 800fa86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fa8a:	9002      	str	r0, [sp, #8]
 800fa8c:	9006      	str	r0, [sp, #24]
 800fa8e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fa92:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fa94:	ab21      	add	r3, sp, #132	@ 0x84
 800fa96:	a902      	add	r1, sp, #8
 800fa98:	4628      	mov	r0, r5
 800fa9a:	9301      	str	r3, [sp, #4]
 800fa9c:	f001 f868 	bl	8010b70 <_svfiprintf_r>
 800faa0:	1c43      	adds	r3, r0, #1
 800faa2:	bfbc      	itt	lt
 800faa4:	238b      	movlt	r3, #139	@ 0x8b
 800faa6:	602b      	strlt	r3, [r5, #0]
 800faa8:	2c00      	cmp	r4, #0
 800faaa:	d0da      	beq.n	800fa62 <sniprintf+0x16>
 800faac:	9b02      	ldr	r3, [sp, #8]
 800faae:	2200      	movs	r2, #0
 800fab0:	701a      	strb	r2, [r3, #0]
 800fab2:	e7d6      	b.n	800fa62 <sniprintf+0x16>
 800fab4:	200000a4 	.word	0x200000a4

0800fab8 <std>:
 800fab8:	2300      	movs	r3, #0
 800faba:	b510      	push	{r4, lr}
 800fabc:	4604      	mov	r4, r0
 800fabe:	e9c0 3300 	strd	r3, r3, [r0]
 800fac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fac6:	6083      	str	r3, [r0, #8]
 800fac8:	8181      	strh	r1, [r0, #12]
 800faca:	6643      	str	r3, [r0, #100]	@ 0x64
 800facc:	81c2      	strh	r2, [r0, #14]
 800face:	6183      	str	r3, [r0, #24]
 800fad0:	4619      	mov	r1, r3
 800fad2:	2208      	movs	r2, #8
 800fad4:	305c      	adds	r0, #92	@ 0x5c
 800fad6:	f000 f95d 	bl	800fd94 <memset>
 800fada:	4b0d      	ldr	r3, [pc, #52]	@ (800fb10 <std+0x58>)
 800fadc:	6263      	str	r3, [r4, #36]	@ 0x24
 800fade:	4b0d      	ldr	r3, [pc, #52]	@ (800fb14 <std+0x5c>)
 800fae0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fae2:	4b0d      	ldr	r3, [pc, #52]	@ (800fb18 <std+0x60>)
 800fae4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fae6:	4b0d      	ldr	r3, [pc, #52]	@ (800fb1c <std+0x64>)
 800fae8:	6323      	str	r3, [r4, #48]	@ 0x30
 800faea:	4b0d      	ldr	r3, [pc, #52]	@ (800fb20 <std+0x68>)
 800faec:	6224      	str	r4, [r4, #32]
 800faee:	429c      	cmp	r4, r3
 800faf0:	d006      	beq.n	800fb00 <std+0x48>
 800faf2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800faf6:	4294      	cmp	r4, r2
 800faf8:	d002      	beq.n	800fb00 <std+0x48>
 800fafa:	33d0      	adds	r3, #208	@ 0xd0
 800fafc:	429c      	cmp	r4, r3
 800fafe:	d105      	bne.n	800fb0c <std+0x54>
 800fb00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fb04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb08:	f000 b976 	b.w	800fdf8 <__retarget_lock_init_recursive>
 800fb0c:	bd10      	pop	{r4, pc}
 800fb0e:	bf00      	nop
 800fb10:	080119a5 	.word	0x080119a5
 800fb14:	080119c7 	.word	0x080119c7
 800fb18:	080119ff 	.word	0x080119ff
 800fb1c:	08011a23 	.word	0x08011a23
 800fb20:	2000167c 	.word	0x2000167c

0800fb24 <stdio_exit_handler>:
 800fb24:	4a02      	ldr	r2, [pc, #8]	@ (800fb30 <stdio_exit_handler+0xc>)
 800fb26:	4903      	ldr	r1, [pc, #12]	@ (800fb34 <stdio_exit_handler+0x10>)
 800fb28:	4803      	ldr	r0, [pc, #12]	@ (800fb38 <stdio_exit_handler+0x14>)
 800fb2a:	f000 b8a5 	b.w	800fc78 <_fwalk_sglue>
 800fb2e:	bf00      	nop
 800fb30:	20000098 	.word	0x20000098
 800fb34:	08011249 	.word	0x08011249
 800fb38:	200000a8 	.word	0x200000a8

0800fb3c <cleanup_stdio>:
 800fb3c:	6841      	ldr	r1, [r0, #4]
 800fb3e:	4b0c      	ldr	r3, [pc, #48]	@ (800fb70 <cleanup_stdio+0x34>)
 800fb40:	4299      	cmp	r1, r3
 800fb42:	b510      	push	{r4, lr}
 800fb44:	4604      	mov	r4, r0
 800fb46:	d001      	beq.n	800fb4c <cleanup_stdio+0x10>
 800fb48:	f001 fb7e 	bl	8011248 <_fflush_r>
 800fb4c:	68a1      	ldr	r1, [r4, #8]
 800fb4e:	4b09      	ldr	r3, [pc, #36]	@ (800fb74 <cleanup_stdio+0x38>)
 800fb50:	4299      	cmp	r1, r3
 800fb52:	d002      	beq.n	800fb5a <cleanup_stdio+0x1e>
 800fb54:	4620      	mov	r0, r4
 800fb56:	f001 fb77 	bl	8011248 <_fflush_r>
 800fb5a:	68e1      	ldr	r1, [r4, #12]
 800fb5c:	4b06      	ldr	r3, [pc, #24]	@ (800fb78 <cleanup_stdio+0x3c>)
 800fb5e:	4299      	cmp	r1, r3
 800fb60:	d004      	beq.n	800fb6c <cleanup_stdio+0x30>
 800fb62:	4620      	mov	r0, r4
 800fb64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb68:	f001 bb6e 	b.w	8011248 <_fflush_r>
 800fb6c:	bd10      	pop	{r4, pc}
 800fb6e:	bf00      	nop
 800fb70:	2000167c 	.word	0x2000167c
 800fb74:	200016e4 	.word	0x200016e4
 800fb78:	2000174c 	.word	0x2000174c

0800fb7c <global_stdio_init.part.0>:
 800fb7c:	b510      	push	{r4, lr}
 800fb7e:	4b0b      	ldr	r3, [pc, #44]	@ (800fbac <global_stdio_init.part.0+0x30>)
 800fb80:	4c0b      	ldr	r4, [pc, #44]	@ (800fbb0 <global_stdio_init.part.0+0x34>)
 800fb82:	4a0c      	ldr	r2, [pc, #48]	@ (800fbb4 <global_stdio_init.part.0+0x38>)
 800fb84:	601a      	str	r2, [r3, #0]
 800fb86:	4620      	mov	r0, r4
 800fb88:	2200      	movs	r2, #0
 800fb8a:	2104      	movs	r1, #4
 800fb8c:	f7ff ff94 	bl	800fab8 <std>
 800fb90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fb94:	2201      	movs	r2, #1
 800fb96:	2109      	movs	r1, #9
 800fb98:	f7ff ff8e 	bl	800fab8 <std>
 800fb9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fba0:	2202      	movs	r2, #2
 800fba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fba6:	2112      	movs	r1, #18
 800fba8:	f7ff bf86 	b.w	800fab8 <std>
 800fbac:	200017b4 	.word	0x200017b4
 800fbb0:	2000167c 	.word	0x2000167c
 800fbb4:	0800fb25 	.word	0x0800fb25

0800fbb8 <__sfp_lock_acquire>:
 800fbb8:	4801      	ldr	r0, [pc, #4]	@ (800fbc0 <__sfp_lock_acquire+0x8>)
 800fbba:	f000 b91e 	b.w	800fdfa <__retarget_lock_acquire_recursive>
 800fbbe:	bf00      	nop
 800fbc0:	200017b9 	.word	0x200017b9

0800fbc4 <__sfp_lock_release>:
 800fbc4:	4801      	ldr	r0, [pc, #4]	@ (800fbcc <__sfp_lock_release+0x8>)
 800fbc6:	f000 b919 	b.w	800fdfc <__retarget_lock_release_recursive>
 800fbca:	bf00      	nop
 800fbcc:	200017b9 	.word	0x200017b9

0800fbd0 <__sinit>:
 800fbd0:	b510      	push	{r4, lr}
 800fbd2:	4604      	mov	r4, r0
 800fbd4:	f7ff fff0 	bl	800fbb8 <__sfp_lock_acquire>
 800fbd8:	6a23      	ldr	r3, [r4, #32]
 800fbda:	b11b      	cbz	r3, 800fbe4 <__sinit+0x14>
 800fbdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbe0:	f7ff bff0 	b.w	800fbc4 <__sfp_lock_release>
 800fbe4:	4b04      	ldr	r3, [pc, #16]	@ (800fbf8 <__sinit+0x28>)
 800fbe6:	6223      	str	r3, [r4, #32]
 800fbe8:	4b04      	ldr	r3, [pc, #16]	@ (800fbfc <__sinit+0x2c>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d1f5      	bne.n	800fbdc <__sinit+0xc>
 800fbf0:	f7ff ffc4 	bl	800fb7c <global_stdio_init.part.0>
 800fbf4:	e7f2      	b.n	800fbdc <__sinit+0xc>
 800fbf6:	bf00      	nop
 800fbf8:	0800fb3d 	.word	0x0800fb3d
 800fbfc:	200017b4 	.word	0x200017b4

0800fc00 <_vsniprintf_r>:
 800fc00:	b530      	push	{r4, r5, lr}
 800fc02:	4614      	mov	r4, r2
 800fc04:	2c00      	cmp	r4, #0
 800fc06:	b09b      	sub	sp, #108	@ 0x6c
 800fc08:	4605      	mov	r5, r0
 800fc0a:	461a      	mov	r2, r3
 800fc0c:	da05      	bge.n	800fc1a <_vsniprintf_r+0x1a>
 800fc0e:	238b      	movs	r3, #139	@ 0x8b
 800fc10:	6003      	str	r3, [r0, #0]
 800fc12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fc16:	b01b      	add	sp, #108	@ 0x6c
 800fc18:	bd30      	pop	{r4, r5, pc}
 800fc1a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fc1e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fc22:	f04f 0300 	mov.w	r3, #0
 800fc26:	9319      	str	r3, [sp, #100]	@ 0x64
 800fc28:	bf14      	ite	ne
 800fc2a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800fc2e:	4623      	moveq	r3, r4
 800fc30:	9302      	str	r3, [sp, #8]
 800fc32:	9305      	str	r3, [sp, #20]
 800fc34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fc38:	9100      	str	r1, [sp, #0]
 800fc3a:	9104      	str	r1, [sp, #16]
 800fc3c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fc40:	4669      	mov	r1, sp
 800fc42:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800fc44:	f000 ff94 	bl	8010b70 <_svfiprintf_r>
 800fc48:	1c43      	adds	r3, r0, #1
 800fc4a:	bfbc      	itt	lt
 800fc4c:	238b      	movlt	r3, #139	@ 0x8b
 800fc4e:	602b      	strlt	r3, [r5, #0]
 800fc50:	2c00      	cmp	r4, #0
 800fc52:	d0e0      	beq.n	800fc16 <_vsniprintf_r+0x16>
 800fc54:	9b00      	ldr	r3, [sp, #0]
 800fc56:	2200      	movs	r2, #0
 800fc58:	701a      	strb	r2, [r3, #0]
 800fc5a:	e7dc      	b.n	800fc16 <_vsniprintf_r+0x16>

0800fc5c <vsniprintf>:
 800fc5c:	b507      	push	{r0, r1, r2, lr}
 800fc5e:	9300      	str	r3, [sp, #0]
 800fc60:	4613      	mov	r3, r2
 800fc62:	460a      	mov	r2, r1
 800fc64:	4601      	mov	r1, r0
 800fc66:	4803      	ldr	r0, [pc, #12]	@ (800fc74 <vsniprintf+0x18>)
 800fc68:	6800      	ldr	r0, [r0, #0]
 800fc6a:	f7ff ffc9 	bl	800fc00 <_vsniprintf_r>
 800fc6e:	b003      	add	sp, #12
 800fc70:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc74:	200000a4 	.word	0x200000a4

0800fc78 <_fwalk_sglue>:
 800fc78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc7c:	4607      	mov	r7, r0
 800fc7e:	4688      	mov	r8, r1
 800fc80:	4614      	mov	r4, r2
 800fc82:	2600      	movs	r6, #0
 800fc84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fc88:	f1b9 0901 	subs.w	r9, r9, #1
 800fc8c:	d505      	bpl.n	800fc9a <_fwalk_sglue+0x22>
 800fc8e:	6824      	ldr	r4, [r4, #0]
 800fc90:	2c00      	cmp	r4, #0
 800fc92:	d1f7      	bne.n	800fc84 <_fwalk_sglue+0xc>
 800fc94:	4630      	mov	r0, r6
 800fc96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc9a:	89ab      	ldrh	r3, [r5, #12]
 800fc9c:	2b01      	cmp	r3, #1
 800fc9e:	d907      	bls.n	800fcb0 <_fwalk_sglue+0x38>
 800fca0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fca4:	3301      	adds	r3, #1
 800fca6:	d003      	beq.n	800fcb0 <_fwalk_sglue+0x38>
 800fca8:	4629      	mov	r1, r5
 800fcaa:	4638      	mov	r0, r7
 800fcac:	47c0      	blx	r8
 800fcae:	4306      	orrs	r6, r0
 800fcb0:	3568      	adds	r5, #104	@ 0x68
 800fcb2:	e7e9      	b.n	800fc88 <_fwalk_sglue+0x10>

0800fcb4 <iprintf>:
 800fcb4:	b40f      	push	{r0, r1, r2, r3}
 800fcb6:	b507      	push	{r0, r1, r2, lr}
 800fcb8:	4906      	ldr	r1, [pc, #24]	@ (800fcd4 <iprintf+0x20>)
 800fcba:	ab04      	add	r3, sp, #16
 800fcbc:	6808      	ldr	r0, [r1, #0]
 800fcbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcc2:	6881      	ldr	r1, [r0, #8]
 800fcc4:	9301      	str	r3, [sp, #4]
 800fcc6:	f001 f879 	bl	8010dbc <_vfiprintf_r>
 800fcca:	b003      	add	sp, #12
 800fccc:	f85d eb04 	ldr.w	lr, [sp], #4
 800fcd0:	b004      	add	sp, #16
 800fcd2:	4770      	bx	lr
 800fcd4:	200000a4 	.word	0x200000a4

0800fcd8 <_puts_r>:
 800fcd8:	6a03      	ldr	r3, [r0, #32]
 800fcda:	b570      	push	{r4, r5, r6, lr}
 800fcdc:	6884      	ldr	r4, [r0, #8]
 800fcde:	4605      	mov	r5, r0
 800fce0:	460e      	mov	r6, r1
 800fce2:	b90b      	cbnz	r3, 800fce8 <_puts_r+0x10>
 800fce4:	f7ff ff74 	bl	800fbd0 <__sinit>
 800fce8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fcea:	07db      	lsls	r3, r3, #31
 800fcec:	d405      	bmi.n	800fcfa <_puts_r+0x22>
 800fcee:	89a3      	ldrh	r3, [r4, #12]
 800fcf0:	0598      	lsls	r0, r3, #22
 800fcf2:	d402      	bmi.n	800fcfa <_puts_r+0x22>
 800fcf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fcf6:	f000 f880 	bl	800fdfa <__retarget_lock_acquire_recursive>
 800fcfa:	89a3      	ldrh	r3, [r4, #12]
 800fcfc:	0719      	lsls	r1, r3, #28
 800fcfe:	d502      	bpl.n	800fd06 <_puts_r+0x2e>
 800fd00:	6923      	ldr	r3, [r4, #16]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d135      	bne.n	800fd72 <_puts_r+0x9a>
 800fd06:	4621      	mov	r1, r4
 800fd08:	4628      	mov	r0, r5
 800fd0a:	f001 fefb 	bl	8011b04 <__swsetup_r>
 800fd0e:	b380      	cbz	r0, 800fd72 <_puts_r+0x9a>
 800fd10:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800fd14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fd16:	07da      	lsls	r2, r3, #31
 800fd18:	d405      	bmi.n	800fd26 <_puts_r+0x4e>
 800fd1a:	89a3      	ldrh	r3, [r4, #12]
 800fd1c:	059b      	lsls	r3, r3, #22
 800fd1e:	d402      	bmi.n	800fd26 <_puts_r+0x4e>
 800fd20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fd22:	f000 f86b 	bl	800fdfc <__retarget_lock_release_recursive>
 800fd26:	4628      	mov	r0, r5
 800fd28:	bd70      	pop	{r4, r5, r6, pc}
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	da04      	bge.n	800fd38 <_puts_r+0x60>
 800fd2e:	69a2      	ldr	r2, [r4, #24]
 800fd30:	429a      	cmp	r2, r3
 800fd32:	dc17      	bgt.n	800fd64 <_puts_r+0x8c>
 800fd34:	290a      	cmp	r1, #10
 800fd36:	d015      	beq.n	800fd64 <_puts_r+0x8c>
 800fd38:	6823      	ldr	r3, [r4, #0]
 800fd3a:	1c5a      	adds	r2, r3, #1
 800fd3c:	6022      	str	r2, [r4, #0]
 800fd3e:	7019      	strb	r1, [r3, #0]
 800fd40:	68a3      	ldr	r3, [r4, #8]
 800fd42:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fd46:	3b01      	subs	r3, #1
 800fd48:	60a3      	str	r3, [r4, #8]
 800fd4a:	2900      	cmp	r1, #0
 800fd4c:	d1ed      	bne.n	800fd2a <_puts_r+0x52>
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	da11      	bge.n	800fd76 <_puts_r+0x9e>
 800fd52:	4622      	mov	r2, r4
 800fd54:	210a      	movs	r1, #10
 800fd56:	4628      	mov	r0, r5
 800fd58:	f001 fe95 	bl	8011a86 <__swbuf_r>
 800fd5c:	3001      	adds	r0, #1
 800fd5e:	d0d7      	beq.n	800fd10 <_puts_r+0x38>
 800fd60:	250a      	movs	r5, #10
 800fd62:	e7d7      	b.n	800fd14 <_puts_r+0x3c>
 800fd64:	4622      	mov	r2, r4
 800fd66:	4628      	mov	r0, r5
 800fd68:	f001 fe8d 	bl	8011a86 <__swbuf_r>
 800fd6c:	3001      	adds	r0, #1
 800fd6e:	d1e7      	bne.n	800fd40 <_puts_r+0x68>
 800fd70:	e7ce      	b.n	800fd10 <_puts_r+0x38>
 800fd72:	3e01      	subs	r6, #1
 800fd74:	e7e4      	b.n	800fd40 <_puts_r+0x68>
 800fd76:	6823      	ldr	r3, [r4, #0]
 800fd78:	1c5a      	adds	r2, r3, #1
 800fd7a:	6022      	str	r2, [r4, #0]
 800fd7c:	220a      	movs	r2, #10
 800fd7e:	701a      	strb	r2, [r3, #0]
 800fd80:	e7ee      	b.n	800fd60 <_puts_r+0x88>
	...

0800fd84 <puts>:
 800fd84:	4b02      	ldr	r3, [pc, #8]	@ (800fd90 <puts+0xc>)
 800fd86:	4601      	mov	r1, r0
 800fd88:	6818      	ldr	r0, [r3, #0]
 800fd8a:	f7ff bfa5 	b.w	800fcd8 <_puts_r>
 800fd8e:	bf00      	nop
 800fd90:	200000a4 	.word	0x200000a4

0800fd94 <memset>:
 800fd94:	4402      	add	r2, r0
 800fd96:	4603      	mov	r3, r0
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	d100      	bne.n	800fd9e <memset+0xa>
 800fd9c:	4770      	bx	lr
 800fd9e:	f803 1b01 	strb.w	r1, [r3], #1
 800fda2:	e7f9      	b.n	800fd98 <memset+0x4>

0800fda4 <__errno>:
 800fda4:	4b01      	ldr	r3, [pc, #4]	@ (800fdac <__errno+0x8>)
 800fda6:	6818      	ldr	r0, [r3, #0]
 800fda8:	4770      	bx	lr
 800fdaa:	bf00      	nop
 800fdac:	200000a4 	.word	0x200000a4

0800fdb0 <__libc_init_array>:
 800fdb0:	b570      	push	{r4, r5, r6, lr}
 800fdb2:	4d0d      	ldr	r5, [pc, #52]	@ (800fde8 <__libc_init_array+0x38>)
 800fdb4:	4c0d      	ldr	r4, [pc, #52]	@ (800fdec <__libc_init_array+0x3c>)
 800fdb6:	1b64      	subs	r4, r4, r5
 800fdb8:	10a4      	asrs	r4, r4, #2
 800fdba:	2600      	movs	r6, #0
 800fdbc:	42a6      	cmp	r6, r4
 800fdbe:	d109      	bne.n	800fdd4 <__libc_init_array+0x24>
 800fdc0:	4d0b      	ldr	r5, [pc, #44]	@ (800fdf0 <__libc_init_array+0x40>)
 800fdc2:	4c0c      	ldr	r4, [pc, #48]	@ (800fdf4 <__libc_init_array+0x44>)
 800fdc4:	f003 f854 	bl	8012e70 <_init>
 800fdc8:	1b64      	subs	r4, r4, r5
 800fdca:	10a4      	asrs	r4, r4, #2
 800fdcc:	2600      	movs	r6, #0
 800fdce:	42a6      	cmp	r6, r4
 800fdd0:	d105      	bne.n	800fdde <__libc_init_array+0x2e>
 800fdd2:	bd70      	pop	{r4, r5, r6, pc}
 800fdd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800fdd8:	4798      	blx	r3
 800fdda:	3601      	adds	r6, #1
 800fddc:	e7ee      	b.n	800fdbc <__libc_init_array+0xc>
 800fdde:	f855 3b04 	ldr.w	r3, [r5], #4
 800fde2:	4798      	blx	r3
 800fde4:	3601      	adds	r6, #1
 800fde6:	e7f2      	b.n	800fdce <__libc_init_array+0x1e>
 800fde8:	08013f98 	.word	0x08013f98
 800fdec:	08013f98 	.word	0x08013f98
 800fdf0:	08013f98 	.word	0x08013f98
 800fdf4:	08013f9c 	.word	0x08013f9c

0800fdf8 <__retarget_lock_init_recursive>:
 800fdf8:	4770      	bx	lr

0800fdfa <__retarget_lock_acquire_recursive>:
 800fdfa:	4770      	bx	lr

0800fdfc <__retarget_lock_release_recursive>:
 800fdfc:	4770      	bx	lr
	...

0800fe00 <_localeconv_r>:
 800fe00:	4800      	ldr	r0, [pc, #0]	@ (800fe04 <_localeconv_r+0x4>)
 800fe02:	4770      	bx	lr
 800fe04:	200001e4 	.word	0x200001e4

0800fe08 <quorem>:
 800fe08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe0c:	6903      	ldr	r3, [r0, #16]
 800fe0e:	690c      	ldr	r4, [r1, #16]
 800fe10:	42a3      	cmp	r3, r4
 800fe12:	4607      	mov	r7, r0
 800fe14:	db7e      	blt.n	800ff14 <quorem+0x10c>
 800fe16:	3c01      	subs	r4, #1
 800fe18:	f101 0814 	add.w	r8, r1, #20
 800fe1c:	00a3      	lsls	r3, r4, #2
 800fe1e:	f100 0514 	add.w	r5, r0, #20
 800fe22:	9300      	str	r3, [sp, #0]
 800fe24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe28:	9301      	str	r3, [sp, #4]
 800fe2a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fe2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe32:	3301      	adds	r3, #1
 800fe34:	429a      	cmp	r2, r3
 800fe36:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fe3a:	fbb2 f6f3 	udiv	r6, r2, r3
 800fe3e:	d32e      	bcc.n	800fe9e <quorem+0x96>
 800fe40:	f04f 0a00 	mov.w	sl, #0
 800fe44:	46c4      	mov	ip, r8
 800fe46:	46ae      	mov	lr, r5
 800fe48:	46d3      	mov	fp, sl
 800fe4a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fe4e:	b298      	uxth	r0, r3
 800fe50:	fb06 a000 	mla	r0, r6, r0, sl
 800fe54:	0c02      	lsrs	r2, r0, #16
 800fe56:	0c1b      	lsrs	r3, r3, #16
 800fe58:	fb06 2303 	mla	r3, r6, r3, r2
 800fe5c:	f8de 2000 	ldr.w	r2, [lr]
 800fe60:	b280      	uxth	r0, r0
 800fe62:	b292      	uxth	r2, r2
 800fe64:	1a12      	subs	r2, r2, r0
 800fe66:	445a      	add	r2, fp
 800fe68:	f8de 0000 	ldr.w	r0, [lr]
 800fe6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fe70:	b29b      	uxth	r3, r3
 800fe72:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fe76:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fe7a:	b292      	uxth	r2, r2
 800fe7c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fe80:	45e1      	cmp	r9, ip
 800fe82:	f84e 2b04 	str.w	r2, [lr], #4
 800fe86:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fe8a:	d2de      	bcs.n	800fe4a <quorem+0x42>
 800fe8c:	9b00      	ldr	r3, [sp, #0]
 800fe8e:	58eb      	ldr	r3, [r5, r3]
 800fe90:	b92b      	cbnz	r3, 800fe9e <quorem+0x96>
 800fe92:	9b01      	ldr	r3, [sp, #4]
 800fe94:	3b04      	subs	r3, #4
 800fe96:	429d      	cmp	r5, r3
 800fe98:	461a      	mov	r2, r3
 800fe9a:	d32f      	bcc.n	800fefc <quorem+0xf4>
 800fe9c:	613c      	str	r4, [r7, #16]
 800fe9e:	4638      	mov	r0, r7
 800fea0:	f001 fc78 	bl	8011794 <__mcmp>
 800fea4:	2800      	cmp	r0, #0
 800fea6:	db25      	blt.n	800fef4 <quorem+0xec>
 800fea8:	4629      	mov	r1, r5
 800feaa:	2000      	movs	r0, #0
 800feac:	f858 2b04 	ldr.w	r2, [r8], #4
 800feb0:	f8d1 c000 	ldr.w	ip, [r1]
 800feb4:	fa1f fe82 	uxth.w	lr, r2
 800feb8:	fa1f f38c 	uxth.w	r3, ip
 800febc:	eba3 030e 	sub.w	r3, r3, lr
 800fec0:	4403      	add	r3, r0
 800fec2:	0c12      	lsrs	r2, r2, #16
 800fec4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fec8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fecc:	b29b      	uxth	r3, r3
 800fece:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fed2:	45c1      	cmp	r9, r8
 800fed4:	f841 3b04 	str.w	r3, [r1], #4
 800fed8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fedc:	d2e6      	bcs.n	800feac <quorem+0xa4>
 800fede:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fee2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fee6:	b922      	cbnz	r2, 800fef2 <quorem+0xea>
 800fee8:	3b04      	subs	r3, #4
 800feea:	429d      	cmp	r5, r3
 800feec:	461a      	mov	r2, r3
 800feee:	d30b      	bcc.n	800ff08 <quorem+0x100>
 800fef0:	613c      	str	r4, [r7, #16]
 800fef2:	3601      	adds	r6, #1
 800fef4:	4630      	mov	r0, r6
 800fef6:	b003      	add	sp, #12
 800fef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fefc:	6812      	ldr	r2, [r2, #0]
 800fefe:	3b04      	subs	r3, #4
 800ff00:	2a00      	cmp	r2, #0
 800ff02:	d1cb      	bne.n	800fe9c <quorem+0x94>
 800ff04:	3c01      	subs	r4, #1
 800ff06:	e7c6      	b.n	800fe96 <quorem+0x8e>
 800ff08:	6812      	ldr	r2, [r2, #0]
 800ff0a:	3b04      	subs	r3, #4
 800ff0c:	2a00      	cmp	r2, #0
 800ff0e:	d1ef      	bne.n	800fef0 <quorem+0xe8>
 800ff10:	3c01      	subs	r4, #1
 800ff12:	e7ea      	b.n	800feea <quorem+0xe2>
 800ff14:	2000      	movs	r0, #0
 800ff16:	e7ee      	b.n	800fef6 <quorem+0xee>

0800ff18 <_dtoa_r>:
 800ff18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff1c:	69c7      	ldr	r7, [r0, #28]
 800ff1e:	b097      	sub	sp, #92	@ 0x5c
 800ff20:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ff24:	ec55 4b10 	vmov	r4, r5, d0
 800ff28:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ff2a:	9107      	str	r1, [sp, #28]
 800ff2c:	4681      	mov	r9, r0
 800ff2e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ff30:	9311      	str	r3, [sp, #68]	@ 0x44
 800ff32:	b97f      	cbnz	r7, 800ff54 <_dtoa_r+0x3c>
 800ff34:	2010      	movs	r0, #16
 800ff36:	f001 f859 	bl	8010fec <malloc>
 800ff3a:	4602      	mov	r2, r0
 800ff3c:	f8c9 001c 	str.w	r0, [r9, #28]
 800ff40:	b920      	cbnz	r0, 800ff4c <_dtoa_r+0x34>
 800ff42:	4ba9      	ldr	r3, [pc, #676]	@ (80101e8 <_dtoa_r+0x2d0>)
 800ff44:	21ef      	movs	r1, #239	@ 0xef
 800ff46:	48a9      	ldr	r0, [pc, #676]	@ (80101ec <_dtoa_r+0x2d4>)
 800ff48:	f001 ff34 	bl	8011db4 <__assert_func>
 800ff4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ff50:	6007      	str	r7, [r0, #0]
 800ff52:	60c7      	str	r7, [r0, #12]
 800ff54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ff58:	6819      	ldr	r1, [r3, #0]
 800ff5a:	b159      	cbz	r1, 800ff74 <_dtoa_r+0x5c>
 800ff5c:	685a      	ldr	r2, [r3, #4]
 800ff5e:	604a      	str	r2, [r1, #4]
 800ff60:	2301      	movs	r3, #1
 800ff62:	4093      	lsls	r3, r2
 800ff64:	608b      	str	r3, [r1, #8]
 800ff66:	4648      	mov	r0, r9
 800ff68:	f001 f9e2 	bl	8011330 <_Bfree>
 800ff6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ff70:	2200      	movs	r2, #0
 800ff72:	601a      	str	r2, [r3, #0]
 800ff74:	1e2b      	subs	r3, r5, #0
 800ff76:	bfb9      	ittee	lt
 800ff78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ff7c:	9305      	strlt	r3, [sp, #20]
 800ff7e:	2300      	movge	r3, #0
 800ff80:	6033      	strge	r3, [r6, #0]
 800ff82:	9f05      	ldr	r7, [sp, #20]
 800ff84:	4b9a      	ldr	r3, [pc, #616]	@ (80101f0 <_dtoa_r+0x2d8>)
 800ff86:	bfbc      	itt	lt
 800ff88:	2201      	movlt	r2, #1
 800ff8a:	6032      	strlt	r2, [r6, #0]
 800ff8c:	43bb      	bics	r3, r7
 800ff8e:	d112      	bne.n	800ffb6 <_dtoa_r+0x9e>
 800ff90:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ff92:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ff96:	6013      	str	r3, [r2, #0]
 800ff98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ff9c:	4323      	orrs	r3, r4
 800ff9e:	f000 855a 	beq.w	8010a56 <_dtoa_r+0xb3e>
 800ffa2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ffa4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8010204 <_dtoa_r+0x2ec>
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	f000 855c 	beq.w	8010a66 <_dtoa_r+0xb4e>
 800ffae:	f10a 0303 	add.w	r3, sl, #3
 800ffb2:	f000 bd56 	b.w	8010a62 <_dtoa_r+0xb4a>
 800ffb6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ffba:	2200      	movs	r2, #0
 800ffbc:	ec51 0b17 	vmov	r0, r1, d7
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ffc6:	f7f0 fd7f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ffca:	4680      	mov	r8, r0
 800ffcc:	b158      	cbz	r0, 800ffe6 <_dtoa_r+0xce>
 800ffce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ffd0:	2301      	movs	r3, #1
 800ffd2:	6013      	str	r3, [r2, #0]
 800ffd4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ffd6:	b113      	cbz	r3, 800ffde <_dtoa_r+0xc6>
 800ffd8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ffda:	4b86      	ldr	r3, [pc, #536]	@ (80101f4 <_dtoa_r+0x2dc>)
 800ffdc:	6013      	str	r3, [r2, #0]
 800ffde:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010208 <_dtoa_r+0x2f0>
 800ffe2:	f000 bd40 	b.w	8010a66 <_dtoa_r+0xb4e>
 800ffe6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ffea:	aa14      	add	r2, sp, #80	@ 0x50
 800ffec:	a915      	add	r1, sp, #84	@ 0x54
 800ffee:	4648      	mov	r0, r9
 800fff0:	f001 fc80 	bl	80118f4 <__d2b>
 800fff4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fff8:	9002      	str	r0, [sp, #8]
 800fffa:	2e00      	cmp	r6, #0
 800fffc:	d078      	beq.n	80100f0 <_dtoa_r+0x1d8>
 800fffe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010000:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8010004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010008:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801000c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010010:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010014:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010018:	4619      	mov	r1, r3
 801001a:	2200      	movs	r2, #0
 801001c:	4b76      	ldr	r3, [pc, #472]	@ (80101f8 <_dtoa_r+0x2e0>)
 801001e:	f7f0 f933 	bl	8000288 <__aeabi_dsub>
 8010022:	a36b      	add	r3, pc, #428	@ (adr r3, 80101d0 <_dtoa_r+0x2b8>)
 8010024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010028:	f7f0 fae6 	bl	80005f8 <__aeabi_dmul>
 801002c:	a36a      	add	r3, pc, #424	@ (adr r3, 80101d8 <_dtoa_r+0x2c0>)
 801002e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010032:	f7f0 f92b 	bl	800028c <__adddf3>
 8010036:	4604      	mov	r4, r0
 8010038:	4630      	mov	r0, r6
 801003a:	460d      	mov	r5, r1
 801003c:	f7f0 fa72 	bl	8000524 <__aeabi_i2d>
 8010040:	a367      	add	r3, pc, #412	@ (adr r3, 80101e0 <_dtoa_r+0x2c8>)
 8010042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010046:	f7f0 fad7 	bl	80005f8 <__aeabi_dmul>
 801004a:	4602      	mov	r2, r0
 801004c:	460b      	mov	r3, r1
 801004e:	4620      	mov	r0, r4
 8010050:	4629      	mov	r1, r5
 8010052:	f7f0 f91b 	bl	800028c <__adddf3>
 8010056:	4604      	mov	r4, r0
 8010058:	460d      	mov	r5, r1
 801005a:	f7f0 fd7d 	bl	8000b58 <__aeabi_d2iz>
 801005e:	2200      	movs	r2, #0
 8010060:	4607      	mov	r7, r0
 8010062:	2300      	movs	r3, #0
 8010064:	4620      	mov	r0, r4
 8010066:	4629      	mov	r1, r5
 8010068:	f7f0 fd38 	bl	8000adc <__aeabi_dcmplt>
 801006c:	b140      	cbz	r0, 8010080 <_dtoa_r+0x168>
 801006e:	4638      	mov	r0, r7
 8010070:	f7f0 fa58 	bl	8000524 <__aeabi_i2d>
 8010074:	4622      	mov	r2, r4
 8010076:	462b      	mov	r3, r5
 8010078:	f7f0 fd26 	bl	8000ac8 <__aeabi_dcmpeq>
 801007c:	b900      	cbnz	r0, 8010080 <_dtoa_r+0x168>
 801007e:	3f01      	subs	r7, #1
 8010080:	2f16      	cmp	r7, #22
 8010082:	d852      	bhi.n	801012a <_dtoa_r+0x212>
 8010084:	4b5d      	ldr	r3, [pc, #372]	@ (80101fc <_dtoa_r+0x2e4>)
 8010086:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801008a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801008e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010092:	f7f0 fd23 	bl	8000adc <__aeabi_dcmplt>
 8010096:	2800      	cmp	r0, #0
 8010098:	d049      	beq.n	801012e <_dtoa_r+0x216>
 801009a:	3f01      	subs	r7, #1
 801009c:	2300      	movs	r3, #0
 801009e:	9310      	str	r3, [sp, #64]	@ 0x40
 80100a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80100a2:	1b9b      	subs	r3, r3, r6
 80100a4:	1e5a      	subs	r2, r3, #1
 80100a6:	bf45      	ittet	mi
 80100a8:	f1c3 0301 	rsbmi	r3, r3, #1
 80100ac:	9300      	strmi	r3, [sp, #0]
 80100ae:	2300      	movpl	r3, #0
 80100b0:	2300      	movmi	r3, #0
 80100b2:	9206      	str	r2, [sp, #24]
 80100b4:	bf54      	ite	pl
 80100b6:	9300      	strpl	r3, [sp, #0]
 80100b8:	9306      	strmi	r3, [sp, #24]
 80100ba:	2f00      	cmp	r7, #0
 80100bc:	db39      	blt.n	8010132 <_dtoa_r+0x21a>
 80100be:	9b06      	ldr	r3, [sp, #24]
 80100c0:	970d      	str	r7, [sp, #52]	@ 0x34
 80100c2:	443b      	add	r3, r7
 80100c4:	9306      	str	r3, [sp, #24]
 80100c6:	2300      	movs	r3, #0
 80100c8:	9308      	str	r3, [sp, #32]
 80100ca:	9b07      	ldr	r3, [sp, #28]
 80100cc:	2b09      	cmp	r3, #9
 80100ce:	d863      	bhi.n	8010198 <_dtoa_r+0x280>
 80100d0:	2b05      	cmp	r3, #5
 80100d2:	bfc4      	itt	gt
 80100d4:	3b04      	subgt	r3, #4
 80100d6:	9307      	strgt	r3, [sp, #28]
 80100d8:	9b07      	ldr	r3, [sp, #28]
 80100da:	f1a3 0302 	sub.w	r3, r3, #2
 80100de:	bfcc      	ite	gt
 80100e0:	2400      	movgt	r4, #0
 80100e2:	2401      	movle	r4, #1
 80100e4:	2b03      	cmp	r3, #3
 80100e6:	d863      	bhi.n	80101b0 <_dtoa_r+0x298>
 80100e8:	e8df f003 	tbb	[pc, r3]
 80100ec:	2b375452 	.word	0x2b375452
 80100f0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80100f4:	441e      	add	r6, r3
 80100f6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80100fa:	2b20      	cmp	r3, #32
 80100fc:	bfc1      	itttt	gt
 80100fe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010102:	409f      	lslgt	r7, r3
 8010104:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010108:	fa24 f303 	lsrgt.w	r3, r4, r3
 801010c:	bfd6      	itet	le
 801010e:	f1c3 0320 	rsble	r3, r3, #32
 8010112:	ea47 0003 	orrgt.w	r0, r7, r3
 8010116:	fa04 f003 	lslle.w	r0, r4, r3
 801011a:	f7f0 f9f3 	bl	8000504 <__aeabi_ui2d>
 801011e:	2201      	movs	r2, #1
 8010120:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010124:	3e01      	subs	r6, #1
 8010126:	9212      	str	r2, [sp, #72]	@ 0x48
 8010128:	e776      	b.n	8010018 <_dtoa_r+0x100>
 801012a:	2301      	movs	r3, #1
 801012c:	e7b7      	b.n	801009e <_dtoa_r+0x186>
 801012e:	9010      	str	r0, [sp, #64]	@ 0x40
 8010130:	e7b6      	b.n	80100a0 <_dtoa_r+0x188>
 8010132:	9b00      	ldr	r3, [sp, #0]
 8010134:	1bdb      	subs	r3, r3, r7
 8010136:	9300      	str	r3, [sp, #0]
 8010138:	427b      	negs	r3, r7
 801013a:	9308      	str	r3, [sp, #32]
 801013c:	2300      	movs	r3, #0
 801013e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010140:	e7c3      	b.n	80100ca <_dtoa_r+0x1b2>
 8010142:	2301      	movs	r3, #1
 8010144:	9309      	str	r3, [sp, #36]	@ 0x24
 8010146:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010148:	eb07 0b03 	add.w	fp, r7, r3
 801014c:	f10b 0301 	add.w	r3, fp, #1
 8010150:	2b01      	cmp	r3, #1
 8010152:	9303      	str	r3, [sp, #12]
 8010154:	bfb8      	it	lt
 8010156:	2301      	movlt	r3, #1
 8010158:	e006      	b.n	8010168 <_dtoa_r+0x250>
 801015a:	2301      	movs	r3, #1
 801015c:	9309      	str	r3, [sp, #36]	@ 0x24
 801015e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010160:	2b00      	cmp	r3, #0
 8010162:	dd28      	ble.n	80101b6 <_dtoa_r+0x29e>
 8010164:	469b      	mov	fp, r3
 8010166:	9303      	str	r3, [sp, #12]
 8010168:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801016c:	2100      	movs	r1, #0
 801016e:	2204      	movs	r2, #4
 8010170:	f102 0514 	add.w	r5, r2, #20
 8010174:	429d      	cmp	r5, r3
 8010176:	d926      	bls.n	80101c6 <_dtoa_r+0x2ae>
 8010178:	6041      	str	r1, [r0, #4]
 801017a:	4648      	mov	r0, r9
 801017c:	f001 f898 	bl	80112b0 <_Balloc>
 8010180:	4682      	mov	sl, r0
 8010182:	2800      	cmp	r0, #0
 8010184:	d142      	bne.n	801020c <_dtoa_r+0x2f4>
 8010186:	4b1e      	ldr	r3, [pc, #120]	@ (8010200 <_dtoa_r+0x2e8>)
 8010188:	4602      	mov	r2, r0
 801018a:	f240 11af 	movw	r1, #431	@ 0x1af
 801018e:	e6da      	b.n	800ff46 <_dtoa_r+0x2e>
 8010190:	2300      	movs	r3, #0
 8010192:	e7e3      	b.n	801015c <_dtoa_r+0x244>
 8010194:	2300      	movs	r3, #0
 8010196:	e7d5      	b.n	8010144 <_dtoa_r+0x22c>
 8010198:	2401      	movs	r4, #1
 801019a:	2300      	movs	r3, #0
 801019c:	9307      	str	r3, [sp, #28]
 801019e:	9409      	str	r4, [sp, #36]	@ 0x24
 80101a0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80101a4:	2200      	movs	r2, #0
 80101a6:	f8cd b00c 	str.w	fp, [sp, #12]
 80101aa:	2312      	movs	r3, #18
 80101ac:	920c      	str	r2, [sp, #48]	@ 0x30
 80101ae:	e7db      	b.n	8010168 <_dtoa_r+0x250>
 80101b0:	2301      	movs	r3, #1
 80101b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80101b4:	e7f4      	b.n	80101a0 <_dtoa_r+0x288>
 80101b6:	f04f 0b01 	mov.w	fp, #1
 80101ba:	f8cd b00c 	str.w	fp, [sp, #12]
 80101be:	465b      	mov	r3, fp
 80101c0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80101c4:	e7d0      	b.n	8010168 <_dtoa_r+0x250>
 80101c6:	3101      	adds	r1, #1
 80101c8:	0052      	lsls	r2, r2, #1
 80101ca:	e7d1      	b.n	8010170 <_dtoa_r+0x258>
 80101cc:	f3af 8000 	nop.w
 80101d0:	636f4361 	.word	0x636f4361
 80101d4:	3fd287a7 	.word	0x3fd287a7
 80101d8:	8b60c8b3 	.word	0x8b60c8b3
 80101dc:	3fc68a28 	.word	0x3fc68a28
 80101e0:	509f79fb 	.word	0x509f79fb
 80101e4:	3fd34413 	.word	0x3fd34413
 80101e8:	08013c15 	.word	0x08013c15
 80101ec:	08013c2c 	.word	0x08013c2c
 80101f0:	7ff00000 	.word	0x7ff00000
 80101f4:	08013be5 	.word	0x08013be5
 80101f8:	3ff80000 	.word	0x3ff80000
 80101fc:	08013d80 	.word	0x08013d80
 8010200:	08013c84 	.word	0x08013c84
 8010204:	08013c11 	.word	0x08013c11
 8010208:	08013be4 	.word	0x08013be4
 801020c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010210:	6018      	str	r0, [r3, #0]
 8010212:	9b03      	ldr	r3, [sp, #12]
 8010214:	2b0e      	cmp	r3, #14
 8010216:	f200 80a1 	bhi.w	801035c <_dtoa_r+0x444>
 801021a:	2c00      	cmp	r4, #0
 801021c:	f000 809e 	beq.w	801035c <_dtoa_r+0x444>
 8010220:	2f00      	cmp	r7, #0
 8010222:	dd33      	ble.n	801028c <_dtoa_r+0x374>
 8010224:	4b9c      	ldr	r3, [pc, #624]	@ (8010498 <_dtoa_r+0x580>)
 8010226:	f007 020f 	and.w	r2, r7, #15
 801022a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801022e:	ed93 7b00 	vldr	d7, [r3]
 8010232:	05f8      	lsls	r0, r7, #23
 8010234:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010238:	ea4f 1427 	mov.w	r4, r7, asr #4
 801023c:	d516      	bpl.n	801026c <_dtoa_r+0x354>
 801023e:	4b97      	ldr	r3, [pc, #604]	@ (801049c <_dtoa_r+0x584>)
 8010240:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010244:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010248:	f7f0 fb00 	bl	800084c <__aeabi_ddiv>
 801024c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010250:	f004 040f 	and.w	r4, r4, #15
 8010254:	2603      	movs	r6, #3
 8010256:	4d91      	ldr	r5, [pc, #580]	@ (801049c <_dtoa_r+0x584>)
 8010258:	b954      	cbnz	r4, 8010270 <_dtoa_r+0x358>
 801025a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801025e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010262:	f7f0 faf3 	bl	800084c <__aeabi_ddiv>
 8010266:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801026a:	e028      	b.n	80102be <_dtoa_r+0x3a6>
 801026c:	2602      	movs	r6, #2
 801026e:	e7f2      	b.n	8010256 <_dtoa_r+0x33e>
 8010270:	07e1      	lsls	r1, r4, #31
 8010272:	d508      	bpl.n	8010286 <_dtoa_r+0x36e>
 8010274:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010278:	e9d5 2300 	ldrd	r2, r3, [r5]
 801027c:	f7f0 f9bc 	bl	80005f8 <__aeabi_dmul>
 8010280:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010284:	3601      	adds	r6, #1
 8010286:	1064      	asrs	r4, r4, #1
 8010288:	3508      	adds	r5, #8
 801028a:	e7e5      	b.n	8010258 <_dtoa_r+0x340>
 801028c:	f000 80af 	beq.w	80103ee <_dtoa_r+0x4d6>
 8010290:	427c      	negs	r4, r7
 8010292:	4b81      	ldr	r3, [pc, #516]	@ (8010498 <_dtoa_r+0x580>)
 8010294:	4d81      	ldr	r5, [pc, #516]	@ (801049c <_dtoa_r+0x584>)
 8010296:	f004 020f 	and.w	r2, r4, #15
 801029a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801029e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80102a6:	f7f0 f9a7 	bl	80005f8 <__aeabi_dmul>
 80102aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80102ae:	1124      	asrs	r4, r4, #4
 80102b0:	2300      	movs	r3, #0
 80102b2:	2602      	movs	r6, #2
 80102b4:	2c00      	cmp	r4, #0
 80102b6:	f040 808f 	bne.w	80103d8 <_dtoa_r+0x4c0>
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d1d3      	bne.n	8010266 <_dtoa_r+0x34e>
 80102be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80102c0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	f000 8094 	beq.w	80103f2 <_dtoa_r+0x4da>
 80102ca:	4b75      	ldr	r3, [pc, #468]	@ (80104a0 <_dtoa_r+0x588>)
 80102cc:	2200      	movs	r2, #0
 80102ce:	4620      	mov	r0, r4
 80102d0:	4629      	mov	r1, r5
 80102d2:	f7f0 fc03 	bl	8000adc <__aeabi_dcmplt>
 80102d6:	2800      	cmp	r0, #0
 80102d8:	f000 808b 	beq.w	80103f2 <_dtoa_r+0x4da>
 80102dc:	9b03      	ldr	r3, [sp, #12]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	f000 8087 	beq.w	80103f2 <_dtoa_r+0x4da>
 80102e4:	f1bb 0f00 	cmp.w	fp, #0
 80102e8:	dd34      	ble.n	8010354 <_dtoa_r+0x43c>
 80102ea:	4620      	mov	r0, r4
 80102ec:	4b6d      	ldr	r3, [pc, #436]	@ (80104a4 <_dtoa_r+0x58c>)
 80102ee:	2200      	movs	r2, #0
 80102f0:	4629      	mov	r1, r5
 80102f2:	f7f0 f981 	bl	80005f8 <__aeabi_dmul>
 80102f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80102fa:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80102fe:	3601      	adds	r6, #1
 8010300:	465c      	mov	r4, fp
 8010302:	4630      	mov	r0, r6
 8010304:	f7f0 f90e 	bl	8000524 <__aeabi_i2d>
 8010308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801030c:	f7f0 f974 	bl	80005f8 <__aeabi_dmul>
 8010310:	4b65      	ldr	r3, [pc, #404]	@ (80104a8 <_dtoa_r+0x590>)
 8010312:	2200      	movs	r2, #0
 8010314:	f7ef ffba 	bl	800028c <__adddf3>
 8010318:	4605      	mov	r5, r0
 801031a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801031e:	2c00      	cmp	r4, #0
 8010320:	d16a      	bne.n	80103f8 <_dtoa_r+0x4e0>
 8010322:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010326:	4b61      	ldr	r3, [pc, #388]	@ (80104ac <_dtoa_r+0x594>)
 8010328:	2200      	movs	r2, #0
 801032a:	f7ef ffad 	bl	8000288 <__aeabi_dsub>
 801032e:	4602      	mov	r2, r0
 8010330:	460b      	mov	r3, r1
 8010332:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010336:	462a      	mov	r2, r5
 8010338:	4633      	mov	r3, r6
 801033a:	f7f0 fbed 	bl	8000b18 <__aeabi_dcmpgt>
 801033e:	2800      	cmp	r0, #0
 8010340:	f040 8298 	bne.w	8010874 <_dtoa_r+0x95c>
 8010344:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010348:	462a      	mov	r2, r5
 801034a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801034e:	f7f0 fbc5 	bl	8000adc <__aeabi_dcmplt>
 8010352:	bb38      	cbnz	r0, 80103a4 <_dtoa_r+0x48c>
 8010354:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8010358:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801035c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801035e:	2b00      	cmp	r3, #0
 8010360:	f2c0 8157 	blt.w	8010612 <_dtoa_r+0x6fa>
 8010364:	2f0e      	cmp	r7, #14
 8010366:	f300 8154 	bgt.w	8010612 <_dtoa_r+0x6fa>
 801036a:	4b4b      	ldr	r3, [pc, #300]	@ (8010498 <_dtoa_r+0x580>)
 801036c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010370:	ed93 7b00 	vldr	d7, [r3]
 8010374:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010376:	2b00      	cmp	r3, #0
 8010378:	ed8d 7b00 	vstr	d7, [sp]
 801037c:	f280 80e5 	bge.w	801054a <_dtoa_r+0x632>
 8010380:	9b03      	ldr	r3, [sp, #12]
 8010382:	2b00      	cmp	r3, #0
 8010384:	f300 80e1 	bgt.w	801054a <_dtoa_r+0x632>
 8010388:	d10c      	bne.n	80103a4 <_dtoa_r+0x48c>
 801038a:	4b48      	ldr	r3, [pc, #288]	@ (80104ac <_dtoa_r+0x594>)
 801038c:	2200      	movs	r2, #0
 801038e:	ec51 0b17 	vmov	r0, r1, d7
 8010392:	f7f0 f931 	bl	80005f8 <__aeabi_dmul>
 8010396:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801039a:	f7f0 fbb3 	bl	8000b04 <__aeabi_dcmpge>
 801039e:	2800      	cmp	r0, #0
 80103a0:	f000 8266 	beq.w	8010870 <_dtoa_r+0x958>
 80103a4:	2400      	movs	r4, #0
 80103a6:	4625      	mov	r5, r4
 80103a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80103aa:	4656      	mov	r6, sl
 80103ac:	ea6f 0803 	mvn.w	r8, r3
 80103b0:	2700      	movs	r7, #0
 80103b2:	4621      	mov	r1, r4
 80103b4:	4648      	mov	r0, r9
 80103b6:	f000 ffbb 	bl	8011330 <_Bfree>
 80103ba:	2d00      	cmp	r5, #0
 80103bc:	f000 80bd 	beq.w	801053a <_dtoa_r+0x622>
 80103c0:	b12f      	cbz	r7, 80103ce <_dtoa_r+0x4b6>
 80103c2:	42af      	cmp	r7, r5
 80103c4:	d003      	beq.n	80103ce <_dtoa_r+0x4b6>
 80103c6:	4639      	mov	r1, r7
 80103c8:	4648      	mov	r0, r9
 80103ca:	f000 ffb1 	bl	8011330 <_Bfree>
 80103ce:	4629      	mov	r1, r5
 80103d0:	4648      	mov	r0, r9
 80103d2:	f000 ffad 	bl	8011330 <_Bfree>
 80103d6:	e0b0      	b.n	801053a <_dtoa_r+0x622>
 80103d8:	07e2      	lsls	r2, r4, #31
 80103da:	d505      	bpl.n	80103e8 <_dtoa_r+0x4d0>
 80103dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80103e0:	f7f0 f90a 	bl	80005f8 <__aeabi_dmul>
 80103e4:	3601      	adds	r6, #1
 80103e6:	2301      	movs	r3, #1
 80103e8:	1064      	asrs	r4, r4, #1
 80103ea:	3508      	adds	r5, #8
 80103ec:	e762      	b.n	80102b4 <_dtoa_r+0x39c>
 80103ee:	2602      	movs	r6, #2
 80103f0:	e765      	b.n	80102be <_dtoa_r+0x3a6>
 80103f2:	9c03      	ldr	r4, [sp, #12]
 80103f4:	46b8      	mov	r8, r7
 80103f6:	e784      	b.n	8010302 <_dtoa_r+0x3ea>
 80103f8:	4b27      	ldr	r3, [pc, #156]	@ (8010498 <_dtoa_r+0x580>)
 80103fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80103fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010400:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010404:	4454      	add	r4, sl
 8010406:	2900      	cmp	r1, #0
 8010408:	d054      	beq.n	80104b4 <_dtoa_r+0x59c>
 801040a:	4929      	ldr	r1, [pc, #164]	@ (80104b0 <_dtoa_r+0x598>)
 801040c:	2000      	movs	r0, #0
 801040e:	f7f0 fa1d 	bl	800084c <__aeabi_ddiv>
 8010412:	4633      	mov	r3, r6
 8010414:	462a      	mov	r2, r5
 8010416:	f7ef ff37 	bl	8000288 <__aeabi_dsub>
 801041a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801041e:	4656      	mov	r6, sl
 8010420:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010424:	f7f0 fb98 	bl	8000b58 <__aeabi_d2iz>
 8010428:	4605      	mov	r5, r0
 801042a:	f7f0 f87b 	bl	8000524 <__aeabi_i2d>
 801042e:	4602      	mov	r2, r0
 8010430:	460b      	mov	r3, r1
 8010432:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010436:	f7ef ff27 	bl	8000288 <__aeabi_dsub>
 801043a:	3530      	adds	r5, #48	@ 0x30
 801043c:	4602      	mov	r2, r0
 801043e:	460b      	mov	r3, r1
 8010440:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010444:	f806 5b01 	strb.w	r5, [r6], #1
 8010448:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801044c:	f7f0 fb46 	bl	8000adc <__aeabi_dcmplt>
 8010450:	2800      	cmp	r0, #0
 8010452:	d172      	bne.n	801053a <_dtoa_r+0x622>
 8010454:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010458:	4911      	ldr	r1, [pc, #68]	@ (80104a0 <_dtoa_r+0x588>)
 801045a:	2000      	movs	r0, #0
 801045c:	f7ef ff14 	bl	8000288 <__aeabi_dsub>
 8010460:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010464:	f7f0 fb3a 	bl	8000adc <__aeabi_dcmplt>
 8010468:	2800      	cmp	r0, #0
 801046a:	f040 80b4 	bne.w	80105d6 <_dtoa_r+0x6be>
 801046e:	42a6      	cmp	r6, r4
 8010470:	f43f af70 	beq.w	8010354 <_dtoa_r+0x43c>
 8010474:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010478:	4b0a      	ldr	r3, [pc, #40]	@ (80104a4 <_dtoa_r+0x58c>)
 801047a:	2200      	movs	r2, #0
 801047c:	f7f0 f8bc 	bl	80005f8 <__aeabi_dmul>
 8010480:	4b08      	ldr	r3, [pc, #32]	@ (80104a4 <_dtoa_r+0x58c>)
 8010482:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010486:	2200      	movs	r2, #0
 8010488:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801048c:	f7f0 f8b4 	bl	80005f8 <__aeabi_dmul>
 8010490:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010494:	e7c4      	b.n	8010420 <_dtoa_r+0x508>
 8010496:	bf00      	nop
 8010498:	08013d80 	.word	0x08013d80
 801049c:	08013d58 	.word	0x08013d58
 80104a0:	3ff00000 	.word	0x3ff00000
 80104a4:	40240000 	.word	0x40240000
 80104a8:	401c0000 	.word	0x401c0000
 80104ac:	40140000 	.word	0x40140000
 80104b0:	3fe00000 	.word	0x3fe00000
 80104b4:	4631      	mov	r1, r6
 80104b6:	4628      	mov	r0, r5
 80104b8:	f7f0 f89e 	bl	80005f8 <__aeabi_dmul>
 80104bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80104c0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80104c2:	4656      	mov	r6, sl
 80104c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80104c8:	f7f0 fb46 	bl	8000b58 <__aeabi_d2iz>
 80104cc:	4605      	mov	r5, r0
 80104ce:	f7f0 f829 	bl	8000524 <__aeabi_i2d>
 80104d2:	4602      	mov	r2, r0
 80104d4:	460b      	mov	r3, r1
 80104d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80104da:	f7ef fed5 	bl	8000288 <__aeabi_dsub>
 80104de:	3530      	adds	r5, #48	@ 0x30
 80104e0:	f806 5b01 	strb.w	r5, [r6], #1
 80104e4:	4602      	mov	r2, r0
 80104e6:	460b      	mov	r3, r1
 80104e8:	42a6      	cmp	r6, r4
 80104ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80104ee:	f04f 0200 	mov.w	r2, #0
 80104f2:	d124      	bne.n	801053e <_dtoa_r+0x626>
 80104f4:	4baf      	ldr	r3, [pc, #700]	@ (80107b4 <_dtoa_r+0x89c>)
 80104f6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80104fa:	f7ef fec7 	bl	800028c <__adddf3>
 80104fe:	4602      	mov	r2, r0
 8010500:	460b      	mov	r3, r1
 8010502:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010506:	f7f0 fb07 	bl	8000b18 <__aeabi_dcmpgt>
 801050a:	2800      	cmp	r0, #0
 801050c:	d163      	bne.n	80105d6 <_dtoa_r+0x6be>
 801050e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010512:	49a8      	ldr	r1, [pc, #672]	@ (80107b4 <_dtoa_r+0x89c>)
 8010514:	2000      	movs	r0, #0
 8010516:	f7ef feb7 	bl	8000288 <__aeabi_dsub>
 801051a:	4602      	mov	r2, r0
 801051c:	460b      	mov	r3, r1
 801051e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010522:	f7f0 fadb 	bl	8000adc <__aeabi_dcmplt>
 8010526:	2800      	cmp	r0, #0
 8010528:	f43f af14 	beq.w	8010354 <_dtoa_r+0x43c>
 801052c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801052e:	1e73      	subs	r3, r6, #1
 8010530:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010532:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010536:	2b30      	cmp	r3, #48	@ 0x30
 8010538:	d0f8      	beq.n	801052c <_dtoa_r+0x614>
 801053a:	4647      	mov	r7, r8
 801053c:	e03b      	b.n	80105b6 <_dtoa_r+0x69e>
 801053e:	4b9e      	ldr	r3, [pc, #632]	@ (80107b8 <_dtoa_r+0x8a0>)
 8010540:	f7f0 f85a 	bl	80005f8 <__aeabi_dmul>
 8010544:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010548:	e7bc      	b.n	80104c4 <_dtoa_r+0x5ac>
 801054a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801054e:	4656      	mov	r6, sl
 8010550:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010554:	4620      	mov	r0, r4
 8010556:	4629      	mov	r1, r5
 8010558:	f7f0 f978 	bl	800084c <__aeabi_ddiv>
 801055c:	f7f0 fafc 	bl	8000b58 <__aeabi_d2iz>
 8010560:	4680      	mov	r8, r0
 8010562:	f7ef ffdf 	bl	8000524 <__aeabi_i2d>
 8010566:	e9dd 2300 	ldrd	r2, r3, [sp]
 801056a:	f7f0 f845 	bl	80005f8 <__aeabi_dmul>
 801056e:	4602      	mov	r2, r0
 8010570:	460b      	mov	r3, r1
 8010572:	4620      	mov	r0, r4
 8010574:	4629      	mov	r1, r5
 8010576:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801057a:	f7ef fe85 	bl	8000288 <__aeabi_dsub>
 801057e:	f806 4b01 	strb.w	r4, [r6], #1
 8010582:	9d03      	ldr	r5, [sp, #12]
 8010584:	eba6 040a 	sub.w	r4, r6, sl
 8010588:	42a5      	cmp	r5, r4
 801058a:	4602      	mov	r2, r0
 801058c:	460b      	mov	r3, r1
 801058e:	d133      	bne.n	80105f8 <_dtoa_r+0x6e0>
 8010590:	f7ef fe7c 	bl	800028c <__adddf3>
 8010594:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010598:	4604      	mov	r4, r0
 801059a:	460d      	mov	r5, r1
 801059c:	f7f0 fabc 	bl	8000b18 <__aeabi_dcmpgt>
 80105a0:	b9c0      	cbnz	r0, 80105d4 <_dtoa_r+0x6bc>
 80105a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105a6:	4620      	mov	r0, r4
 80105a8:	4629      	mov	r1, r5
 80105aa:	f7f0 fa8d 	bl	8000ac8 <__aeabi_dcmpeq>
 80105ae:	b110      	cbz	r0, 80105b6 <_dtoa_r+0x69e>
 80105b0:	f018 0f01 	tst.w	r8, #1
 80105b4:	d10e      	bne.n	80105d4 <_dtoa_r+0x6bc>
 80105b6:	9902      	ldr	r1, [sp, #8]
 80105b8:	4648      	mov	r0, r9
 80105ba:	f000 feb9 	bl	8011330 <_Bfree>
 80105be:	2300      	movs	r3, #0
 80105c0:	7033      	strb	r3, [r6, #0]
 80105c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80105c4:	3701      	adds	r7, #1
 80105c6:	601f      	str	r7, [r3, #0]
 80105c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	f000 824b 	beq.w	8010a66 <_dtoa_r+0xb4e>
 80105d0:	601e      	str	r6, [r3, #0]
 80105d2:	e248      	b.n	8010a66 <_dtoa_r+0xb4e>
 80105d4:	46b8      	mov	r8, r7
 80105d6:	4633      	mov	r3, r6
 80105d8:	461e      	mov	r6, r3
 80105da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80105de:	2a39      	cmp	r2, #57	@ 0x39
 80105e0:	d106      	bne.n	80105f0 <_dtoa_r+0x6d8>
 80105e2:	459a      	cmp	sl, r3
 80105e4:	d1f8      	bne.n	80105d8 <_dtoa_r+0x6c0>
 80105e6:	2230      	movs	r2, #48	@ 0x30
 80105e8:	f108 0801 	add.w	r8, r8, #1
 80105ec:	f88a 2000 	strb.w	r2, [sl]
 80105f0:	781a      	ldrb	r2, [r3, #0]
 80105f2:	3201      	adds	r2, #1
 80105f4:	701a      	strb	r2, [r3, #0]
 80105f6:	e7a0      	b.n	801053a <_dtoa_r+0x622>
 80105f8:	4b6f      	ldr	r3, [pc, #444]	@ (80107b8 <_dtoa_r+0x8a0>)
 80105fa:	2200      	movs	r2, #0
 80105fc:	f7ef fffc 	bl	80005f8 <__aeabi_dmul>
 8010600:	2200      	movs	r2, #0
 8010602:	2300      	movs	r3, #0
 8010604:	4604      	mov	r4, r0
 8010606:	460d      	mov	r5, r1
 8010608:	f7f0 fa5e 	bl	8000ac8 <__aeabi_dcmpeq>
 801060c:	2800      	cmp	r0, #0
 801060e:	d09f      	beq.n	8010550 <_dtoa_r+0x638>
 8010610:	e7d1      	b.n	80105b6 <_dtoa_r+0x69e>
 8010612:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010614:	2a00      	cmp	r2, #0
 8010616:	f000 80ea 	beq.w	80107ee <_dtoa_r+0x8d6>
 801061a:	9a07      	ldr	r2, [sp, #28]
 801061c:	2a01      	cmp	r2, #1
 801061e:	f300 80cd 	bgt.w	80107bc <_dtoa_r+0x8a4>
 8010622:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010624:	2a00      	cmp	r2, #0
 8010626:	f000 80c1 	beq.w	80107ac <_dtoa_r+0x894>
 801062a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801062e:	9c08      	ldr	r4, [sp, #32]
 8010630:	9e00      	ldr	r6, [sp, #0]
 8010632:	9a00      	ldr	r2, [sp, #0]
 8010634:	441a      	add	r2, r3
 8010636:	9200      	str	r2, [sp, #0]
 8010638:	9a06      	ldr	r2, [sp, #24]
 801063a:	2101      	movs	r1, #1
 801063c:	441a      	add	r2, r3
 801063e:	4648      	mov	r0, r9
 8010640:	9206      	str	r2, [sp, #24]
 8010642:	f000 ff29 	bl	8011498 <__i2b>
 8010646:	4605      	mov	r5, r0
 8010648:	b166      	cbz	r6, 8010664 <_dtoa_r+0x74c>
 801064a:	9b06      	ldr	r3, [sp, #24]
 801064c:	2b00      	cmp	r3, #0
 801064e:	dd09      	ble.n	8010664 <_dtoa_r+0x74c>
 8010650:	42b3      	cmp	r3, r6
 8010652:	9a00      	ldr	r2, [sp, #0]
 8010654:	bfa8      	it	ge
 8010656:	4633      	movge	r3, r6
 8010658:	1ad2      	subs	r2, r2, r3
 801065a:	9200      	str	r2, [sp, #0]
 801065c:	9a06      	ldr	r2, [sp, #24]
 801065e:	1af6      	subs	r6, r6, r3
 8010660:	1ad3      	subs	r3, r2, r3
 8010662:	9306      	str	r3, [sp, #24]
 8010664:	9b08      	ldr	r3, [sp, #32]
 8010666:	b30b      	cbz	r3, 80106ac <_dtoa_r+0x794>
 8010668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801066a:	2b00      	cmp	r3, #0
 801066c:	f000 80c6 	beq.w	80107fc <_dtoa_r+0x8e4>
 8010670:	2c00      	cmp	r4, #0
 8010672:	f000 80c0 	beq.w	80107f6 <_dtoa_r+0x8de>
 8010676:	4629      	mov	r1, r5
 8010678:	4622      	mov	r2, r4
 801067a:	4648      	mov	r0, r9
 801067c:	f000 ffc4 	bl	8011608 <__pow5mult>
 8010680:	9a02      	ldr	r2, [sp, #8]
 8010682:	4601      	mov	r1, r0
 8010684:	4605      	mov	r5, r0
 8010686:	4648      	mov	r0, r9
 8010688:	f000 ff1c 	bl	80114c4 <__multiply>
 801068c:	9902      	ldr	r1, [sp, #8]
 801068e:	4680      	mov	r8, r0
 8010690:	4648      	mov	r0, r9
 8010692:	f000 fe4d 	bl	8011330 <_Bfree>
 8010696:	9b08      	ldr	r3, [sp, #32]
 8010698:	1b1b      	subs	r3, r3, r4
 801069a:	9308      	str	r3, [sp, #32]
 801069c:	f000 80b1 	beq.w	8010802 <_dtoa_r+0x8ea>
 80106a0:	9a08      	ldr	r2, [sp, #32]
 80106a2:	4641      	mov	r1, r8
 80106a4:	4648      	mov	r0, r9
 80106a6:	f000 ffaf 	bl	8011608 <__pow5mult>
 80106aa:	9002      	str	r0, [sp, #8]
 80106ac:	2101      	movs	r1, #1
 80106ae:	4648      	mov	r0, r9
 80106b0:	f000 fef2 	bl	8011498 <__i2b>
 80106b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80106b6:	4604      	mov	r4, r0
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	f000 81d8 	beq.w	8010a6e <_dtoa_r+0xb56>
 80106be:	461a      	mov	r2, r3
 80106c0:	4601      	mov	r1, r0
 80106c2:	4648      	mov	r0, r9
 80106c4:	f000 ffa0 	bl	8011608 <__pow5mult>
 80106c8:	9b07      	ldr	r3, [sp, #28]
 80106ca:	2b01      	cmp	r3, #1
 80106cc:	4604      	mov	r4, r0
 80106ce:	f300 809f 	bgt.w	8010810 <_dtoa_r+0x8f8>
 80106d2:	9b04      	ldr	r3, [sp, #16]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	f040 8097 	bne.w	8010808 <_dtoa_r+0x8f0>
 80106da:	9b05      	ldr	r3, [sp, #20]
 80106dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	f040 8093 	bne.w	801080c <_dtoa_r+0x8f4>
 80106e6:	9b05      	ldr	r3, [sp, #20]
 80106e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80106ec:	0d1b      	lsrs	r3, r3, #20
 80106ee:	051b      	lsls	r3, r3, #20
 80106f0:	b133      	cbz	r3, 8010700 <_dtoa_r+0x7e8>
 80106f2:	9b00      	ldr	r3, [sp, #0]
 80106f4:	3301      	adds	r3, #1
 80106f6:	9300      	str	r3, [sp, #0]
 80106f8:	9b06      	ldr	r3, [sp, #24]
 80106fa:	3301      	adds	r3, #1
 80106fc:	9306      	str	r3, [sp, #24]
 80106fe:	2301      	movs	r3, #1
 8010700:	9308      	str	r3, [sp, #32]
 8010702:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010704:	2b00      	cmp	r3, #0
 8010706:	f000 81b8 	beq.w	8010a7a <_dtoa_r+0xb62>
 801070a:	6923      	ldr	r3, [r4, #16]
 801070c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010710:	6918      	ldr	r0, [r3, #16]
 8010712:	f000 fe75 	bl	8011400 <__hi0bits>
 8010716:	f1c0 0020 	rsb	r0, r0, #32
 801071a:	9b06      	ldr	r3, [sp, #24]
 801071c:	4418      	add	r0, r3
 801071e:	f010 001f 	ands.w	r0, r0, #31
 8010722:	f000 8082 	beq.w	801082a <_dtoa_r+0x912>
 8010726:	f1c0 0320 	rsb	r3, r0, #32
 801072a:	2b04      	cmp	r3, #4
 801072c:	dd73      	ble.n	8010816 <_dtoa_r+0x8fe>
 801072e:	9b00      	ldr	r3, [sp, #0]
 8010730:	f1c0 001c 	rsb	r0, r0, #28
 8010734:	4403      	add	r3, r0
 8010736:	9300      	str	r3, [sp, #0]
 8010738:	9b06      	ldr	r3, [sp, #24]
 801073a:	4403      	add	r3, r0
 801073c:	4406      	add	r6, r0
 801073e:	9306      	str	r3, [sp, #24]
 8010740:	9b00      	ldr	r3, [sp, #0]
 8010742:	2b00      	cmp	r3, #0
 8010744:	dd05      	ble.n	8010752 <_dtoa_r+0x83a>
 8010746:	9902      	ldr	r1, [sp, #8]
 8010748:	461a      	mov	r2, r3
 801074a:	4648      	mov	r0, r9
 801074c:	f000 ffb6 	bl	80116bc <__lshift>
 8010750:	9002      	str	r0, [sp, #8]
 8010752:	9b06      	ldr	r3, [sp, #24]
 8010754:	2b00      	cmp	r3, #0
 8010756:	dd05      	ble.n	8010764 <_dtoa_r+0x84c>
 8010758:	4621      	mov	r1, r4
 801075a:	461a      	mov	r2, r3
 801075c:	4648      	mov	r0, r9
 801075e:	f000 ffad 	bl	80116bc <__lshift>
 8010762:	4604      	mov	r4, r0
 8010764:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010766:	2b00      	cmp	r3, #0
 8010768:	d061      	beq.n	801082e <_dtoa_r+0x916>
 801076a:	9802      	ldr	r0, [sp, #8]
 801076c:	4621      	mov	r1, r4
 801076e:	f001 f811 	bl	8011794 <__mcmp>
 8010772:	2800      	cmp	r0, #0
 8010774:	da5b      	bge.n	801082e <_dtoa_r+0x916>
 8010776:	2300      	movs	r3, #0
 8010778:	9902      	ldr	r1, [sp, #8]
 801077a:	220a      	movs	r2, #10
 801077c:	4648      	mov	r0, r9
 801077e:	f000 fdf9 	bl	8011374 <__multadd>
 8010782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010784:	9002      	str	r0, [sp, #8]
 8010786:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 801078a:	2b00      	cmp	r3, #0
 801078c:	f000 8177 	beq.w	8010a7e <_dtoa_r+0xb66>
 8010790:	4629      	mov	r1, r5
 8010792:	2300      	movs	r3, #0
 8010794:	220a      	movs	r2, #10
 8010796:	4648      	mov	r0, r9
 8010798:	f000 fdec 	bl	8011374 <__multadd>
 801079c:	f1bb 0f00 	cmp.w	fp, #0
 80107a0:	4605      	mov	r5, r0
 80107a2:	dc6f      	bgt.n	8010884 <_dtoa_r+0x96c>
 80107a4:	9b07      	ldr	r3, [sp, #28]
 80107a6:	2b02      	cmp	r3, #2
 80107a8:	dc49      	bgt.n	801083e <_dtoa_r+0x926>
 80107aa:	e06b      	b.n	8010884 <_dtoa_r+0x96c>
 80107ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80107ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80107b2:	e73c      	b.n	801062e <_dtoa_r+0x716>
 80107b4:	3fe00000 	.word	0x3fe00000
 80107b8:	40240000 	.word	0x40240000
 80107bc:	9b03      	ldr	r3, [sp, #12]
 80107be:	1e5c      	subs	r4, r3, #1
 80107c0:	9b08      	ldr	r3, [sp, #32]
 80107c2:	42a3      	cmp	r3, r4
 80107c4:	db09      	blt.n	80107da <_dtoa_r+0x8c2>
 80107c6:	1b1c      	subs	r4, r3, r4
 80107c8:	9b03      	ldr	r3, [sp, #12]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	f6bf af30 	bge.w	8010630 <_dtoa_r+0x718>
 80107d0:	9b00      	ldr	r3, [sp, #0]
 80107d2:	9a03      	ldr	r2, [sp, #12]
 80107d4:	1a9e      	subs	r6, r3, r2
 80107d6:	2300      	movs	r3, #0
 80107d8:	e72b      	b.n	8010632 <_dtoa_r+0x71a>
 80107da:	9b08      	ldr	r3, [sp, #32]
 80107dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80107de:	9408      	str	r4, [sp, #32]
 80107e0:	1ae3      	subs	r3, r4, r3
 80107e2:	441a      	add	r2, r3
 80107e4:	9e00      	ldr	r6, [sp, #0]
 80107e6:	9b03      	ldr	r3, [sp, #12]
 80107e8:	920d      	str	r2, [sp, #52]	@ 0x34
 80107ea:	2400      	movs	r4, #0
 80107ec:	e721      	b.n	8010632 <_dtoa_r+0x71a>
 80107ee:	9c08      	ldr	r4, [sp, #32]
 80107f0:	9e00      	ldr	r6, [sp, #0]
 80107f2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80107f4:	e728      	b.n	8010648 <_dtoa_r+0x730>
 80107f6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80107fa:	e751      	b.n	80106a0 <_dtoa_r+0x788>
 80107fc:	9a08      	ldr	r2, [sp, #32]
 80107fe:	9902      	ldr	r1, [sp, #8]
 8010800:	e750      	b.n	80106a4 <_dtoa_r+0x78c>
 8010802:	f8cd 8008 	str.w	r8, [sp, #8]
 8010806:	e751      	b.n	80106ac <_dtoa_r+0x794>
 8010808:	2300      	movs	r3, #0
 801080a:	e779      	b.n	8010700 <_dtoa_r+0x7e8>
 801080c:	9b04      	ldr	r3, [sp, #16]
 801080e:	e777      	b.n	8010700 <_dtoa_r+0x7e8>
 8010810:	2300      	movs	r3, #0
 8010812:	9308      	str	r3, [sp, #32]
 8010814:	e779      	b.n	801070a <_dtoa_r+0x7f2>
 8010816:	d093      	beq.n	8010740 <_dtoa_r+0x828>
 8010818:	9a00      	ldr	r2, [sp, #0]
 801081a:	331c      	adds	r3, #28
 801081c:	441a      	add	r2, r3
 801081e:	9200      	str	r2, [sp, #0]
 8010820:	9a06      	ldr	r2, [sp, #24]
 8010822:	441a      	add	r2, r3
 8010824:	441e      	add	r6, r3
 8010826:	9206      	str	r2, [sp, #24]
 8010828:	e78a      	b.n	8010740 <_dtoa_r+0x828>
 801082a:	4603      	mov	r3, r0
 801082c:	e7f4      	b.n	8010818 <_dtoa_r+0x900>
 801082e:	9b03      	ldr	r3, [sp, #12]
 8010830:	2b00      	cmp	r3, #0
 8010832:	46b8      	mov	r8, r7
 8010834:	dc20      	bgt.n	8010878 <_dtoa_r+0x960>
 8010836:	469b      	mov	fp, r3
 8010838:	9b07      	ldr	r3, [sp, #28]
 801083a:	2b02      	cmp	r3, #2
 801083c:	dd1e      	ble.n	801087c <_dtoa_r+0x964>
 801083e:	f1bb 0f00 	cmp.w	fp, #0
 8010842:	f47f adb1 	bne.w	80103a8 <_dtoa_r+0x490>
 8010846:	4621      	mov	r1, r4
 8010848:	465b      	mov	r3, fp
 801084a:	2205      	movs	r2, #5
 801084c:	4648      	mov	r0, r9
 801084e:	f000 fd91 	bl	8011374 <__multadd>
 8010852:	4601      	mov	r1, r0
 8010854:	4604      	mov	r4, r0
 8010856:	9802      	ldr	r0, [sp, #8]
 8010858:	f000 ff9c 	bl	8011794 <__mcmp>
 801085c:	2800      	cmp	r0, #0
 801085e:	f77f ada3 	ble.w	80103a8 <_dtoa_r+0x490>
 8010862:	4656      	mov	r6, sl
 8010864:	2331      	movs	r3, #49	@ 0x31
 8010866:	f806 3b01 	strb.w	r3, [r6], #1
 801086a:	f108 0801 	add.w	r8, r8, #1
 801086e:	e59f      	b.n	80103b0 <_dtoa_r+0x498>
 8010870:	9c03      	ldr	r4, [sp, #12]
 8010872:	46b8      	mov	r8, r7
 8010874:	4625      	mov	r5, r4
 8010876:	e7f4      	b.n	8010862 <_dtoa_r+0x94a>
 8010878:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801087c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801087e:	2b00      	cmp	r3, #0
 8010880:	f000 8101 	beq.w	8010a86 <_dtoa_r+0xb6e>
 8010884:	2e00      	cmp	r6, #0
 8010886:	dd05      	ble.n	8010894 <_dtoa_r+0x97c>
 8010888:	4629      	mov	r1, r5
 801088a:	4632      	mov	r2, r6
 801088c:	4648      	mov	r0, r9
 801088e:	f000 ff15 	bl	80116bc <__lshift>
 8010892:	4605      	mov	r5, r0
 8010894:	9b08      	ldr	r3, [sp, #32]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d05c      	beq.n	8010954 <_dtoa_r+0xa3c>
 801089a:	6869      	ldr	r1, [r5, #4]
 801089c:	4648      	mov	r0, r9
 801089e:	f000 fd07 	bl	80112b0 <_Balloc>
 80108a2:	4606      	mov	r6, r0
 80108a4:	b928      	cbnz	r0, 80108b2 <_dtoa_r+0x99a>
 80108a6:	4b82      	ldr	r3, [pc, #520]	@ (8010ab0 <_dtoa_r+0xb98>)
 80108a8:	4602      	mov	r2, r0
 80108aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80108ae:	f7ff bb4a 	b.w	800ff46 <_dtoa_r+0x2e>
 80108b2:	692a      	ldr	r2, [r5, #16]
 80108b4:	3202      	adds	r2, #2
 80108b6:	0092      	lsls	r2, r2, #2
 80108b8:	f105 010c 	add.w	r1, r5, #12
 80108bc:	300c      	adds	r0, #12
 80108be:	f001 fa6b 	bl	8011d98 <memcpy>
 80108c2:	2201      	movs	r2, #1
 80108c4:	4631      	mov	r1, r6
 80108c6:	4648      	mov	r0, r9
 80108c8:	f000 fef8 	bl	80116bc <__lshift>
 80108cc:	f10a 0301 	add.w	r3, sl, #1
 80108d0:	9300      	str	r3, [sp, #0]
 80108d2:	eb0a 030b 	add.w	r3, sl, fp
 80108d6:	9308      	str	r3, [sp, #32]
 80108d8:	9b04      	ldr	r3, [sp, #16]
 80108da:	f003 0301 	and.w	r3, r3, #1
 80108de:	462f      	mov	r7, r5
 80108e0:	9306      	str	r3, [sp, #24]
 80108e2:	4605      	mov	r5, r0
 80108e4:	9b00      	ldr	r3, [sp, #0]
 80108e6:	9802      	ldr	r0, [sp, #8]
 80108e8:	4621      	mov	r1, r4
 80108ea:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80108ee:	f7ff fa8b 	bl	800fe08 <quorem>
 80108f2:	4603      	mov	r3, r0
 80108f4:	3330      	adds	r3, #48	@ 0x30
 80108f6:	9003      	str	r0, [sp, #12]
 80108f8:	4639      	mov	r1, r7
 80108fa:	9802      	ldr	r0, [sp, #8]
 80108fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80108fe:	f000 ff49 	bl	8011794 <__mcmp>
 8010902:	462a      	mov	r2, r5
 8010904:	9004      	str	r0, [sp, #16]
 8010906:	4621      	mov	r1, r4
 8010908:	4648      	mov	r0, r9
 801090a:	f000 ff5f 	bl	80117cc <__mdiff>
 801090e:	68c2      	ldr	r2, [r0, #12]
 8010910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010912:	4606      	mov	r6, r0
 8010914:	bb02      	cbnz	r2, 8010958 <_dtoa_r+0xa40>
 8010916:	4601      	mov	r1, r0
 8010918:	9802      	ldr	r0, [sp, #8]
 801091a:	f000 ff3b 	bl	8011794 <__mcmp>
 801091e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010920:	4602      	mov	r2, r0
 8010922:	4631      	mov	r1, r6
 8010924:	4648      	mov	r0, r9
 8010926:	920c      	str	r2, [sp, #48]	@ 0x30
 8010928:	9309      	str	r3, [sp, #36]	@ 0x24
 801092a:	f000 fd01 	bl	8011330 <_Bfree>
 801092e:	9b07      	ldr	r3, [sp, #28]
 8010930:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010932:	9e00      	ldr	r6, [sp, #0]
 8010934:	ea42 0103 	orr.w	r1, r2, r3
 8010938:	9b06      	ldr	r3, [sp, #24]
 801093a:	4319      	orrs	r1, r3
 801093c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801093e:	d10d      	bne.n	801095c <_dtoa_r+0xa44>
 8010940:	2b39      	cmp	r3, #57	@ 0x39
 8010942:	d027      	beq.n	8010994 <_dtoa_r+0xa7c>
 8010944:	9a04      	ldr	r2, [sp, #16]
 8010946:	2a00      	cmp	r2, #0
 8010948:	dd01      	ble.n	801094e <_dtoa_r+0xa36>
 801094a:	9b03      	ldr	r3, [sp, #12]
 801094c:	3331      	adds	r3, #49	@ 0x31
 801094e:	f88b 3000 	strb.w	r3, [fp]
 8010952:	e52e      	b.n	80103b2 <_dtoa_r+0x49a>
 8010954:	4628      	mov	r0, r5
 8010956:	e7b9      	b.n	80108cc <_dtoa_r+0x9b4>
 8010958:	2201      	movs	r2, #1
 801095a:	e7e2      	b.n	8010922 <_dtoa_r+0xa0a>
 801095c:	9904      	ldr	r1, [sp, #16]
 801095e:	2900      	cmp	r1, #0
 8010960:	db04      	blt.n	801096c <_dtoa_r+0xa54>
 8010962:	9807      	ldr	r0, [sp, #28]
 8010964:	4301      	orrs	r1, r0
 8010966:	9806      	ldr	r0, [sp, #24]
 8010968:	4301      	orrs	r1, r0
 801096a:	d120      	bne.n	80109ae <_dtoa_r+0xa96>
 801096c:	2a00      	cmp	r2, #0
 801096e:	ddee      	ble.n	801094e <_dtoa_r+0xa36>
 8010970:	9902      	ldr	r1, [sp, #8]
 8010972:	9300      	str	r3, [sp, #0]
 8010974:	2201      	movs	r2, #1
 8010976:	4648      	mov	r0, r9
 8010978:	f000 fea0 	bl	80116bc <__lshift>
 801097c:	4621      	mov	r1, r4
 801097e:	9002      	str	r0, [sp, #8]
 8010980:	f000 ff08 	bl	8011794 <__mcmp>
 8010984:	2800      	cmp	r0, #0
 8010986:	9b00      	ldr	r3, [sp, #0]
 8010988:	dc02      	bgt.n	8010990 <_dtoa_r+0xa78>
 801098a:	d1e0      	bne.n	801094e <_dtoa_r+0xa36>
 801098c:	07da      	lsls	r2, r3, #31
 801098e:	d5de      	bpl.n	801094e <_dtoa_r+0xa36>
 8010990:	2b39      	cmp	r3, #57	@ 0x39
 8010992:	d1da      	bne.n	801094a <_dtoa_r+0xa32>
 8010994:	2339      	movs	r3, #57	@ 0x39
 8010996:	f88b 3000 	strb.w	r3, [fp]
 801099a:	4633      	mov	r3, r6
 801099c:	461e      	mov	r6, r3
 801099e:	3b01      	subs	r3, #1
 80109a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80109a4:	2a39      	cmp	r2, #57	@ 0x39
 80109a6:	d04e      	beq.n	8010a46 <_dtoa_r+0xb2e>
 80109a8:	3201      	adds	r2, #1
 80109aa:	701a      	strb	r2, [r3, #0]
 80109ac:	e501      	b.n	80103b2 <_dtoa_r+0x49a>
 80109ae:	2a00      	cmp	r2, #0
 80109b0:	dd03      	ble.n	80109ba <_dtoa_r+0xaa2>
 80109b2:	2b39      	cmp	r3, #57	@ 0x39
 80109b4:	d0ee      	beq.n	8010994 <_dtoa_r+0xa7c>
 80109b6:	3301      	adds	r3, #1
 80109b8:	e7c9      	b.n	801094e <_dtoa_r+0xa36>
 80109ba:	9a00      	ldr	r2, [sp, #0]
 80109bc:	9908      	ldr	r1, [sp, #32]
 80109be:	f802 3c01 	strb.w	r3, [r2, #-1]
 80109c2:	428a      	cmp	r2, r1
 80109c4:	d028      	beq.n	8010a18 <_dtoa_r+0xb00>
 80109c6:	9902      	ldr	r1, [sp, #8]
 80109c8:	2300      	movs	r3, #0
 80109ca:	220a      	movs	r2, #10
 80109cc:	4648      	mov	r0, r9
 80109ce:	f000 fcd1 	bl	8011374 <__multadd>
 80109d2:	42af      	cmp	r7, r5
 80109d4:	9002      	str	r0, [sp, #8]
 80109d6:	f04f 0300 	mov.w	r3, #0
 80109da:	f04f 020a 	mov.w	r2, #10
 80109de:	4639      	mov	r1, r7
 80109e0:	4648      	mov	r0, r9
 80109e2:	d107      	bne.n	80109f4 <_dtoa_r+0xadc>
 80109e4:	f000 fcc6 	bl	8011374 <__multadd>
 80109e8:	4607      	mov	r7, r0
 80109ea:	4605      	mov	r5, r0
 80109ec:	9b00      	ldr	r3, [sp, #0]
 80109ee:	3301      	adds	r3, #1
 80109f0:	9300      	str	r3, [sp, #0]
 80109f2:	e777      	b.n	80108e4 <_dtoa_r+0x9cc>
 80109f4:	f000 fcbe 	bl	8011374 <__multadd>
 80109f8:	4629      	mov	r1, r5
 80109fa:	4607      	mov	r7, r0
 80109fc:	2300      	movs	r3, #0
 80109fe:	220a      	movs	r2, #10
 8010a00:	4648      	mov	r0, r9
 8010a02:	f000 fcb7 	bl	8011374 <__multadd>
 8010a06:	4605      	mov	r5, r0
 8010a08:	e7f0      	b.n	80109ec <_dtoa_r+0xad4>
 8010a0a:	f1bb 0f00 	cmp.w	fp, #0
 8010a0e:	bfcc      	ite	gt
 8010a10:	465e      	movgt	r6, fp
 8010a12:	2601      	movle	r6, #1
 8010a14:	4456      	add	r6, sl
 8010a16:	2700      	movs	r7, #0
 8010a18:	9902      	ldr	r1, [sp, #8]
 8010a1a:	9300      	str	r3, [sp, #0]
 8010a1c:	2201      	movs	r2, #1
 8010a1e:	4648      	mov	r0, r9
 8010a20:	f000 fe4c 	bl	80116bc <__lshift>
 8010a24:	4621      	mov	r1, r4
 8010a26:	9002      	str	r0, [sp, #8]
 8010a28:	f000 feb4 	bl	8011794 <__mcmp>
 8010a2c:	2800      	cmp	r0, #0
 8010a2e:	dcb4      	bgt.n	801099a <_dtoa_r+0xa82>
 8010a30:	d102      	bne.n	8010a38 <_dtoa_r+0xb20>
 8010a32:	9b00      	ldr	r3, [sp, #0]
 8010a34:	07db      	lsls	r3, r3, #31
 8010a36:	d4b0      	bmi.n	801099a <_dtoa_r+0xa82>
 8010a38:	4633      	mov	r3, r6
 8010a3a:	461e      	mov	r6, r3
 8010a3c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010a40:	2a30      	cmp	r2, #48	@ 0x30
 8010a42:	d0fa      	beq.n	8010a3a <_dtoa_r+0xb22>
 8010a44:	e4b5      	b.n	80103b2 <_dtoa_r+0x49a>
 8010a46:	459a      	cmp	sl, r3
 8010a48:	d1a8      	bne.n	801099c <_dtoa_r+0xa84>
 8010a4a:	2331      	movs	r3, #49	@ 0x31
 8010a4c:	f108 0801 	add.w	r8, r8, #1
 8010a50:	f88a 3000 	strb.w	r3, [sl]
 8010a54:	e4ad      	b.n	80103b2 <_dtoa_r+0x49a>
 8010a56:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010a58:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8010ab4 <_dtoa_r+0xb9c>
 8010a5c:	b11b      	cbz	r3, 8010a66 <_dtoa_r+0xb4e>
 8010a5e:	f10a 0308 	add.w	r3, sl, #8
 8010a62:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010a64:	6013      	str	r3, [r2, #0]
 8010a66:	4650      	mov	r0, sl
 8010a68:	b017      	add	sp, #92	@ 0x5c
 8010a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a6e:	9b07      	ldr	r3, [sp, #28]
 8010a70:	2b01      	cmp	r3, #1
 8010a72:	f77f ae2e 	ble.w	80106d2 <_dtoa_r+0x7ba>
 8010a76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010a78:	9308      	str	r3, [sp, #32]
 8010a7a:	2001      	movs	r0, #1
 8010a7c:	e64d      	b.n	801071a <_dtoa_r+0x802>
 8010a7e:	f1bb 0f00 	cmp.w	fp, #0
 8010a82:	f77f aed9 	ble.w	8010838 <_dtoa_r+0x920>
 8010a86:	4656      	mov	r6, sl
 8010a88:	9802      	ldr	r0, [sp, #8]
 8010a8a:	4621      	mov	r1, r4
 8010a8c:	f7ff f9bc 	bl	800fe08 <quorem>
 8010a90:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8010a94:	f806 3b01 	strb.w	r3, [r6], #1
 8010a98:	eba6 020a 	sub.w	r2, r6, sl
 8010a9c:	4593      	cmp	fp, r2
 8010a9e:	ddb4      	ble.n	8010a0a <_dtoa_r+0xaf2>
 8010aa0:	9902      	ldr	r1, [sp, #8]
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	220a      	movs	r2, #10
 8010aa6:	4648      	mov	r0, r9
 8010aa8:	f000 fc64 	bl	8011374 <__multadd>
 8010aac:	9002      	str	r0, [sp, #8]
 8010aae:	e7eb      	b.n	8010a88 <_dtoa_r+0xb70>
 8010ab0:	08013c84 	.word	0x08013c84
 8010ab4:	08013c08 	.word	0x08013c08

08010ab8 <__ssputs_r>:
 8010ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010abc:	688e      	ldr	r6, [r1, #8]
 8010abe:	461f      	mov	r7, r3
 8010ac0:	42be      	cmp	r6, r7
 8010ac2:	680b      	ldr	r3, [r1, #0]
 8010ac4:	4682      	mov	sl, r0
 8010ac6:	460c      	mov	r4, r1
 8010ac8:	4690      	mov	r8, r2
 8010aca:	d82d      	bhi.n	8010b28 <__ssputs_r+0x70>
 8010acc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010ad0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010ad4:	d026      	beq.n	8010b24 <__ssputs_r+0x6c>
 8010ad6:	6965      	ldr	r5, [r4, #20]
 8010ad8:	6909      	ldr	r1, [r1, #16]
 8010ada:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010ade:	eba3 0901 	sub.w	r9, r3, r1
 8010ae2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010ae6:	1c7b      	adds	r3, r7, #1
 8010ae8:	444b      	add	r3, r9
 8010aea:	106d      	asrs	r5, r5, #1
 8010aec:	429d      	cmp	r5, r3
 8010aee:	bf38      	it	cc
 8010af0:	461d      	movcc	r5, r3
 8010af2:	0553      	lsls	r3, r2, #21
 8010af4:	d527      	bpl.n	8010b46 <__ssputs_r+0x8e>
 8010af6:	4629      	mov	r1, r5
 8010af8:	f000 faa2 	bl	8011040 <_malloc_r>
 8010afc:	4606      	mov	r6, r0
 8010afe:	b360      	cbz	r0, 8010b5a <__ssputs_r+0xa2>
 8010b00:	6921      	ldr	r1, [r4, #16]
 8010b02:	464a      	mov	r2, r9
 8010b04:	f001 f948 	bl	8011d98 <memcpy>
 8010b08:	89a3      	ldrh	r3, [r4, #12]
 8010b0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010b0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010b12:	81a3      	strh	r3, [r4, #12]
 8010b14:	6126      	str	r6, [r4, #16]
 8010b16:	6165      	str	r5, [r4, #20]
 8010b18:	444e      	add	r6, r9
 8010b1a:	eba5 0509 	sub.w	r5, r5, r9
 8010b1e:	6026      	str	r6, [r4, #0]
 8010b20:	60a5      	str	r5, [r4, #8]
 8010b22:	463e      	mov	r6, r7
 8010b24:	42be      	cmp	r6, r7
 8010b26:	d900      	bls.n	8010b2a <__ssputs_r+0x72>
 8010b28:	463e      	mov	r6, r7
 8010b2a:	6820      	ldr	r0, [r4, #0]
 8010b2c:	4632      	mov	r2, r6
 8010b2e:	4641      	mov	r1, r8
 8010b30:	f001 f8a0 	bl	8011c74 <memmove>
 8010b34:	68a3      	ldr	r3, [r4, #8]
 8010b36:	1b9b      	subs	r3, r3, r6
 8010b38:	60a3      	str	r3, [r4, #8]
 8010b3a:	6823      	ldr	r3, [r4, #0]
 8010b3c:	4433      	add	r3, r6
 8010b3e:	6023      	str	r3, [r4, #0]
 8010b40:	2000      	movs	r0, #0
 8010b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b46:	462a      	mov	r2, r5
 8010b48:	f000 ff6f 	bl	8011a2a <_realloc_r>
 8010b4c:	4606      	mov	r6, r0
 8010b4e:	2800      	cmp	r0, #0
 8010b50:	d1e0      	bne.n	8010b14 <__ssputs_r+0x5c>
 8010b52:	6921      	ldr	r1, [r4, #16]
 8010b54:	4650      	mov	r0, sl
 8010b56:	f001 f95f 	bl	8011e18 <_free_r>
 8010b5a:	230c      	movs	r3, #12
 8010b5c:	f8ca 3000 	str.w	r3, [sl]
 8010b60:	89a3      	ldrh	r3, [r4, #12]
 8010b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b66:	81a3      	strh	r3, [r4, #12]
 8010b68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010b6c:	e7e9      	b.n	8010b42 <__ssputs_r+0x8a>
	...

08010b70 <_svfiprintf_r>:
 8010b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b74:	4698      	mov	r8, r3
 8010b76:	898b      	ldrh	r3, [r1, #12]
 8010b78:	061b      	lsls	r3, r3, #24
 8010b7a:	b09d      	sub	sp, #116	@ 0x74
 8010b7c:	4607      	mov	r7, r0
 8010b7e:	460d      	mov	r5, r1
 8010b80:	4614      	mov	r4, r2
 8010b82:	d510      	bpl.n	8010ba6 <_svfiprintf_r+0x36>
 8010b84:	690b      	ldr	r3, [r1, #16]
 8010b86:	b973      	cbnz	r3, 8010ba6 <_svfiprintf_r+0x36>
 8010b88:	2140      	movs	r1, #64	@ 0x40
 8010b8a:	f000 fa59 	bl	8011040 <_malloc_r>
 8010b8e:	6028      	str	r0, [r5, #0]
 8010b90:	6128      	str	r0, [r5, #16]
 8010b92:	b930      	cbnz	r0, 8010ba2 <_svfiprintf_r+0x32>
 8010b94:	230c      	movs	r3, #12
 8010b96:	603b      	str	r3, [r7, #0]
 8010b98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010b9c:	b01d      	add	sp, #116	@ 0x74
 8010b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ba2:	2340      	movs	r3, #64	@ 0x40
 8010ba4:	616b      	str	r3, [r5, #20]
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	9309      	str	r3, [sp, #36]	@ 0x24
 8010baa:	2320      	movs	r3, #32
 8010bac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010bb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8010bb4:	2330      	movs	r3, #48	@ 0x30
 8010bb6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010d54 <_svfiprintf_r+0x1e4>
 8010bba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010bbe:	f04f 0901 	mov.w	r9, #1
 8010bc2:	4623      	mov	r3, r4
 8010bc4:	469a      	mov	sl, r3
 8010bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010bca:	b10a      	cbz	r2, 8010bd0 <_svfiprintf_r+0x60>
 8010bcc:	2a25      	cmp	r2, #37	@ 0x25
 8010bce:	d1f9      	bne.n	8010bc4 <_svfiprintf_r+0x54>
 8010bd0:	ebba 0b04 	subs.w	fp, sl, r4
 8010bd4:	d00b      	beq.n	8010bee <_svfiprintf_r+0x7e>
 8010bd6:	465b      	mov	r3, fp
 8010bd8:	4622      	mov	r2, r4
 8010bda:	4629      	mov	r1, r5
 8010bdc:	4638      	mov	r0, r7
 8010bde:	f7ff ff6b 	bl	8010ab8 <__ssputs_r>
 8010be2:	3001      	adds	r0, #1
 8010be4:	f000 80a7 	beq.w	8010d36 <_svfiprintf_r+0x1c6>
 8010be8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010bea:	445a      	add	r2, fp
 8010bec:	9209      	str	r2, [sp, #36]	@ 0x24
 8010bee:	f89a 3000 	ldrb.w	r3, [sl]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	f000 809f 	beq.w	8010d36 <_svfiprintf_r+0x1c6>
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c02:	f10a 0a01 	add.w	sl, sl, #1
 8010c06:	9304      	str	r3, [sp, #16]
 8010c08:	9307      	str	r3, [sp, #28]
 8010c0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010c0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8010c10:	4654      	mov	r4, sl
 8010c12:	2205      	movs	r2, #5
 8010c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c18:	484e      	ldr	r0, [pc, #312]	@ (8010d54 <_svfiprintf_r+0x1e4>)
 8010c1a:	f7ef fad9 	bl	80001d0 <memchr>
 8010c1e:	9a04      	ldr	r2, [sp, #16]
 8010c20:	b9d8      	cbnz	r0, 8010c5a <_svfiprintf_r+0xea>
 8010c22:	06d0      	lsls	r0, r2, #27
 8010c24:	bf44      	itt	mi
 8010c26:	2320      	movmi	r3, #32
 8010c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010c2c:	0711      	lsls	r1, r2, #28
 8010c2e:	bf44      	itt	mi
 8010c30:	232b      	movmi	r3, #43	@ 0x2b
 8010c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010c36:	f89a 3000 	ldrb.w	r3, [sl]
 8010c3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8010c3c:	d015      	beq.n	8010c6a <_svfiprintf_r+0xfa>
 8010c3e:	9a07      	ldr	r2, [sp, #28]
 8010c40:	4654      	mov	r4, sl
 8010c42:	2000      	movs	r0, #0
 8010c44:	f04f 0c0a 	mov.w	ip, #10
 8010c48:	4621      	mov	r1, r4
 8010c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010c4e:	3b30      	subs	r3, #48	@ 0x30
 8010c50:	2b09      	cmp	r3, #9
 8010c52:	d94b      	bls.n	8010cec <_svfiprintf_r+0x17c>
 8010c54:	b1b0      	cbz	r0, 8010c84 <_svfiprintf_r+0x114>
 8010c56:	9207      	str	r2, [sp, #28]
 8010c58:	e014      	b.n	8010c84 <_svfiprintf_r+0x114>
 8010c5a:	eba0 0308 	sub.w	r3, r0, r8
 8010c5e:	fa09 f303 	lsl.w	r3, r9, r3
 8010c62:	4313      	orrs	r3, r2
 8010c64:	9304      	str	r3, [sp, #16]
 8010c66:	46a2      	mov	sl, r4
 8010c68:	e7d2      	b.n	8010c10 <_svfiprintf_r+0xa0>
 8010c6a:	9b03      	ldr	r3, [sp, #12]
 8010c6c:	1d19      	adds	r1, r3, #4
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	9103      	str	r1, [sp, #12]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	bfbb      	ittet	lt
 8010c76:	425b      	neglt	r3, r3
 8010c78:	f042 0202 	orrlt.w	r2, r2, #2
 8010c7c:	9307      	strge	r3, [sp, #28]
 8010c7e:	9307      	strlt	r3, [sp, #28]
 8010c80:	bfb8      	it	lt
 8010c82:	9204      	strlt	r2, [sp, #16]
 8010c84:	7823      	ldrb	r3, [r4, #0]
 8010c86:	2b2e      	cmp	r3, #46	@ 0x2e
 8010c88:	d10a      	bne.n	8010ca0 <_svfiprintf_r+0x130>
 8010c8a:	7863      	ldrb	r3, [r4, #1]
 8010c8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8010c8e:	d132      	bne.n	8010cf6 <_svfiprintf_r+0x186>
 8010c90:	9b03      	ldr	r3, [sp, #12]
 8010c92:	1d1a      	adds	r2, r3, #4
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	9203      	str	r2, [sp, #12]
 8010c98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010c9c:	3402      	adds	r4, #2
 8010c9e:	9305      	str	r3, [sp, #20]
 8010ca0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010d64 <_svfiprintf_r+0x1f4>
 8010ca4:	7821      	ldrb	r1, [r4, #0]
 8010ca6:	2203      	movs	r2, #3
 8010ca8:	4650      	mov	r0, sl
 8010caa:	f7ef fa91 	bl	80001d0 <memchr>
 8010cae:	b138      	cbz	r0, 8010cc0 <_svfiprintf_r+0x150>
 8010cb0:	9b04      	ldr	r3, [sp, #16]
 8010cb2:	eba0 000a 	sub.w	r0, r0, sl
 8010cb6:	2240      	movs	r2, #64	@ 0x40
 8010cb8:	4082      	lsls	r2, r0
 8010cba:	4313      	orrs	r3, r2
 8010cbc:	3401      	adds	r4, #1
 8010cbe:	9304      	str	r3, [sp, #16]
 8010cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cc4:	4824      	ldr	r0, [pc, #144]	@ (8010d58 <_svfiprintf_r+0x1e8>)
 8010cc6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010cca:	2206      	movs	r2, #6
 8010ccc:	f7ef fa80 	bl	80001d0 <memchr>
 8010cd0:	2800      	cmp	r0, #0
 8010cd2:	d036      	beq.n	8010d42 <_svfiprintf_r+0x1d2>
 8010cd4:	4b21      	ldr	r3, [pc, #132]	@ (8010d5c <_svfiprintf_r+0x1ec>)
 8010cd6:	bb1b      	cbnz	r3, 8010d20 <_svfiprintf_r+0x1b0>
 8010cd8:	9b03      	ldr	r3, [sp, #12]
 8010cda:	3307      	adds	r3, #7
 8010cdc:	f023 0307 	bic.w	r3, r3, #7
 8010ce0:	3308      	adds	r3, #8
 8010ce2:	9303      	str	r3, [sp, #12]
 8010ce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ce6:	4433      	add	r3, r6
 8010ce8:	9309      	str	r3, [sp, #36]	@ 0x24
 8010cea:	e76a      	b.n	8010bc2 <_svfiprintf_r+0x52>
 8010cec:	fb0c 3202 	mla	r2, ip, r2, r3
 8010cf0:	460c      	mov	r4, r1
 8010cf2:	2001      	movs	r0, #1
 8010cf4:	e7a8      	b.n	8010c48 <_svfiprintf_r+0xd8>
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	3401      	adds	r4, #1
 8010cfa:	9305      	str	r3, [sp, #20]
 8010cfc:	4619      	mov	r1, r3
 8010cfe:	f04f 0c0a 	mov.w	ip, #10
 8010d02:	4620      	mov	r0, r4
 8010d04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d08:	3a30      	subs	r2, #48	@ 0x30
 8010d0a:	2a09      	cmp	r2, #9
 8010d0c:	d903      	bls.n	8010d16 <_svfiprintf_r+0x1a6>
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d0c6      	beq.n	8010ca0 <_svfiprintf_r+0x130>
 8010d12:	9105      	str	r1, [sp, #20]
 8010d14:	e7c4      	b.n	8010ca0 <_svfiprintf_r+0x130>
 8010d16:	fb0c 2101 	mla	r1, ip, r1, r2
 8010d1a:	4604      	mov	r4, r0
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	e7f0      	b.n	8010d02 <_svfiprintf_r+0x192>
 8010d20:	ab03      	add	r3, sp, #12
 8010d22:	9300      	str	r3, [sp, #0]
 8010d24:	462a      	mov	r2, r5
 8010d26:	4b0e      	ldr	r3, [pc, #56]	@ (8010d60 <_svfiprintf_r+0x1f0>)
 8010d28:	a904      	add	r1, sp, #16
 8010d2a:	4638      	mov	r0, r7
 8010d2c:	f7fe fad8 	bl	800f2e0 <_printf_float>
 8010d30:	1c42      	adds	r2, r0, #1
 8010d32:	4606      	mov	r6, r0
 8010d34:	d1d6      	bne.n	8010ce4 <_svfiprintf_r+0x174>
 8010d36:	89ab      	ldrh	r3, [r5, #12]
 8010d38:	065b      	lsls	r3, r3, #25
 8010d3a:	f53f af2d 	bmi.w	8010b98 <_svfiprintf_r+0x28>
 8010d3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010d40:	e72c      	b.n	8010b9c <_svfiprintf_r+0x2c>
 8010d42:	ab03      	add	r3, sp, #12
 8010d44:	9300      	str	r3, [sp, #0]
 8010d46:	462a      	mov	r2, r5
 8010d48:	4b05      	ldr	r3, [pc, #20]	@ (8010d60 <_svfiprintf_r+0x1f0>)
 8010d4a:	a904      	add	r1, sp, #16
 8010d4c:	4638      	mov	r0, r7
 8010d4e:	f7fe fd5f 	bl	800f810 <_printf_i>
 8010d52:	e7ed      	b.n	8010d30 <_svfiprintf_r+0x1c0>
 8010d54:	08013c95 	.word	0x08013c95
 8010d58:	08013c9f 	.word	0x08013c9f
 8010d5c:	0800f2e1 	.word	0x0800f2e1
 8010d60:	08010ab9 	.word	0x08010ab9
 8010d64:	08013c9b 	.word	0x08013c9b

08010d68 <__sfputc_r>:
 8010d68:	6893      	ldr	r3, [r2, #8]
 8010d6a:	3b01      	subs	r3, #1
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	b410      	push	{r4}
 8010d70:	6093      	str	r3, [r2, #8]
 8010d72:	da08      	bge.n	8010d86 <__sfputc_r+0x1e>
 8010d74:	6994      	ldr	r4, [r2, #24]
 8010d76:	42a3      	cmp	r3, r4
 8010d78:	db01      	blt.n	8010d7e <__sfputc_r+0x16>
 8010d7a:	290a      	cmp	r1, #10
 8010d7c:	d103      	bne.n	8010d86 <__sfputc_r+0x1e>
 8010d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d82:	f000 be80 	b.w	8011a86 <__swbuf_r>
 8010d86:	6813      	ldr	r3, [r2, #0]
 8010d88:	1c58      	adds	r0, r3, #1
 8010d8a:	6010      	str	r0, [r2, #0]
 8010d8c:	7019      	strb	r1, [r3, #0]
 8010d8e:	4608      	mov	r0, r1
 8010d90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d94:	4770      	bx	lr

08010d96 <__sfputs_r>:
 8010d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d98:	4606      	mov	r6, r0
 8010d9a:	460f      	mov	r7, r1
 8010d9c:	4614      	mov	r4, r2
 8010d9e:	18d5      	adds	r5, r2, r3
 8010da0:	42ac      	cmp	r4, r5
 8010da2:	d101      	bne.n	8010da8 <__sfputs_r+0x12>
 8010da4:	2000      	movs	r0, #0
 8010da6:	e007      	b.n	8010db8 <__sfputs_r+0x22>
 8010da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dac:	463a      	mov	r2, r7
 8010dae:	4630      	mov	r0, r6
 8010db0:	f7ff ffda 	bl	8010d68 <__sfputc_r>
 8010db4:	1c43      	adds	r3, r0, #1
 8010db6:	d1f3      	bne.n	8010da0 <__sfputs_r+0xa>
 8010db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010dbc <_vfiprintf_r>:
 8010dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dc0:	460d      	mov	r5, r1
 8010dc2:	b09d      	sub	sp, #116	@ 0x74
 8010dc4:	4614      	mov	r4, r2
 8010dc6:	4698      	mov	r8, r3
 8010dc8:	4606      	mov	r6, r0
 8010dca:	b118      	cbz	r0, 8010dd4 <_vfiprintf_r+0x18>
 8010dcc:	6a03      	ldr	r3, [r0, #32]
 8010dce:	b90b      	cbnz	r3, 8010dd4 <_vfiprintf_r+0x18>
 8010dd0:	f7fe fefe 	bl	800fbd0 <__sinit>
 8010dd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010dd6:	07d9      	lsls	r1, r3, #31
 8010dd8:	d405      	bmi.n	8010de6 <_vfiprintf_r+0x2a>
 8010dda:	89ab      	ldrh	r3, [r5, #12]
 8010ddc:	059a      	lsls	r2, r3, #22
 8010dde:	d402      	bmi.n	8010de6 <_vfiprintf_r+0x2a>
 8010de0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010de2:	f7ff f80a 	bl	800fdfa <__retarget_lock_acquire_recursive>
 8010de6:	89ab      	ldrh	r3, [r5, #12]
 8010de8:	071b      	lsls	r3, r3, #28
 8010dea:	d501      	bpl.n	8010df0 <_vfiprintf_r+0x34>
 8010dec:	692b      	ldr	r3, [r5, #16]
 8010dee:	b99b      	cbnz	r3, 8010e18 <_vfiprintf_r+0x5c>
 8010df0:	4629      	mov	r1, r5
 8010df2:	4630      	mov	r0, r6
 8010df4:	f000 fe86 	bl	8011b04 <__swsetup_r>
 8010df8:	b170      	cbz	r0, 8010e18 <_vfiprintf_r+0x5c>
 8010dfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010dfc:	07dc      	lsls	r4, r3, #31
 8010dfe:	d504      	bpl.n	8010e0a <_vfiprintf_r+0x4e>
 8010e00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010e04:	b01d      	add	sp, #116	@ 0x74
 8010e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e0a:	89ab      	ldrh	r3, [r5, #12]
 8010e0c:	0598      	lsls	r0, r3, #22
 8010e0e:	d4f7      	bmi.n	8010e00 <_vfiprintf_r+0x44>
 8010e10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010e12:	f7fe fff3 	bl	800fdfc <__retarget_lock_release_recursive>
 8010e16:	e7f3      	b.n	8010e00 <_vfiprintf_r+0x44>
 8010e18:	2300      	movs	r3, #0
 8010e1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e1c:	2320      	movs	r3, #32
 8010e1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010e22:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e26:	2330      	movs	r3, #48	@ 0x30
 8010e28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010fd8 <_vfiprintf_r+0x21c>
 8010e2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010e30:	f04f 0901 	mov.w	r9, #1
 8010e34:	4623      	mov	r3, r4
 8010e36:	469a      	mov	sl, r3
 8010e38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e3c:	b10a      	cbz	r2, 8010e42 <_vfiprintf_r+0x86>
 8010e3e:	2a25      	cmp	r2, #37	@ 0x25
 8010e40:	d1f9      	bne.n	8010e36 <_vfiprintf_r+0x7a>
 8010e42:	ebba 0b04 	subs.w	fp, sl, r4
 8010e46:	d00b      	beq.n	8010e60 <_vfiprintf_r+0xa4>
 8010e48:	465b      	mov	r3, fp
 8010e4a:	4622      	mov	r2, r4
 8010e4c:	4629      	mov	r1, r5
 8010e4e:	4630      	mov	r0, r6
 8010e50:	f7ff ffa1 	bl	8010d96 <__sfputs_r>
 8010e54:	3001      	adds	r0, #1
 8010e56:	f000 80a7 	beq.w	8010fa8 <_vfiprintf_r+0x1ec>
 8010e5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e5c:	445a      	add	r2, fp
 8010e5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010e60:	f89a 3000 	ldrb.w	r3, [sl]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	f000 809f 	beq.w	8010fa8 <_vfiprintf_r+0x1ec>
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010e70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e74:	f10a 0a01 	add.w	sl, sl, #1
 8010e78:	9304      	str	r3, [sp, #16]
 8010e7a:	9307      	str	r3, [sp, #28]
 8010e7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010e80:	931a      	str	r3, [sp, #104]	@ 0x68
 8010e82:	4654      	mov	r4, sl
 8010e84:	2205      	movs	r2, #5
 8010e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e8a:	4853      	ldr	r0, [pc, #332]	@ (8010fd8 <_vfiprintf_r+0x21c>)
 8010e8c:	f7ef f9a0 	bl	80001d0 <memchr>
 8010e90:	9a04      	ldr	r2, [sp, #16]
 8010e92:	b9d8      	cbnz	r0, 8010ecc <_vfiprintf_r+0x110>
 8010e94:	06d1      	lsls	r1, r2, #27
 8010e96:	bf44      	itt	mi
 8010e98:	2320      	movmi	r3, #32
 8010e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e9e:	0713      	lsls	r3, r2, #28
 8010ea0:	bf44      	itt	mi
 8010ea2:	232b      	movmi	r3, #43	@ 0x2b
 8010ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8010eac:	2b2a      	cmp	r3, #42	@ 0x2a
 8010eae:	d015      	beq.n	8010edc <_vfiprintf_r+0x120>
 8010eb0:	9a07      	ldr	r2, [sp, #28]
 8010eb2:	4654      	mov	r4, sl
 8010eb4:	2000      	movs	r0, #0
 8010eb6:	f04f 0c0a 	mov.w	ip, #10
 8010eba:	4621      	mov	r1, r4
 8010ebc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ec0:	3b30      	subs	r3, #48	@ 0x30
 8010ec2:	2b09      	cmp	r3, #9
 8010ec4:	d94b      	bls.n	8010f5e <_vfiprintf_r+0x1a2>
 8010ec6:	b1b0      	cbz	r0, 8010ef6 <_vfiprintf_r+0x13a>
 8010ec8:	9207      	str	r2, [sp, #28]
 8010eca:	e014      	b.n	8010ef6 <_vfiprintf_r+0x13a>
 8010ecc:	eba0 0308 	sub.w	r3, r0, r8
 8010ed0:	fa09 f303 	lsl.w	r3, r9, r3
 8010ed4:	4313      	orrs	r3, r2
 8010ed6:	9304      	str	r3, [sp, #16]
 8010ed8:	46a2      	mov	sl, r4
 8010eda:	e7d2      	b.n	8010e82 <_vfiprintf_r+0xc6>
 8010edc:	9b03      	ldr	r3, [sp, #12]
 8010ede:	1d19      	adds	r1, r3, #4
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	9103      	str	r1, [sp, #12]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	bfbb      	ittet	lt
 8010ee8:	425b      	neglt	r3, r3
 8010eea:	f042 0202 	orrlt.w	r2, r2, #2
 8010eee:	9307      	strge	r3, [sp, #28]
 8010ef0:	9307      	strlt	r3, [sp, #28]
 8010ef2:	bfb8      	it	lt
 8010ef4:	9204      	strlt	r2, [sp, #16]
 8010ef6:	7823      	ldrb	r3, [r4, #0]
 8010ef8:	2b2e      	cmp	r3, #46	@ 0x2e
 8010efa:	d10a      	bne.n	8010f12 <_vfiprintf_r+0x156>
 8010efc:	7863      	ldrb	r3, [r4, #1]
 8010efe:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f00:	d132      	bne.n	8010f68 <_vfiprintf_r+0x1ac>
 8010f02:	9b03      	ldr	r3, [sp, #12]
 8010f04:	1d1a      	adds	r2, r3, #4
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	9203      	str	r2, [sp, #12]
 8010f0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010f0e:	3402      	adds	r4, #2
 8010f10:	9305      	str	r3, [sp, #20]
 8010f12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010fe8 <_vfiprintf_r+0x22c>
 8010f16:	7821      	ldrb	r1, [r4, #0]
 8010f18:	2203      	movs	r2, #3
 8010f1a:	4650      	mov	r0, sl
 8010f1c:	f7ef f958 	bl	80001d0 <memchr>
 8010f20:	b138      	cbz	r0, 8010f32 <_vfiprintf_r+0x176>
 8010f22:	9b04      	ldr	r3, [sp, #16]
 8010f24:	eba0 000a 	sub.w	r0, r0, sl
 8010f28:	2240      	movs	r2, #64	@ 0x40
 8010f2a:	4082      	lsls	r2, r0
 8010f2c:	4313      	orrs	r3, r2
 8010f2e:	3401      	adds	r4, #1
 8010f30:	9304      	str	r3, [sp, #16]
 8010f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f36:	4829      	ldr	r0, [pc, #164]	@ (8010fdc <_vfiprintf_r+0x220>)
 8010f38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010f3c:	2206      	movs	r2, #6
 8010f3e:	f7ef f947 	bl	80001d0 <memchr>
 8010f42:	2800      	cmp	r0, #0
 8010f44:	d03f      	beq.n	8010fc6 <_vfiprintf_r+0x20a>
 8010f46:	4b26      	ldr	r3, [pc, #152]	@ (8010fe0 <_vfiprintf_r+0x224>)
 8010f48:	bb1b      	cbnz	r3, 8010f92 <_vfiprintf_r+0x1d6>
 8010f4a:	9b03      	ldr	r3, [sp, #12]
 8010f4c:	3307      	adds	r3, #7
 8010f4e:	f023 0307 	bic.w	r3, r3, #7
 8010f52:	3308      	adds	r3, #8
 8010f54:	9303      	str	r3, [sp, #12]
 8010f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f58:	443b      	add	r3, r7
 8010f5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f5c:	e76a      	b.n	8010e34 <_vfiprintf_r+0x78>
 8010f5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f62:	460c      	mov	r4, r1
 8010f64:	2001      	movs	r0, #1
 8010f66:	e7a8      	b.n	8010eba <_vfiprintf_r+0xfe>
 8010f68:	2300      	movs	r3, #0
 8010f6a:	3401      	adds	r4, #1
 8010f6c:	9305      	str	r3, [sp, #20]
 8010f6e:	4619      	mov	r1, r3
 8010f70:	f04f 0c0a 	mov.w	ip, #10
 8010f74:	4620      	mov	r0, r4
 8010f76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f7a:	3a30      	subs	r2, #48	@ 0x30
 8010f7c:	2a09      	cmp	r2, #9
 8010f7e:	d903      	bls.n	8010f88 <_vfiprintf_r+0x1cc>
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d0c6      	beq.n	8010f12 <_vfiprintf_r+0x156>
 8010f84:	9105      	str	r1, [sp, #20]
 8010f86:	e7c4      	b.n	8010f12 <_vfiprintf_r+0x156>
 8010f88:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f8c:	4604      	mov	r4, r0
 8010f8e:	2301      	movs	r3, #1
 8010f90:	e7f0      	b.n	8010f74 <_vfiprintf_r+0x1b8>
 8010f92:	ab03      	add	r3, sp, #12
 8010f94:	9300      	str	r3, [sp, #0]
 8010f96:	462a      	mov	r2, r5
 8010f98:	4b12      	ldr	r3, [pc, #72]	@ (8010fe4 <_vfiprintf_r+0x228>)
 8010f9a:	a904      	add	r1, sp, #16
 8010f9c:	4630      	mov	r0, r6
 8010f9e:	f7fe f99f 	bl	800f2e0 <_printf_float>
 8010fa2:	4607      	mov	r7, r0
 8010fa4:	1c78      	adds	r0, r7, #1
 8010fa6:	d1d6      	bne.n	8010f56 <_vfiprintf_r+0x19a>
 8010fa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010faa:	07d9      	lsls	r1, r3, #31
 8010fac:	d405      	bmi.n	8010fba <_vfiprintf_r+0x1fe>
 8010fae:	89ab      	ldrh	r3, [r5, #12]
 8010fb0:	059a      	lsls	r2, r3, #22
 8010fb2:	d402      	bmi.n	8010fba <_vfiprintf_r+0x1fe>
 8010fb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010fb6:	f7fe ff21 	bl	800fdfc <__retarget_lock_release_recursive>
 8010fba:	89ab      	ldrh	r3, [r5, #12]
 8010fbc:	065b      	lsls	r3, r3, #25
 8010fbe:	f53f af1f 	bmi.w	8010e00 <_vfiprintf_r+0x44>
 8010fc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010fc4:	e71e      	b.n	8010e04 <_vfiprintf_r+0x48>
 8010fc6:	ab03      	add	r3, sp, #12
 8010fc8:	9300      	str	r3, [sp, #0]
 8010fca:	462a      	mov	r2, r5
 8010fcc:	4b05      	ldr	r3, [pc, #20]	@ (8010fe4 <_vfiprintf_r+0x228>)
 8010fce:	a904      	add	r1, sp, #16
 8010fd0:	4630      	mov	r0, r6
 8010fd2:	f7fe fc1d 	bl	800f810 <_printf_i>
 8010fd6:	e7e4      	b.n	8010fa2 <_vfiprintf_r+0x1e6>
 8010fd8:	08013c95 	.word	0x08013c95
 8010fdc:	08013c9f 	.word	0x08013c9f
 8010fe0:	0800f2e1 	.word	0x0800f2e1
 8010fe4:	08010d97 	.word	0x08010d97
 8010fe8:	08013c9b 	.word	0x08013c9b

08010fec <malloc>:
 8010fec:	4b02      	ldr	r3, [pc, #8]	@ (8010ff8 <malloc+0xc>)
 8010fee:	4601      	mov	r1, r0
 8010ff0:	6818      	ldr	r0, [r3, #0]
 8010ff2:	f000 b825 	b.w	8011040 <_malloc_r>
 8010ff6:	bf00      	nop
 8010ff8:	200000a4 	.word	0x200000a4

08010ffc <sbrk_aligned>:
 8010ffc:	b570      	push	{r4, r5, r6, lr}
 8010ffe:	4e0f      	ldr	r6, [pc, #60]	@ (801103c <sbrk_aligned+0x40>)
 8011000:	460c      	mov	r4, r1
 8011002:	6831      	ldr	r1, [r6, #0]
 8011004:	4605      	mov	r5, r0
 8011006:	b911      	cbnz	r1, 801100e <sbrk_aligned+0x12>
 8011008:	f000 fe82 	bl	8011d10 <_sbrk_r>
 801100c:	6030      	str	r0, [r6, #0]
 801100e:	4621      	mov	r1, r4
 8011010:	4628      	mov	r0, r5
 8011012:	f000 fe7d 	bl	8011d10 <_sbrk_r>
 8011016:	1c43      	adds	r3, r0, #1
 8011018:	d103      	bne.n	8011022 <sbrk_aligned+0x26>
 801101a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801101e:	4620      	mov	r0, r4
 8011020:	bd70      	pop	{r4, r5, r6, pc}
 8011022:	1cc4      	adds	r4, r0, #3
 8011024:	f024 0403 	bic.w	r4, r4, #3
 8011028:	42a0      	cmp	r0, r4
 801102a:	d0f8      	beq.n	801101e <sbrk_aligned+0x22>
 801102c:	1a21      	subs	r1, r4, r0
 801102e:	4628      	mov	r0, r5
 8011030:	f000 fe6e 	bl	8011d10 <_sbrk_r>
 8011034:	3001      	adds	r0, #1
 8011036:	d1f2      	bne.n	801101e <sbrk_aligned+0x22>
 8011038:	e7ef      	b.n	801101a <sbrk_aligned+0x1e>
 801103a:	bf00      	nop
 801103c:	200017bc 	.word	0x200017bc

08011040 <_malloc_r>:
 8011040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011044:	1ccd      	adds	r5, r1, #3
 8011046:	f025 0503 	bic.w	r5, r5, #3
 801104a:	3508      	adds	r5, #8
 801104c:	2d0c      	cmp	r5, #12
 801104e:	bf38      	it	cc
 8011050:	250c      	movcc	r5, #12
 8011052:	2d00      	cmp	r5, #0
 8011054:	4606      	mov	r6, r0
 8011056:	db01      	blt.n	801105c <_malloc_r+0x1c>
 8011058:	42a9      	cmp	r1, r5
 801105a:	d904      	bls.n	8011066 <_malloc_r+0x26>
 801105c:	230c      	movs	r3, #12
 801105e:	6033      	str	r3, [r6, #0]
 8011060:	2000      	movs	r0, #0
 8011062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011066:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801113c <_malloc_r+0xfc>
 801106a:	f000 f915 	bl	8011298 <__malloc_lock>
 801106e:	f8d8 3000 	ldr.w	r3, [r8]
 8011072:	461c      	mov	r4, r3
 8011074:	bb44      	cbnz	r4, 80110c8 <_malloc_r+0x88>
 8011076:	4629      	mov	r1, r5
 8011078:	4630      	mov	r0, r6
 801107a:	f7ff ffbf 	bl	8010ffc <sbrk_aligned>
 801107e:	1c43      	adds	r3, r0, #1
 8011080:	4604      	mov	r4, r0
 8011082:	d158      	bne.n	8011136 <_malloc_r+0xf6>
 8011084:	f8d8 4000 	ldr.w	r4, [r8]
 8011088:	4627      	mov	r7, r4
 801108a:	2f00      	cmp	r7, #0
 801108c:	d143      	bne.n	8011116 <_malloc_r+0xd6>
 801108e:	2c00      	cmp	r4, #0
 8011090:	d04b      	beq.n	801112a <_malloc_r+0xea>
 8011092:	6823      	ldr	r3, [r4, #0]
 8011094:	4639      	mov	r1, r7
 8011096:	4630      	mov	r0, r6
 8011098:	eb04 0903 	add.w	r9, r4, r3
 801109c:	f000 fe38 	bl	8011d10 <_sbrk_r>
 80110a0:	4581      	cmp	r9, r0
 80110a2:	d142      	bne.n	801112a <_malloc_r+0xea>
 80110a4:	6821      	ldr	r1, [r4, #0]
 80110a6:	1a6d      	subs	r5, r5, r1
 80110a8:	4629      	mov	r1, r5
 80110aa:	4630      	mov	r0, r6
 80110ac:	f7ff ffa6 	bl	8010ffc <sbrk_aligned>
 80110b0:	3001      	adds	r0, #1
 80110b2:	d03a      	beq.n	801112a <_malloc_r+0xea>
 80110b4:	6823      	ldr	r3, [r4, #0]
 80110b6:	442b      	add	r3, r5
 80110b8:	6023      	str	r3, [r4, #0]
 80110ba:	f8d8 3000 	ldr.w	r3, [r8]
 80110be:	685a      	ldr	r2, [r3, #4]
 80110c0:	bb62      	cbnz	r2, 801111c <_malloc_r+0xdc>
 80110c2:	f8c8 7000 	str.w	r7, [r8]
 80110c6:	e00f      	b.n	80110e8 <_malloc_r+0xa8>
 80110c8:	6822      	ldr	r2, [r4, #0]
 80110ca:	1b52      	subs	r2, r2, r5
 80110cc:	d420      	bmi.n	8011110 <_malloc_r+0xd0>
 80110ce:	2a0b      	cmp	r2, #11
 80110d0:	d917      	bls.n	8011102 <_malloc_r+0xc2>
 80110d2:	1961      	adds	r1, r4, r5
 80110d4:	42a3      	cmp	r3, r4
 80110d6:	6025      	str	r5, [r4, #0]
 80110d8:	bf18      	it	ne
 80110da:	6059      	strne	r1, [r3, #4]
 80110dc:	6863      	ldr	r3, [r4, #4]
 80110de:	bf08      	it	eq
 80110e0:	f8c8 1000 	streq.w	r1, [r8]
 80110e4:	5162      	str	r2, [r4, r5]
 80110e6:	604b      	str	r3, [r1, #4]
 80110e8:	4630      	mov	r0, r6
 80110ea:	f000 f8db 	bl	80112a4 <__malloc_unlock>
 80110ee:	f104 000b 	add.w	r0, r4, #11
 80110f2:	1d23      	adds	r3, r4, #4
 80110f4:	f020 0007 	bic.w	r0, r0, #7
 80110f8:	1ac2      	subs	r2, r0, r3
 80110fa:	bf1c      	itt	ne
 80110fc:	1a1b      	subne	r3, r3, r0
 80110fe:	50a3      	strne	r3, [r4, r2]
 8011100:	e7af      	b.n	8011062 <_malloc_r+0x22>
 8011102:	6862      	ldr	r2, [r4, #4]
 8011104:	42a3      	cmp	r3, r4
 8011106:	bf0c      	ite	eq
 8011108:	f8c8 2000 	streq.w	r2, [r8]
 801110c:	605a      	strne	r2, [r3, #4]
 801110e:	e7eb      	b.n	80110e8 <_malloc_r+0xa8>
 8011110:	4623      	mov	r3, r4
 8011112:	6864      	ldr	r4, [r4, #4]
 8011114:	e7ae      	b.n	8011074 <_malloc_r+0x34>
 8011116:	463c      	mov	r4, r7
 8011118:	687f      	ldr	r7, [r7, #4]
 801111a:	e7b6      	b.n	801108a <_malloc_r+0x4a>
 801111c:	461a      	mov	r2, r3
 801111e:	685b      	ldr	r3, [r3, #4]
 8011120:	42a3      	cmp	r3, r4
 8011122:	d1fb      	bne.n	801111c <_malloc_r+0xdc>
 8011124:	2300      	movs	r3, #0
 8011126:	6053      	str	r3, [r2, #4]
 8011128:	e7de      	b.n	80110e8 <_malloc_r+0xa8>
 801112a:	230c      	movs	r3, #12
 801112c:	6033      	str	r3, [r6, #0]
 801112e:	4630      	mov	r0, r6
 8011130:	f000 f8b8 	bl	80112a4 <__malloc_unlock>
 8011134:	e794      	b.n	8011060 <_malloc_r+0x20>
 8011136:	6005      	str	r5, [r0, #0]
 8011138:	e7d6      	b.n	80110e8 <_malloc_r+0xa8>
 801113a:	bf00      	nop
 801113c:	200017c0 	.word	0x200017c0

08011140 <__sflush_r>:
 8011140:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011148:	0716      	lsls	r6, r2, #28
 801114a:	4605      	mov	r5, r0
 801114c:	460c      	mov	r4, r1
 801114e:	d454      	bmi.n	80111fa <__sflush_r+0xba>
 8011150:	684b      	ldr	r3, [r1, #4]
 8011152:	2b00      	cmp	r3, #0
 8011154:	dc02      	bgt.n	801115c <__sflush_r+0x1c>
 8011156:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011158:	2b00      	cmp	r3, #0
 801115a:	dd48      	ble.n	80111ee <__sflush_r+0xae>
 801115c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801115e:	2e00      	cmp	r6, #0
 8011160:	d045      	beq.n	80111ee <__sflush_r+0xae>
 8011162:	2300      	movs	r3, #0
 8011164:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011168:	682f      	ldr	r7, [r5, #0]
 801116a:	6a21      	ldr	r1, [r4, #32]
 801116c:	602b      	str	r3, [r5, #0]
 801116e:	d030      	beq.n	80111d2 <__sflush_r+0x92>
 8011170:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011172:	89a3      	ldrh	r3, [r4, #12]
 8011174:	0759      	lsls	r1, r3, #29
 8011176:	d505      	bpl.n	8011184 <__sflush_r+0x44>
 8011178:	6863      	ldr	r3, [r4, #4]
 801117a:	1ad2      	subs	r2, r2, r3
 801117c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801117e:	b10b      	cbz	r3, 8011184 <__sflush_r+0x44>
 8011180:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011182:	1ad2      	subs	r2, r2, r3
 8011184:	2300      	movs	r3, #0
 8011186:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011188:	6a21      	ldr	r1, [r4, #32]
 801118a:	4628      	mov	r0, r5
 801118c:	47b0      	blx	r6
 801118e:	1c43      	adds	r3, r0, #1
 8011190:	89a3      	ldrh	r3, [r4, #12]
 8011192:	d106      	bne.n	80111a2 <__sflush_r+0x62>
 8011194:	6829      	ldr	r1, [r5, #0]
 8011196:	291d      	cmp	r1, #29
 8011198:	d82b      	bhi.n	80111f2 <__sflush_r+0xb2>
 801119a:	4a2a      	ldr	r2, [pc, #168]	@ (8011244 <__sflush_r+0x104>)
 801119c:	40ca      	lsrs	r2, r1
 801119e:	07d6      	lsls	r6, r2, #31
 80111a0:	d527      	bpl.n	80111f2 <__sflush_r+0xb2>
 80111a2:	2200      	movs	r2, #0
 80111a4:	6062      	str	r2, [r4, #4]
 80111a6:	04d9      	lsls	r1, r3, #19
 80111a8:	6922      	ldr	r2, [r4, #16]
 80111aa:	6022      	str	r2, [r4, #0]
 80111ac:	d504      	bpl.n	80111b8 <__sflush_r+0x78>
 80111ae:	1c42      	adds	r2, r0, #1
 80111b0:	d101      	bne.n	80111b6 <__sflush_r+0x76>
 80111b2:	682b      	ldr	r3, [r5, #0]
 80111b4:	b903      	cbnz	r3, 80111b8 <__sflush_r+0x78>
 80111b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80111b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80111ba:	602f      	str	r7, [r5, #0]
 80111bc:	b1b9      	cbz	r1, 80111ee <__sflush_r+0xae>
 80111be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80111c2:	4299      	cmp	r1, r3
 80111c4:	d002      	beq.n	80111cc <__sflush_r+0x8c>
 80111c6:	4628      	mov	r0, r5
 80111c8:	f000 fe26 	bl	8011e18 <_free_r>
 80111cc:	2300      	movs	r3, #0
 80111ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80111d0:	e00d      	b.n	80111ee <__sflush_r+0xae>
 80111d2:	2301      	movs	r3, #1
 80111d4:	4628      	mov	r0, r5
 80111d6:	47b0      	blx	r6
 80111d8:	4602      	mov	r2, r0
 80111da:	1c50      	adds	r0, r2, #1
 80111dc:	d1c9      	bne.n	8011172 <__sflush_r+0x32>
 80111de:	682b      	ldr	r3, [r5, #0]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d0c6      	beq.n	8011172 <__sflush_r+0x32>
 80111e4:	2b1d      	cmp	r3, #29
 80111e6:	d001      	beq.n	80111ec <__sflush_r+0xac>
 80111e8:	2b16      	cmp	r3, #22
 80111ea:	d11e      	bne.n	801122a <__sflush_r+0xea>
 80111ec:	602f      	str	r7, [r5, #0]
 80111ee:	2000      	movs	r0, #0
 80111f0:	e022      	b.n	8011238 <__sflush_r+0xf8>
 80111f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80111f6:	b21b      	sxth	r3, r3
 80111f8:	e01b      	b.n	8011232 <__sflush_r+0xf2>
 80111fa:	690f      	ldr	r7, [r1, #16]
 80111fc:	2f00      	cmp	r7, #0
 80111fe:	d0f6      	beq.n	80111ee <__sflush_r+0xae>
 8011200:	0793      	lsls	r3, r2, #30
 8011202:	680e      	ldr	r6, [r1, #0]
 8011204:	bf08      	it	eq
 8011206:	694b      	ldreq	r3, [r1, #20]
 8011208:	600f      	str	r7, [r1, #0]
 801120a:	bf18      	it	ne
 801120c:	2300      	movne	r3, #0
 801120e:	eba6 0807 	sub.w	r8, r6, r7
 8011212:	608b      	str	r3, [r1, #8]
 8011214:	f1b8 0f00 	cmp.w	r8, #0
 8011218:	dde9      	ble.n	80111ee <__sflush_r+0xae>
 801121a:	6a21      	ldr	r1, [r4, #32]
 801121c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801121e:	4643      	mov	r3, r8
 8011220:	463a      	mov	r2, r7
 8011222:	4628      	mov	r0, r5
 8011224:	47b0      	blx	r6
 8011226:	2800      	cmp	r0, #0
 8011228:	dc08      	bgt.n	801123c <__sflush_r+0xfc>
 801122a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801122e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011232:	81a3      	strh	r3, [r4, #12]
 8011234:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801123c:	4407      	add	r7, r0
 801123e:	eba8 0800 	sub.w	r8, r8, r0
 8011242:	e7e7      	b.n	8011214 <__sflush_r+0xd4>
 8011244:	20400001 	.word	0x20400001

08011248 <_fflush_r>:
 8011248:	b538      	push	{r3, r4, r5, lr}
 801124a:	690b      	ldr	r3, [r1, #16]
 801124c:	4605      	mov	r5, r0
 801124e:	460c      	mov	r4, r1
 8011250:	b913      	cbnz	r3, 8011258 <_fflush_r+0x10>
 8011252:	2500      	movs	r5, #0
 8011254:	4628      	mov	r0, r5
 8011256:	bd38      	pop	{r3, r4, r5, pc}
 8011258:	b118      	cbz	r0, 8011262 <_fflush_r+0x1a>
 801125a:	6a03      	ldr	r3, [r0, #32]
 801125c:	b90b      	cbnz	r3, 8011262 <_fflush_r+0x1a>
 801125e:	f7fe fcb7 	bl	800fbd0 <__sinit>
 8011262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d0f3      	beq.n	8011252 <_fflush_r+0xa>
 801126a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801126c:	07d0      	lsls	r0, r2, #31
 801126e:	d404      	bmi.n	801127a <_fflush_r+0x32>
 8011270:	0599      	lsls	r1, r3, #22
 8011272:	d402      	bmi.n	801127a <_fflush_r+0x32>
 8011274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011276:	f7fe fdc0 	bl	800fdfa <__retarget_lock_acquire_recursive>
 801127a:	4628      	mov	r0, r5
 801127c:	4621      	mov	r1, r4
 801127e:	f7ff ff5f 	bl	8011140 <__sflush_r>
 8011282:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011284:	07da      	lsls	r2, r3, #31
 8011286:	4605      	mov	r5, r0
 8011288:	d4e4      	bmi.n	8011254 <_fflush_r+0xc>
 801128a:	89a3      	ldrh	r3, [r4, #12]
 801128c:	059b      	lsls	r3, r3, #22
 801128e:	d4e1      	bmi.n	8011254 <_fflush_r+0xc>
 8011290:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011292:	f7fe fdb3 	bl	800fdfc <__retarget_lock_release_recursive>
 8011296:	e7dd      	b.n	8011254 <_fflush_r+0xc>

08011298 <__malloc_lock>:
 8011298:	4801      	ldr	r0, [pc, #4]	@ (80112a0 <__malloc_lock+0x8>)
 801129a:	f7fe bdae 	b.w	800fdfa <__retarget_lock_acquire_recursive>
 801129e:	bf00      	nop
 80112a0:	200017b8 	.word	0x200017b8

080112a4 <__malloc_unlock>:
 80112a4:	4801      	ldr	r0, [pc, #4]	@ (80112ac <__malloc_unlock+0x8>)
 80112a6:	f7fe bda9 	b.w	800fdfc <__retarget_lock_release_recursive>
 80112aa:	bf00      	nop
 80112ac:	200017b8 	.word	0x200017b8

080112b0 <_Balloc>:
 80112b0:	b570      	push	{r4, r5, r6, lr}
 80112b2:	69c6      	ldr	r6, [r0, #28]
 80112b4:	4604      	mov	r4, r0
 80112b6:	460d      	mov	r5, r1
 80112b8:	b976      	cbnz	r6, 80112d8 <_Balloc+0x28>
 80112ba:	2010      	movs	r0, #16
 80112bc:	f7ff fe96 	bl	8010fec <malloc>
 80112c0:	4602      	mov	r2, r0
 80112c2:	61e0      	str	r0, [r4, #28]
 80112c4:	b920      	cbnz	r0, 80112d0 <_Balloc+0x20>
 80112c6:	4b18      	ldr	r3, [pc, #96]	@ (8011328 <_Balloc+0x78>)
 80112c8:	4818      	ldr	r0, [pc, #96]	@ (801132c <_Balloc+0x7c>)
 80112ca:	216b      	movs	r1, #107	@ 0x6b
 80112cc:	f000 fd72 	bl	8011db4 <__assert_func>
 80112d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80112d4:	6006      	str	r6, [r0, #0]
 80112d6:	60c6      	str	r6, [r0, #12]
 80112d8:	69e6      	ldr	r6, [r4, #28]
 80112da:	68f3      	ldr	r3, [r6, #12]
 80112dc:	b183      	cbz	r3, 8011300 <_Balloc+0x50>
 80112de:	69e3      	ldr	r3, [r4, #28]
 80112e0:	68db      	ldr	r3, [r3, #12]
 80112e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80112e6:	b9b8      	cbnz	r0, 8011318 <_Balloc+0x68>
 80112e8:	2101      	movs	r1, #1
 80112ea:	fa01 f605 	lsl.w	r6, r1, r5
 80112ee:	1d72      	adds	r2, r6, #5
 80112f0:	0092      	lsls	r2, r2, #2
 80112f2:	4620      	mov	r0, r4
 80112f4:	f000 fd7c 	bl	8011df0 <_calloc_r>
 80112f8:	b160      	cbz	r0, 8011314 <_Balloc+0x64>
 80112fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80112fe:	e00e      	b.n	801131e <_Balloc+0x6e>
 8011300:	2221      	movs	r2, #33	@ 0x21
 8011302:	2104      	movs	r1, #4
 8011304:	4620      	mov	r0, r4
 8011306:	f000 fd73 	bl	8011df0 <_calloc_r>
 801130a:	69e3      	ldr	r3, [r4, #28]
 801130c:	60f0      	str	r0, [r6, #12]
 801130e:	68db      	ldr	r3, [r3, #12]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d1e4      	bne.n	80112de <_Balloc+0x2e>
 8011314:	2000      	movs	r0, #0
 8011316:	bd70      	pop	{r4, r5, r6, pc}
 8011318:	6802      	ldr	r2, [r0, #0]
 801131a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801131e:	2300      	movs	r3, #0
 8011320:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011324:	e7f7      	b.n	8011316 <_Balloc+0x66>
 8011326:	bf00      	nop
 8011328:	08013c15 	.word	0x08013c15
 801132c:	08013ca6 	.word	0x08013ca6

08011330 <_Bfree>:
 8011330:	b570      	push	{r4, r5, r6, lr}
 8011332:	69c6      	ldr	r6, [r0, #28]
 8011334:	4605      	mov	r5, r0
 8011336:	460c      	mov	r4, r1
 8011338:	b976      	cbnz	r6, 8011358 <_Bfree+0x28>
 801133a:	2010      	movs	r0, #16
 801133c:	f7ff fe56 	bl	8010fec <malloc>
 8011340:	4602      	mov	r2, r0
 8011342:	61e8      	str	r0, [r5, #28]
 8011344:	b920      	cbnz	r0, 8011350 <_Bfree+0x20>
 8011346:	4b09      	ldr	r3, [pc, #36]	@ (801136c <_Bfree+0x3c>)
 8011348:	4809      	ldr	r0, [pc, #36]	@ (8011370 <_Bfree+0x40>)
 801134a:	218f      	movs	r1, #143	@ 0x8f
 801134c:	f000 fd32 	bl	8011db4 <__assert_func>
 8011350:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011354:	6006      	str	r6, [r0, #0]
 8011356:	60c6      	str	r6, [r0, #12]
 8011358:	b13c      	cbz	r4, 801136a <_Bfree+0x3a>
 801135a:	69eb      	ldr	r3, [r5, #28]
 801135c:	6862      	ldr	r2, [r4, #4]
 801135e:	68db      	ldr	r3, [r3, #12]
 8011360:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011364:	6021      	str	r1, [r4, #0]
 8011366:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801136a:	bd70      	pop	{r4, r5, r6, pc}
 801136c:	08013c15 	.word	0x08013c15
 8011370:	08013ca6 	.word	0x08013ca6

08011374 <__multadd>:
 8011374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011378:	690d      	ldr	r5, [r1, #16]
 801137a:	4607      	mov	r7, r0
 801137c:	460c      	mov	r4, r1
 801137e:	461e      	mov	r6, r3
 8011380:	f101 0c14 	add.w	ip, r1, #20
 8011384:	2000      	movs	r0, #0
 8011386:	f8dc 3000 	ldr.w	r3, [ip]
 801138a:	b299      	uxth	r1, r3
 801138c:	fb02 6101 	mla	r1, r2, r1, r6
 8011390:	0c1e      	lsrs	r6, r3, #16
 8011392:	0c0b      	lsrs	r3, r1, #16
 8011394:	fb02 3306 	mla	r3, r2, r6, r3
 8011398:	b289      	uxth	r1, r1
 801139a:	3001      	adds	r0, #1
 801139c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80113a0:	4285      	cmp	r5, r0
 80113a2:	f84c 1b04 	str.w	r1, [ip], #4
 80113a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80113aa:	dcec      	bgt.n	8011386 <__multadd+0x12>
 80113ac:	b30e      	cbz	r6, 80113f2 <__multadd+0x7e>
 80113ae:	68a3      	ldr	r3, [r4, #8]
 80113b0:	42ab      	cmp	r3, r5
 80113b2:	dc19      	bgt.n	80113e8 <__multadd+0x74>
 80113b4:	6861      	ldr	r1, [r4, #4]
 80113b6:	4638      	mov	r0, r7
 80113b8:	3101      	adds	r1, #1
 80113ba:	f7ff ff79 	bl	80112b0 <_Balloc>
 80113be:	4680      	mov	r8, r0
 80113c0:	b928      	cbnz	r0, 80113ce <__multadd+0x5a>
 80113c2:	4602      	mov	r2, r0
 80113c4:	4b0c      	ldr	r3, [pc, #48]	@ (80113f8 <__multadd+0x84>)
 80113c6:	480d      	ldr	r0, [pc, #52]	@ (80113fc <__multadd+0x88>)
 80113c8:	21ba      	movs	r1, #186	@ 0xba
 80113ca:	f000 fcf3 	bl	8011db4 <__assert_func>
 80113ce:	6922      	ldr	r2, [r4, #16]
 80113d0:	3202      	adds	r2, #2
 80113d2:	f104 010c 	add.w	r1, r4, #12
 80113d6:	0092      	lsls	r2, r2, #2
 80113d8:	300c      	adds	r0, #12
 80113da:	f000 fcdd 	bl	8011d98 <memcpy>
 80113de:	4621      	mov	r1, r4
 80113e0:	4638      	mov	r0, r7
 80113e2:	f7ff ffa5 	bl	8011330 <_Bfree>
 80113e6:	4644      	mov	r4, r8
 80113e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80113ec:	3501      	adds	r5, #1
 80113ee:	615e      	str	r6, [r3, #20]
 80113f0:	6125      	str	r5, [r4, #16]
 80113f2:	4620      	mov	r0, r4
 80113f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113f8:	08013c84 	.word	0x08013c84
 80113fc:	08013ca6 	.word	0x08013ca6

08011400 <__hi0bits>:
 8011400:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011404:	4603      	mov	r3, r0
 8011406:	bf36      	itet	cc
 8011408:	0403      	lslcc	r3, r0, #16
 801140a:	2000      	movcs	r0, #0
 801140c:	2010      	movcc	r0, #16
 801140e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011412:	bf3c      	itt	cc
 8011414:	021b      	lslcc	r3, r3, #8
 8011416:	3008      	addcc	r0, #8
 8011418:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801141c:	bf3c      	itt	cc
 801141e:	011b      	lslcc	r3, r3, #4
 8011420:	3004      	addcc	r0, #4
 8011422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011426:	bf3c      	itt	cc
 8011428:	009b      	lslcc	r3, r3, #2
 801142a:	3002      	addcc	r0, #2
 801142c:	2b00      	cmp	r3, #0
 801142e:	db05      	blt.n	801143c <__hi0bits+0x3c>
 8011430:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011434:	f100 0001 	add.w	r0, r0, #1
 8011438:	bf08      	it	eq
 801143a:	2020      	moveq	r0, #32
 801143c:	4770      	bx	lr

0801143e <__lo0bits>:
 801143e:	6803      	ldr	r3, [r0, #0]
 8011440:	4602      	mov	r2, r0
 8011442:	f013 0007 	ands.w	r0, r3, #7
 8011446:	d00b      	beq.n	8011460 <__lo0bits+0x22>
 8011448:	07d9      	lsls	r1, r3, #31
 801144a:	d421      	bmi.n	8011490 <__lo0bits+0x52>
 801144c:	0798      	lsls	r0, r3, #30
 801144e:	bf49      	itett	mi
 8011450:	085b      	lsrmi	r3, r3, #1
 8011452:	089b      	lsrpl	r3, r3, #2
 8011454:	2001      	movmi	r0, #1
 8011456:	6013      	strmi	r3, [r2, #0]
 8011458:	bf5c      	itt	pl
 801145a:	6013      	strpl	r3, [r2, #0]
 801145c:	2002      	movpl	r0, #2
 801145e:	4770      	bx	lr
 8011460:	b299      	uxth	r1, r3
 8011462:	b909      	cbnz	r1, 8011468 <__lo0bits+0x2a>
 8011464:	0c1b      	lsrs	r3, r3, #16
 8011466:	2010      	movs	r0, #16
 8011468:	b2d9      	uxtb	r1, r3
 801146a:	b909      	cbnz	r1, 8011470 <__lo0bits+0x32>
 801146c:	3008      	adds	r0, #8
 801146e:	0a1b      	lsrs	r3, r3, #8
 8011470:	0719      	lsls	r1, r3, #28
 8011472:	bf04      	itt	eq
 8011474:	091b      	lsreq	r3, r3, #4
 8011476:	3004      	addeq	r0, #4
 8011478:	0799      	lsls	r1, r3, #30
 801147a:	bf04      	itt	eq
 801147c:	089b      	lsreq	r3, r3, #2
 801147e:	3002      	addeq	r0, #2
 8011480:	07d9      	lsls	r1, r3, #31
 8011482:	d403      	bmi.n	801148c <__lo0bits+0x4e>
 8011484:	085b      	lsrs	r3, r3, #1
 8011486:	f100 0001 	add.w	r0, r0, #1
 801148a:	d003      	beq.n	8011494 <__lo0bits+0x56>
 801148c:	6013      	str	r3, [r2, #0]
 801148e:	4770      	bx	lr
 8011490:	2000      	movs	r0, #0
 8011492:	4770      	bx	lr
 8011494:	2020      	movs	r0, #32
 8011496:	4770      	bx	lr

08011498 <__i2b>:
 8011498:	b510      	push	{r4, lr}
 801149a:	460c      	mov	r4, r1
 801149c:	2101      	movs	r1, #1
 801149e:	f7ff ff07 	bl	80112b0 <_Balloc>
 80114a2:	4602      	mov	r2, r0
 80114a4:	b928      	cbnz	r0, 80114b2 <__i2b+0x1a>
 80114a6:	4b05      	ldr	r3, [pc, #20]	@ (80114bc <__i2b+0x24>)
 80114a8:	4805      	ldr	r0, [pc, #20]	@ (80114c0 <__i2b+0x28>)
 80114aa:	f240 1145 	movw	r1, #325	@ 0x145
 80114ae:	f000 fc81 	bl	8011db4 <__assert_func>
 80114b2:	2301      	movs	r3, #1
 80114b4:	6144      	str	r4, [r0, #20]
 80114b6:	6103      	str	r3, [r0, #16]
 80114b8:	bd10      	pop	{r4, pc}
 80114ba:	bf00      	nop
 80114bc:	08013c84 	.word	0x08013c84
 80114c0:	08013ca6 	.word	0x08013ca6

080114c4 <__multiply>:
 80114c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114c8:	4617      	mov	r7, r2
 80114ca:	690a      	ldr	r2, [r1, #16]
 80114cc:	693b      	ldr	r3, [r7, #16]
 80114ce:	429a      	cmp	r2, r3
 80114d0:	bfa8      	it	ge
 80114d2:	463b      	movge	r3, r7
 80114d4:	4689      	mov	r9, r1
 80114d6:	bfa4      	itt	ge
 80114d8:	460f      	movge	r7, r1
 80114da:	4699      	movge	r9, r3
 80114dc:	693d      	ldr	r5, [r7, #16]
 80114de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80114e2:	68bb      	ldr	r3, [r7, #8]
 80114e4:	6879      	ldr	r1, [r7, #4]
 80114e6:	eb05 060a 	add.w	r6, r5, sl
 80114ea:	42b3      	cmp	r3, r6
 80114ec:	b085      	sub	sp, #20
 80114ee:	bfb8      	it	lt
 80114f0:	3101      	addlt	r1, #1
 80114f2:	f7ff fedd 	bl	80112b0 <_Balloc>
 80114f6:	b930      	cbnz	r0, 8011506 <__multiply+0x42>
 80114f8:	4602      	mov	r2, r0
 80114fa:	4b41      	ldr	r3, [pc, #260]	@ (8011600 <__multiply+0x13c>)
 80114fc:	4841      	ldr	r0, [pc, #260]	@ (8011604 <__multiply+0x140>)
 80114fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011502:	f000 fc57 	bl	8011db4 <__assert_func>
 8011506:	f100 0414 	add.w	r4, r0, #20
 801150a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801150e:	4623      	mov	r3, r4
 8011510:	2200      	movs	r2, #0
 8011512:	4573      	cmp	r3, lr
 8011514:	d320      	bcc.n	8011558 <__multiply+0x94>
 8011516:	f107 0814 	add.w	r8, r7, #20
 801151a:	f109 0114 	add.w	r1, r9, #20
 801151e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8011522:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8011526:	9302      	str	r3, [sp, #8]
 8011528:	1beb      	subs	r3, r5, r7
 801152a:	3b15      	subs	r3, #21
 801152c:	f023 0303 	bic.w	r3, r3, #3
 8011530:	3304      	adds	r3, #4
 8011532:	3715      	adds	r7, #21
 8011534:	42bd      	cmp	r5, r7
 8011536:	bf38      	it	cc
 8011538:	2304      	movcc	r3, #4
 801153a:	9301      	str	r3, [sp, #4]
 801153c:	9b02      	ldr	r3, [sp, #8]
 801153e:	9103      	str	r1, [sp, #12]
 8011540:	428b      	cmp	r3, r1
 8011542:	d80c      	bhi.n	801155e <__multiply+0x9a>
 8011544:	2e00      	cmp	r6, #0
 8011546:	dd03      	ble.n	8011550 <__multiply+0x8c>
 8011548:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801154c:	2b00      	cmp	r3, #0
 801154e:	d055      	beq.n	80115fc <__multiply+0x138>
 8011550:	6106      	str	r6, [r0, #16]
 8011552:	b005      	add	sp, #20
 8011554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011558:	f843 2b04 	str.w	r2, [r3], #4
 801155c:	e7d9      	b.n	8011512 <__multiply+0x4e>
 801155e:	f8b1 a000 	ldrh.w	sl, [r1]
 8011562:	f1ba 0f00 	cmp.w	sl, #0
 8011566:	d01f      	beq.n	80115a8 <__multiply+0xe4>
 8011568:	46c4      	mov	ip, r8
 801156a:	46a1      	mov	r9, r4
 801156c:	2700      	movs	r7, #0
 801156e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011572:	f8d9 3000 	ldr.w	r3, [r9]
 8011576:	fa1f fb82 	uxth.w	fp, r2
 801157a:	b29b      	uxth	r3, r3
 801157c:	fb0a 330b 	mla	r3, sl, fp, r3
 8011580:	443b      	add	r3, r7
 8011582:	f8d9 7000 	ldr.w	r7, [r9]
 8011586:	0c12      	lsrs	r2, r2, #16
 8011588:	0c3f      	lsrs	r7, r7, #16
 801158a:	fb0a 7202 	mla	r2, sl, r2, r7
 801158e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8011592:	b29b      	uxth	r3, r3
 8011594:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011598:	4565      	cmp	r5, ip
 801159a:	f849 3b04 	str.w	r3, [r9], #4
 801159e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80115a2:	d8e4      	bhi.n	801156e <__multiply+0xaa>
 80115a4:	9b01      	ldr	r3, [sp, #4]
 80115a6:	50e7      	str	r7, [r4, r3]
 80115a8:	9b03      	ldr	r3, [sp, #12]
 80115aa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80115ae:	3104      	adds	r1, #4
 80115b0:	f1b9 0f00 	cmp.w	r9, #0
 80115b4:	d020      	beq.n	80115f8 <__multiply+0x134>
 80115b6:	6823      	ldr	r3, [r4, #0]
 80115b8:	4647      	mov	r7, r8
 80115ba:	46a4      	mov	ip, r4
 80115bc:	f04f 0a00 	mov.w	sl, #0
 80115c0:	f8b7 b000 	ldrh.w	fp, [r7]
 80115c4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80115c8:	fb09 220b 	mla	r2, r9, fp, r2
 80115cc:	4452      	add	r2, sl
 80115ce:	b29b      	uxth	r3, r3
 80115d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80115d4:	f84c 3b04 	str.w	r3, [ip], #4
 80115d8:	f857 3b04 	ldr.w	r3, [r7], #4
 80115dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80115e0:	f8bc 3000 	ldrh.w	r3, [ip]
 80115e4:	fb09 330a 	mla	r3, r9, sl, r3
 80115e8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80115ec:	42bd      	cmp	r5, r7
 80115ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80115f2:	d8e5      	bhi.n	80115c0 <__multiply+0xfc>
 80115f4:	9a01      	ldr	r2, [sp, #4]
 80115f6:	50a3      	str	r3, [r4, r2]
 80115f8:	3404      	adds	r4, #4
 80115fa:	e79f      	b.n	801153c <__multiply+0x78>
 80115fc:	3e01      	subs	r6, #1
 80115fe:	e7a1      	b.n	8011544 <__multiply+0x80>
 8011600:	08013c84 	.word	0x08013c84
 8011604:	08013ca6 	.word	0x08013ca6

08011608 <__pow5mult>:
 8011608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801160c:	4615      	mov	r5, r2
 801160e:	f012 0203 	ands.w	r2, r2, #3
 8011612:	4607      	mov	r7, r0
 8011614:	460e      	mov	r6, r1
 8011616:	d007      	beq.n	8011628 <__pow5mult+0x20>
 8011618:	4c25      	ldr	r4, [pc, #148]	@ (80116b0 <__pow5mult+0xa8>)
 801161a:	3a01      	subs	r2, #1
 801161c:	2300      	movs	r3, #0
 801161e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011622:	f7ff fea7 	bl	8011374 <__multadd>
 8011626:	4606      	mov	r6, r0
 8011628:	10ad      	asrs	r5, r5, #2
 801162a:	d03d      	beq.n	80116a8 <__pow5mult+0xa0>
 801162c:	69fc      	ldr	r4, [r7, #28]
 801162e:	b97c      	cbnz	r4, 8011650 <__pow5mult+0x48>
 8011630:	2010      	movs	r0, #16
 8011632:	f7ff fcdb 	bl	8010fec <malloc>
 8011636:	4602      	mov	r2, r0
 8011638:	61f8      	str	r0, [r7, #28]
 801163a:	b928      	cbnz	r0, 8011648 <__pow5mult+0x40>
 801163c:	4b1d      	ldr	r3, [pc, #116]	@ (80116b4 <__pow5mult+0xac>)
 801163e:	481e      	ldr	r0, [pc, #120]	@ (80116b8 <__pow5mult+0xb0>)
 8011640:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011644:	f000 fbb6 	bl	8011db4 <__assert_func>
 8011648:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801164c:	6004      	str	r4, [r0, #0]
 801164e:	60c4      	str	r4, [r0, #12]
 8011650:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011654:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011658:	b94c      	cbnz	r4, 801166e <__pow5mult+0x66>
 801165a:	f240 2171 	movw	r1, #625	@ 0x271
 801165e:	4638      	mov	r0, r7
 8011660:	f7ff ff1a 	bl	8011498 <__i2b>
 8011664:	2300      	movs	r3, #0
 8011666:	f8c8 0008 	str.w	r0, [r8, #8]
 801166a:	4604      	mov	r4, r0
 801166c:	6003      	str	r3, [r0, #0]
 801166e:	f04f 0900 	mov.w	r9, #0
 8011672:	07eb      	lsls	r3, r5, #31
 8011674:	d50a      	bpl.n	801168c <__pow5mult+0x84>
 8011676:	4631      	mov	r1, r6
 8011678:	4622      	mov	r2, r4
 801167a:	4638      	mov	r0, r7
 801167c:	f7ff ff22 	bl	80114c4 <__multiply>
 8011680:	4631      	mov	r1, r6
 8011682:	4680      	mov	r8, r0
 8011684:	4638      	mov	r0, r7
 8011686:	f7ff fe53 	bl	8011330 <_Bfree>
 801168a:	4646      	mov	r6, r8
 801168c:	106d      	asrs	r5, r5, #1
 801168e:	d00b      	beq.n	80116a8 <__pow5mult+0xa0>
 8011690:	6820      	ldr	r0, [r4, #0]
 8011692:	b938      	cbnz	r0, 80116a4 <__pow5mult+0x9c>
 8011694:	4622      	mov	r2, r4
 8011696:	4621      	mov	r1, r4
 8011698:	4638      	mov	r0, r7
 801169a:	f7ff ff13 	bl	80114c4 <__multiply>
 801169e:	6020      	str	r0, [r4, #0]
 80116a0:	f8c0 9000 	str.w	r9, [r0]
 80116a4:	4604      	mov	r4, r0
 80116a6:	e7e4      	b.n	8011672 <__pow5mult+0x6a>
 80116a8:	4630      	mov	r0, r6
 80116aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116ae:	bf00      	nop
 80116b0:	08013d48 	.word	0x08013d48
 80116b4:	08013c15 	.word	0x08013c15
 80116b8:	08013ca6 	.word	0x08013ca6

080116bc <__lshift>:
 80116bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116c0:	460c      	mov	r4, r1
 80116c2:	6849      	ldr	r1, [r1, #4]
 80116c4:	6923      	ldr	r3, [r4, #16]
 80116c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80116ca:	68a3      	ldr	r3, [r4, #8]
 80116cc:	4607      	mov	r7, r0
 80116ce:	4691      	mov	r9, r2
 80116d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80116d4:	f108 0601 	add.w	r6, r8, #1
 80116d8:	42b3      	cmp	r3, r6
 80116da:	db0b      	blt.n	80116f4 <__lshift+0x38>
 80116dc:	4638      	mov	r0, r7
 80116de:	f7ff fde7 	bl	80112b0 <_Balloc>
 80116e2:	4605      	mov	r5, r0
 80116e4:	b948      	cbnz	r0, 80116fa <__lshift+0x3e>
 80116e6:	4602      	mov	r2, r0
 80116e8:	4b28      	ldr	r3, [pc, #160]	@ (801178c <__lshift+0xd0>)
 80116ea:	4829      	ldr	r0, [pc, #164]	@ (8011790 <__lshift+0xd4>)
 80116ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80116f0:	f000 fb60 	bl	8011db4 <__assert_func>
 80116f4:	3101      	adds	r1, #1
 80116f6:	005b      	lsls	r3, r3, #1
 80116f8:	e7ee      	b.n	80116d8 <__lshift+0x1c>
 80116fa:	2300      	movs	r3, #0
 80116fc:	f100 0114 	add.w	r1, r0, #20
 8011700:	f100 0210 	add.w	r2, r0, #16
 8011704:	4618      	mov	r0, r3
 8011706:	4553      	cmp	r3, sl
 8011708:	db33      	blt.n	8011772 <__lshift+0xb6>
 801170a:	6920      	ldr	r0, [r4, #16]
 801170c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011710:	f104 0314 	add.w	r3, r4, #20
 8011714:	f019 091f 	ands.w	r9, r9, #31
 8011718:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801171c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011720:	d02b      	beq.n	801177a <__lshift+0xbe>
 8011722:	f1c9 0e20 	rsb	lr, r9, #32
 8011726:	468a      	mov	sl, r1
 8011728:	2200      	movs	r2, #0
 801172a:	6818      	ldr	r0, [r3, #0]
 801172c:	fa00 f009 	lsl.w	r0, r0, r9
 8011730:	4310      	orrs	r0, r2
 8011732:	f84a 0b04 	str.w	r0, [sl], #4
 8011736:	f853 2b04 	ldr.w	r2, [r3], #4
 801173a:	459c      	cmp	ip, r3
 801173c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011740:	d8f3      	bhi.n	801172a <__lshift+0x6e>
 8011742:	ebac 0304 	sub.w	r3, ip, r4
 8011746:	3b15      	subs	r3, #21
 8011748:	f023 0303 	bic.w	r3, r3, #3
 801174c:	3304      	adds	r3, #4
 801174e:	f104 0015 	add.w	r0, r4, #21
 8011752:	4560      	cmp	r0, ip
 8011754:	bf88      	it	hi
 8011756:	2304      	movhi	r3, #4
 8011758:	50ca      	str	r2, [r1, r3]
 801175a:	b10a      	cbz	r2, 8011760 <__lshift+0xa4>
 801175c:	f108 0602 	add.w	r6, r8, #2
 8011760:	3e01      	subs	r6, #1
 8011762:	4638      	mov	r0, r7
 8011764:	612e      	str	r6, [r5, #16]
 8011766:	4621      	mov	r1, r4
 8011768:	f7ff fde2 	bl	8011330 <_Bfree>
 801176c:	4628      	mov	r0, r5
 801176e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011772:	f842 0f04 	str.w	r0, [r2, #4]!
 8011776:	3301      	adds	r3, #1
 8011778:	e7c5      	b.n	8011706 <__lshift+0x4a>
 801177a:	3904      	subs	r1, #4
 801177c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011780:	f841 2f04 	str.w	r2, [r1, #4]!
 8011784:	459c      	cmp	ip, r3
 8011786:	d8f9      	bhi.n	801177c <__lshift+0xc0>
 8011788:	e7ea      	b.n	8011760 <__lshift+0xa4>
 801178a:	bf00      	nop
 801178c:	08013c84 	.word	0x08013c84
 8011790:	08013ca6 	.word	0x08013ca6

08011794 <__mcmp>:
 8011794:	690a      	ldr	r2, [r1, #16]
 8011796:	4603      	mov	r3, r0
 8011798:	6900      	ldr	r0, [r0, #16]
 801179a:	1a80      	subs	r0, r0, r2
 801179c:	b530      	push	{r4, r5, lr}
 801179e:	d10e      	bne.n	80117be <__mcmp+0x2a>
 80117a0:	3314      	adds	r3, #20
 80117a2:	3114      	adds	r1, #20
 80117a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80117a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80117ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80117b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80117b4:	4295      	cmp	r5, r2
 80117b6:	d003      	beq.n	80117c0 <__mcmp+0x2c>
 80117b8:	d205      	bcs.n	80117c6 <__mcmp+0x32>
 80117ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80117be:	bd30      	pop	{r4, r5, pc}
 80117c0:	42a3      	cmp	r3, r4
 80117c2:	d3f3      	bcc.n	80117ac <__mcmp+0x18>
 80117c4:	e7fb      	b.n	80117be <__mcmp+0x2a>
 80117c6:	2001      	movs	r0, #1
 80117c8:	e7f9      	b.n	80117be <__mcmp+0x2a>
	...

080117cc <__mdiff>:
 80117cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117d0:	4689      	mov	r9, r1
 80117d2:	4606      	mov	r6, r0
 80117d4:	4611      	mov	r1, r2
 80117d6:	4648      	mov	r0, r9
 80117d8:	4614      	mov	r4, r2
 80117da:	f7ff ffdb 	bl	8011794 <__mcmp>
 80117de:	1e05      	subs	r5, r0, #0
 80117e0:	d112      	bne.n	8011808 <__mdiff+0x3c>
 80117e2:	4629      	mov	r1, r5
 80117e4:	4630      	mov	r0, r6
 80117e6:	f7ff fd63 	bl	80112b0 <_Balloc>
 80117ea:	4602      	mov	r2, r0
 80117ec:	b928      	cbnz	r0, 80117fa <__mdiff+0x2e>
 80117ee:	4b3f      	ldr	r3, [pc, #252]	@ (80118ec <__mdiff+0x120>)
 80117f0:	f240 2137 	movw	r1, #567	@ 0x237
 80117f4:	483e      	ldr	r0, [pc, #248]	@ (80118f0 <__mdiff+0x124>)
 80117f6:	f000 fadd 	bl	8011db4 <__assert_func>
 80117fa:	2301      	movs	r3, #1
 80117fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011800:	4610      	mov	r0, r2
 8011802:	b003      	add	sp, #12
 8011804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011808:	bfbc      	itt	lt
 801180a:	464b      	movlt	r3, r9
 801180c:	46a1      	movlt	r9, r4
 801180e:	4630      	mov	r0, r6
 8011810:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011814:	bfba      	itte	lt
 8011816:	461c      	movlt	r4, r3
 8011818:	2501      	movlt	r5, #1
 801181a:	2500      	movge	r5, #0
 801181c:	f7ff fd48 	bl	80112b0 <_Balloc>
 8011820:	4602      	mov	r2, r0
 8011822:	b918      	cbnz	r0, 801182c <__mdiff+0x60>
 8011824:	4b31      	ldr	r3, [pc, #196]	@ (80118ec <__mdiff+0x120>)
 8011826:	f240 2145 	movw	r1, #581	@ 0x245
 801182a:	e7e3      	b.n	80117f4 <__mdiff+0x28>
 801182c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011830:	6926      	ldr	r6, [r4, #16]
 8011832:	60c5      	str	r5, [r0, #12]
 8011834:	f109 0310 	add.w	r3, r9, #16
 8011838:	f109 0514 	add.w	r5, r9, #20
 801183c:	f104 0e14 	add.w	lr, r4, #20
 8011840:	f100 0b14 	add.w	fp, r0, #20
 8011844:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011848:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801184c:	9301      	str	r3, [sp, #4]
 801184e:	46d9      	mov	r9, fp
 8011850:	f04f 0c00 	mov.w	ip, #0
 8011854:	9b01      	ldr	r3, [sp, #4]
 8011856:	f85e 0b04 	ldr.w	r0, [lr], #4
 801185a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801185e:	9301      	str	r3, [sp, #4]
 8011860:	fa1f f38a 	uxth.w	r3, sl
 8011864:	4619      	mov	r1, r3
 8011866:	b283      	uxth	r3, r0
 8011868:	1acb      	subs	r3, r1, r3
 801186a:	0c00      	lsrs	r0, r0, #16
 801186c:	4463      	add	r3, ip
 801186e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011872:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011876:	b29b      	uxth	r3, r3
 8011878:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801187c:	4576      	cmp	r6, lr
 801187e:	f849 3b04 	str.w	r3, [r9], #4
 8011882:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011886:	d8e5      	bhi.n	8011854 <__mdiff+0x88>
 8011888:	1b33      	subs	r3, r6, r4
 801188a:	3b15      	subs	r3, #21
 801188c:	f023 0303 	bic.w	r3, r3, #3
 8011890:	3415      	adds	r4, #21
 8011892:	3304      	adds	r3, #4
 8011894:	42a6      	cmp	r6, r4
 8011896:	bf38      	it	cc
 8011898:	2304      	movcc	r3, #4
 801189a:	441d      	add	r5, r3
 801189c:	445b      	add	r3, fp
 801189e:	461e      	mov	r6, r3
 80118a0:	462c      	mov	r4, r5
 80118a2:	4544      	cmp	r4, r8
 80118a4:	d30e      	bcc.n	80118c4 <__mdiff+0xf8>
 80118a6:	f108 0103 	add.w	r1, r8, #3
 80118aa:	1b49      	subs	r1, r1, r5
 80118ac:	f021 0103 	bic.w	r1, r1, #3
 80118b0:	3d03      	subs	r5, #3
 80118b2:	45a8      	cmp	r8, r5
 80118b4:	bf38      	it	cc
 80118b6:	2100      	movcc	r1, #0
 80118b8:	440b      	add	r3, r1
 80118ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80118be:	b191      	cbz	r1, 80118e6 <__mdiff+0x11a>
 80118c0:	6117      	str	r7, [r2, #16]
 80118c2:	e79d      	b.n	8011800 <__mdiff+0x34>
 80118c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80118c8:	46e6      	mov	lr, ip
 80118ca:	0c08      	lsrs	r0, r1, #16
 80118cc:	fa1c fc81 	uxtah	ip, ip, r1
 80118d0:	4471      	add	r1, lr
 80118d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80118d6:	b289      	uxth	r1, r1
 80118d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80118dc:	f846 1b04 	str.w	r1, [r6], #4
 80118e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80118e4:	e7dd      	b.n	80118a2 <__mdiff+0xd6>
 80118e6:	3f01      	subs	r7, #1
 80118e8:	e7e7      	b.n	80118ba <__mdiff+0xee>
 80118ea:	bf00      	nop
 80118ec:	08013c84 	.word	0x08013c84
 80118f0:	08013ca6 	.word	0x08013ca6

080118f4 <__d2b>:
 80118f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80118f8:	460f      	mov	r7, r1
 80118fa:	2101      	movs	r1, #1
 80118fc:	ec59 8b10 	vmov	r8, r9, d0
 8011900:	4616      	mov	r6, r2
 8011902:	f7ff fcd5 	bl	80112b0 <_Balloc>
 8011906:	4604      	mov	r4, r0
 8011908:	b930      	cbnz	r0, 8011918 <__d2b+0x24>
 801190a:	4602      	mov	r2, r0
 801190c:	4b23      	ldr	r3, [pc, #140]	@ (801199c <__d2b+0xa8>)
 801190e:	4824      	ldr	r0, [pc, #144]	@ (80119a0 <__d2b+0xac>)
 8011910:	f240 310f 	movw	r1, #783	@ 0x30f
 8011914:	f000 fa4e 	bl	8011db4 <__assert_func>
 8011918:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801191c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011920:	b10d      	cbz	r5, 8011926 <__d2b+0x32>
 8011922:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011926:	9301      	str	r3, [sp, #4]
 8011928:	f1b8 0300 	subs.w	r3, r8, #0
 801192c:	d023      	beq.n	8011976 <__d2b+0x82>
 801192e:	4668      	mov	r0, sp
 8011930:	9300      	str	r3, [sp, #0]
 8011932:	f7ff fd84 	bl	801143e <__lo0bits>
 8011936:	e9dd 1200 	ldrd	r1, r2, [sp]
 801193a:	b1d0      	cbz	r0, 8011972 <__d2b+0x7e>
 801193c:	f1c0 0320 	rsb	r3, r0, #32
 8011940:	fa02 f303 	lsl.w	r3, r2, r3
 8011944:	430b      	orrs	r3, r1
 8011946:	40c2      	lsrs	r2, r0
 8011948:	6163      	str	r3, [r4, #20]
 801194a:	9201      	str	r2, [sp, #4]
 801194c:	9b01      	ldr	r3, [sp, #4]
 801194e:	61a3      	str	r3, [r4, #24]
 8011950:	2b00      	cmp	r3, #0
 8011952:	bf0c      	ite	eq
 8011954:	2201      	moveq	r2, #1
 8011956:	2202      	movne	r2, #2
 8011958:	6122      	str	r2, [r4, #16]
 801195a:	b1a5      	cbz	r5, 8011986 <__d2b+0x92>
 801195c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011960:	4405      	add	r5, r0
 8011962:	603d      	str	r5, [r7, #0]
 8011964:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011968:	6030      	str	r0, [r6, #0]
 801196a:	4620      	mov	r0, r4
 801196c:	b003      	add	sp, #12
 801196e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011972:	6161      	str	r1, [r4, #20]
 8011974:	e7ea      	b.n	801194c <__d2b+0x58>
 8011976:	a801      	add	r0, sp, #4
 8011978:	f7ff fd61 	bl	801143e <__lo0bits>
 801197c:	9b01      	ldr	r3, [sp, #4]
 801197e:	6163      	str	r3, [r4, #20]
 8011980:	3020      	adds	r0, #32
 8011982:	2201      	movs	r2, #1
 8011984:	e7e8      	b.n	8011958 <__d2b+0x64>
 8011986:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801198a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801198e:	6038      	str	r0, [r7, #0]
 8011990:	6918      	ldr	r0, [r3, #16]
 8011992:	f7ff fd35 	bl	8011400 <__hi0bits>
 8011996:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801199a:	e7e5      	b.n	8011968 <__d2b+0x74>
 801199c:	08013c84 	.word	0x08013c84
 80119a0:	08013ca6 	.word	0x08013ca6

080119a4 <__sread>:
 80119a4:	b510      	push	{r4, lr}
 80119a6:	460c      	mov	r4, r1
 80119a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119ac:	f000 f99e 	bl	8011cec <_read_r>
 80119b0:	2800      	cmp	r0, #0
 80119b2:	bfab      	itete	ge
 80119b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80119b6:	89a3      	ldrhlt	r3, [r4, #12]
 80119b8:	181b      	addge	r3, r3, r0
 80119ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80119be:	bfac      	ite	ge
 80119c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80119c2:	81a3      	strhlt	r3, [r4, #12]
 80119c4:	bd10      	pop	{r4, pc}

080119c6 <__swrite>:
 80119c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119ca:	461f      	mov	r7, r3
 80119cc:	898b      	ldrh	r3, [r1, #12]
 80119ce:	05db      	lsls	r3, r3, #23
 80119d0:	4605      	mov	r5, r0
 80119d2:	460c      	mov	r4, r1
 80119d4:	4616      	mov	r6, r2
 80119d6:	d505      	bpl.n	80119e4 <__swrite+0x1e>
 80119d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119dc:	2302      	movs	r3, #2
 80119de:	2200      	movs	r2, #0
 80119e0:	f000 f972 	bl	8011cc8 <_lseek_r>
 80119e4:	89a3      	ldrh	r3, [r4, #12]
 80119e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80119ee:	81a3      	strh	r3, [r4, #12]
 80119f0:	4632      	mov	r2, r6
 80119f2:	463b      	mov	r3, r7
 80119f4:	4628      	mov	r0, r5
 80119f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119fa:	f000 b999 	b.w	8011d30 <_write_r>

080119fe <__sseek>:
 80119fe:	b510      	push	{r4, lr}
 8011a00:	460c      	mov	r4, r1
 8011a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a06:	f000 f95f 	bl	8011cc8 <_lseek_r>
 8011a0a:	1c43      	adds	r3, r0, #1
 8011a0c:	89a3      	ldrh	r3, [r4, #12]
 8011a0e:	bf15      	itete	ne
 8011a10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011a12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011a16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011a1a:	81a3      	strheq	r3, [r4, #12]
 8011a1c:	bf18      	it	ne
 8011a1e:	81a3      	strhne	r3, [r4, #12]
 8011a20:	bd10      	pop	{r4, pc}

08011a22 <__sclose>:
 8011a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a26:	f000 b995 	b.w	8011d54 <_close_r>

08011a2a <_realloc_r>:
 8011a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a2e:	4607      	mov	r7, r0
 8011a30:	4614      	mov	r4, r2
 8011a32:	460d      	mov	r5, r1
 8011a34:	b921      	cbnz	r1, 8011a40 <_realloc_r+0x16>
 8011a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a3a:	4611      	mov	r1, r2
 8011a3c:	f7ff bb00 	b.w	8011040 <_malloc_r>
 8011a40:	b92a      	cbnz	r2, 8011a4e <_realloc_r+0x24>
 8011a42:	f000 f9e9 	bl	8011e18 <_free_r>
 8011a46:	4625      	mov	r5, r4
 8011a48:	4628      	mov	r0, r5
 8011a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a4e:	f000 fa3f 	bl	8011ed0 <_malloc_usable_size_r>
 8011a52:	4284      	cmp	r4, r0
 8011a54:	4606      	mov	r6, r0
 8011a56:	d802      	bhi.n	8011a5e <_realloc_r+0x34>
 8011a58:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011a5c:	d8f4      	bhi.n	8011a48 <_realloc_r+0x1e>
 8011a5e:	4621      	mov	r1, r4
 8011a60:	4638      	mov	r0, r7
 8011a62:	f7ff faed 	bl	8011040 <_malloc_r>
 8011a66:	4680      	mov	r8, r0
 8011a68:	b908      	cbnz	r0, 8011a6e <_realloc_r+0x44>
 8011a6a:	4645      	mov	r5, r8
 8011a6c:	e7ec      	b.n	8011a48 <_realloc_r+0x1e>
 8011a6e:	42b4      	cmp	r4, r6
 8011a70:	4622      	mov	r2, r4
 8011a72:	4629      	mov	r1, r5
 8011a74:	bf28      	it	cs
 8011a76:	4632      	movcs	r2, r6
 8011a78:	f000 f98e 	bl	8011d98 <memcpy>
 8011a7c:	4629      	mov	r1, r5
 8011a7e:	4638      	mov	r0, r7
 8011a80:	f000 f9ca 	bl	8011e18 <_free_r>
 8011a84:	e7f1      	b.n	8011a6a <_realloc_r+0x40>

08011a86 <__swbuf_r>:
 8011a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a88:	460e      	mov	r6, r1
 8011a8a:	4614      	mov	r4, r2
 8011a8c:	4605      	mov	r5, r0
 8011a8e:	b118      	cbz	r0, 8011a98 <__swbuf_r+0x12>
 8011a90:	6a03      	ldr	r3, [r0, #32]
 8011a92:	b90b      	cbnz	r3, 8011a98 <__swbuf_r+0x12>
 8011a94:	f7fe f89c 	bl	800fbd0 <__sinit>
 8011a98:	69a3      	ldr	r3, [r4, #24]
 8011a9a:	60a3      	str	r3, [r4, #8]
 8011a9c:	89a3      	ldrh	r3, [r4, #12]
 8011a9e:	071a      	lsls	r2, r3, #28
 8011aa0:	d501      	bpl.n	8011aa6 <__swbuf_r+0x20>
 8011aa2:	6923      	ldr	r3, [r4, #16]
 8011aa4:	b943      	cbnz	r3, 8011ab8 <__swbuf_r+0x32>
 8011aa6:	4621      	mov	r1, r4
 8011aa8:	4628      	mov	r0, r5
 8011aaa:	f000 f82b 	bl	8011b04 <__swsetup_r>
 8011aae:	b118      	cbz	r0, 8011ab8 <__swbuf_r+0x32>
 8011ab0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011ab4:	4638      	mov	r0, r7
 8011ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ab8:	6823      	ldr	r3, [r4, #0]
 8011aba:	6922      	ldr	r2, [r4, #16]
 8011abc:	1a98      	subs	r0, r3, r2
 8011abe:	6963      	ldr	r3, [r4, #20]
 8011ac0:	b2f6      	uxtb	r6, r6
 8011ac2:	4283      	cmp	r3, r0
 8011ac4:	4637      	mov	r7, r6
 8011ac6:	dc05      	bgt.n	8011ad4 <__swbuf_r+0x4e>
 8011ac8:	4621      	mov	r1, r4
 8011aca:	4628      	mov	r0, r5
 8011acc:	f7ff fbbc 	bl	8011248 <_fflush_r>
 8011ad0:	2800      	cmp	r0, #0
 8011ad2:	d1ed      	bne.n	8011ab0 <__swbuf_r+0x2a>
 8011ad4:	68a3      	ldr	r3, [r4, #8]
 8011ad6:	3b01      	subs	r3, #1
 8011ad8:	60a3      	str	r3, [r4, #8]
 8011ada:	6823      	ldr	r3, [r4, #0]
 8011adc:	1c5a      	adds	r2, r3, #1
 8011ade:	6022      	str	r2, [r4, #0]
 8011ae0:	701e      	strb	r6, [r3, #0]
 8011ae2:	6962      	ldr	r2, [r4, #20]
 8011ae4:	1c43      	adds	r3, r0, #1
 8011ae6:	429a      	cmp	r2, r3
 8011ae8:	d004      	beq.n	8011af4 <__swbuf_r+0x6e>
 8011aea:	89a3      	ldrh	r3, [r4, #12]
 8011aec:	07db      	lsls	r3, r3, #31
 8011aee:	d5e1      	bpl.n	8011ab4 <__swbuf_r+0x2e>
 8011af0:	2e0a      	cmp	r6, #10
 8011af2:	d1df      	bne.n	8011ab4 <__swbuf_r+0x2e>
 8011af4:	4621      	mov	r1, r4
 8011af6:	4628      	mov	r0, r5
 8011af8:	f7ff fba6 	bl	8011248 <_fflush_r>
 8011afc:	2800      	cmp	r0, #0
 8011afe:	d0d9      	beq.n	8011ab4 <__swbuf_r+0x2e>
 8011b00:	e7d6      	b.n	8011ab0 <__swbuf_r+0x2a>
	...

08011b04 <__swsetup_r>:
 8011b04:	b538      	push	{r3, r4, r5, lr}
 8011b06:	4b29      	ldr	r3, [pc, #164]	@ (8011bac <__swsetup_r+0xa8>)
 8011b08:	4605      	mov	r5, r0
 8011b0a:	6818      	ldr	r0, [r3, #0]
 8011b0c:	460c      	mov	r4, r1
 8011b0e:	b118      	cbz	r0, 8011b18 <__swsetup_r+0x14>
 8011b10:	6a03      	ldr	r3, [r0, #32]
 8011b12:	b90b      	cbnz	r3, 8011b18 <__swsetup_r+0x14>
 8011b14:	f7fe f85c 	bl	800fbd0 <__sinit>
 8011b18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b1c:	0719      	lsls	r1, r3, #28
 8011b1e:	d422      	bmi.n	8011b66 <__swsetup_r+0x62>
 8011b20:	06da      	lsls	r2, r3, #27
 8011b22:	d407      	bmi.n	8011b34 <__swsetup_r+0x30>
 8011b24:	2209      	movs	r2, #9
 8011b26:	602a      	str	r2, [r5, #0]
 8011b28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b2c:	81a3      	strh	r3, [r4, #12]
 8011b2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011b32:	e033      	b.n	8011b9c <__swsetup_r+0x98>
 8011b34:	0758      	lsls	r0, r3, #29
 8011b36:	d512      	bpl.n	8011b5e <__swsetup_r+0x5a>
 8011b38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011b3a:	b141      	cbz	r1, 8011b4e <__swsetup_r+0x4a>
 8011b3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011b40:	4299      	cmp	r1, r3
 8011b42:	d002      	beq.n	8011b4a <__swsetup_r+0x46>
 8011b44:	4628      	mov	r0, r5
 8011b46:	f000 f967 	bl	8011e18 <_free_r>
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8011b4e:	89a3      	ldrh	r3, [r4, #12]
 8011b50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011b54:	81a3      	strh	r3, [r4, #12]
 8011b56:	2300      	movs	r3, #0
 8011b58:	6063      	str	r3, [r4, #4]
 8011b5a:	6923      	ldr	r3, [r4, #16]
 8011b5c:	6023      	str	r3, [r4, #0]
 8011b5e:	89a3      	ldrh	r3, [r4, #12]
 8011b60:	f043 0308 	orr.w	r3, r3, #8
 8011b64:	81a3      	strh	r3, [r4, #12]
 8011b66:	6923      	ldr	r3, [r4, #16]
 8011b68:	b94b      	cbnz	r3, 8011b7e <__swsetup_r+0x7a>
 8011b6a:	89a3      	ldrh	r3, [r4, #12]
 8011b6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011b70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011b74:	d003      	beq.n	8011b7e <__swsetup_r+0x7a>
 8011b76:	4621      	mov	r1, r4
 8011b78:	4628      	mov	r0, r5
 8011b7a:	f000 f83f 	bl	8011bfc <__smakebuf_r>
 8011b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b82:	f013 0201 	ands.w	r2, r3, #1
 8011b86:	d00a      	beq.n	8011b9e <__swsetup_r+0x9a>
 8011b88:	2200      	movs	r2, #0
 8011b8a:	60a2      	str	r2, [r4, #8]
 8011b8c:	6962      	ldr	r2, [r4, #20]
 8011b8e:	4252      	negs	r2, r2
 8011b90:	61a2      	str	r2, [r4, #24]
 8011b92:	6922      	ldr	r2, [r4, #16]
 8011b94:	b942      	cbnz	r2, 8011ba8 <__swsetup_r+0xa4>
 8011b96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011b9a:	d1c5      	bne.n	8011b28 <__swsetup_r+0x24>
 8011b9c:	bd38      	pop	{r3, r4, r5, pc}
 8011b9e:	0799      	lsls	r1, r3, #30
 8011ba0:	bf58      	it	pl
 8011ba2:	6962      	ldrpl	r2, [r4, #20]
 8011ba4:	60a2      	str	r2, [r4, #8]
 8011ba6:	e7f4      	b.n	8011b92 <__swsetup_r+0x8e>
 8011ba8:	2000      	movs	r0, #0
 8011baa:	e7f7      	b.n	8011b9c <__swsetup_r+0x98>
 8011bac:	200000a4 	.word	0x200000a4

08011bb0 <__swhatbuf_r>:
 8011bb0:	b570      	push	{r4, r5, r6, lr}
 8011bb2:	460c      	mov	r4, r1
 8011bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bb8:	2900      	cmp	r1, #0
 8011bba:	b096      	sub	sp, #88	@ 0x58
 8011bbc:	4615      	mov	r5, r2
 8011bbe:	461e      	mov	r6, r3
 8011bc0:	da0d      	bge.n	8011bde <__swhatbuf_r+0x2e>
 8011bc2:	89a3      	ldrh	r3, [r4, #12]
 8011bc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011bc8:	f04f 0100 	mov.w	r1, #0
 8011bcc:	bf14      	ite	ne
 8011bce:	2340      	movne	r3, #64	@ 0x40
 8011bd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011bd4:	2000      	movs	r0, #0
 8011bd6:	6031      	str	r1, [r6, #0]
 8011bd8:	602b      	str	r3, [r5, #0]
 8011bda:	b016      	add	sp, #88	@ 0x58
 8011bdc:	bd70      	pop	{r4, r5, r6, pc}
 8011bde:	466a      	mov	r2, sp
 8011be0:	f000 f8c8 	bl	8011d74 <_fstat_r>
 8011be4:	2800      	cmp	r0, #0
 8011be6:	dbec      	blt.n	8011bc2 <__swhatbuf_r+0x12>
 8011be8:	9901      	ldr	r1, [sp, #4]
 8011bea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011bee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011bf2:	4259      	negs	r1, r3
 8011bf4:	4159      	adcs	r1, r3
 8011bf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011bfa:	e7eb      	b.n	8011bd4 <__swhatbuf_r+0x24>

08011bfc <__smakebuf_r>:
 8011bfc:	898b      	ldrh	r3, [r1, #12]
 8011bfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c00:	079d      	lsls	r5, r3, #30
 8011c02:	4606      	mov	r6, r0
 8011c04:	460c      	mov	r4, r1
 8011c06:	d507      	bpl.n	8011c18 <__smakebuf_r+0x1c>
 8011c08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011c0c:	6023      	str	r3, [r4, #0]
 8011c0e:	6123      	str	r3, [r4, #16]
 8011c10:	2301      	movs	r3, #1
 8011c12:	6163      	str	r3, [r4, #20]
 8011c14:	b003      	add	sp, #12
 8011c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c18:	ab01      	add	r3, sp, #4
 8011c1a:	466a      	mov	r2, sp
 8011c1c:	f7ff ffc8 	bl	8011bb0 <__swhatbuf_r>
 8011c20:	9f00      	ldr	r7, [sp, #0]
 8011c22:	4605      	mov	r5, r0
 8011c24:	4639      	mov	r1, r7
 8011c26:	4630      	mov	r0, r6
 8011c28:	f7ff fa0a 	bl	8011040 <_malloc_r>
 8011c2c:	b948      	cbnz	r0, 8011c42 <__smakebuf_r+0x46>
 8011c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c32:	059a      	lsls	r2, r3, #22
 8011c34:	d4ee      	bmi.n	8011c14 <__smakebuf_r+0x18>
 8011c36:	f023 0303 	bic.w	r3, r3, #3
 8011c3a:	f043 0302 	orr.w	r3, r3, #2
 8011c3e:	81a3      	strh	r3, [r4, #12]
 8011c40:	e7e2      	b.n	8011c08 <__smakebuf_r+0xc>
 8011c42:	89a3      	ldrh	r3, [r4, #12]
 8011c44:	6020      	str	r0, [r4, #0]
 8011c46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c4a:	81a3      	strh	r3, [r4, #12]
 8011c4c:	9b01      	ldr	r3, [sp, #4]
 8011c4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011c52:	b15b      	cbz	r3, 8011c6c <__smakebuf_r+0x70>
 8011c54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c58:	4630      	mov	r0, r6
 8011c5a:	f000 f825 	bl	8011ca8 <_isatty_r>
 8011c5e:	b128      	cbz	r0, 8011c6c <__smakebuf_r+0x70>
 8011c60:	89a3      	ldrh	r3, [r4, #12]
 8011c62:	f023 0303 	bic.w	r3, r3, #3
 8011c66:	f043 0301 	orr.w	r3, r3, #1
 8011c6a:	81a3      	strh	r3, [r4, #12]
 8011c6c:	89a3      	ldrh	r3, [r4, #12]
 8011c6e:	431d      	orrs	r5, r3
 8011c70:	81a5      	strh	r5, [r4, #12]
 8011c72:	e7cf      	b.n	8011c14 <__smakebuf_r+0x18>

08011c74 <memmove>:
 8011c74:	4288      	cmp	r0, r1
 8011c76:	b510      	push	{r4, lr}
 8011c78:	eb01 0402 	add.w	r4, r1, r2
 8011c7c:	d902      	bls.n	8011c84 <memmove+0x10>
 8011c7e:	4284      	cmp	r4, r0
 8011c80:	4623      	mov	r3, r4
 8011c82:	d807      	bhi.n	8011c94 <memmove+0x20>
 8011c84:	1e43      	subs	r3, r0, #1
 8011c86:	42a1      	cmp	r1, r4
 8011c88:	d008      	beq.n	8011c9c <memmove+0x28>
 8011c8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011c92:	e7f8      	b.n	8011c86 <memmove+0x12>
 8011c94:	4402      	add	r2, r0
 8011c96:	4601      	mov	r1, r0
 8011c98:	428a      	cmp	r2, r1
 8011c9a:	d100      	bne.n	8011c9e <memmove+0x2a>
 8011c9c:	bd10      	pop	{r4, pc}
 8011c9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011ca2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011ca6:	e7f7      	b.n	8011c98 <memmove+0x24>

08011ca8 <_isatty_r>:
 8011ca8:	b538      	push	{r3, r4, r5, lr}
 8011caa:	4d06      	ldr	r5, [pc, #24]	@ (8011cc4 <_isatty_r+0x1c>)
 8011cac:	2300      	movs	r3, #0
 8011cae:	4604      	mov	r4, r0
 8011cb0:	4608      	mov	r0, r1
 8011cb2:	602b      	str	r3, [r5, #0]
 8011cb4:	f7f1 ffaa 	bl	8003c0c <_isatty>
 8011cb8:	1c43      	adds	r3, r0, #1
 8011cba:	d102      	bne.n	8011cc2 <_isatty_r+0x1a>
 8011cbc:	682b      	ldr	r3, [r5, #0]
 8011cbe:	b103      	cbz	r3, 8011cc2 <_isatty_r+0x1a>
 8011cc0:	6023      	str	r3, [r4, #0]
 8011cc2:	bd38      	pop	{r3, r4, r5, pc}
 8011cc4:	200017c4 	.word	0x200017c4

08011cc8 <_lseek_r>:
 8011cc8:	b538      	push	{r3, r4, r5, lr}
 8011cca:	4d07      	ldr	r5, [pc, #28]	@ (8011ce8 <_lseek_r+0x20>)
 8011ccc:	4604      	mov	r4, r0
 8011cce:	4608      	mov	r0, r1
 8011cd0:	4611      	mov	r1, r2
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	602a      	str	r2, [r5, #0]
 8011cd6:	461a      	mov	r2, r3
 8011cd8:	f7f1 ffa3 	bl	8003c22 <_lseek>
 8011cdc:	1c43      	adds	r3, r0, #1
 8011cde:	d102      	bne.n	8011ce6 <_lseek_r+0x1e>
 8011ce0:	682b      	ldr	r3, [r5, #0]
 8011ce2:	b103      	cbz	r3, 8011ce6 <_lseek_r+0x1e>
 8011ce4:	6023      	str	r3, [r4, #0]
 8011ce6:	bd38      	pop	{r3, r4, r5, pc}
 8011ce8:	200017c4 	.word	0x200017c4

08011cec <_read_r>:
 8011cec:	b538      	push	{r3, r4, r5, lr}
 8011cee:	4d07      	ldr	r5, [pc, #28]	@ (8011d0c <_read_r+0x20>)
 8011cf0:	4604      	mov	r4, r0
 8011cf2:	4608      	mov	r0, r1
 8011cf4:	4611      	mov	r1, r2
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	602a      	str	r2, [r5, #0]
 8011cfa:	461a      	mov	r2, r3
 8011cfc:	f7f1 ff4d 	bl	8003b9a <_read>
 8011d00:	1c43      	adds	r3, r0, #1
 8011d02:	d102      	bne.n	8011d0a <_read_r+0x1e>
 8011d04:	682b      	ldr	r3, [r5, #0]
 8011d06:	b103      	cbz	r3, 8011d0a <_read_r+0x1e>
 8011d08:	6023      	str	r3, [r4, #0]
 8011d0a:	bd38      	pop	{r3, r4, r5, pc}
 8011d0c:	200017c4 	.word	0x200017c4

08011d10 <_sbrk_r>:
 8011d10:	b538      	push	{r3, r4, r5, lr}
 8011d12:	4d06      	ldr	r5, [pc, #24]	@ (8011d2c <_sbrk_r+0x1c>)
 8011d14:	2300      	movs	r3, #0
 8011d16:	4604      	mov	r4, r0
 8011d18:	4608      	mov	r0, r1
 8011d1a:	602b      	str	r3, [r5, #0]
 8011d1c:	f7f1 ff8e 	bl	8003c3c <_sbrk>
 8011d20:	1c43      	adds	r3, r0, #1
 8011d22:	d102      	bne.n	8011d2a <_sbrk_r+0x1a>
 8011d24:	682b      	ldr	r3, [r5, #0]
 8011d26:	b103      	cbz	r3, 8011d2a <_sbrk_r+0x1a>
 8011d28:	6023      	str	r3, [r4, #0]
 8011d2a:	bd38      	pop	{r3, r4, r5, pc}
 8011d2c:	200017c4 	.word	0x200017c4

08011d30 <_write_r>:
 8011d30:	b538      	push	{r3, r4, r5, lr}
 8011d32:	4d07      	ldr	r5, [pc, #28]	@ (8011d50 <_write_r+0x20>)
 8011d34:	4604      	mov	r4, r0
 8011d36:	4608      	mov	r0, r1
 8011d38:	4611      	mov	r1, r2
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	602a      	str	r2, [r5, #0]
 8011d3e:	461a      	mov	r2, r3
 8011d40:	f7f0 fd85 	bl	800284e <_write>
 8011d44:	1c43      	adds	r3, r0, #1
 8011d46:	d102      	bne.n	8011d4e <_write_r+0x1e>
 8011d48:	682b      	ldr	r3, [r5, #0]
 8011d4a:	b103      	cbz	r3, 8011d4e <_write_r+0x1e>
 8011d4c:	6023      	str	r3, [r4, #0]
 8011d4e:	bd38      	pop	{r3, r4, r5, pc}
 8011d50:	200017c4 	.word	0x200017c4

08011d54 <_close_r>:
 8011d54:	b538      	push	{r3, r4, r5, lr}
 8011d56:	4d06      	ldr	r5, [pc, #24]	@ (8011d70 <_close_r+0x1c>)
 8011d58:	2300      	movs	r3, #0
 8011d5a:	4604      	mov	r4, r0
 8011d5c:	4608      	mov	r0, r1
 8011d5e:	602b      	str	r3, [r5, #0]
 8011d60:	f7f1 ff38 	bl	8003bd4 <_close>
 8011d64:	1c43      	adds	r3, r0, #1
 8011d66:	d102      	bne.n	8011d6e <_close_r+0x1a>
 8011d68:	682b      	ldr	r3, [r5, #0]
 8011d6a:	b103      	cbz	r3, 8011d6e <_close_r+0x1a>
 8011d6c:	6023      	str	r3, [r4, #0]
 8011d6e:	bd38      	pop	{r3, r4, r5, pc}
 8011d70:	200017c4 	.word	0x200017c4

08011d74 <_fstat_r>:
 8011d74:	b538      	push	{r3, r4, r5, lr}
 8011d76:	4d07      	ldr	r5, [pc, #28]	@ (8011d94 <_fstat_r+0x20>)
 8011d78:	2300      	movs	r3, #0
 8011d7a:	4604      	mov	r4, r0
 8011d7c:	4608      	mov	r0, r1
 8011d7e:	4611      	mov	r1, r2
 8011d80:	602b      	str	r3, [r5, #0]
 8011d82:	f7f1 ff33 	bl	8003bec <_fstat>
 8011d86:	1c43      	adds	r3, r0, #1
 8011d88:	d102      	bne.n	8011d90 <_fstat_r+0x1c>
 8011d8a:	682b      	ldr	r3, [r5, #0]
 8011d8c:	b103      	cbz	r3, 8011d90 <_fstat_r+0x1c>
 8011d8e:	6023      	str	r3, [r4, #0]
 8011d90:	bd38      	pop	{r3, r4, r5, pc}
 8011d92:	bf00      	nop
 8011d94:	200017c4 	.word	0x200017c4

08011d98 <memcpy>:
 8011d98:	440a      	add	r2, r1
 8011d9a:	4291      	cmp	r1, r2
 8011d9c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8011da0:	d100      	bne.n	8011da4 <memcpy+0xc>
 8011da2:	4770      	bx	lr
 8011da4:	b510      	push	{r4, lr}
 8011da6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011daa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011dae:	4291      	cmp	r1, r2
 8011db0:	d1f9      	bne.n	8011da6 <memcpy+0xe>
 8011db2:	bd10      	pop	{r4, pc}

08011db4 <__assert_func>:
 8011db4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011db6:	4614      	mov	r4, r2
 8011db8:	461a      	mov	r2, r3
 8011dba:	4b09      	ldr	r3, [pc, #36]	@ (8011de0 <__assert_func+0x2c>)
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	4605      	mov	r5, r0
 8011dc0:	68d8      	ldr	r0, [r3, #12]
 8011dc2:	b14c      	cbz	r4, 8011dd8 <__assert_func+0x24>
 8011dc4:	4b07      	ldr	r3, [pc, #28]	@ (8011de4 <__assert_func+0x30>)
 8011dc6:	9100      	str	r1, [sp, #0]
 8011dc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011dcc:	4906      	ldr	r1, [pc, #24]	@ (8011de8 <__assert_func+0x34>)
 8011dce:	462b      	mov	r3, r5
 8011dd0:	f000 f886 	bl	8011ee0 <fiprintf>
 8011dd4:	f000 f8a3 	bl	8011f1e <abort>
 8011dd8:	4b04      	ldr	r3, [pc, #16]	@ (8011dec <__assert_func+0x38>)
 8011dda:	461c      	mov	r4, r3
 8011ddc:	e7f3      	b.n	8011dc6 <__assert_func+0x12>
 8011dde:	bf00      	nop
 8011de0:	200000a4 	.word	0x200000a4
 8011de4:	08013d09 	.word	0x08013d09
 8011de8:	08013d16 	.word	0x08013d16
 8011dec:	08013d44 	.word	0x08013d44

08011df0 <_calloc_r>:
 8011df0:	b570      	push	{r4, r5, r6, lr}
 8011df2:	fba1 5402 	umull	r5, r4, r1, r2
 8011df6:	b934      	cbnz	r4, 8011e06 <_calloc_r+0x16>
 8011df8:	4629      	mov	r1, r5
 8011dfa:	f7ff f921 	bl	8011040 <_malloc_r>
 8011dfe:	4606      	mov	r6, r0
 8011e00:	b928      	cbnz	r0, 8011e0e <_calloc_r+0x1e>
 8011e02:	4630      	mov	r0, r6
 8011e04:	bd70      	pop	{r4, r5, r6, pc}
 8011e06:	220c      	movs	r2, #12
 8011e08:	6002      	str	r2, [r0, #0]
 8011e0a:	2600      	movs	r6, #0
 8011e0c:	e7f9      	b.n	8011e02 <_calloc_r+0x12>
 8011e0e:	462a      	mov	r2, r5
 8011e10:	4621      	mov	r1, r4
 8011e12:	f7fd ffbf 	bl	800fd94 <memset>
 8011e16:	e7f4      	b.n	8011e02 <_calloc_r+0x12>

08011e18 <_free_r>:
 8011e18:	b538      	push	{r3, r4, r5, lr}
 8011e1a:	4605      	mov	r5, r0
 8011e1c:	2900      	cmp	r1, #0
 8011e1e:	d041      	beq.n	8011ea4 <_free_r+0x8c>
 8011e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e24:	1f0c      	subs	r4, r1, #4
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	bfb8      	it	lt
 8011e2a:	18e4      	addlt	r4, r4, r3
 8011e2c:	f7ff fa34 	bl	8011298 <__malloc_lock>
 8011e30:	4a1d      	ldr	r2, [pc, #116]	@ (8011ea8 <_free_r+0x90>)
 8011e32:	6813      	ldr	r3, [r2, #0]
 8011e34:	b933      	cbnz	r3, 8011e44 <_free_r+0x2c>
 8011e36:	6063      	str	r3, [r4, #4]
 8011e38:	6014      	str	r4, [r2, #0]
 8011e3a:	4628      	mov	r0, r5
 8011e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e40:	f7ff ba30 	b.w	80112a4 <__malloc_unlock>
 8011e44:	42a3      	cmp	r3, r4
 8011e46:	d908      	bls.n	8011e5a <_free_r+0x42>
 8011e48:	6820      	ldr	r0, [r4, #0]
 8011e4a:	1821      	adds	r1, r4, r0
 8011e4c:	428b      	cmp	r3, r1
 8011e4e:	bf01      	itttt	eq
 8011e50:	6819      	ldreq	r1, [r3, #0]
 8011e52:	685b      	ldreq	r3, [r3, #4]
 8011e54:	1809      	addeq	r1, r1, r0
 8011e56:	6021      	streq	r1, [r4, #0]
 8011e58:	e7ed      	b.n	8011e36 <_free_r+0x1e>
 8011e5a:	461a      	mov	r2, r3
 8011e5c:	685b      	ldr	r3, [r3, #4]
 8011e5e:	b10b      	cbz	r3, 8011e64 <_free_r+0x4c>
 8011e60:	42a3      	cmp	r3, r4
 8011e62:	d9fa      	bls.n	8011e5a <_free_r+0x42>
 8011e64:	6811      	ldr	r1, [r2, #0]
 8011e66:	1850      	adds	r0, r2, r1
 8011e68:	42a0      	cmp	r0, r4
 8011e6a:	d10b      	bne.n	8011e84 <_free_r+0x6c>
 8011e6c:	6820      	ldr	r0, [r4, #0]
 8011e6e:	4401      	add	r1, r0
 8011e70:	1850      	adds	r0, r2, r1
 8011e72:	4283      	cmp	r3, r0
 8011e74:	6011      	str	r1, [r2, #0]
 8011e76:	d1e0      	bne.n	8011e3a <_free_r+0x22>
 8011e78:	6818      	ldr	r0, [r3, #0]
 8011e7a:	685b      	ldr	r3, [r3, #4]
 8011e7c:	6053      	str	r3, [r2, #4]
 8011e7e:	4408      	add	r0, r1
 8011e80:	6010      	str	r0, [r2, #0]
 8011e82:	e7da      	b.n	8011e3a <_free_r+0x22>
 8011e84:	d902      	bls.n	8011e8c <_free_r+0x74>
 8011e86:	230c      	movs	r3, #12
 8011e88:	602b      	str	r3, [r5, #0]
 8011e8a:	e7d6      	b.n	8011e3a <_free_r+0x22>
 8011e8c:	6820      	ldr	r0, [r4, #0]
 8011e8e:	1821      	adds	r1, r4, r0
 8011e90:	428b      	cmp	r3, r1
 8011e92:	bf04      	itt	eq
 8011e94:	6819      	ldreq	r1, [r3, #0]
 8011e96:	685b      	ldreq	r3, [r3, #4]
 8011e98:	6063      	str	r3, [r4, #4]
 8011e9a:	bf04      	itt	eq
 8011e9c:	1809      	addeq	r1, r1, r0
 8011e9e:	6021      	streq	r1, [r4, #0]
 8011ea0:	6054      	str	r4, [r2, #4]
 8011ea2:	e7ca      	b.n	8011e3a <_free_r+0x22>
 8011ea4:	bd38      	pop	{r3, r4, r5, pc}
 8011ea6:	bf00      	nop
 8011ea8:	200017c0 	.word	0x200017c0

08011eac <__ascii_mbtowc>:
 8011eac:	b082      	sub	sp, #8
 8011eae:	b901      	cbnz	r1, 8011eb2 <__ascii_mbtowc+0x6>
 8011eb0:	a901      	add	r1, sp, #4
 8011eb2:	b142      	cbz	r2, 8011ec6 <__ascii_mbtowc+0x1a>
 8011eb4:	b14b      	cbz	r3, 8011eca <__ascii_mbtowc+0x1e>
 8011eb6:	7813      	ldrb	r3, [r2, #0]
 8011eb8:	600b      	str	r3, [r1, #0]
 8011eba:	7812      	ldrb	r2, [r2, #0]
 8011ebc:	1e10      	subs	r0, r2, #0
 8011ebe:	bf18      	it	ne
 8011ec0:	2001      	movne	r0, #1
 8011ec2:	b002      	add	sp, #8
 8011ec4:	4770      	bx	lr
 8011ec6:	4610      	mov	r0, r2
 8011ec8:	e7fb      	b.n	8011ec2 <__ascii_mbtowc+0x16>
 8011eca:	f06f 0001 	mvn.w	r0, #1
 8011ece:	e7f8      	b.n	8011ec2 <__ascii_mbtowc+0x16>

08011ed0 <_malloc_usable_size_r>:
 8011ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ed4:	1f18      	subs	r0, r3, #4
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	bfbc      	itt	lt
 8011eda:	580b      	ldrlt	r3, [r1, r0]
 8011edc:	18c0      	addlt	r0, r0, r3
 8011ede:	4770      	bx	lr

08011ee0 <fiprintf>:
 8011ee0:	b40e      	push	{r1, r2, r3}
 8011ee2:	b503      	push	{r0, r1, lr}
 8011ee4:	4601      	mov	r1, r0
 8011ee6:	ab03      	add	r3, sp, #12
 8011ee8:	4805      	ldr	r0, [pc, #20]	@ (8011f00 <fiprintf+0x20>)
 8011eea:	f853 2b04 	ldr.w	r2, [r3], #4
 8011eee:	6800      	ldr	r0, [r0, #0]
 8011ef0:	9301      	str	r3, [sp, #4]
 8011ef2:	f7fe ff63 	bl	8010dbc <_vfiprintf_r>
 8011ef6:	b002      	add	sp, #8
 8011ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011efc:	b003      	add	sp, #12
 8011efe:	4770      	bx	lr
 8011f00:	200000a4 	.word	0x200000a4

08011f04 <__ascii_wctomb>:
 8011f04:	4603      	mov	r3, r0
 8011f06:	4608      	mov	r0, r1
 8011f08:	b141      	cbz	r1, 8011f1c <__ascii_wctomb+0x18>
 8011f0a:	2aff      	cmp	r2, #255	@ 0xff
 8011f0c:	d904      	bls.n	8011f18 <__ascii_wctomb+0x14>
 8011f0e:	228a      	movs	r2, #138	@ 0x8a
 8011f10:	601a      	str	r2, [r3, #0]
 8011f12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011f16:	4770      	bx	lr
 8011f18:	700a      	strb	r2, [r1, #0]
 8011f1a:	2001      	movs	r0, #1
 8011f1c:	4770      	bx	lr

08011f1e <abort>:
 8011f1e:	b508      	push	{r3, lr}
 8011f20:	2006      	movs	r0, #6
 8011f22:	f000 f82b 	bl	8011f7c <raise>
 8011f26:	2001      	movs	r0, #1
 8011f28:	f7f1 fe2c 	bl	8003b84 <_exit>

08011f2c <_raise_r>:
 8011f2c:	291f      	cmp	r1, #31
 8011f2e:	b538      	push	{r3, r4, r5, lr}
 8011f30:	4605      	mov	r5, r0
 8011f32:	460c      	mov	r4, r1
 8011f34:	d904      	bls.n	8011f40 <_raise_r+0x14>
 8011f36:	2316      	movs	r3, #22
 8011f38:	6003      	str	r3, [r0, #0]
 8011f3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011f3e:	bd38      	pop	{r3, r4, r5, pc}
 8011f40:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011f42:	b112      	cbz	r2, 8011f4a <_raise_r+0x1e>
 8011f44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011f48:	b94b      	cbnz	r3, 8011f5e <_raise_r+0x32>
 8011f4a:	4628      	mov	r0, r5
 8011f4c:	f000 f830 	bl	8011fb0 <_getpid_r>
 8011f50:	4622      	mov	r2, r4
 8011f52:	4601      	mov	r1, r0
 8011f54:	4628      	mov	r0, r5
 8011f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f5a:	f000 b817 	b.w	8011f8c <_kill_r>
 8011f5e:	2b01      	cmp	r3, #1
 8011f60:	d00a      	beq.n	8011f78 <_raise_r+0x4c>
 8011f62:	1c59      	adds	r1, r3, #1
 8011f64:	d103      	bne.n	8011f6e <_raise_r+0x42>
 8011f66:	2316      	movs	r3, #22
 8011f68:	6003      	str	r3, [r0, #0]
 8011f6a:	2001      	movs	r0, #1
 8011f6c:	e7e7      	b.n	8011f3e <_raise_r+0x12>
 8011f6e:	2100      	movs	r1, #0
 8011f70:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011f74:	4620      	mov	r0, r4
 8011f76:	4798      	blx	r3
 8011f78:	2000      	movs	r0, #0
 8011f7a:	e7e0      	b.n	8011f3e <_raise_r+0x12>

08011f7c <raise>:
 8011f7c:	4b02      	ldr	r3, [pc, #8]	@ (8011f88 <raise+0xc>)
 8011f7e:	4601      	mov	r1, r0
 8011f80:	6818      	ldr	r0, [r3, #0]
 8011f82:	f7ff bfd3 	b.w	8011f2c <_raise_r>
 8011f86:	bf00      	nop
 8011f88:	200000a4 	.word	0x200000a4

08011f8c <_kill_r>:
 8011f8c:	b538      	push	{r3, r4, r5, lr}
 8011f8e:	4d07      	ldr	r5, [pc, #28]	@ (8011fac <_kill_r+0x20>)
 8011f90:	2300      	movs	r3, #0
 8011f92:	4604      	mov	r4, r0
 8011f94:	4608      	mov	r0, r1
 8011f96:	4611      	mov	r1, r2
 8011f98:	602b      	str	r3, [r5, #0]
 8011f9a:	f7f1 fde3 	bl	8003b64 <_kill>
 8011f9e:	1c43      	adds	r3, r0, #1
 8011fa0:	d102      	bne.n	8011fa8 <_kill_r+0x1c>
 8011fa2:	682b      	ldr	r3, [r5, #0]
 8011fa4:	b103      	cbz	r3, 8011fa8 <_kill_r+0x1c>
 8011fa6:	6023      	str	r3, [r4, #0]
 8011fa8:	bd38      	pop	{r3, r4, r5, pc}
 8011faa:	bf00      	nop
 8011fac:	200017c4 	.word	0x200017c4

08011fb0 <_getpid_r>:
 8011fb0:	f7f1 bdd0 	b.w	8003b54 <_getpid>

08011fb4 <pow>:
 8011fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fb6:	ed2d 8b02 	vpush	{d8}
 8011fba:	eeb0 8a40 	vmov.f32	s16, s0
 8011fbe:	eef0 8a60 	vmov.f32	s17, s1
 8011fc2:	ec55 4b11 	vmov	r4, r5, d1
 8011fc6:	f000 f873 	bl	80120b0 <__ieee754_pow>
 8011fca:	4622      	mov	r2, r4
 8011fcc:	462b      	mov	r3, r5
 8011fce:	4620      	mov	r0, r4
 8011fd0:	4629      	mov	r1, r5
 8011fd2:	ec57 6b10 	vmov	r6, r7, d0
 8011fd6:	f7ee fda9 	bl	8000b2c <__aeabi_dcmpun>
 8011fda:	2800      	cmp	r0, #0
 8011fdc:	d13b      	bne.n	8012056 <pow+0xa2>
 8011fde:	ec51 0b18 	vmov	r0, r1, d8
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	f7ee fd6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8011fea:	b1b8      	cbz	r0, 801201c <pow+0x68>
 8011fec:	2200      	movs	r2, #0
 8011fee:	2300      	movs	r3, #0
 8011ff0:	4620      	mov	r0, r4
 8011ff2:	4629      	mov	r1, r5
 8011ff4:	f7ee fd68 	bl	8000ac8 <__aeabi_dcmpeq>
 8011ff8:	2800      	cmp	r0, #0
 8011ffa:	d146      	bne.n	801208a <pow+0xd6>
 8011ffc:	ec45 4b10 	vmov	d0, r4, r5
 8012000:	f000 f848 	bl	8012094 <finite>
 8012004:	b338      	cbz	r0, 8012056 <pow+0xa2>
 8012006:	2200      	movs	r2, #0
 8012008:	2300      	movs	r3, #0
 801200a:	4620      	mov	r0, r4
 801200c:	4629      	mov	r1, r5
 801200e:	f7ee fd65 	bl	8000adc <__aeabi_dcmplt>
 8012012:	b300      	cbz	r0, 8012056 <pow+0xa2>
 8012014:	f7fd fec6 	bl	800fda4 <__errno>
 8012018:	2322      	movs	r3, #34	@ 0x22
 801201a:	e01b      	b.n	8012054 <pow+0xa0>
 801201c:	ec47 6b10 	vmov	d0, r6, r7
 8012020:	f000 f838 	bl	8012094 <finite>
 8012024:	b9e0      	cbnz	r0, 8012060 <pow+0xac>
 8012026:	eeb0 0a48 	vmov.f32	s0, s16
 801202a:	eef0 0a68 	vmov.f32	s1, s17
 801202e:	f000 f831 	bl	8012094 <finite>
 8012032:	b1a8      	cbz	r0, 8012060 <pow+0xac>
 8012034:	ec45 4b10 	vmov	d0, r4, r5
 8012038:	f000 f82c 	bl	8012094 <finite>
 801203c:	b180      	cbz	r0, 8012060 <pow+0xac>
 801203e:	4632      	mov	r2, r6
 8012040:	463b      	mov	r3, r7
 8012042:	4630      	mov	r0, r6
 8012044:	4639      	mov	r1, r7
 8012046:	f7ee fd71 	bl	8000b2c <__aeabi_dcmpun>
 801204a:	2800      	cmp	r0, #0
 801204c:	d0e2      	beq.n	8012014 <pow+0x60>
 801204e:	f7fd fea9 	bl	800fda4 <__errno>
 8012052:	2321      	movs	r3, #33	@ 0x21
 8012054:	6003      	str	r3, [r0, #0]
 8012056:	ecbd 8b02 	vpop	{d8}
 801205a:	ec47 6b10 	vmov	d0, r6, r7
 801205e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012060:	2200      	movs	r2, #0
 8012062:	2300      	movs	r3, #0
 8012064:	4630      	mov	r0, r6
 8012066:	4639      	mov	r1, r7
 8012068:	f7ee fd2e 	bl	8000ac8 <__aeabi_dcmpeq>
 801206c:	2800      	cmp	r0, #0
 801206e:	d0f2      	beq.n	8012056 <pow+0xa2>
 8012070:	eeb0 0a48 	vmov.f32	s0, s16
 8012074:	eef0 0a68 	vmov.f32	s1, s17
 8012078:	f000 f80c 	bl	8012094 <finite>
 801207c:	2800      	cmp	r0, #0
 801207e:	d0ea      	beq.n	8012056 <pow+0xa2>
 8012080:	ec45 4b10 	vmov	d0, r4, r5
 8012084:	f000 f806 	bl	8012094 <finite>
 8012088:	e7c3      	b.n	8012012 <pow+0x5e>
 801208a:	4f01      	ldr	r7, [pc, #4]	@ (8012090 <pow+0xdc>)
 801208c:	2600      	movs	r6, #0
 801208e:	e7e2      	b.n	8012056 <pow+0xa2>
 8012090:	3ff00000 	.word	0x3ff00000

08012094 <finite>:
 8012094:	b082      	sub	sp, #8
 8012096:	ed8d 0b00 	vstr	d0, [sp]
 801209a:	9801      	ldr	r0, [sp, #4]
 801209c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80120a0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80120a4:	0fc0      	lsrs	r0, r0, #31
 80120a6:	b002      	add	sp, #8
 80120a8:	4770      	bx	lr
 80120aa:	0000      	movs	r0, r0
 80120ac:	0000      	movs	r0, r0
	...

080120b0 <__ieee754_pow>:
 80120b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120b4:	b091      	sub	sp, #68	@ 0x44
 80120b6:	ed8d 1b00 	vstr	d1, [sp]
 80120ba:	e9dd 1900 	ldrd	r1, r9, [sp]
 80120be:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80120c2:	ea5a 0001 	orrs.w	r0, sl, r1
 80120c6:	ec57 6b10 	vmov	r6, r7, d0
 80120ca:	d113      	bne.n	80120f4 <__ieee754_pow+0x44>
 80120cc:	19b3      	adds	r3, r6, r6
 80120ce:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80120d2:	4152      	adcs	r2, r2
 80120d4:	4298      	cmp	r0, r3
 80120d6:	4b9a      	ldr	r3, [pc, #616]	@ (8012340 <__ieee754_pow+0x290>)
 80120d8:	4193      	sbcs	r3, r2
 80120da:	f080 84ee 	bcs.w	8012aba <__ieee754_pow+0xa0a>
 80120de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80120e2:	4630      	mov	r0, r6
 80120e4:	4639      	mov	r1, r7
 80120e6:	f7ee f8d1 	bl	800028c <__adddf3>
 80120ea:	ec41 0b10 	vmov	d0, r0, r1
 80120ee:	b011      	add	sp, #68	@ 0x44
 80120f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120f4:	4a93      	ldr	r2, [pc, #588]	@ (8012344 <__ieee754_pow+0x294>)
 80120f6:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 80120fa:	4295      	cmp	r5, r2
 80120fc:	46b8      	mov	r8, r7
 80120fe:	4633      	mov	r3, r6
 8012100:	d80a      	bhi.n	8012118 <__ieee754_pow+0x68>
 8012102:	d104      	bne.n	801210e <__ieee754_pow+0x5e>
 8012104:	2e00      	cmp	r6, #0
 8012106:	d1ea      	bne.n	80120de <__ieee754_pow+0x2e>
 8012108:	45aa      	cmp	sl, r5
 801210a:	d8e8      	bhi.n	80120de <__ieee754_pow+0x2e>
 801210c:	e001      	b.n	8012112 <__ieee754_pow+0x62>
 801210e:	4592      	cmp	sl, r2
 8012110:	d802      	bhi.n	8012118 <__ieee754_pow+0x68>
 8012112:	4592      	cmp	sl, r2
 8012114:	d10f      	bne.n	8012136 <__ieee754_pow+0x86>
 8012116:	b171      	cbz	r1, 8012136 <__ieee754_pow+0x86>
 8012118:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801211c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8012120:	ea58 0803 	orrs.w	r8, r8, r3
 8012124:	d1db      	bne.n	80120de <__ieee754_pow+0x2e>
 8012126:	e9dd 3200 	ldrd	r3, r2, [sp]
 801212a:	18db      	adds	r3, r3, r3
 801212c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8012130:	4152      	adcs	r2, r2
 8012132:	4598      	cmp	r8, r3
 8012134:	e7cf      	b.n	80120d6 <__ieee754_pow+0x26>
 8012136:	f1b8 0f00 	cmp.w	r8, #0
 801213a:	46ab      	mov	fp, r5
 801213c:	da43      	bge.n	80121c6 <__ieee754_pow+0x116>
 801213e:	4a82      	ldr	r2, [pc, #520]	@ (8012348 <__ieee754_pow+0x298>)
 8012140:	4592      	cmp	sl, r2
 8012142:	d856      	bhi.n	80121f2 <__ieee754_pow+0x142>
 8012144:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8012148:	4592      	cmp	sl, r2
 801214a:	f240 84c5 	bls.w	8012ad8 <__ieee754_pow+0xa28>
 801214e:	ea4f 522a 	mov.w	r2, sl, asr #20
 8012152:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8012156:	2a14      	cmp	r2, #20
 8012158:	dd18      	ble.n	801218c <__ieee754_pow+0xdc>
 801215a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801215e:	fa21 f402 	lsr.w	r4, r1, r2
 8012162:	fa04 f202 	lsl.w	r2, r4, r2
 8012166:	428a      	cmp	r2, r1
 8012168:	f040 84b6 	bne.w	8012ad8 <__ieee754_pow+0xa28>
 801216c:	f004 0401 	and.w	r4, r4, #1
 8012170:	f1c4 0402 	rsb	r4, r4, #2
 8012174:	2900      	cmp	r1, #0
 8012176:	d159      	bne.n	801222c <__ieee754_pow+0x17c>
 8012178:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801217c:	d148      	bne.n	8012210 <__ieee754_pow+0x160>
 801217e:	4632      	mov	r2, r6
 8012180:	463b      	mov	r3, r7
 8012182:	4630      	mov	r0, r6
 8012184:	4639      	mov	r1, r7
 8012186:	f7ee fa37 	bl	80005f8 <__aeabi_dmul>
 801218a:	e7ae      	b.n	80120ea <__ieee754_pow+0x3a>
 801218c:	2900      	cmp	r1, #0
 801218e:	d14c      	bne.n	801222a <__ieee754_pow+0x17a>
 8012190:	f1c2 0214 	rsb	r2, r2, #20
 8012194:	fa4a f402 	asr.w	r4, sl, r2
 8012198:	fa04 f202 	lsl.w	r2, r4, r2
 801219c:	4552      	cmp	r2, sl
 801219e:	f040 8498 	bne.w	8012ad2 <__ieee754_pow+0xa22>
 80121a2:	f004 0401 	and.w	r4, r4, #1
 80121a6:	f1c4 0402 	rsb	r4, r4, #2
 80121aa:	4a68      	ldr	r2, [pc, #416]	@ (801234c <__ieee754_pow+0x29c>)
 80121ac:	4592      	cmp	sl, r2
 80121ae:	d1e3      	bne.n	8012178 <__ieee754_pow+0xc8>
 80121b0:	f1b9 0f00 	cmp.w	r9, #0
 80121b4:	f280 8489 	bge.w	8012aca <__ieee754_pow+0xa1a>
 80121b8:	4964      	ldr	r1, [pc, #400]	@ (801234c <__ieee754_pow+0x29c>)
 80121ba:	4632      	mov	r2, r6
 80121bc:	463b      	mov	r3, r7
 80121be:	2000      	movs	r0, #0
 80121c0:	f7ee fb44 	bl	800084c <__aeabi_ddiv>
 80121c4:	e791      	b.n	80120ea <__ieee754_pow+0x3a>
 80121c6:	2400      	movs	r4, #0
 80121c8:	bb81      	cbnz	r1, 801222c <__ieee754_pow+0x17c>
 80121ca:	4a5e      	ldr	r2, [pc, #376]	@ (8012344 <__ieee754_pow+0x294>)
 80121cc:	4592      	cmp	sl, r2
 80121ce:	d1ec      	bne.n	80121aa <__ieee754_pow+0xfa>
 80121d0:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 80121d4:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80121d8:	431a      	orrs	r2, r3
 80121da:	f000 846e 	beq.w	8012aba <__ieee754_pow+0xa0a>
 80121de:	4b5c      	ldr	r3, [pc, #368]	@ (8012350 <__ieee754_pow+0x2a0>)
 80121e0:	429d      	cmp	r5, r3
 80121e2:	d908      	bls.n	80121f6 <__ieee754_pow+0x146>
 80121e4:	f1b9 0f00 	cmp.w	r9, #0
 80121e8:	f280 846b 	bge.w	8012ac2 <__ieee754_pow+0xa12>
 80121ec:	2000      	movs	r0, #0
 80121ee:	2100      	movs	r1, #0
 80121f0:	e77b      	b.n	80120ea <__ieee754_pow+0x3a>
 80121f2:	2402      	movs	r4, #2
 80121f4:	e7e8      	b.n	80121c8 <__ieee754_pow+0x118>
 80121f6:	f1b9 0f00 	cmp.w	r9, #0
 80121fa:	f04f 0000 	mov.w	r0, #0
 80121fe:	f04f 0100 	mov.w	r1, #0
 8012202:	f6bf af72 	bge.w	80120ea <__ieee754_pow+0x3a>
 8012206:	e9dd 0300 	ldrd	r0, r3, [sp]
 801220a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801220e:	e76c      	b.n	80120ea <__ieee754_pow+0x3a>
 8012210:	4a50      	ldr	r2, [pc, #320]	@ (8012354 <__ieee754_pow+0x2a4>)
 8012212:	4591      	cmp	r9, r2
 8012214:	d10a      	bne.n	801222c <__ieee754_pow+0x17c>
 8012216:	f1b8 0f00 	cmp.w	r8, #0
 801221a:	db07      	blt.n	801222c <__ieee754_pow+0x17c>
 801221c:	ec47 6b10 	vmov	d0, r6, r7
 8012220:	b011      	add	sp, #68	@ 0x44
 8012222:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012226:	f000 bd4d 	b.w	8012cc4 <__ieee754_sqrt>
 801222a:	2400      	movs	r4, #0
 801222c:	ec47 6b10 	vmov	d0, r6, r7
 8012230:	9302      	str	r3, [sp, #8]
 8012232:	f000 fcc5 	bl	8012bc0 <fabs>
 8012236:	9b02      	ldr	r3, [sp, #8]
 8012238:	ec51 0b10 	vmov	r0, r1, d0
 801223c:	bb43      	cbnz	r3, 8012290 <__ieee754_pow+0x1e0>
 801223e:	4b43      	ldr	r3, [pc, #268]	@ (801234c <__ieee754_pow+0x29c>)
 8012240:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8012244:	429a      	cmp	r2, r3
 8012246:	d000      	beq.n	801224a <__ieee754_pow+0x19a>
 8012248:	bb15      	cbnz	r5, 8012290 <__ieee754_pow+0x1e0>
 801224a:	f1b9 0f00 	cmp.w	r9, #0
 801224e:	da05      	bge.n	801225c <__ieee754_pow+0x1ac>
 8012250:	4602      	mov	r2, r0
 8012252:	460b      	mov	r3, r1
 8012254:	2000      	movs	r0, #0
 8012256:	493d      	ldr	r1, [pc, #244]	@ (801234c <__ieee754_pow+0x29c>)
 8012258:	f7ee faf8 	bl	800084c <__aeabi_ddiv>
 801225c:	f1b8 0f00 	cmp.w	r8, #0
 8012260:	f6bf af43 	bge.w	80120ea <__ieee754_pow+0x3a>
 8012264:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8012268:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 801226c:	4325      	orrs	r5, r4
 801226e:	d108      	bne.n	8012282 <__ieee754_pow+0x1d2>
 8012270:	4602      	mov	r2, r0
 8012272:	460b      	mov	r3, r1
 8012274:	4610      	mov	r0, r2
 8012276:	4619      	mov	r1, r3
 8012278:	f7ee f806 	bl	8000288 <__aeabi_dsub>
 801227c:	4602      	mov	r2, r0
 801227e:	460b      	mov	r3, r1
 8012280:	e79e      	b.n	80121c0 <__ieee754_pow+0x110>
 8012282:	2c01      	cmp	r4, #1
 8012284:	f47f af31 	bne.w	80120ea <__ieee754_pow+0x3a>
 8012288:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801228c:	4619      	mov	r1, r3
 801228e:	e72c      	b.n	80120ea <__ieee754_pow+0x3a>
 8012290:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8012294:	3b01      	subs	r3, #1
 8012296:	ea53 0204 	orrs.w	r2, r3, r4
 801229a:	d102      	bne.n	80122a2 <__ieee754_pow+0x1f2>
 801229c:	4632      	mov	r2, r6
 801229e:	463b      	mov	r3, r7
 80122a0:	e7e8      	b.n	8012274 <__ieee754_pow+0x1c4>
 80122a2:	3c01      	subs	r4, #1
 80122a4:	431c      	orrs	r4, r3
 80122a6:	d016      	beq.n	80122d6 <__ieee754_pow+0x226>
 80122a8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012330 <__ieee754_pow+0x280>
 80122ac:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80122b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80122b4:	f240 8110 	bls.w	80124d8 <__ieee754_pow+0x428>
 80122b8:	4b27      	ldr	r3, [pc, #156]	@ (8012358 <__ieee754_pow+0x2a8>)
 80122ba:	459a      	cmp	sl, r3
 80122bc:	4b24      	ldr	r3, [pc, #144]	@ (8012350 <__ieee754_pow+0x2a0>)
 80122be:	d916      	bls.n	80122ee <__ieee754_pow+0x23e>
 80122c0:	429d      	cmp	r5, r3
 80122c2:	d80b      	bhi.n	80122dc <__ieee754_pow+0x22c>
 80122c4:	f1b9 0f00 	cmp.w	r9, #0
 80122c8:	da0b      	bge.n	80122e2 <__ieee754_pow+0x232>
 80122ca:	2000      	movs	r0, #0
 80122cc:	b011      	add	sp, #68	@ 0x44
 80122ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122d2:	f000 bc6d 	b.w	8012bb0 <__math_oflow>
 80122d6:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8012338 <__ieee754_pow+0x288>
 80122da:	e7e7      	b.n	80122ac <__ieee754_pow+0x1fc>
 80122dc:	f1b9 0f00 	cmp.w	r9, #0
 80122e0:	dcf3      	bgt.n	80122ca <__ieee754_pow+0x21a>
 80122e2:	2000      	movs	r0, #0
 80122e4:	b011      	add	sp, #68	@ 0x44
 80122e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122ea:	f000 bc59 	b.w	8012ba0 <__math_uflow>
 80122ee:	429d      	cmp	r5, r3
 80122f0:	d20c      	bcs.n	801230c <__ieee754_pow+0x25c>
 80122f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80122f6:	2200      	movs	r2, #0
 80122f8:	2300      	movs	r3, #0
 80122fa:	f7ee fbef 	bl	8000adc <__aeabi_dcmplt>
 80122fe:	3800      	subs	r0, #0
 8012300:	bf18      	it	ne
 8012302:	2001      	movne	r0, #1
 8012304:	f1b9 0f00 	cmp.w	r9, #0
 8012308:	daec      	bge.n	80122e4 <__ieee754_pow+0x234>
 801230a:	e7df      	b.n	80122cc <__ieee754_pow+0x21c>
 801230c:	4b0f      	ldr	r3, [pc, #60]	@ (801234c <__ieee754_pow+0x29c>)
 801230e:	429d      	cmp	r5, r3
 8012310:	f04f 0200 	mov.w	r2, #0
 8012314:	d922      	bls.n	801235c <__ieee754_pow+0x2ac>
 8012316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801231a:	2300      	movs	r3, #0
 801231c:	f7ee fbde 	bl	8000adc <__aeabi_dcmplt>
 8012320:	3800      	subs	r0, #0
 8012322:	bf18      	it	ne
 8012324:	2001      	movne	r0, #1
 8012326:	f1b9 0f00 	cmp.w	r9, #0
 801232a:	dccf      	bgt.n	80122cc <__ieee754_pow+0x21c>
 801232c:	e7da      	b.n	80122e4 <__ieee754_pow+0x234>
 801232e:	bf00      	nop
 8012330:	00000000 	.word	0x00000000
 8012334:	3ff00000 	.word	0x3ff00000
 8012338:	00000000 	.word	0x00000000
 801233c:	bff00000 	.word	0xbff00000
 8012340:	fff00000 	.word	0xfff00000
 8012344:	7ff00000 	.word	0x7ff00000
 8012348:	433fffff 	.word	0x433fffff
 801234c:	3ff00000 	.word	0x3ff00000
 8012350:	3fefffff 	.word	0x3fefffff
 8012354:	3fe00000 	.word	0x3fe00000
 8012358:	43f00000 	.word	0x43f00000
 801235c:	4b5a      	ldr	r3, [pc, #360]	@ (80124c8 <__ieee754_pow+0x418>)
 801235e:	f7ed ff93 	bl	8000288 <__aeabi_dsub>
 8012362:	a351      	add	r3, pc, #324	@ (adr r3, 80124a8 <__ieee754_pow+0x3f8>)
 8012364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012368:	4604      	mov	r4, r0
 801236a:	460d      	mov	r5, r1
 801236c:	f7ee f944 	bl	80005f8 <__aeabi_dmul>
 8012370:	a34f      	add	r3, pc, #316	@ (adr r3, 80124b0 <__ieee754_pow+0x400>)
 8012372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012376:	4606      	mov	r6, r0
 8012378:	460f      	mov	r7, r1
 801237a:	4620      	mov	r0, r4
 801237c:	4629      	mov	r1, r5
 801237e:	f7ee f93b 	bl	80005f8 <__aeabi_dmul>
 8012382:	4b52      	ldr	r3, [pc, #328]	@ (80124cc <__ieee754_pow+0x41c>)
 8012384:	4682      	mov	sl, r0
 8012386:	468b      	mov	fp, r1
 8012388:	2200      	movs	r2, #0
 801238a:	4620      	mov	r0, r4
 801238c:	4629      	mov	r1, r5
 801238e:	f7ee f933 	bl	80005f8 <__aeabi_dmul>
 8012392:	4602      	mov	r2, r0
 8012394:	460b      	mov	r3, r1
 8012396:	a148      	add	r1, pc, #288	@ (adr r1, 80124b8 <__ieee754_pow+0x408>)
 8012398:	e9d1 0100 	ldrd	r0, r1, [r1]
 801239c:	f7ed ff74 	bl	8000288 <__aeabi_dsub>
 80123a0:	4622      	mov	r2, r4
 80123a2:	462b      	mov	r3, r5
 80123a4:	f7ee f928 	bl	80005f8 <__aeabi_dmul>
 80123a8:	4602      	mov	r2, r0
 80123aa:	460b      	mov	r3, r1
 80123ac:	2000      	movs	r0, #0
 80123ae:	4948      	ldr	r1, [pc, #288]	@ (80124d0 <__ieee754_pow+0x420>)
 80123b0:	f7ed ff6a 	bl	8000288 <__aeabi_dsub>
 80123b4:	4622      	mov	r2, r4
 80123b6:	4680      	mov	r8, r0
 80123b8:	4689      	mov	r9, r1
 80123ba:	462b      	mov	r3, r5
 80123bc:	4620      	mov	r0, r4
 80123be:	4629      	mov	r1, r5
 80123c0:	f7ee f91a 	bl	80005f8 <__aeabi_dmul>
 80123c4:	4602      	mov	r2, r0
 80123c6:	460b      	mov	r3, r1
 80123c8:	4640      	mov	r0, r8
 80123ca:	4649      	mov	r1, r9
 80123cc:	f7ee f914 	bl	80005f8 <__aeabi_dmul>
 80123d0:	a33b      	add	r3, pc, #236	@ (adr r3, 80124c0 <__ieee754_pow+0x410>)
 80123d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123d6:	f7ee f90f 	bl	80005f8 <__aeabi_dmul>
 80123da:	4602      	mov	r2, r0
 80123dc:	460b      	mov	r3, r1
 80123de:	4650      	mov	r0, sl
 80123e0:	4659      	mov	r1, fp
 80123e2:	f7ed ff51 	bl	8000288 <__aeabi_dsub>
 80123e6:	4602      	mov	r2, r0
 80123e8:	460b      	mov	r3, r1
 80123ea:	4680      	mov	r8, r0
 80123ec:	4689      	mov	r9, r1
 80123ee:	4630      	mov	r0, r6
 80123f0:	4639      	mov	r1, r7
 80123f2:	f7ed ff4b 	bl	800028c <__adddf3>
 80123f6:	2400      	movs	r4, #0
 80123f8:	4632      	mov	r2, r6
 80123fa:	463b      	mov	r3, r7
 80123fc:	4620      	mov	r0, r4
 80123fe:	460d      	mov	r5, r1
 8012400:	f7ed ff42 	bl	8000288 <__aeabi_dsub>
 8012404:	4602      	mov	r2, r0
 8012406:	460b      	mov	r3, r1
 8012408:	4640      	mov	r0, r8
 801240a:	4649      	mov	r1, r9
 801240c:	f7ed ff3c 	bl	8000288 <__aeabi_dsub>
 8012410:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012414:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012418:	2300      	movs	r3, #0
 801241a:	9304      	str	r3, [sp, #16]
 801241c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012420:	4606      	mov	r6, r0
 8012422:	460f      	mov	r7, r1
 8012424:	465b      	mov	r3, fp
 8012426:	4652      	mov	r2, sl
 8012428:	e9dd 0100 	ldrd	r0, r1, [sp]
 801242c:	f7ed ff2c 	bl	8000288 <__aeabi_dsub>
 8012430:	4622      	mov	r2, r4
 8012432:	462b      	mov	r3, r5
 8012434:	f7ee f8e0 	bl	80005f8 <__aeabi_dmul>
 8012438:	e9dd 2300 	ldrd	r2, r3, [sp]
 801243c:	4680      	mov	r8, r0
 801243e:	4689      	mov	r9, r1
 8012440:	4630      	mov	r0, r6
 8012442:	4639      	mov	r1, r7
 8012444:	f7ee f8d8 	bl	80005f8 <__aeabi_dmul>
 8012448:	4602      	mov	r2, r0
 801244a:	460b      	mov	r3, r1
 801244c:	4640      	mov	r0, r8
 801244e:	4649      	mov	r1, r9
 8012450:	f7ed ff1c 	bl	800028c <__adddf3>
 8012454:	465b      	mov	r3, fp
 8012456:	4606      	mov	r6, r0
 8012458:	460f      	mov	r7, r1
 801245a:	4652      	mov	r2, sl
 801245c:	4620      	mov	r0, r4
 801245e:	4629      	mov	r1, r5
 8012460:	f7ee f8ca 	bl	80005f8 <__aeabi_dmul>
 8012464:	460b      	mov	r3, r1
 8012466:	4602      	mov	r2, r0
 8012468:	4680      	mov	r8, r0
 801246a:	4689      	mov	r9, r1
 801246c:	4630      	mov	r0, r6
 801246e:	4639      	mov	r1, r7
 8012470:	f7ed ff0c 	bl	800028c <__adddf3>
 8012474:	4b17      	ldr	r3, [pc, #92]	@ (80124d4 <__ieee754_pow+0x424>)
 8012476:	4299      	cmp	r1, r3
 8012478:	4604      	mov	r4, r0
 801247a:	460d      	mov	r5, r1
 801247c:	468b      	mov	fp, r1
 801247e:	f340 820b 	ble.w	8012898 <__ieee754_pow+0x7e8>
 8012482:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8012486:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801248a:	4303      	orrs	r3, r0
 801248c:	f000 81ea 	beq.w	8012864 <__ieee754_pow+0x7b4>
 8012490:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012494:	2200      	movs	r2, #0
 8012496:	2300      	movs	r3, #0
 8012498:	f7ee fb20 	bl	8000adc <__aeabi_dcmplt>
 801249c:	3800      	subs	r0, #0
 801249e:	bf18      	it	ne
 80124a0:	2001      	movne	r0, #1
 80124a2:	e713      	b.n	80122cc <__ieee754_pow+0x21c>
 80124a4:	f3af 8000 	nop.w
 80124a8:	60000000 	.word	0x60000000
 80124ac:	3ff71547 	.word	0x3ff71547
 80124b0:	f85ddf44 	.word	0xf85ddf44
 80124b4:	3e54ae0b 	.word	0x3e54ae0b
 80124b8:	55555555 	.word	0x55555555
 80124bc:	3fd55555 	.word	0x3fd55555
 80124c0:	652b82fe 	.word	0x652b82fe
 80124c4:	3ff71547 	.word	0x3ff71547
 80124c8:	3ff00000 	.word	0x3ff00000
 80124cc:	3fd00000 	.word	0x3fd00000
 80124d0:	3fe00000 	.word	0x3fe00000
 80124d4:	408fffff 	.word	0x408fffff
 80124d8:	4bd5      	ldr	r3, [pc, #852]	@ (8012830 <__ieee754_pow+0x780>)
 80124da:	ea08 0303 	and.w	r3, r8, r3
 80124de:	2200      	movs	r2, #0
 80124e0:	b92b      	cbnz	r3, 80124ee <__ieee754_pow+0x43e>
 80124e2:	4bd4      	ldr	r3, [pc, #848]	@ (8012834 <__ieee754_pow+0x784>)
 80124e4:	f7ee f888 	bl	80005f8 <__aeabi_dmul>
 80124e8:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80124ec:	468b      	mov	fp, r1
 80124ee:	ea4f 532b 	mov.w	r3, fp, asr #20
 80124f2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80124f6:	4413      	add	r3, r2
 80124f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80124fa:	4bcf      	ldr	r3, [pc, #828]	@ (8012838 <__ieee754_pow+0x788>)
 80124fc:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8012500:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8012504:	459b      	cmp	fp, r3
 8012506:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801250a:	dd08      	ble.n	801251e <__ieee754_pow+0x46e>
 801250c:	4bcb      	ldr	r3, [pc, #812]	@ (801283c <__ieee754_pow+0x78c>)
 801250e:	459b      	cmp	fp, r3
 8012510:	f340 81a5 	ble.w	801285e <__ieee754_pow+0x7ae>
 8012514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012516:	3301      	adds	r3, #1
 8012518:	930a      	str	r3, [sp, #40]	@ 0x28
 801251a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801251e:	f04f 0a00 	mov.w	sl, #0
 8012522:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8012526:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012528:	4bc5      	ldr	r3, [pc, #788]	@ (8012840 <__ieee754_pow+0x790>)
 801252a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801252e:	ed93 7b00 	vldr	d7, [r3]
 8012532:	4629      	mov	r1, r5
 8012534:	ec53 2b17 	vmov	r2, r3, d7
 8012538:	ed8d 7b06 	vstr	d7, [sp, #24]
 801253c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012540:	f7ed fea2 	bl	8000288 <__aeabi_dsub>
 8012544:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012548:	4606      	mov	r6, r0
 801254a:	460f      	mov	r7, r1
 801254c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012550:	f7ed fe9c 	bl	800028c <__adddf3>
 8012554:	4602      	mov	r2, r0
 8012556:	460b      	mov	r3, r1
 8012558:	2000      	movs	r0, #0
 801255a:	49ba      	ldr	r1, [pc, #744]	@ (8012844 <__ieee754_pow+0x794>)
 801255c:	f7ee f976 	bl	800084c <__aeabi_ddiv>
 8012560:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8012564:	4602      	mov	r2, r0
 8012566:	460b      	mov	r3, r1
 8012568:	4630      	mov	r0, r6
 801256a:	4639      	mov	r1, r7
 801256c:	f7ee f844 	bl	80005f8 <__aeabi_dmul>
 8012570:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012574:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8012578:	106d      	asrs	r5, r5, #1
 801257a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801257e:	f04f 0b00 	mov.w	fp, #0
 8012582:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8012586:	4661      	mov	r1, ip
 8012588:	2200      	movs	r2, #0
 801258a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801258e:	4658      	mov	r0, fp
 8012590:	46e1      	mov	r9, ip
 8012592:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8012596:	4614      	mov	r4, r2
 8012598:	461d      	mov	r5, r3
 801259a:	f7ee f82d 	bl	80005f8 <__aeabi_dmul>
 801259e:	4602      	mov	r2, r0
 80125a0:	460b      	mov	r3, r1
 80125a2:	4630      	mov	r0, r6
 80125a4:	4639      	mov	r1, r7
 80125a6:	f7ed fe6f 	bl	8000288 <__aeabi_dsub>
 80125aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80125ae:	4606      	mov	r6, r0
 80125b0:	460f      	mov	r7, r1
 80125b2:	4620      	mov	r0, r4
 80125b4:	4629      	mov	r1, r5
 80125b6:	f7ed fe67 	bl	8000288 <__aeabi_dsub>
 80125ba:	4602      	mov	r2, r0
 80125bc:	460b      	mov	r3, r1
 80125be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80125c2:	f7ed fe61 	bl	8000288 <__aeabi_dsub>
 80125c6:	465a      	mov	r2, fp
 80125c8:	464b      	mov	r3, r9
 80125ca:	f7ee f815 	bl	80005f8 <__aeabi_dmul>
 80125ce:	4602      	mov	r2, r0
 80125d0:	460b      	mov	r3, r1
 80125d2:	4630      	mov	r0, r6
 80125d4:	4639      	mov	r1, r7
 80125d6:	f7ed fe57 	bl	8000288 <__aeabi_dsub>
 80125da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80125de:	f7ee f80b 	bl	80005f8 <__aeabi_dmul>
 80125e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80125e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80125ea:	4610      	mov	r0, r2
 80125ec:	4619      	mov	r1, r3
 80125ee:	f7ee f803 	bl	80005f8 <__aeabi_dmul>
 80125f2:	a37d      	add	r3, pc, #500	@ (adr r3, 80127e8 <__ieee754_pow+0x738>)
 80125f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125f8:	4604      	mov	r4, r0
 80125fa:	460d      	mov	r5, r1
 80125fc:	f7ed fffc 	bl	80005f8 <__aeabi_dmul>
 8012600:	a37b      	add	r3, pc, #492	@ (adr r3, 80127f0 <__ieee754_pow+0x740>)
 8012602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012606:	f7ed fe41 	bl	800028c <__adddf3>
 801260a:	4622      	mov	r2, r4
 801260c:	462b      	mov	r3, r5
 801260e:	f7ed fff3 	bl	80005f8 <__aeabi_dmul>
 8012612:	a379      	add	r3, pc, #484	@ (adr r3, 80127f8 <__ieee754_pow+0x748>)
 8012614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012618:	f7ed fe38 	bl	800028c <__adddf3>
 801261c:	4622      	mov	r2, r4
 801261e:	462b      	mov	r3, r5
 8012620:	f7ed ffea 	bl	80005f8 <__aeabi_dmul>
 8012624:	a376      	add	r3, pc, #472	@ (adr r3, 8012800 <__ieee754_pow+0x750>)
 8012626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801262a:	f7ed fe2f 	bl	800028c <__adddf3>
 801262e:	4622      	mov	r2, r4
 8012630:	462b      	mov	r3, r5
 8012632:	f7ed ffe1 	bl	80005f8 <__aeabi_dmul>
 8012636:	a374      	add	r3, pc, #464	@ (adr r3, 8012808 <__ieee754_pow+0x758>)
 8012638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801263c:	f7ed fe26 	bl	800028c <__adddf3>
 8012640:	4622      	mov	r2, r4
 8012642:	462b      	mov	r3, r5
 8012644:	f7ed ffd8 	bl	80005f8 <__aeabi_dmul>
 8012648:	a371      	add	r3, pc, #452	@ (adr r3, 8012810 <__ieee754_pow+0x760>)
 801264a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801264e:	f7ed fe1d 	bl	800028c <__adddf3>
 8012652:	4622      	mov	r2, r4
 8012654:	4606      	mov	r6, r0
 8012656:	460f      	mov	r7, r1
 8012658:	462b      	mov	r3, r5
 801265a:	4620      	mov	r0, r4
 801265c:	4629      	mov	r1, r5
 801265e:	f7ed ffcb 	bl	80005f8 <__aeabi_dmul>
 8012662:	4602      	mov	r2, r0
 8012664:	460b      	mov	r3, r1
 8012666:	4630      	mov	r0, r6
 8012668:	4639      	mov	r1, r7
 801266a:	f7ed ffc5 	bl	80005f8 <__aeabi_dmul>
 801266e:	465a      	mov	r2, fp
 8012670:	4604      	mov	r4, r0
 8012672:	460d      	mov	r5, r1
 8012674:	464b      	mov	r3, r9
 8012676:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801267a:	f7ed fe07 	bl	800028c <__adddf3>
 801267e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012682:	f7ed ffb9 	bl	80005f8 <__aeabi_dmul>
 8012686:	4622      	mov	r2, r4
 8012688:	462b      	mov	r3, r5
 801268a:	f7ed fdff 	bl	800028c <__adddf3>
 801268e:	465a      	mov	r2, fp
 8012690:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012694:	464b      	mov	r3, r9
 8012696:	4658      	mov	r0, fp
 8012698:	4649      	mov	r1, r9
 801269a:	f7ed ffad 	bl	80005f8 <__aeabi_dmul>
 801269e:	4b6a      	ldr	r3, [pc, #424]	@ (8012848 <__ieee754_pow+0x798>)
 80126a0:	2200      	movs	r2, #0
 80126a2:	4606      	mov	r6, r0
 80126a4:	460f      	mov	r7, r1
 80126a6:	f7ed fdf1 	bl	800028c <__adddf3>
 80126aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80126ae:	f7ed fded 	bl	800028c <__adddf3>
 80126b2:	46d8      	mov	r8, fp
 80126b4:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80126b8:	460d      	mov	r5, r1
 80126ba:	465a      	mov	r2, fp
 80126bc:	460b      	mov	r3, r1
 80126be:	4640      	mov	r0, r8
 80126c0:	4649      	mov	r1, r9
 80126c2:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80126c6:	f7ed ff97 	bl	80005f8 <__aeabi_dmul>
 80126ca:	465c      	mov	r4, fp
 80126cc:	4680      	mov	r8, r0
 80126ce:	4689      	mov	r9, r1
 80126d0:	4b5d      	ldr	r3, [pc, #372]	@ (8012848 <__ieee754_pow+0x798>)
 80126d2:	2200      	movs	r2, #0
 80126d4:	4620      	mov	r0, r4
 80126d6:	4629      	mov	r1, r5
 80126d8:	f7ed fdd6 	bl	8000288 <__aeabi_dsub>
 80126dc:	4632      	mov	r2, r6
 80126de:	463b      	mov	r3, r7
 80126e0:	f7ed fdd2 	bl	8000288 <__aeabi_dsub>
 80126e4:	4602      	mov	r2, r0
 80126e6:	460b      	mov	r3, r1
 80126e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80126ec:	f7ed fdcc 	bl	8000288 <__aeabi_dsub>
 80126f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80126f4:	f7ed ff80 	bl	80005f8 <__aeabi_dmul>
 80126f8:	4622      	mov	r2, r4
 80126fa:	4606      	mov	r6, r0
 80126fc:	460f      	mov	r7, r1
 80126fe:	462b      	mov	r3, r5
 8012700:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012704:	f7ed ff78 	bl	80005f8 <__aeabi_dmul>
 8012708:	4602      	mov	r2, r0
 801270a:	460b      	mov	r3, r1
 801270c:	4630      	mov	r0, r6
 801270e:	4639      	mov	r1, r7
 8012710:	f7ed fdbc 	bl	800028c <__adddf3>
 8012714:	4606      	mov	r6, r0
 8012716:	460f      	mov	r7, r1
 8012718:	4602      	mov	r2, r0
 801271a:	460b      	mov	r3, r1
 801271c:	4640      	mov	r0, r8
 801271e:	4649      	mov	r1, r9
 8012720:	f7ed fdb4 	bl	800028c <__adddf3>
 8012724:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8012728:	a33b      	add	r3, pc, #236	@ (adr r3, 8012818 <__ieee754_pow+0x768>)
 801272a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801272e:	4658      	mov	r0, fp
 8012730:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8012734:	460d      	mov	r5, r1
 8012736:	f7ed ff5f 	bl	80005f8 <__aeabi_dmul>
 801273a:	465c      	mov	r4, fp
 801273c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012740:	4642      	mov	r2, r8
 8012742:	464b      	mov	r3, r9
 8012744:	4620      	mov	r0, r4
 8012746:	4629      	mov	r1, r5
 8012748:	f7ed fd9e 	bl	8000288 <__aeabi_dsub>
 801274c:	4602      	mov	r2, r0
 801274e:	460b      	mov	r3, r1
 8012750:	4630      	mov	r0, r6
 8012752:	4639      	mov	r1, r7
 8012754:	f7ed fd98 	bl	8000288 <__aeabi_dsub>
 8012758:	a331      	add	r3, pc, #196	@ (adr r3, 8012820 <__ieee754_pow+0x770>)
 801275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801275e:	f7ed ff4b 	bl	80005f8 <__aeabi_dmul>
 8012762:	a331      	add	r3, pc, #196	@ (adr r3, 8012828 <__ieee754_pow+0x778>)
 8012764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012768:	4606      	mov	r6, r0
 801276a:	460f      	mov	r7, r1
 801276c:	4620      	mov	r0, r4
 801276e:	4629      	mov	r1, r5
 8012770:	f7ed ff42 	bl	80005f8 <__aeabi_dmul>
 8012774:	4602      	mov	r2, r0
 8012776:	460b      	mov	r3, r1
 8012778:	4630      	mov	r0, r6
 801277a:	4639      	mov	r1, r7
 801277c:	f7ed fd86 	bl	800028c <__adddf3>
 8012780:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012782:	4b32      	ldr	r3, [pc, #200]	@ (801284c <__ieee754_pow+0x79c>)
 8012784:	4413      	add	r3, r2
 8012786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801278a:	f7ed fd7f 	bl	800028c <__adddf3>
 801278e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012792:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012794:	f7ed fec6 	bl	8000524 <__aeabi_i2d>
 8012798:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801279a:	4b2d      	ldr	r3, [pc, #180]	@ (8012850 <__ieee754_pow+0x7a0>)
 801279c:	4413      	add	r3, r2
 801279e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80127a2:	4606      	mov	r6, r0
 80127a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80127a8:	460f      	mov	r7, r1
 80127aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80127ae:	f7ed fd6d 	bl	800028c <__adddf3>
 80127b2:	4642      	mov	r2, r8
 80127b4:	464b      	mov	r3, r9
 80127b6:	f7ed fd69 	bl	800028c <__adddf3>
 80127ba:	4632      	mov	r2, r6
 80127bc:	463b      	mov	r3, r7
 80127be:	f7ed fd65 	bl	800028c <__adddf3>
 80127c2:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80127c6:	4632      	mov	r2, r6
 80127c8:	463b      	mov	r3, r7
 80127ca:	4658      	mov	r0, fp
 80127cc:	460d      	mov	r5, r1
 80127ce:	f7ed fd5b 	bl	8000288 <__aeabi_dsub>
 80127d2:	4642      	mov	r2, r8
 80127d4:	464b      	mov	r3, r9
 80127d6:	f7ed fd57 	bl	8000288 <__aeabi_dsub>
 80127da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80127de:	f7ed fd53 	bl	8000288 <__aeabi_dsub>
 80127e2:	465c      	mov	r4, fp
 80127e4:	e036      	b.n	8012854 <__ieee754_pow+0x7a4>
 80127e6:	bf00      	nop
 80127e8:	4a454eef 	.word	0x4a454eef
 80127ec:	3fca7e28 	.word	0x3fca7e28
 80127f0:	93c9db65 	.word	0x93c9db65
 80127f4:	3fcd864a 	.word	0x3fcd864a
 80127f8:	a91d4101 	.word	0xa91d4101
 80127fc:	3fd17460 	.word	0x3fd17460
 8012800:	518f264d 	.word	0x518f264d
 8012804:	3fd55555 	.word	0x3fd55555
 8012808:	db6fabff 	.word	0xdb6fabff
 801280c:	3fdb6db6 	.word	0x3fdb6db6
 8012810:	33333303 	.word	0x33333303
 8012814:	3fe33333 	.word	0x3fe33333
 8012818:	e0000000 	.word	0xe0000000
 801281c:	3feec709 	.word	0x3feec709
 8012820:	dc3a03fd 	.word	0xdc3a03fd
 8012824:	3feec709 	.word	0x3feec709
 8012828:	145b01f5 	.word	0x145b01f5
 801282c:	be3e2fe0 	.word	0xbe3e2fe0
 8012830:	7ff00000 	.word	0x7ff00000
 8012834:	43400000 	.word	0x43400000
 8012838:	0003988e 	.word	0x0003988e
 801283c:	000bb679 	.word	0x000bb679
 8012840:	08013f70 	.word	0x08013f70
 8012844:	3ff00000 	.word	0x3ff00000
 8012848:	40080000 	.word	0x40080000
 801284c:	08013f50 	.word	0x08013f50
 8012850:	08013f60 	.word	0x08013f60
 8012854:	4602      	mov	r2, r0
 8012856:	460b      	mov	r3, r1
 8012858:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801285c:	e5d6      	b.n	801240c <__ieee754_pow+0x35c>
 801285e:	f04f 0a01 	mov.w	sl, #1
 8012862:	e65e      	b.n	8012522 <__ieee754_pow+0x472>
 8012864:	a3b5      	add	r3, pc, #724	@ (adr r3, 8012b3c <__ieee754_pow+0xa8c>)
 8012866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801286a:	4630      	mov	r0, r6
 801286c:	4639      	mov	r1, r7
 801286e:	f7ed fd0d 	bl	800028c <__adddf3>
 8012872:	4642      	mov	r2, r8
 8012874:	e9cd 0100 	strd	r0, r1, [sp]
 8012878:	464b      	mov	r3, r9
 801287a:	4620      	mov	r0, r4
 801287c:	4629      	mov	r1, r5
 801287e:	f7ed fd03 	bl	8000288 <__aeabi_dsub>
 8012882:	4602      	mov	r2, r0
 8012884:	460b      	mov	r3, r1
 8012886:	e9dd 0100 	ldrd	r0, r1, [sp]
 801288a:	f7ee f945 	bl	8000b18 <__aeabi_dcmpgt>
 801288e:	2800      	cmp	r0, #0
 8012890:	f47f adfe 	bne.w	8012490 <__ieee754_pow+0x3e0>
 8012894:	4ba2      	ldr	r3, [pc, #648]	@ (8012b20 <__ieee754_pow+0xa70>)
 8012896:	e022      	b.n	80128de <__ieee754_pow+0x82e>
 8012898:	4ca2      	ldr	r4, [pc, #648]	@ (8012b24 <__ieee754_pow+0xa74>)
 801289a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801289e:	42a3      	cmp	r3, r4
 80128a0:	d919      	bls.n	80128d6 <__ieee754_pow+0x826>
 80128a2:	4ba1      	ldr	r3, [pc, #644]	@ (8012b28 <__ieee754_pow+0xa78>)
 80128a4:	440b      	add	r3, r1
 80128a6:	4303      	orrs	r3, r0
 80128a8:	d009      	beq.n	80128be <__ieee754_pow+0x80e>
 80128aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80128ae:	2200      	movs	r2, #0
 80128b0:	2300      	movs	r3, #0
 80128b2:	f7ee f913 	bl	8000adc <__aeabi_dcmplt>
 80128b6:	3800      	subs	r0, #0
 80128b8:	bf18      	it	ne
 80128ba:	2001      	movne	r0, #1
 80128bc:	e512      	b.n	80122e4 <__ieee754_pow+0x234>
 80128be:	4642      	mov	r2, r8
 80128c0:	464b      	mov	r3, r9
 80128c2:	f7ed fce1 	bl	8000288 <__aeabi_dsub>
 80128c6:	4632      	mov	r2, r6
 80128c8:	463b      	mov	r3, r7
 80128ca:	f7ee f91b 	bl	8000b04 <__aeabi_dcmpge>
 80128ce:	2800      	cmp	r0, #0
 80128d0:	d1eb      	bne.n	80128aa <__ieee754_pow+0x7fa>
 80128d2:	4b96      	ldr	r3, [pc, #600]	@ (8012b2c <__ieee754_pow+0xa7c>)
 80128d4:	e003      	b.n	80128de <__ieee754_pow+0x82e>
 80128d6:	4a96      	ldr	r2, [pc, #600]	@ (8012b30 <__ieee754_pow+0xa80>)
 80128d8:	4293      	cmp	r3, r2
 80128da:	f240 80e7 	bls.w	8012aac <__ieee754_pow+0x9fc>
 80128de:	151b      	asrs	r3, r3, #20
 80128e0:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 80128e4:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 80128e8:	fa4a fa03 	asr.w	sl, sl, r3
 80128ec:	44da      	add	sl, fp
 80128ee:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80128f2:	4890      	ldr	r0, [pc, #576]	@ (8012b34 <__ieee754_pow+0xa84>)
 80128f4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80128f8:	4108      	asrs	r0, r1
 80128fa:	ea00 030a 	and.w	r3, r0, sl
 80128fe:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8012902:	f1c1 0114 	rsb	r1, r1, #20
 8012906:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801290a:	fa4a fa01 	asr.w	sl, sl, r1
 801290e:	f1bb 0f00 	cmp.w	fp, #0
 8012912:	4640      	mov	r0, r8
 8012914:	4649      	mov	r1, r9
 8012916:	f04f 0200 	mov.w	r2, #0
 801291a:	bfb8      	it	lt
 801291c:	f1ca 0a00 	rsblt	sl, sl, #0
 8012920:	f7ed fcb2 	bl	8000288 <__aeabi_dsub>
 8012924:	4680      	mov	r8, r0
 8012926:	4689      	mov	r9, r1
 8012928:	4632      	mov	r2, r6
 801292a:	463b      	mov	r3, r7
 801292c:	4640      	mov	r0, r8
 801292e:	4649      	mov	r1, r9
 8012930:	f7ed fcac 	bl	800028c <__adddf3>
 8012934:	2400      	movs	r4, #0
 8012936:	a36a      	add	r3, pc, #424	@ (adr r3, 8012ae0 <__ieee754_pow+0xa30>)
 8012938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801293c:	4620      	mov	r0, r4
 801293e:	460d      	mov	r5, r1
 8012940:	f7ed fe5a 	bl	80005f8 <__aeabi_dmul>
 8012944:	4642      	mov	r2, r8
 8012946:	e9cd 0100 	strd	r0, r1, [sp]
 801294a:	464b      	mov	r3, r9
 801294c:	4620      	mov	r0, r4
 801294e:	4629      	mov	r1, r5
 8012950:	f7ed fc9a 	bl	8000288 <__aeabi_dsub>
 8012954:	4602      	mov	r2, r0
 8012956:	460b      	mov	r3, r1
 8012958:	4630      	mov	r0, r6
 801295a:	4639      	mov	r1, r7
 801295c:	f7ed fc94 	bl	8000288 <__aeabi_dsub>
 8012960:	a361      	add	r3, pc, #388	@ (adr r3, 8012ae8 <__ieee754_pow+0xa38>)
 8012962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012966:	f7ed fe47 	bl	80005f8 <__aeabi_dmul>
 801296a:	a361      	add	r3, pc, #388	@ (adr r3, 8012af0 <__ieee754_pow+0xa40>)
 801296c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012970:	4680      	mov	r8, r0
 8012972:	4689      	mov	r9, r1
 8012974:	4620      	mov	r0, r4
 8012976:	4629      	mov	r1, r5
 8012978:	f7ed fe3e 	bl	80005f8 <__aeabi_dmul>
 801297c:	4602      	mov	r2, r0
 801297e:	460b      	mov	r3, r1
 8012980:	4640      	mov	r0, r8
 8012982:	4649      	mov	r1, r9
 8012984:	f7ed fc82 	bl	800028c <__adddf3>
 8012988:	4604      	mov	r4, r0
 801298a:	460d      	mov	r5, r1
 801298c:	4602      	mov	r2, r0
 801298e:	460b      	mov	r3, r1
 8012990:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012994:	f7ed fc7a 	bl	800028c <__adddf3>
 8012998:	e9dd 2300 	ldrd	r2, r3, [sp]
 801299c:	4680      	mov	r8, r0
 801299e:	4689      	mov	r9, r1
 80129a0:	f7ed fc72 	bl	8000288 <__aeabi_dsub>
 80129a4:	4602      	mov	r2, r0
 80129a6:	460b      	mov	r3, r1
 80129a8:	4620      	mov	r0, r4
 80129aa:	4629      	mov	r1, r5
 80129ac:	f7ed fc6c 	bl	8000288 <__aeabi_dsub>
 80129b0:	4642      	mov	r2, r8
 80129b2:	4606      	mov	r6, r0
 80129b4:	460f      	mov	r7, r1
 80129b6:	464b      	mov	r3, r9
 80129b8:	4640      	mov	r0, r8
 80129ba:	4649      	mov	r1, r9
 80129bc:	f7ed fe1c 	bl	80005f8 <__aeabi_dmul>
 80129c0:	a34d      	add	r3, pc, #308	@ (adr r3, 8012af8 <__ieee754_pow+0xa48>)
 80129c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129c6:	4604      	mov	r4, r0
 80129c8:	460d      	mov	r5, r1
 80129ca:	f7ed fe15 	bl	80005f8 <__aeabi_dmul>
 80129ce:	a34c      	add	r3, pc, #304	@ (adr r3, 8012b00 <__ieee754_pow+0xa50>)
 80129d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129d4:	f7ed fc58 	bl	8000288 <__aeabi_dsub>
 80129d8:	4622      	mov	r2, r4
 80129da:	462b      	mov	r3, r5
 80129dc:	f7ed fe0c 	bl	80005f8 <__aeabi_dmul>
 80129e0:	a349      	add	r3, pc, #292	@ (adr r3, 8012b08 <__ieee754_pow+0xa58>)
 80129e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129e6:	f7ed fc51 	bl	800028c <__adddf3>
 80129ea:	4622      	mov	r2, r4
 80129ec:	462b      	mov	r3, r5
 80129ee:	f7ed fe03 	bl	80005f8 <__aeabi_dmul>
 80129f2:	a347      	add	r3, pc, #284	@ (adr r3, 8012b10 <__ieee754_pow+0xa60>)
 80129f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129f8:	f7ed fc46 	bl	8000288 <__aeabi_dsub>
 80129fc:	4622      	mov	r2, r4
 80129fe:	462b      	mov	r3, r5
 8012a00:	f7ed fdfa 	bl	80005f8 <__aeabi_dmul>
 8012a04:	a344      	add	r3, pc, #272	@ (adr r3, 8012b18 <__ieee754_pow+0xa68>)
 8012a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a0a:	f7ed fc3f 	bl	800028c <__adddf3>
 8012a0e:	4622      	mov	r2, r4
 8012a10:	462b      	mov	r3, r5
 8012a12:	f7ed fdf1 	bl	80005f8 <__aeabi_dmul>
 8012a16:	4602      	mov	r2, r0
 8012a18:	460b      	mov	r3, r1
 8012a1a:	4640      	mov	r0, r8
 8012a1c:	4649      	mov	r1, r9
 8012a1e:	f7ed fc33 	bl	8000288 <__aeabi_dsub>
 8012a22:	4604      	mov	r4, r0
 8012a24:	460d      	mov	r5, r1
 8012a26:	4602      	mov	r2, r0
 8012a28:	460b      	mov	r3, r1
 8012a2a:	4640      	mov	r0, r8
 8012a2c:	4649      	mov	r1, r9
 8012a2e:	f7ed fde3 	bl	80005f8 <__aeabi_dmul>
 8012a32:	2200      	movs	r2, #0
 8012a34:	e9cd 0100 	strd	r0, r1, [sp]
 8012a38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012a3c:	4620      	mov	r0, r4
 8012a3e:	4629      	mov	r1, r5
 8012a40:	f7ed fc22 	bl	8000288 <__aeabi_dsub>
 8012a44:	4602      	mov	r2, r0
 8012a46:	460b      	mov	r3, r1
 8012a48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a4c:	f7ed fefe 	bl	800084c <__aeabi_ddiv>
 8012a50:	4632      	mov	r2, r6
 8012a52:	4604      	mov	r4, r0
 8012a54:	460d      	mov	r5, r1
 8012a56:	463b      	mov	r3, r7
 8012a58:	4640      	mov	r0, r8
 8012a5a:	4649      	mov	r1, r9
 8012a5c:	f7ed fdcc 	bl	80005f8 <__aeabi_dmul>
 8012a60:	4632      	mov	r2, r6
 8012a62:	463b      	mov	r3, r7
 8012a64:	f7ed fc12 	bl	800028c <__adddf3>
 8012a68:	4602      	mov	r2, r0
 8012a6a:	460b      	mov	r3, r1
 8012a6c:	4620      	mov	r0, r4
 8012a6e:	4629      	mov	r1, r5
 8012a70:	f7ed fc0a 	bl	8000288 <__aeabi_dsub>
 8012a74:	4642      	mov	r2, r8
 8012a76:	464b      	mov	r3, r9
 8012a78:	f7ed fc06 	bl	8000288 <__aeabi_dsub>
 8012a7c:	460b      	mov	r3, r1
 8012a7e:	4602      	mov	r2, r0
 8012a80:	492d      	ldr	r1, [pc, #180]	@ (8012b38 <__ieee754_pow+0xa88>)
 8012a82:	2000      	movs	r0, #0
 8012a84:	f7ed fc00 	bl	8000288 <__aeabi_dsub>
 8012a88:	ec41 0b10 	vmov	d0, r0, r1
 8012a8c:	ee10 3a90 	vmov	r3, s1
 8012a90:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012a94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012a98:	da0b      	bge.n	8012ab2 <__ieee754_pow+0xa02>
 8012a9a:	4650      	mov	r0, sl
 8012a9c:	f000 f898 	bl	8012bd0 <scalbn>
 8012aa0:	ec51 0b10 	vmov	r0, r1, d0
 8012aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012aa8:	f7ff bb6d 	b.w	8012186 <__ieee754_pow+0xd6>
 8012aac:	f8dd a010 	ldr.w	sl, [sp, #16]
 8012ab0:	e73a      	b.n	8012928 <__ieee754_pow+0x878>
 8012ab2:	ec51 0b10 	vmov	r0, r1, d0
 8012ab6:	4619      	mov	r1, r3
 8012ab8:	e7f4      	b.n	8012aa4 <__ieee754_pow+0x9f4>
 8012aba:	491f      	ldr	r1, [pc, #124]	@ (8012b38 <__ieee754_pow+0xa88>)
 8012abc:	2000      	movs	r0, #0
 8012abe:	f7ff bb14 	b.w	80120ea <__ieee754_pow+0x3a>
 8012ac2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012ac6:	f7ff bb10 	b.w	80120ea <__ieee754_pow+0x3a>
 8012aca:	4630      	mov	r0, r6
 8012acc:	4639      	mov	r1, r7
 8012ace:	f7ff bb0c 	b.w	80120ea <__ieee754_pow+0x3a>
 8012ad2:	460c      	mov	r4, r1
 8012ad4:	f7ff bb69 	b.w	80121aa <__ieee754_pow+0xfa>
 8012ad8:	2400      	movs	r4, #0
 8012ada:	f7ff bb4b 	b.w	8012174 <__ieee754_pow+0xc4>
 8012ade:	bf00      	nop
 8012ae0:	00000000 	.word	0x00000000
 8012ae4:	3fe62e43 	.word	0x3fe62e43
 8012ae8:	fefa39ef 	.word	0xfefa39ef
 8012aec:	3fe62e42 	.word	0x3fe62e42
 8012af0:	0ca86c39 	.word	0x0ca86c39
 8012af4:	be205c61 	.word	0xbe205c61
 8012af8:	72bea4d0 	.word	0x72bea4d0
 8012afc:	3e663769 	.word	0x3e663769
 8012b00:	c5d26bf1 	.word	0xc5d26bf1
 8012b04:	3ebbbd41 	.word	0x3ebbbd41
 8012b08:	af25de2c 	.word	0xaf25de2c
 8012b0c:	3f11566a 	.word	0x3f11566a
 8012b10:	16bebd93 	.word	0x16bebd93
 8012b14:	3f66c16c 	.word	0x3f66c16c
 8012b18:	5555553e 	.word	0x5555553e
 8012b1c:	3fc55555 	.word	0x3fc55555
 8012b20:	40900000 	.word	0x40900000
 8012b24:	4090cbff 	.word	0x4090cbff
 8012b28:	3f6f3400 	.word	0x3f6f3400
 8012b2c:	4090cc00 	.word	0x4090cc00
 8012b30:	3fe00000 	.word	0x3fe00000
 8012b34:	fff00000 	.word	0xfff00000
 8012b38:	3ff00000 	.word	0x3ff00000
 8012b3c:	652b82fe 	.word	0x652b82fe
 8012b40:	3c971547 	.word	0x3c971547

08012b44 <with_errno>:
 8012b44:	b510      	push	{r4, lr}
 8012b46:	ed2d 8b02 	vpush	{d8}
 8012b4a:	eeb0 8a40 	vmov.f32	s16, s0
 8012b4e:	eef0 8a60 	vmov.f32	s17, s1
 8012b52:	4604      	mov	r4, r0
 8012b54:	f7fd f926 	bl	800fda4 <__errno>
 8012b58:	eeb0 0a48 	vmov.f32	s0, s16
 8012b5c:	eef0 0a68 	vmov.f32	s1, s17
 8012b60:	ecbd 8b02 	vpop	{d8}
 8012b64:	6004      	str	r4, [r0, #0]
 8012b66:	bd10      	pop	{r4, pc}

08012b68 <xflow>:
 8012b68:	4603      	mov	r3, r0
 8012b6a:	b507      	push	{r0, r1, r2, lr}
 8012b6c:	ec51 0b10 	vmov	r0, r1, d0
 8012b70:	b183      	cbz	r3, 8012b94 <xflow+0x2c>
 8012b72:	4602      	mov	r2, r0
 8012b74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012b78:	e9cd 2300 	strd	r2, r3, [sp]
 8012b7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b80:	f7ed fd3a 	bl	80005f8 <__aeabi_dmul>
 8012b84:	ec41 0b10 	vmov	d0, r0, r1
 8012b88:	2022      	movs	r0, #34	@ 0x22
 8012b8a:	b003      	add	sp, #12
 8012b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b90:	f7ff bfd8 	b.w	8012b44 <with_errno>
 8012b94:	4602      	mov	r2, r0
 8012b96:	460b      	mov	r3, r1
 8012b98:	e7ee      	b.n	8012b78 <xflow+0x10>
 8012b9a:	0000      	movs	r0, r0
 8012b9c:	0000      	movs	r0, r0
	...

08012ba0 <__math_uflow>:
 8012ba0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012ba8 <__math_uflow+0x8>
 8012ba4:	f7ff bfe0 	b.w	8012b68 <xflow>
 8012ba8:	00000000 	.word	0x00000000
 8012bac:	10000000 	.word	0x10000000

08012bb0 <__math_oflow>:
 8012bb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012bb8 <__math_oflow+0x8>
 8012bb4:	f7ff bfd8 	b.w	8012b68 <xflow>
 8012bb8:	00000000 	.word	0x00000000
 8012bbc:	70000000 	.word	0x70000000

08012bc0 <fabs>:
 8012bc0:	ec51 0b10 	vmov	r0, r1, d0
 8012bc4:	4602      	mov	r2, r0
 8012bc6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012bca:	ec43 2b10 	vmov	d0, r2, r3
 8012bce:	4770      	bx	lr

08012bd0 <scalbn>:
 8012bd0:	b570      	push	{r4, r5, r6, lr}
 8012bd2:	ec55 4b10 	vmov	r4, r5, d0
 8012bd6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8012bda:	4606      	mov	r6, r0
 8012bdc:	462b      	mov	r3, r5
 8012bde:	b991      	cbnz	r1, 8012c06 <scalbn+0x36>
 8012be0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8012be4:	4323      	orrs	r3, r4
 8012be6:	d03b      	beq.n	8012c60 <scalbn+0x90>
 8012be8:	4b33      	ldr	r3, [pc, #204]	@ (8012cb8 <scalbn+0xe8>)
 8012bea:	4620      	mov	r0, r4
 8012bec:	4629      	mov	r1, r5
 8012bee:	2200      	movs	r2, #0
 8012bf0:	f7ed fd02 	bl	80005f8 <__aeabi_dmul>
 8012bf4:	4b31      	ldr	r3, [pc, #196]	@ (8012cbc <scalbn+0xec>)
 8012bf6:	429e      	cmp	r6, r3
 8012bf8:	4604      	mov	r4, r0
 8012bfa:	460d      	mov	r5, r1
 8012bfc:	da0f      	bge.n	8012c1e <scalbn+0x4e>
 8012bfe:	a326      	add	r3, pc, #152	@ (adr r3, 8012c98 <scalbn+0xc8>)
 8012c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c04:	e01e      	b.n	8012c44 <scalbn+0x74>
 8012c06:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8012c0a:	4291      	cmp	r1, r2
 8012c0c:	d10b      	bne.n	8012c26 <scalbn+0x56>
 8012c0e:	4622      	mov	r2, r4
 8012c10:	4620      	mov	r0, r4
 8012c12:	4629      	mov	r1, r5
 8012c14:	f7ed fb3a 	bl	800028c <__adddf3>
 8012c18:	4604      	mov	r4, r0
 8012c1a:	460d      	mov	r5, r1
 8012c1c:	e020      	b.n	8012c60 <scalbn+0x90>
 8012c1e:	460b      	mov	r3, r1
 8012c20:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8012c24:	3936      	subs	r1, #54	@ 0x36
 8012c26:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8012c2a:	4296      	cmp	r6, r2
 8012c2c:	dd0d      	ble.n	8012c4a <scalbn+0x7a>
 8012c2e:	2d00      	cmp	r5, #0
 8012c30:	a11b      	add	r1, pc, #108	@ (adr r1, 8012ca0 <scalbn+0xd0>)
 8012c32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c36:	da02      	bge.n	8012c3e <scalbn+0x6e>
 8012c38:	a11b      	add	r1, pc, #108	@ (adr r1, 8012ca8 <scalbn+0xd8>)
 8012c3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c3e:	a318      	add	r3, pc, #96	@ (adr r3, 8012ca0 <scalbn+0xd0>)
 8012c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c44:	f7ed fcd8 	bl	80005f8 <__aeabi_dmul>
 8012c48:	e7e6      	b.n	8012c18 <scalbn+0x48>
 8012c4a:	1872      	adds	r2, r6, r1
 8012c4c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8012c50:	428a      	cmp	r2, r1
 8012c52:	dcec      	bgt.n	8012c2e <scalbn+0x5e>
 8012c54:	2a00      	cmp	r2, #0
 8012c56:	dd06      	ble.n	8012c66 <scalbn+0x96>
 8012c58:	f36f 531e 	bfc	r3, #20, #11
 8012c5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012c60:	ec45 4b10 	vmov	d0, r4, r5
 8012c64:	bd70      	pop	{r4, r5, r6, pc}
 8012c66:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8012c6a:	da08      	bge.n	8012c7e <scalbn+0xae>
 8012c6c:	2d00      	cmp	r5, #0
 8012c6e:	a10a      	add	r1, pc, #40	@ (adr r1, 8012c98 <scalbn+0xc8>)
 8012c70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c74:	dac3      	bge.n	8012bfe <scalbn+0x2e>
 8012c76:	a10e      	add	r1, pc, #56	@ (adr r1, 8012cb0 <scalbn+0xe0>)
 8012c78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c7c:	e7bf      	b.n	8012bfe <scalbn+0x2e>
 8012c7e:	3236      	adds	r2, #54	@ 0x36
 8012c80:	f36f 531e 	bfc	r3, #20, #11
 8012c84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012c88:	4620      	mov	r0, r4
 8012c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8012cc0 <scalbn+0xf0>)
 8012c8c:	4629      	mov	r1, r5
 8012c8e:	2200      	movs	r2, #0
 8012c90:	e7d8      	b.n	8012c44 <scalbn+0x74>
 8012c92:	bf00      	nop
 8012c94:	f3af 8000 	nop.w
 8012c98:	c2f8f359 	.word	0xc2f8f359
 8012c9c:	01a56e1f 	.word	0x01a56e1f
 8012ca0:	8800759c 	.word	0x8800759c
 8012ca4:	7e37e43c 	.word	0x7e37e43c
 8012ca8:	8800759c 	.word	0x8800759c
 8012cac:	fe37e43c 	.word	0xfe37e43c
 8012cb0:	c2f8f359 	.word	0xc2f8f359
 8012cb4:	81a56e1f 	.word	0x81a56e1f
 8012cb8:	43500000 	.word	0x43500000
 8012cbc:	ffff3cb0 	.word	0xffff3cb0
 8012cc0:	3c900000 	.word	0x3c900000

08012cc4 <__ieee754_sqrt>:
 8012cc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cc8:	4a66      	ldr	r2, [pc, #408]	@ (8012e64 <__ieee754_sqrt+0x1a0>)
 8012cca:	ec55 4b10 	vmov	r4, r5, d0
 8012cce:	43aa      	bics	r2, r5
 8012cd0:	462b      	mov	r3, r5
 8012cd2:	4621      	mov	r1, r4
 8012cd4:	d110      	bne.n	8012cf8 <__ieee754_sqrt+0x34>
 8012cd6:	4622      	mov	r2, r4
 8012cd8:	4620      	mov	r0, r4
 8012cda:	4629      	mov	r1, r5
 8012cdc:	f7ed fc8c 	bl	80005f8 <__aeabi_dmul>
 8012ce0:	4602      	mov	r2, r0
 8012ce2:	460b      	mov	r3, r1
 8012ce4:	4620      	mov	r0, r4
 8012ce6:	4629      	mov	r1, r5
 8012ce8:	f7ed fad0 	bl	800028c <__adddf3>
 8012cec:	4604      	mov	r4, r0
 8012cee:	460d      	mov	r5, r1
 8012cf0:	ec45 4b10 	vmov	d0, r4, r5
 8012cf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cf8:	2d00      	cmp	r5, #0
 8012cfa:	dc0e      	bgt.n	8012d1a <__ieee754_sqrt+0x56>
 8012cfc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8012d00:	4322      	orrs	r2, r4
 8012d02:	d0f5      	beq.n	8012cf0 <__ieee754_sqrt+0x2c>
 8012d04:	b19d      	cbz	r5, 8012d2e <__ieee754_sqrt+0x6a>
 8012d06:	4622      	mov	r2, r4
 8012d08:	4620      	mov	r0, r4
 8012d0a:	4629      	mov	r1, r5
 8012d0c:	f7ed fabc 	bl	8000288 <__aeabi_dsub>
 8012d10:	4602      	mov	r2, r0
 8012d12:	460b      	mov	r3, r1
 8012d14:	f7ed fd9a 	bl	800084c <__aeabi_ddiv>
 8012d18:	e7e8      	b.n	8012cec <__ieee754_sqrt+0x28>
 8012d1a:	152a      	asrs	r2, r5, #20
 8012d1c:	d115      	bne.n	8012d4a <__ieee754_sqrt+0x86>
 8012d1e:	2000      	movs	r0, #0
 8012d20:	e009      	b.n	8012d36 <__ieee754_sqrt+0x72>
 8012d22:	0acb      	lsrs	r3, r1, #11
 8012d24:	3a15      	subs	r2, #21
 8012d26:	0549      	lsls	r1, r1, #21
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d0fa      	beq.n	8012d22 <__ieee754_sqrt+0x5e>
 8012d2c:	e7f7      	b.n	8012d1e <__ieee754_sqrt+0x5a>
 8012d2e:	462a      	mov	r2, r5
 8012d30:	e7fa      	b.n	8012d28 <__ieee754_sqrt+0x64>
 8012d32:	005b      	lsls	r3, r3, #1
 8012d34:	3001      	adds	r0, #1
 8012d36:	02dc      	lsls	r4, r3, #11
 8012d38:	d5fb      	bpl.n	8012d32 <__ieee754_sqrt+0x6e>
 8012d3a:	1e44      	subs	r4, r0, #1
 8012d3c:	1b12      	subs	r2, r2, r4
 8012d3e:	f1c0 0420 	rsb	r4, r0, #32
 8012d42:	fa21 f404 	lsr.w	r4, r1, r4
 8012d46:	4323      	orrs	r3, r4
 8012d48:	4081      	lsls	r1, r0
 8012d4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012d4e:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8012d52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012d56:	07d2      	lsls	r2, r2, #31
 8012d58:	bf5c      	itt	pl
 8012d5a:	005b      	lslpl	r3, r3, #1
 8012d5c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8012d60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012d64:	bf58      	it	pl
 8012d66:	0049      	lslpl	r1, r1, #1
 8012d68:	2600      	movs	r6, #0
 8012d6a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8012d6e:	107f      	asrs	r7, r7, #1
 8012d70:	0049      	lsls	r1, r1, #1
 8012d72:	2016      	movs	r0, #22
 8012d74:	4632      	mov	r2, r6
 8012d76:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8012d7a:	1915      	adds	r5, r2, r4
 8012d7c:	429d      	cmp	r5, r3
 8012d7e:	bfde      	ittt	le
 8012d80:	192a      	addle	r2, r5, r4
 8012d82:	1b5b      	suble	r3, r3, r5
 8012d84:	1936      	addle	r6, r6, r4
 8012d86:	0fcd      	lsrs	r5, r1, #31
 8012d88:	3801      	subs	r0, #1
 8012d8a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8012d8e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012d92:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012d96:	d1f0      	bne.n	8012d7a <__ieee754_sqrt+0xb6>
 8012d98:	4605      	mov	r5, r0
 8012d9a:	2420      	movs	r4, #32
 8012d9c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8012da0:	4293      	cmp	r3, r2
 8012da2:	eb0c 0e00 	add.w	lr, ip, r0
 8012da6:	dc02      	bgt.n	8012dae <__ieee754_sqrt+0xea>
 8012da8:	d113      	bne.n	8012dd2 <__ieee754_sqrt+0x10e>
 8012daa:	458e      	cmp	lr, r1
 8012dac:	d811      	bhi.n	8012dd2 <__ieee754_sqrt+0x10e>
 8012dae:	f1be 0f00 	cmp.w	lr, #0
 8012db2:	eb0e 000c 	add.w	r0, lr, ip
 8012db6:	da3f      	bge.n	8012e38 <__ieee754_sqrt+0x174>
 8012db8:	2800      	cmp	r0, #0
 8012dba:	db3d      	blt.n	8012e38 <__ieee754_sqrt+0x174>
 8012dbc:	f102 0801 	add.w	r8, r2, #1
 8012dc0:	1a9b      	subs	r3, r3, r2
 8012dc2:	458e      	cmp	lr, r1
 8012dc4:	bf88      	it	hi
 8012dc6:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8012dca:	eba1 010e 	sub.w	r1, r1, lr
 8012dce:	4465      	add	r5, ip
 8012dd0:	4642      	mov	r2, r8
 8012dd2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8012dd6:	3c01      	subs	r4, #1
 8012dd8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8012ddc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012de0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012de4:	d1dc      	bne.n	8012da0 <__ieee754_sqrt+0xdc>
 8012de6:	4319      	orrs	r1, r3
 8012de8:	d01b      	beq.n	8012e22 <__ieee754_sqrt+0x15e>
 8012dea:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8012e68 <__ieee754_sqrt+0x1a4>
 8012dee:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8012e6c <__ieee754_sqrt+0x1a8>
 8012df2:	e9da 0100 	ldrd	r0, r1, [sl]
 8012df6:	e9db 2300 	ldrd	r2, r3, [fp]
 8012dfa:	f7ed fa45 	bl	8000288 <__aeabi_dsub>
 8012dfe:	e9da 8900 	ldrd	r8, r9, [sl]
 8012e02:	4602      	mov	r2, r0
 8012e04:	460b      	mov	r3, r1
 8012e06:	4640      	mov	r0, r8
 8012e08:	4649      	mov	r1, r9
 8012e0a:	f7ed fe71 	bl	8000af0 <__aeabi_dcmple>
 8012e0e:	b140      	cbz	r0, 8012e22 <__ieee754_sqrt+0x15e>
 8012e10:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8012e14:	e9da 0100 	ldrd	r0, r1, [sl]
 8012e18:	e9db 2300 	ldrd	r2, r3, [fp]
 8012e1c:	d10e      	bne.n	8012e3c <__ieee754_sqrt+0x178>
 8012e1e:	3601      	adds	r6, #1
 8012e20:	4625      	mov	r5, r4
 8012e22:	1073      	asrs	r3, r6, #1
 8012e24:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8012e28:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8012e2c:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8012e30:	086b      	lsrs	r3, r5, #1
 8012e32:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8012e36:	e759      	b.n	8012cec <__ieee754_sqrt+0x28>
 8012e38:	4690      	mov	r8, r2
 8012e3a:	e7c1      	b.n	8012dc0 <__ieee754_sqrt+0xfc>
 8012e3c:	f7ed fa26 	bl	800028c <__adddf3>
 8012e40:	e9da 8900 	ldrd	r8, r9, [sl]
 8012e44:	4602      	mov	r2, r0
 8012e46:	460b      	mov	r3, r1
 8012e48:	4640      	mov	r0, r8
 8012e4a:	4649      	mov	r1, r9
 8012e4c:	f7ed fe46 	bl	8000adc <__aeabi_dcmplt>
 8012e50:	b120      	cbz	r0, 8012e5c <__ieee754_sqrt+0x198>
 8012e52:	1cab      	adds	r3, r5, #2
 8012e54:	bf08      	it	eq
 8012e56:	3601      	addeq	r6, #1
 8012e58:	3502      	adds	r5, #2
 8012e5a:	e7e2      	b.n	8012e22 <__ieee754_sqrt+0x15e>
 8012e5c:	1c6b      	adds	r3, r5, #1
 8012e5e:	f023 0501 	bic.w	r5, r3, #1
 8012e62:	e7de      	b.n	8012e22 <__ieee754_sqrt+0x15e>
 8012e64:	7ff00000 	.word	0x7ff00000
 8012e68:	08013f88 	.word	0x08013f88
 8012e6c:	08013f80 	.word	0x08013f80

08012e70 <_init>:
 8012e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e72:	bf00      	nop
 8012e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e76:	bc08      	pop	{r3}
 8012e78:	469e      	mov	lr, r3
 8012e7a:	4770      	bx	lr

08012e7c <_fini>:
 8012e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e7e:	bf00      	nop
 8012e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e82:	bc08      	pop	{r3}
 8012e84:	469e      	mov	lr, r3
 8012e86:	4770      	bx	lr
